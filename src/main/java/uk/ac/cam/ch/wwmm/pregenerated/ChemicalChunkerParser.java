// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-11-09 00:29:32

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DT-THE'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=5;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int ACHAR=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int NODE=4;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__30=30;
    public static final int T__174=174;
    public static final int T__31=31;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int NEWLINE=6;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 103:
                case 107:
                case 108:
                case 109:
                case 110:
                case 125:
                case 130:
                case 131:
                case 135:
                case 136:
                case 137:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 149:
                case 151:
                case 154:
                case 166:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 178:
                case 179:
                case 180:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document208);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 34:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:1: sentences : ( sentence | unmatchedPhrase )+ ( comma | stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:10: ( ( sentence | unmatchedPhrase )+ ( comma | stop )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+ ( comma | stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_sentences230);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences232);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:44: ( comma | stop )*
            loop3:
            do {
                int alt3=3;
                switch ( input.LA(1) ) {
                case 101:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA3_4 = input.LA(3);

                        if ( (synpred4_ChemicalChunker()) ) {
                            alt3=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 105:
                    {
                    alt3=2;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentences240);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:51: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences242);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:9: ( ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt4=0;
            loop4:
            do {
                int alt4=4;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentence253);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentence255);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentence257);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:48: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentence262);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentence264);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: ( conjunction | rbconj )*
            loop6:
            do {
                int alt6=3;
                switch ( input.LA(1) ) {
                case 101:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_5 = input.LA(3);

                        if ( (synpred11_ChemicalChunker()) ) {
                            alt6=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 174:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_6 = input.LA(3);

                        if ( (synpred12_ChemicalChunker()) ) {
                            alt6=2;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 124:
                    {
                    alt6=1;
                    }
                    break;

                }

                switch (alt6) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:66: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentence270);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:78: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentence272);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens13 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:5: unmatchedTokens
            {
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase285);
            unmatchedTokens13=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens13.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 42:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:1: unmatchedTokens : ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw14 = null;

        ChemicalChunkerParser.noun_return noun15 = null;

        ChemicalChunkerParser.verb_return verb16 = null;

        ChemicalChunkerParser.inAll_return inAll17 = null;

        ChemicalChunkerParser.dt_return dt18 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE19 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd20 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm21 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn22 = null;

        ChemicalChunkerParser.oscaront_return oscaront23 = null;

        ChemicalChunkerParser.brackets_return brackets24 = null;

        ChemicalChunkerParser.sym_return sym25 = null;

        ChemicalChunkerParser.colon_return colon26 = null;

        ChemicalChunkerParser.md_return md27 = null;

        ChemicalChunkerParser.neg_return neg28 = null;

        ChemicalChunkerParser.number_return number29 = null;

        ChemicalChunkerParser.comma_return comma30 = null;

        ChemicalChunkerParser.advAdj_return advAdj31 = null;

        ChemicalChunkerParser.rbconj_return rbconj32 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:2: ( ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj )
            int alt7=19;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedTokens306);
                    fw14=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw14.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
                    {
                    pushFollow(FOLLOW_noun_in_unmatchedTokens308);
                    noun15=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun15.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedTokens310);
                    verb16=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb16.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:18: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens312);
                    inAll17=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll17.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedTokens314);
                    dt18=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt18.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedTokens316);
                    dtTHE19=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE19.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:33: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens318);
                    oscarcd20=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd20.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:41: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens320);
                    oscarcm21=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm21.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:49: oscarrn
                    {
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens322);
                    oscarrn22=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn22.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:57: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens324);
                    oscaront23=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront23.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:66: brackets
                    {
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens326);
                    brackets24=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets24.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:75: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedTokens328);
                    sym25=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym25.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:79: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedTokens330);
                    colon26=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon26.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:85: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedTokens332);
                    md27=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md27.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:88: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedTokens334);
                    neg28=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg28.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:92: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedTokens336);
                    number29=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number29.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedTokens338);
                    comma30=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma30.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:105: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedTokens340);
                    advAdj31=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj31.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:112: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedTokens342);
                    rbconj32=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj32.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure33 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase354);
            nounphraseStructure33=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure33.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 49:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure134 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure235 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure377);
                    nounphraseStructure134=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure134.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure379);
                    nounphraseStructure235=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure235.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:53:1: nounphraseStructure1 : multiApparatus -> ^( NODE[\"MultipleApparatus\"] multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus36 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:2: ( multiApparatus -> ^( NODE[\"MultipleApparatus\"] multiApparatus ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1388);
            multiApparatus36=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus36.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 54:20: -> ^( NODE[\"MultipleApparatus\"] multiApparatus )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:24: ^( NODE[\"MultipleApparatus\"] multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE37 = null;

        ChemicalChunkerParser.dt_return dt38 = null;

        ChemicalChunkerParser.advAdj_return advAdj39 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase40 = null;

        ChemicalChunkerParser.noun_return noun41 = null;

        ChemicalChunkerParser.number_return number42 = null;

        ChemicalChunkerParser.ratio_return ratio43 = null;

        ChemicalChunkerParser.conjunction_return conjunction44 = null;

        ChemicalChunkerParser.advAdj_return advAdj45 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase46 = null;

        ChemicalChunkerParser.noun_return noun47 = null;

        ChemicalChunkerParser.number_return number48 = null;

        ChemicalChunkerParser.ratio_return ratio49 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf50 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN51 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase52 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2409);
                    dtTHE37=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE37.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred33_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2412);
                    dt38=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt38.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2415);
            	    advAdj39=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj39.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:24: ( dissolvePhrase | noun | number | ratio )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2420);
            	    dissolvePhrase40=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase40.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:40: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2422);
            	    noun41=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun41.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure2424);
            	    number42=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number42.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:52: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2426);
            	    ratio43=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio43.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2434);
            	    	    conjunction44=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction44.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:77: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2437);
            	    	    advAdj45=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj45.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:85: ( dissolvePhrase | noun | number | ratio )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:86: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2441);
            	            dissolvePhrase46=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase46.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:101: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2443);
            	            noun47=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun47.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:106: number
            	            {
            	            pushFollow(FOLLOW_number_in_nounphraseStructure2445);
            	            number48=number();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, number48.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:113: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2447);
            	            ratio49=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio49.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:125: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred47_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 27:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred47_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 27:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 21:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:127: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2457);
            	            prepphraseOf50=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf50.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:141: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2460);
            	            prepphraseIN51=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN51.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:155: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2463);
            	            dissolvePhrase52=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase52.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:1: dissolvePhrase : ( dissolveStructure1 | dissolveStructure2 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure1_return dissolveStructure153 = null;

        ChemicalChunkerParser.dissolveStructure2_return dissolveStructure254 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure1=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure1");
        RewriteRuleSubtreeStream stream_dissolveStructure2=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:2: ( ( dissolveStructure1 | dissolveStructure2 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:4: ( dissolveStructure1 | dissolveStructure2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:4: ( dissolveStructure1 | dissolveStructure2 )
            int alt20=2;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:5: dissolveStructure1
                    {
                    pushFollow(FOLLOW_dissolveStructure1_in_dissolvePhrase478);
                    dissolveStructure153=dissolveStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure1.add(dissolveStructure153.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:24: dissolveStructure2
                    {
                    pushFollow(FOLLOW_dissolveStructure2_in_dissolvePhrase480);
                    dissolveStructure254=dissolveStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure2.add(dissolveStructure254.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure1, dissolveStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 58:44: -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:48: ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "DissolvePhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:73: ( dissolveStructure1 )?
                if ( stream_dissolveStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure1.nextTree());

                }
                stream_dissolveStructure1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:93: ( dissolveStructure2 )?
                if ( stream_dissolveStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure2.nextTree());

                }
                stream_dissolveStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:1: dissolveStructure1 : lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ rrb ;
    public final ChemicalChunkerParser.dissolveStructure1_return dissolveStructure1() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure1_return retval = new ChemicalChunkerParser.dissolveStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb55 = null;

        ChemicalChunkerParser.adj_return adj56 = null;

        ChemicalChunkerParser.nnp_return nnp57 = null;

        ChemicalChunkerParser.molecule_return molecule58 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule59 = null;

        ChemicalChunkerParser.inin_return inin60 = null;

        ChemicalChunkerParser.adj_return adj61 = null;

        ChemicalChunkerParser.nnp_return nnp62 = null;

        ChemicalChunkerParser.molecule_return molecule63 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule64 = null;

        ChemicalChunkerParser.rrb_return rrb65 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:2: ( lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:4: lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_dissolveStructure1504);
            lrb55=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb55.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure1506);
                    adj56=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj56.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:13: ( nnp )?
            int alt22=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt22=1;
                    }
                    break;
            }

            switch (alt22) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure1509);
                    nnp57=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp57.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:18: ( molecule | unnamedmolecule )
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:19: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure1513);
                    molecule58=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule58.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:28: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1515);
                    unnamedmolecule59=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule59.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:45: ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+
            int cnt27=0;
            loop27:
            do {
                int alt27=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    alt27=1;
                    }
                    break;

                }

                switch (alt27) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:46: inin ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure1519);
            	    inin60=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin60.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:51: ( adj )?
            	    int alt24=2;
            	    alt24 = dfa24.predict(input);
            	    switch (alt24) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure1521);
            	            adj61=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj61.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:56: ( nnp )?
            	    int alt25=2;
            	    switch ( input.LA(1) ) {
            	        case 154:
            	            {
            	            alt25=1;
            	            }
            	            break;
            	    }

            	    switch (alt25) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure1524);
            	            nnp62=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp62.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:61: ( molecule | unnamedmolecule )
            	    int alt26=2;
            	    alt26 = dfa26.predict(input);
            	    switch (alt26) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:62: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure1528);
            	            molecule63=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule63.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:71: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1530);
            	            unnamedmolecule64=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule64.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt27 >= 1 ) break loop27;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(27, input);
                        throw eee;
                }
                cnt27++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_dissolveStructure1535);
            rrb65=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb65.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure1"

    public static class dissolveStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:1: dissolveStructure2 : ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ ;
    public final ChemicalChunkerParser.dissolveStructure2_return dissolveStructure2() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure2_return retval = new ChemicalChunkerParser.dissolveStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj66 = null;

        ChemicalChunkerParser.nnp_return nnp67 = null;

        ChemicalChunkerParser.molecule_return molecule68 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule69 = null;

        ChemicalChunkerParser.inin_return inin70 = null;

        ChemicalChunkerParser.adj_return adj71 = null;

        ChemicalChunkerParser.nnp_return nnp72 = null;

        ChemicalChunkerParser.molecule_return molecule73 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule74 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:2: ( ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:4: ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:4: ( adj )?
            int alt28=2;
            alt28 = dfa28.predict(input);
            switch (alt28) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure2544);
                    adj66=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj66.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:9: ( nnp )?
            int alt29=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt29=1;
                    }
                    break;
            }

            switch (alt29) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure2547);
                    nnp67=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp67.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:14: ( molecule | unnamedmolecule )
            int alt30=2;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:15: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure2551);
                    molecule68=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule68.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:24: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2553);
                    unnamedmolecule69=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule69.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:41: ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )+
            int cnt34=0;
            loop34:
            do {
                int alt34=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA34_2 = input.LA(2);

                    if ( (synpred62_ChemicalChunker()) ) {
                        alt34=1;
                    }


                    }
                    break;

                }

                switch (alt34) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:42: inin ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure2557);
            	    inin70=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin70.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:47: ( adj )?
            	    int alt31=2;
            	    alt31 = dfa31.predict(input);
            	    switch (alt31) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure2559);
            	            adj71=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj71.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:52: ( nnp )?
            	    int alt32=2;
            	    switch ( input.LA(1) ) {
            	        case 154:
            	            {
            	            alt32=1;
            	            }
            	            break;
            	    }

            	    switch (alt32) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure2562);
            	            nnp72=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp72.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:57: ( molecule | unnamedmolecule )
            	    int alt33=2;
            	    alt33 = dfa33.predict(input);
            	    switch (alt33) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:58: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure2566);
            	            molecule73=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule73.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:67: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2568);
            	            unnamedmolecule74=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule74.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt34 >= 1 ) break loop34;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(34, input);
                        throw eee;
                }
                cnt34++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure2"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc75 = null;

        ChemicalChunkerParser.comma_return comma76 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:2: ( cc | comma )
            int alt35=2;
            switch ( input.LA(1) ) {
            case 124:
                {
                alt35=1;
                }
                break;
            case 101:
                {
                alt35=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction584);
                    cc75=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc75.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction586);
                    comma76=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma76.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure77 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase596);
            verbphraseStructure77=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure77.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 71:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt78 = null;

        ChemicalChunkerParser.to_return to79 = null;

        ChemicalChunkerParser.inAll_return inAll80 = null;

        ChemicalChunkerParser.inafter_return inafter81 = null;

        ChemicalChunkerParser.md_return md82 = null;

        ChemicalChunkerParser.rbconj_return rbconj83 = null;

        ChemicalChunkerParser.adv_return adv84 = null;

        ChemicalChunkerParser.adj_return adj85 = null;

        ChemicalChunkerParser.verb_return verb86 = null;

        ChemicalChunkerParser.md_return md87 = null;

        ChemicalChunkerParser.adv_return adv88 = null;

        ChemicalChunkerParser.adj_return adj89 = null;

        ChemicalChunkerParser.neg_return neg90 = null;

        ChemicalChunkerParser.inoff_return inoff91 = null;

        ChemicalChunkerParser.cc_return cc92 = null;

        ChemicalChunkerParser.comma_return comma93 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase94 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:24: ( dt )?
            int alt36=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt36=1;
                    }
                    break;
            }

            switch (alt36) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure615);
                    dt78=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt78.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:28: ( to )?
            int alt37=2;
            switch ( input.LA(1) ) {
                case 180:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA37_3 = input.LA(3);

                            if ( (synpred65_ChemicalChunker()) ) {
                                alt37=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt37) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure618);
                    to79=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to79.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:32: ( inAll )?
            int alt38=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 142:
                case 180:
                    {
                    alt38=1;
                    }
                    break;
                case 20:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA38_4 = input.LA(3);

                            if ( (synpred66_ChemicalChunker()) ) {
                                alt38=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt38) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure621);
                    inAll80=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll80.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:39: ( inafter )?
            int alt39=2;
            switch ( input.LA(1) ) {
                case 20:
                    {
                    alt39=1;
                    }
                    break;
            }

            switch (alt39) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure624);
                    inafter81=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter81.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt49=0;
            loop49:
            do {
                int alt49=2;
                alt49 = dfa49.predict(input);
                switch (alt49) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:49: ( md )*
            	    loop40:
            	    do {
            	        int alt40=2;
            	        switch ( input.LA(1) ) {
            	        case 147:
            	            {
            	            alt40=1;
            	            }
            	            break;

            	        }

            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure628);
            	    	    md82=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md82.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop40;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:53: ( rbconj )?
            	    int alt41=2;
            	    switch ( input.LA(1) ) {
            	        case 174:
            	            {
            	            alt41=1;
            	            }
            	            break;
            	    }

            	    switch (alt41) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure631);
            	            rbconj83=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj83.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:61: ( adv )*
            	    loop42:
            	    do {
            	        int alt42=2;
            	        switch ( input.LA(1) ) {
            	        case 172:
            	        case 173:
            	        case 175:
            	        case 176:
            	        case 178:
            	            {
            	            alt42=1;
            	            }
            	            break;

            	        }

            	        switch (alt42) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure634);
            	    	    adv84=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv84.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop42;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:66: ( adj )?
            	    int alt43=2;
            	    switch ( input.LA(1) ) {
            	        case 12:
            	        case 13:
            	        case 143:
            	        case 144:
            	        case 145:
            	        case 146:
            	            {
            	            alt43=1;
            	            }
            	            break;
            	    }

            	    switch (alt43) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure637);
            	            adj85=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj85.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:71: ( verb )+
            	    int cnt44=0;
            	    loop44:
            	    do {
            	        int alt44=2;
            	        alt44 = dfa44.predict(input);
            	        switch (alt44) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure640);
            	    	    verb86=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb86.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt44 >= 1 ) break loop44;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(44, input);
            	                throw eee;
            	        }
            	        cnt44++;
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:77: ( md )*
            	    loop45:
            	    do {
            	        int alt45=2;
            	        switch ( input.LA(1) ) {
            	        case 147:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA45_3 = input.LA(3);

            	                if ( (synpred73_ChemicalChunker()) ) {
            	                    alt45=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt45) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure643);
            	    	    md87=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md87.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop45;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:81: ( adv )*
            	    loop46:
            	    do {
            	        int alt46=2;
            	        alt46 = dfa46.predict(input);
            	        switch (alt46) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure646);
            	    	    adv88=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv88.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop46;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:86: ( adj )?
            	    int alt47=2;
            	    alt47 = dfa47.predict(input);
            	    switch (alt47) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure649);
            	            adj89=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj89.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:91: ( neg )?
            	    int alt48=2;
            	    switch ( input.LA(1) ) {
            	        case 103:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA48_3 = input.LA(3);

            	                    if ( (synpred76_ChemicalChunker()) ) {
            	                        alt48=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt48) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure652);
            	            neg90=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg90.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt49 >= 1 ) break loop49;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:99: ( inoff )?
            int alt50=2;
            switch ( input.LA(1) ) {
                case 33:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA50_3 = input.LA(3);

                            if ( (synpred78_ChemicalChunker()) ) {
                                alt50=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt50) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure658);
                    inoff91=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff91.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:106: ( ( cc )? ( comma )? prepphrase )*
            loop53:
            do {
                int alt53=2;
                alt53 = dfa53.predict(input);
                switch (alt53) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:107: ( cc )?
            	    int alt51=2;
            	    switch ( input.LA(1) ) {
            	        case 124:
            	            {
            	            alt51=1;
            	            }
            	            break;
            	    }

            	    switch (alt51) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure662);
            	            cc92=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc92.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:111: ( comma )?
            	    int alt52=2;
            	    switch ( input.LA(1) ) {
            	        case 101:
            	            {
            	            alt52=1;
            	            }
            	            break;
            	    }

            	    switch (alt52) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure665);
            	            comma93=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma93.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure668);
            	    prepphrase94=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase94.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb95 = null;

        ChemicalChunkerParser.vbp_return vbp96 = null;

        ChemicalChunkerParser.vbg_return vbg97 = null;

        ChemicalChunkerParser.vbd_return vbd98 = null;

        ChemicalChunkerParser.vbz_return vbz99 = null;

        ChemicalChunkerParser.vbn_return vbn100 = null;

        ChemicalChunkerParser.vbuse_return vbuse101 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge102 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse103 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject104 = null;

        ChemicalChunkerParser.vbadd_return vbadd105 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge106 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain107 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop108 = null;

        ChemicalChunkerParser.vbfill_return vbfill109 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend110 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat111 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus112 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate113 = null;

        ChemicalChunkerParser.vbcool_return vbcool114 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass115 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve116 = null;

        ChemicalChunkerParser.vbdry_return vbdry117 = null;

        ChemicalChunkerParser.vbextract_return vbextract118 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter119 = null;

        ChemicalChunkerParser.vbheat_return vbheat120 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease121 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition122 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate123 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify124 = null;

        ChemicalChunkerParser.vbquench_return vbquench125 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover126 = null;

        ChemicalChunkerParser.vbremove_return vbremove127 = null;

        ChemicalChunkerParser.vbstir_return vbstir128 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize129 = null;

        ChemicalChunkerParser.vbwait_return vbwait130 = null;

        ChemicalChunkerParser.vbwash_return vbwash131 = null;

        ChemicalChunkerParser.vbyield_return vbyield132 = null;

        ChemicalChunkerParser.vbchange_return vbchange133 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt54=39;
            switch ( input.LA(1) ) {
            case 182:
                {
                alt54=1;
                }
                break;
            case 183:
                {
                alt54=2;
                }
                break;
            case 185:
                {
                alt54=3;
                }
                break;
            case 184:
                {
                alt54=4;
                }
                break;
            case 187:
                {
                alt54=5;
                }
                break;
            case 186:
                {
                alt54=6;
                }
                break;
            case 55:
                {
                alt54=7;
                }
                break;
            case 57:
                {
                alt54=8;
                }
                break;
            case 83:
                {
                alt54=9;
                }
                break;
            case 58:
                {
                alt54=10;
                }
                break;
            case 61:
                {
                alt54=11;
                }
                break;
            case 62:
                {
                alt54=12;
                }
                break;
            case 63:
                {
                alt54=13;
                }
                break;
            case 64:
                {
                alt54=14;
                }
                break;
            case 65:
                {
                alt54=15;
                }
                break;
            case 66:
                {
                alt54=16;
                }
                break;
            case 67:
                {
                alt54=17;
                }
                break;
            case 68:
                {
                alt54=18;
                }
                break;
            case 70:
                {
                alt54=19;
                }
                break;
            case 72:
                {
                alt54=20;
                }
                break;
            case 73:
                {
                alt54=21;
                }
                break;
            case 74:
                {
                alt54=22;
                }
                break;
            case 75:
                {
                alt54=23;
                }
                break;
            case 77:
                {
                alt54=24;
                }
                break;
            case 79:
                {
                alt54=25;
                }
                break;
            case 81:
                {
                alt54=26;
                }
                break;
            case 82:
                {
                alt54=27;
                }
                break;
            case 84:
                {
                alt54=28;
                }
                break;
            case 85:
                {
                alt54=29;
                }
                break;
            case 87:
                {
                alt54=30;
                }
                break;
            case 89:
                {
                alt54=31;
                }
                break;
            case 90:
                {
                alt54=32;
                }
                break;
            case 91:
                {
                alt54=33;
                }
                break;
            case 93:
                {
                alt54=34;
                }
                break;
            case 94:
                {
                alt54=35;
                }
                break;
            case 96:
                {
                alt54=36;
                }
                break;
            case 97:
                {
                alt54=37;
                }
                break;
            case 98:
                {
                alt54=38;
                }
                break;
            case 56:
                {
                alt54=39;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }

            switch (alt54) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb680);
                    vb95=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb95.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb682);
                    vbp96=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp96.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb684);
                    vbg97=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg97.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb686);
                    vbd98=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd98.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb688);
                    vbz99=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz99.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb690);
                    vbn100=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn100.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb692);
                    vbuse101=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse101.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb694);
                    vbsubmerge102=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge102.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb696);
                    vbimmerse103=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse103.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:58: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb698);
                    vbsubject104=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject104.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:68: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb700);
                    vbadd105=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd105.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:74: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb702);
                    vbcharge106=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge106.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:83: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb704);
                    vbcontain107=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain107.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:93: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb706);
                    vbdrop108=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop108.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:100: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb708);
                    vbfill109=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill109.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:107: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb710);
                    vbsuspend110=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend110.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:117: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb712);
                    vbtreat111=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat111.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:125: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb714);
                    vbapparatus112=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus112.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:137: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb716);
                    vbconcentrate113=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate113.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:151: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb718);
                    vbcool114=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool114.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:158: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb720);
                    vbdegass115=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass115.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:167: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb722);
                    vbdissolve116=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve116.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:178: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb724);
                    vbdry117=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry117.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:184: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb726);
                    vbextract118=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract118.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:194: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb728);
                    vbfilter119=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter119.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:204: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb731);
                    vbheat120=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat120.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:211: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb733);
                    vbincrease121=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease121.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:222: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb735);
                    vbpartition122=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition122.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:234: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb737);
                    vbprecipitate123=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate123.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:248: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb739);
                    vbpurify124=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify124.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:257: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb741);
                    vbquench125=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench125.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:266: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb743);
                    vbrecover126=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover126.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:276: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb745);
                    vbremove127=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove127.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:285: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb747);
                    vbstir128=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir128.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:292: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb749);
                    vbsynthesize129=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize129.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:305: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb751);
                    vbwait130=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait130.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:312: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb753);
                    vbwash131=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash131.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:319: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb755);
                    vbyield132=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield132.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:327: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb757);
                    vbchange133=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange133.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd134 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd135 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:8: ( cd | oscarcd )
            int alt55=2;
            switch ( input.LA(1) ) {
            case 125:
                {
                alt55=1;
                }
                break;
            case 11:
                {
                alt55=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number765);
                    cd134=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd134.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_number767);
                    oscarcd135=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd135.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt136 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss137 = null;

        ChemicalChunkerParser.wpo_return wpo138 = null;

        ChemicalChunkerParser.wpo_return wpo139 = null;

        ChemicalChunkerParser.wps_return wps140 = null;

        ChemicalChunkerParser.wql_return wql141 = null;

        ChemicalChunkerParser.wrb_return wrb142 = null;

        ChemicalChunkerParser.ex_return ex143 = null;

        ChemicalChunkerParser.pdt_return pdt144 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt56=9;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause775);
                    wdt136=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt136.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause777);
                    wp_poss137=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss137.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause779);
                    wpo138=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo138.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause781);
                    wpo139=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo139.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause783);
                    wps140=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps140.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause785);
                    wql141=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql141.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause787);
                    wrb142=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb142.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause789);
                    ex143=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex143.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause791);
                    pdt144=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt144.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure145 = null;

        ChemicalChunkerParser.dash_return dash146 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure147 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:7: ( nounStructure ( dash nounStructure )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun799);
            nounStructure145=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure145.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:23: ( dash nounStructure )*
            loop57:
            do {
                int alt57=2;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    int LA57_2 = input.LA(2);

                    if ( (synpred129_ChemicalChunker()) ) {
                        alt57=1;
                    }


                    }
                    break;

                }

                switch (alt57) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun802);
            	    dash146=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash146.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun804);
            	    nounStructure147=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure147.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:1: nounStructure : ( prp | citation | cycles | molecule | apparatus | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp148 = null;

        ChemicalChunkerParser.citation_return citation149 = null;

        ChemicalChunkerParser.cycles_return cycles150 = null;

        ChemicalChunkerParser.molecule_return molecule151 = null;

        ChemicalChunkerParser.apparatus_return apparatus152 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule153 = null;

        ChemicalChunkerParser.nnyield_return nnyield154 = null;

        ChemicalChunkerParser.nnstate_return nnstate155 = null;

        ChemicalChunkerParser.nn_return nn156 = null;

        ChemicalChunkerParser.nns_return nns157 = null;

        ChemicalChunkerParser.nnp_return nnp158 = null;

        ChemicalChunkerParser.nnadd_return nnadd159 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase160 = null;

        ChemicalChunkerParser.nnexample_return nnexample161 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr162 = null;

        ChemicalChunkerParser.range_return range163 = null;

        ChemicalChunkerParser.amount_return amount164 = null;

        ChemicalChunkerParser.mixture_return mixture165 = null;

        ChemicalChunkerParser.nntime_return nntime166 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere167 = null;

        ChemicalChunkerParser.nneq_return nneq168 = null;

        ChemicalChunkerParser.quantity_return quantity169 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity170 = null;

        ChemicalChunkerParser.measurements_return measurements171 = null;

        ChemicalChunkerParser.nntemp_return nntemp172 = null;

        ChemicalChunkerParser.nnflash_return nnflash173 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral174 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod175 = null;

        ChemicalChunkerParser.nnamount_return nnamount176 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure177 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn178 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography179 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum180 = null;

        ChemicalChunkerParser.nncycle_return nncycle181 = null;

        ChemicalChunkerParser.nntimes_return nntimes182 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate183 = null;

        ChemicalChunkerParser.nnvol_return nnvol184 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify185 = null;

        ChemicalChunkerParser.wdt_return wdt186 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss187 = null;

        ChemicalChunkerParser.wpo_return wpo188 = null;

        ChemicalChunkerParser.wps_return wps189 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize190 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture191 = null;

        ChemicalChunkerParser.oscaront_return oscaront192 = null;

        ChemicalChunkerParser.nndry_return nndry193 = null;

        ChemicalChunkerParser.number_return number194 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound195 = null;

        ChemicalChunkerParser.nnextract_return nnextract196 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter197 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate198 = null;

        ChemicalChunkerParser.nnremove_return nnremove199 = null;

        ChemicalChunkerParser.fw_return fw200 = null;

        ChemicalChunkerParser.fwin_return fwin201 = null;

        ChemicalChunkerParser.sym_return sym202 = null;

        ChemicalChunkerParser.clause_return clause203 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:15: ( prp | citation | cycles | molecule | apparatus | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt58=56;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure815);
                    prp148=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp148.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:22: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure817);
                    citation149=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation149.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:31: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure819);
                    cycles150=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles150.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:38: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure821);
                    molecule151=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule151.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:47: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure823);
                    apparatus152=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus152.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:57: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure825);
                    unnamedmolecule153=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule153.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:73: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure827);
                    nnyield154=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield154.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:81: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure829);
                    nnstate155=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate155.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:89: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure831);
                    nn156=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn156.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:92: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure833);
                    nns157=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns157.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:96: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure835);
                    nnp158=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp158.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:100: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure837);
                    nnadd159=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd159.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:106: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure839);
                    preparationphrase160=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase160.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:124: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure841);
                    nnexample161=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample161.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:134: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_nounStructure843);
                    oscarcpr162=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr162.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:143: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure845);
                    range163=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range163.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:149: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_nounStructure847);
                    amount164=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount164.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:156: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure849);
                    mixture165=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture165.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:164: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure851);
                    nntime166=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime166.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:171: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure853);
                    nnatmosphere167=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere167.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:184: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure855);
                    nneq168=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq168.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:189: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure857);
                    quantity169=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity169.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:198: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure859);
                    nnchementity170=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity170.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:211: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_nounStructure861);
                    measurements171=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements171.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:224: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure863);
                    nntemp172=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp172.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:231: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure865);
                    nnflash173=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash173.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:239: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure867);
                    nngeneral174=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral174.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:249: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_nounStructure869);
                    nnmethod175=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod175.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:258: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure871);
                    nnamount176=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount176.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:267: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure873);
                    nnpressure177=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure177.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:278: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure875);
                    nncolumn178=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn178.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:287: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure877);
                    nnchromatography179=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography179.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:304: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure879);
                    nnvacuum180=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum180.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:313: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure881);
                    nncycle181=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle181.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:321: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure883);
                    nntimes182=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes182.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:329: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure885);
                    nnconcentrate183=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate183.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:343: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure887);
                    nnvol184=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol184.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:349: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure889);
                    nnpurify185=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify185.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:358: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_nounStructure891);
                    wdt186=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt186.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:362: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_nounStructure893);
                    wp_poss187=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss187.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:370: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_nounStructure895);
                    wpo188=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo188.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:374: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_nounStructure897);
                    wps189=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps189.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:378: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure899);
                    nnsynthesize190=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize190.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:391: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure901);
                    nnmixture191=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture191.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:401: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaront_in_nounStructure903);
                    oscaront192=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront192.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:410: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure905);
                    nndry193=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry193.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:416: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_nounStructure907);
                    number194=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number194.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:423: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_nounStructure909);
                    oscarCompound195=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound195.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:437: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure911);
                    nnextract196=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract196.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:447: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure913);
                    nnfilter197=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter197.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:456: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure915);
                    nnprecipitate198=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate198.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:470: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure917);
                    nnremove199=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove199.getTree());

                    }
                    break;
                case 53 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:479: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure919);
                    fw200=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw200.getTree());

                    }
                    break;
                case 54 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:482: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fwin_in_nounStructure921);
                    fwin201=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin201.getTree());

                    }
                    break;
                case 55 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:487: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure923);
                    sym202=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym202.getTree());

                    }
                    break;
                case 56 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:491: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure925);
                    clause203=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause203.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:1: range : cd dash cd ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd204 = null;

        ChemicalChunkerParser.dash_return dash205 = null;

        ChemicalChunkerParser.cd_return cd206 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:6: ( cd dash cd )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:8: cd dash cd
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_range931);
            cd204=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd204.getTree());
            pushFollow(FOLLOW_dash_in_range933);
            dash205=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash205.getTree());
            pushFollow(FOLLOW_cd_in_range935);
            cd206=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd206.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:1: cycles : cycleStructure -> ^( NODE[\"CYCLES\"] cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure207 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:8: ( cycleStructure -> ^( NODE[\"CYCLES\"] cycleStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles942);
            cycleStructure207=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure207.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 81:25: -> ^( NODE[\"CYCLES\"] cycleStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:81:28: ^( NODE[\"CYCLES\"] cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd208 = null;

        ChemicalChunkerParser.dashNN_return dashNN209 = null;

        ChemicalChunkerParser.nncycle_return nncycle210 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:16: ( cd ( dashNN )? nncycle )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure960);
            cd208=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd208.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:21: ( dashNN )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 125:
                case 143:
                case 144:
                case 145:
                case 146:
                case 149:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure962);
                    dashNN209=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN209.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure965);
            nncycle210=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle210.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj211 = null;

        ChemicalChunkerParser.nn_return nn212 = null;

        ChemicalChunkerParser.cd_return cd213 = null;

        ChemicalChunkerParser.dash_return dash214 = null;

        ChemicalChunkerParser.adj_return adj215 = null;

        ChemicalChunkerParser.nn_return nn216 = null;

        ChemicalChunkerParser.cd_return cd217 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:10: ( adj | nn | cd )
            int alt60=3;
            switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 143:
            case 144:
            case 145:
            case 146:
                {
                alt60=1;
                }
                break;
            case 149:
                {
                alt60=2;
                }
                break;
            case 125:
                {
                alt60=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }

            switch (alt60) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN975);
                    adj211=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj211.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN977);
                    nn212=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn212.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN979);
                    cd213=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd213.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:22: ( dash ( adj | nn | cd ) )*
            loop62:
            do {
                int alt62=2;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    alt62=1;
                    }
                    break;

                }

                switch (alt62) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN983);
            	    dash214=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash214.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:28: ( adj | nn | cd )
            	    int alt61=3;
            	    switch ( input.LA(1) ) {
            	    case 12:
            	    case 13:
            	    case 143:
            	    case 144:
            	    case 145:
            	    case 146:
            	        {
            	        alt61=1;
            	        }
            	        break;
            	    case 149:
            	        {
            	        alt61=2;
            	        }
            	        break;
            	    case 125:
            	        {
            	        alt61=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 61, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt61) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN986);
            	            adj215=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj215.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN988);
            	            nn216=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn216.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN990);
            	            cd217=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd217.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:1: ratio : ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio218 = null;

        ChemicalChunkerParser.nounratio_return nounratio219 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:7: ( ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:9: ( numberratio | nounratio )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:9: ( numberratio | nounratio )
            int alt63=2;
            switch ( input.LA(1) ) {
            case 125:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 12:
                    case 13:
                    case 17:
                    case 37:
                    case 38:
                    case 39:
                    case 42:
                    case 52:
                    case 104:
                    case 106:
                    case 125:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 149:
                        {
                        alt63=2;
                        }
                        break;
                    case 100:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 125:
                                {
                                switch ( input.LA(6) ) {
                                case TOKEN:
                                    {
                                    int LA63_7 = input.LA(7);

                                    if ( (synpred191_ChemicalChunker()) ) {
                                        alt63=1;
                                    }
                                    else if ( (true) ) {
                                        alt63=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 63, 7, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 63, 6, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 34:
                            case 35:
                            case 36:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 59:
                            case 60:
                            case 69:
                            case 71:
                            case 76:
                            case 78:
                            case 80:
                            case 86:
                            case 88:
                            case 92:
                            case 94:
                            case 95:
                            case 99:
                            case 101:
                            case 109:
                            case 130:
                            case 135:
                            case 136:
                            case 137:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 149:
                            case 151:
                            case 154:
                            case 166:
                            case 179:
                            case 188:
                            case 189:
                            case 190:
                            case 191:
                            case 192:
                            case 193:
                            case 194:
                                {
                                alt63=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 63, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;
                }

                }
                break;
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 34:
            case 35:
            case 36:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 59:
            case 60:
            case 69:
            case 71:
            case 76:
            case 78:
            case 80:
            case 86:
            case 88:
            case 92:
            case 94:
            case 95:
            case 99:
            case 101:
            case 109:
            case 130:
            case 135:
            case 136:
            case 137:
            case 143:
            case 144:
            case 145:
            case 146:
            case 149:
            case 151:
            case 154:
            case 166:
            case 179:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
                {
                alt63=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio1003);
                    numberratio218=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio218.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio1005);
                    nounratio219=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio219.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numberratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 84:33: -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:36: ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "RATIO"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:52: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:65: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:1: numberratio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd220 = null;

        ChemicalChunkerParser.colon_return colon221 = null;

        ChemicalChunkerParser.cd_return cd222 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:13: ( cd ( colon cd )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:16: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio1029);
            cd220=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd220.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:19: ( colon cd )+
            int cnt64=0;
            loop64:
            do {
                int alt64=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 125:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA64_5 = input.LA(5);

                                if ( (synpred192_ChemicalChunker()) ) {
                                    alt64=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt64) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:20: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio1032);
            	    colon221=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon221.getTree());
            	    pushFollow(FOLLOW_cd_in_numberratio1034);
            	    cd222=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd222.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt64 >= 1 ) break loop64;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(64, input);
                        throw eee;
                }
                cnt64++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun223 = null;

        ChemicalChunkerParser.colon_return colon224 = null;

        ChemicalChunkerParser.noun_return noun225 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:2: ( noun ( colon noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio1047);
            noun223=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun223.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:11: ( colon noun )+
            int cnt65=0;
            loop65:
            do {
                int alt65=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA65_2 = input.LA(2);

                    if ( (synpred193_ChemicalChunker()) ) {
                        alt65=1;
                    }


                    }
                    break;

                }

                switch (alt65) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio1051);
            	    colon224=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon224.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio1053);
            	    noun225=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun225.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt65 >= 1 ) break loop65;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(65, input);
                        throw eee;
                }
                cnt65++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:1: citation : ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) ;
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.citationStructure1_return citationStructure1226 = null;

        ChemicalChunkerParser.citationStructure2_return citationStructure2227 = null;


        RewriteRuleSubtreeStream stream_citationStructure2=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure2");
        RewriteRuleSubtreeStream stream_citationStructure1=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure1");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:9: ( ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:11: ( citationStructure1 | citationStructure2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:11: ( citationStructure1 | citationStructure2 )
            int alt66=2;
            switch ( input.LA(1) ) {
            case 109:
                {
                alt66=1;
                }
                break;
            case 101:
                {
                alt66=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }

            switch (alt66) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:12: citationStructure1
                    {
                    pushFollow(FOLLOW_citationStructure1_in_citation1066);
                    citationStructure1226=citationStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure1.add(citationStructure1226.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:31: citationStructure2
                    {
                    pushFollow(FOLLOW_citationStructure2_in_citation1068);
                    citationStructure2227=citationStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure2.add(citationStructure2227.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: citationStructure1, citationStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 90:51: -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:54: ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "CITATION"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:74: ( citationStructure1 )?
                if ( stream_citationStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure1.nextTree());

                }
                stream_citationStructure1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:94: ( citationStructure2 )?
                if ( stream_citationStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure2.nextTree());

                }
                stream_citationStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:1: citationStructure1 : lrb citationContent rrb ;
    public final ChemicalChunkerParser.citationStructure1_return citationStructure1() throws RecognitionException {
        ChemicalChunkerParser.citationStructure1_return retval = new ChemicalChunkerParser.citationStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb228 = null;

        ChemicalChunkerParser.citationContent_return citationContent229 = null;

        ChemicalChunkerParser.rrb_return rrb230 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:19: ( lrb citationContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:22: lrb citationContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationStructure11091);
            lrb228=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb228.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure11093);
            citationContent229=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent229.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure11095);
            rrb230=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb230.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure1"

    public static class citationStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:1: citationStructure2 : comma lrb citationContent rrb comma ;
    public final ChemicalChunkerParser.citationStructure2_return citationStructure2() throws RecognitionException {
        ChemicalChunkerParser.citationStructure2_return retval = new ChemicalChunkerParser.citationStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma231 = null;

        ChemicalChunkerParser.lrb_return lrb232 = null;

        ChemicalChunkerParser.citationContent_return citationContent233 = null;

        ChemicalChunkerParser.rrb_return rrb234 = null;

        ChemicalChunkerParser.comma_return comma235 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:19: ( comma lrb citationContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:21: comma lrb citationContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_citationStructure21101);
            comma231=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma231.getTree());
            pushFollow(FOLLOW_lrb_in_citationStructure21103);
            lrb232=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb232.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure21105);
            citationContent233=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent233.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure21107);
            rrb234=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb234.getTree());
            pushFollow(FOLLOW_comma_in_citationStructure21109);
            comma235=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma235.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure2"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:1: citationContent : ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnp_return nnp236 = null;

        ChemicalChunkerParser.fw_return fw237 = null;

        ChemicalChunkerParser.cd_return cd238 = null;

        ChemicalChunkerParser.conjunction_return conjunction239 = null;

        ChemicalChunkerParser.nnp_return nnp240 = null;

        ChemicalChunkerParser.fw_return fw241 = null;

        ChemicalChunkerParser.cd_return cd242 = null;

        ChemicalChunkerParser.conjunction_return conjunction243 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:16: ( ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:20: ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:20: ( nnp | fw | cd | conjunction )
            int alt67=4;
            switch ( input.LA(1) ) {
            case 154:
                {
                alt67=1;
                }
                break;
            case 136:
                {
                alt67=2;
                }
                break;
            case 125:
                {
                alt67=3;
                }
                break;
            case 101:
            case 124:
                {
                alt67=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:21: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent1118);
                    nnp236=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp236.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:25: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent1120);
                    fw237=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw237.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:28: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent1122);
                    cd238=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd238.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:31: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent1124);
                    conjunction239=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction239.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:44: ( nnp | fw | cd | conjunction )+
            int cnt68=0;
            loop68:
            do {
                int alt68=5;
                switch ( input.LA(1) ) {
                case 154:
                    {
                    alt68=1;
                    }
                    break;
                case 136:
                    {
                    alt68=2;
                    }
                    break;
                case 125:
                    {
                    alt68=3;
                    }
                    break;
                case 101:
                case 124:
                    {
                    alt68=4;
                    }
                    break;

                }

                switch (alt68) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:45: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent1128);
            	    nnp240=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp240.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:49: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent1130);
            	    fw241=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw241.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:52: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent1132);
            	    cd242=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd242.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:94:55: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent1134);
            	    conjunction243=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction243.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:1: mixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2244 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1245 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:8: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:10: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:10: ( mixtureStructure2 | mixtureStructure1 )
            int alt69=2;
            switch ( input.LA(1) ) {
            case 101:
                {
                alt69=1;
                }
                break;
            case 109:
                {
                alt69=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:11: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture1146);
                    mixtureStructure2244=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2244.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:29: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture1148);
                    mixtureStructure1245=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1245.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 96:48: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:51: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:70: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:89: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma246 = null;

        ChemicalChunkerParser.lrb_return lrb247 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent248 = null;

        ChemicalChunkerParser.rrb_return rrb249 = null;

        ChemicalChunkerParser.comma_return comma250 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:18: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure21169);
            comma246=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma246.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure21171);
            lrb247=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb247.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure21173);
            mixtureContent248=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent248.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure21175);
            rrb249=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb249.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure21177);
            comma250=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma250.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb251 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent252 = null;

        ChemicalChunkerParser.rrb_return rrb253 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:18: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:21: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure11184);
            lrb251=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb251.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure11186);
            mixtureContent252=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent252.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure11188);
            rrb253=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb253.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:1: mixtureContent : ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw254 = null;

        ChemicalChunkerParser.verb_return verb255 = null;

        ChemicalChunkerParser.measurements_return measurements256 = null;

        ChemicalChunkerParser.md_return md257 = null;

        ChemicalChunkerParser.stop_return stop258 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound259 = null;

        ChemicalChunkerParser.molecule_return molecule260 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule261 = null;

        ChemicalChunkerParser.dash_return dash262 = null;

        ChemicalChunkerParser.sym_return sym263 = null;

        ChemicalChunkerParser.cd_return cd264 = null;

        ChemicalChunkerParser.noun_return noun265 = null;

        ChemicalChunkerParser.inof_return inof266 = null;

        ChemicalChunkerParser.inAll_return inAll267 = null;

        ChemicalChunkerParser.cd_return cd268 = null;

        ChemicalChunkerParser.comma_return comma269 = null;

        ChemicalChunkerParser.adj_return adj270 = null;

        ChemicalChunkerParser.colon_return colon271 = null;

        ChemicalChunkerParser.stop_return stop272 = null;

        ChemicalChunkerParser.minimixture_return minimixture273 = null;

        ChemicalChunkerParser.fw_return fw274 = null;

        ChemicalChunkerParser.verb_return verb275 = null;

        ChemicalChunkerParser.measurements_return measurements276 = null;

        ChemicalChunkerParser.nnyield_return nnyield277 = null;

        ChemicalChunkerParser.md_return md278 = null;

        ChemicalChunkerParser.stop_return stop279 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound280 = null;

        ChemicalChunkerParser.molecule_return molecule281 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule282 = null;

        ChemicalChunkerParser.dash_return dash283 = null;

        ChemicalChunkerParser.sym_return sym284 = null;

        ChemicalChunkerParser.cd_return cd285 = null;

        ChemicalChunkerParser.noun_return noun286 = null;

        ChemicalChunkerParser.inof_return inof287 = null;

        ChemicalChunkerParser.inAll_return inAll288 = null;

        ChemicalChunkerParser.cd_return cd289 = null;

        ChemicalChunkerParser.comma_return comma290 = null;

        ChemicalChunkerParser.adj_return adj291 = null;

        ChemicalChunkerParser.colon_return colon292 = null;

        ChemicalChunkerParser.stop_return stop293 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:15: ( ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt70=19;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent1197);
                    fw254=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw254.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent1199);
                    verb255=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb255.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:28: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent1201);
                    measurements256=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements256.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:41: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent1203);
                    md257=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md257.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:44: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1205);
                    stop258=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop258.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:49: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1207);
                    oscarCompound259=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound259.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:63: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent1209);
                    molecule260=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule260.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:72: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1211);
                    unnamedmolecule261=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule261.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:88: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent1213);
                    dash262=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash262.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:93: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent1215);
                    sym263=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym263.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:97: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1217);
                    cd264=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd264.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:100: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent1219);
                    noun265=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun265.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:105: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent1221);
                    inof266=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof266.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:110: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent1223);
                    inAll267=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll267.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:116: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1225);
                    cd268=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd268.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:119: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent1227);
                    comma269=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma269.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:125: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent1229);
                    adj270=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj270.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:129: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent1231);
                    colon271=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon271.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:135: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1233);
                    stop272=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop272.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:141: ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt71=0;
            loop71:
            do {
                int alt71=22;
                alt71 = dfa71.predict(input);
                switch (alt71) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:142: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent1237);
            	    minimixture273=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture273.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:154: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent1239);
            	    fw274=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw274.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:157: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent1241);
            	    verb275=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb275.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:162: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent1243);
            	    measurements276=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements276.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:175: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent1245);
            	    nnyield277=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield277.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:183: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent1247);
            	    md278=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md278.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:186: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1249);
            	    stop279=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop279.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:191: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1251);
            	    oscarCompound280=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound280.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:205: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent1253);
            	    molecule281=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule281.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:214: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1255);
            	    unnamedmolecule282=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule282.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:230: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent1257);
            	    dash283=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash283.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:235: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent1259);
            	    sym284=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym284.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:239: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1261);
            	    cd285=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd285.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:242: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent1263);
            	    noun286=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun286.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:247: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent1265);
            	    inof287=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof287.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:252: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent1267);
            	    inAll288=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll288.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:258: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1269);
            	    cd289=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd289.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:261: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent1271);
            	    comma290=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma290.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:267: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent1273);
            	    adj291=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj291.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:271: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent1275);
            	    colon292=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon292.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:277: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1277);
            	    stop293=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop293.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt71 >= 1 ) break loop71;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(71, input);
                        throw eee;
                }
                cnt71++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2294 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1295 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt72=2;
            switch ( input.LA(1) ) {
            case 101:
                {
                alt72=1;
                }
                break;
            case 109:
                {
                alt72=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture1288);
                    mixtureStructure2294=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2294.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture1290);
                    mixtureStructure1295=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1295.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 101:52: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:55: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:74: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:93: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class minimixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:1: minimixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.minimixtureStructure2_return minimixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure2_return retval = new ChemicalChunkerParser.minimixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma296 = null;

        ChemicalChunkerParser.lrb_return lrb297 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent298 = null;

        ChemicalChunkerParser.rrb_return rrb299 = null;

        ChemicalChunkerParser.comma_return comma300 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:22: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:24: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_minimixtureStructure21311);
            comma296=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma296.getTree());
            pushFollow(FOLLOW_lrb_in_minimixtureStructure21313);
            lrb297=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb297.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure21315);
            mixtureContent298=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent298.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure21317);
            rrb299=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb299.getTree());
            pushFollow(FOLLOW_comma_in_minimixtureStructure21319);
            comma300=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma300.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure2"

    public static class minimixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:1: minimixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.minimixtureStructure1_return minimixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure1_return retval = new ChemicalChunkerParser.minimixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb301 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent302 = null;

        ChemicalChunkerParser.rrb_return rrb303 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:22: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:25: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_minimixtureStructure11326);
            lrb301=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb301.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure11328);
            mixtureContent302=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent302.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure11330);
            rrb303=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb303.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure1"

    public static class minimixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:1: minimixtureContent : ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.minimixtureContent_return minimixtureContent() throws RecognitionException {
        ChemicalChunkerParser.minimixtureContent_return retval = new ChemicalChunkerParser.minimixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw304 = null;

        ChemicalChunkerParser.verb_return verb305 = null;

        ChemicalChunkerParser.measurements_return measurements306 = null;

        ChemicalChunkerParser.md_return md307 = null;

        ChemicalChunkerParser.stop_return stop308 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound309 = null;

        ChemicalChunkerParser.molecule_return molecule310 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule311 = null;

        ChemicalChunkerParser.dash_return dash312 = null;

        ChemicalChunkerParser.sym_return sym313 = null;

        ChemicalChunkerParser.cd_return cd314 = null;

        ChemicalChunkerParser.noun_return noun315 = null;

        ChemicalChunkerParser.inof_return inof316 = null;

        ChemicalChunkerParser.inAll_return inAll317 = null;

        ChemicalChunkerParser.cd_return cd318 = null;

        ChemicalChunkerParser.comma_return comma319 = null;

        ChemicalChunkerParser.adj_return adj320 = null;

        ChemicalChunkerParser.colon_return colon321 = null;

        ChemicalChunkerParser.stop_return stop322 = null;

        ChemicalChunkerParser.fw_return fw323 = null;

        ChemicalChunkerParser.verb_return verb324 = null;

        ChemicalChunkerParser.measurements_return measurements325 = null;

        ChemicalChunkerParser.nnyield_return nnyield326 = null;

        ChemicalChunkerParser.md_return md327 = null;

        ChemicalChunkerParser.stop_return stop328 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound329 = null;

        ChemicalChunkerParser.molecule_return molecule330 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule331 = null;

        ChemicalChunkerParser.dash_return dash332 = null;

        ChemicalChunkerParser.sym_return sym333 = null;

        ChemicalChunkerParser.cd_return cd334 = null;

        ChemicalChunkerParser.noun_return noun335 = null;

        ChemicalChunkerParser.inof_return inof336 = null;

        ChemicalChunkerParser.inAll_return inAll337 = null;

        ChemicalChunkerParser.cd_return cd338 = null;

        ChemicalChunkerParser.comma_return comma339 = null;

        ChemicalChunkerParser.adj_return adj340 = null;

        ChemicalChunkerParser.colon_return colon341 = null;

        ChemicalChunkerParser.stop_return stop342 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:19: ( ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:23: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:23: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt73=19;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:24: fw
                    {
                    pushFollow(FOLLOW_fw_in_minimixtureContent1339);
                    fw304=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw304.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:27: verb
                    {
                    pushFollow(FOLLOW_verb_in_minimixtureContent1341);
                    verb305=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb305.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:32: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_minimixtureContent1343);
                    measurements306=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements306.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:45: md
                    {
                    pushFollow(FOLLOW_md_in_minimixtureContent1345);
                    md307=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md307.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:48: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1347);
                    stop308=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop308.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:53: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1349);
                    oscarCompound309=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound309.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:67: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_minimixtureContent1351);
                    molecule310=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule310.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:76: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1353);
                    unnamedmolecule311=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule311.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:92: dash
                    {
                    pushFollow(FOLLOW_dash_in_minimixtureContent1355);
                    dash312=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash312.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:97: sym
                    {
                    pushFollow(FOLLOW_sym_in_minimixtureContent1357);
                    sym313=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym313.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:101: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1359);
                    cd314=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd314.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:104: noun
                    {
                    pushFollow(FOLLOW_noun_in_minimixtureContent1361);
                    noun315=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun315.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:109: inof
                    {
                    pushFollow(FOLLOW_inof_in_minimixtureContent1363);
                    inof316=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof316.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:114: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_minimixtureContent1365);
                    inAll317=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll317.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:120: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1367);
                    cd318=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd318.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:123: comma
                    {
                    pushFollow(FOLLOW_comma_in_minimixtureContent1369);
                    comma319=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma319.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:129: adj
                    {
                    pushFollow(FOLLOW_adj_in_minimixtureContent1371);
                    adj320=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj320.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:133: colon
                    {
                    pushFollow(FOLLOW_colon_in_minimixtureContent1373);
                    colon321=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon321.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:139: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1375);
                    stop322=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop322.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:145: ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt74=0;
            loop74:
            do {
                int alt74=21;
                alt74 = dfa74.predict(input);
                switch (alt74) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:146: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_minimixtureContent1379);
            	    fw323=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw323.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:149: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_minimixtureContent1381);
            	    verb324=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb324.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:154: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_minimixtureContent1383);
            	    measurements325=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements325.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:167: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_minimixtureContent1385);
            	    nnyield326=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield326.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:175: md
            	    {
            	    pushFollow(FOLLOW_md_in_minimixtureContent1387);
            	    md327=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md327.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:178: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1389);
            	    stop328=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop328.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:183: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1391);
            	    oscarCompound329=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound329.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:197: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_minimixtureContent1393);
            	    molecule330=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule330.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:206: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1395);
            	    unnamedmolecule331=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule331.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:222: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_minimixtureContent1397);
            	    dash332=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash332.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:227: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_minimixtureContent1399);
            	    sym333=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym333.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:231: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1401);
            	    cd334=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd334.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:234: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_minimixtureContent1403);
            	    noun335=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun335.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:239: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_minimixtureContent1405);
            	    inof336=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof336.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:244: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_minimixtureContent1407);
            	    inAll337=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll337.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:250: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1409);
            	    cd338=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd338.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:253: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_minimixtureContent1411);
            	    comma339=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma339.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:259: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_minimixtureContent1413);
            	    adj340=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj340.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:263: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_minimixtureContent1415);
            	    colon341=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon341.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:269: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1417);
            	    stop342=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop342.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj343 = null;

        ChemicalChunkerParser.jjr_return jjr344 = null;

        ChemicalChunkerParser.jjs_return jjs345 = null;

        ChemicalChunkerParser.jjt_return jjt346 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj347 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn348 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt75=6;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt75=1;
                }
                break;
            case 144:
                {
                alt75=2;
                }
                break;
            case 145:
                {
                alt75=3;
                }
                break;
            case 146:
                {
                alt75=4;
                }
                break;
            case 12:
                {
                alt75=5;
                }
                break;
            case 13:
                {
                alt75=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }

            switch (alt75) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj1428);
                    jj343=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj343.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj1430);
                    jjr344=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr344.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj1432);
                    jjs345=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs345.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj1434);
                    jjt346=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt346.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj1436);
                    oscarcj347=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj347.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj1438);
                    oscarrn348=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn348.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:1: adv : ( rb | rbr | rbt | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb349 = null;

        ChemicalChunkerParser.rbr_return rbr350 = null;

        ChemicalChunkerParser.rbt_return rbt351 = null;

        ChemicalChunkerParser.rp_return rp352 = null;

        ChemicalChunkerParser.rbs_return rbs353 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:5: ( rb | rbr | rbt | rp | rbs )
            int alt76=5;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt76=1;
                }
                break;
            case 173:
                {
                alt76=2;
                }
                break;
            case 175:
                {
                alt76=3;
                }
                break;
            case 178:
                {
                alt76=4;
                }
                break;
            case 176:
                {
                alt76=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }

            switch (alt76) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1445);
                    rb349=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb349.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1447);
                    rbr350=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr350.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv1449);
                    rbt351=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt351.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1451);
                    rp352=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp352.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1453);
                    rbs353=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs353.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg354 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere355 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime356 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp357 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN358 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther359 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:5: ( neg )?
            int alt77=2;
            switch ( input.LA(1) ) {
                case 103:
                    {
                    alt77=1;
                    }
                    break;
            }

            switch (alt77) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1466);
                    neg354=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg354.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            int alt78=5;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1470);
                    prepphraseAtmosphere355=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere355.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1472);
                    prepphraseTime356=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime356.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1474);
                    prepphraseTemp357=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp357.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1476);
                    prepphraseIN358=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN358.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:75: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1478);
                    prepphraseOther359=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther359.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv360 = null;

        ChemicalChunkerParser.adj_return adj361 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:2: ( adv | adj )
            int alt79=2;
            switch ( input.LA(1) ) {
            case 172:
            case 173:
            case 175:
            case 176:
            case 178:
                {
                alt79=1;
                }
                break;
            case 12:
            case 13:
            case 143:
            case 144:
            case 145:
            case 146:
                {
                alt79=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1492);
                    adv360=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv360.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1494);
                    adj361=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj361.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:116:1: prepphraseOther : ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj362 = null;

        ChemicalChunkerParser.inAll_return inAll363 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase364 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:2: ( ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:4: ( advAdj )* ( inAll )+ nounphrase
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:4: ( advAdj )*
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                case 172:
                case 173:
                case 175:
                case 176:
                case 178:
                    {
                    alt80=1;
                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1503);
            	    advAdj362=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj362.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:12: ( inAll )+
            int cnt81=0;
            loop81:
            do {
                int alt81=2;
                switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 142:
                case 180:
                    {
                    alt81=1;
                    }
                    break;

                }

                switch (alt81) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther1506);
            	    inAll363=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll363.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt81 >= 1 ) break loop81;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(81, input);
                        throw eee;
                }
                cnt81++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1510);
            nounphrase364=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase364.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inAll
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:31: -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:35: ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:57: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof365 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase366 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1537);
            inof365=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof365.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1540);
            nounphrase366=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase366.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 119:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:1: prepphraseTime : prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure367 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:2: ( prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1562);
            prepPhraseTimeStructure367=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure367.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 122:27: -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:122:31: ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj368 = null;

        ChemicalChunkerParser.inAll_return inAll369 = null;

        ChemicalChunkerParser.dt_return dt370 = null;

        ChemicalChunkerParser.advAdj_return advAdj371 = null;

        ChemicalChunkerParser.cd_return cd372 = null;

        ChemicalChunkerParser.nntime_return nntime373 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:3: ( advAdj )*
            loop82:
            do {
                int alt82=2;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1580);
            	    advAdj368=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj368.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:11: ( inAll )?
            int alt83=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 142:
                case 180:
                    {
                    alt83=1;
                    }
                    break;
            }

            switch (alt83) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1583);
                    inAll369=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll369.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:19: ( dt )?
            int alt84=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt84=1;
                    }
                    break;
            }

            switch (alt84) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1587);
                    dt370=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt370.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:23: ( advAdj )*
            loop85:
            do {
                int alt85=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                case 172:
                case 173:
                case 175:
                case 176:
                case 178:
                    {
                    alt85=1;
                    }
                    break;

                }

                switch (alt85) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1590);
            	    advAdj371=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj371.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:31: ( cd )?
            int alt86=2;
            switch ( input.LA(1) ) {
                case 125:
                    {
                    alt86=1;
                    }
                    break;
            }

            switch (alt86) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1593);
                    cd372=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd372.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:35: ( nntime )+
            int cnt87=0;
            loop87:
            do {
                int alt87=2;
                switch ( input.LA(1) ) {
                case 36:
                    {
                    int LA87_2 = input.LA(2);

                    if ( (synpred303_ChemicalChunker()) ) {
                        alt87=1;
                    }


                    }
                    break;

                }

                switch (alt87) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1596);
            	    nntime373=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime373.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt87 >= 1 ) break loop87;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(87, input);
                        throw eee;
                }
                cnt87++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:1: prepphraseIN : inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin374 = null;

        ChemicalChunkerParser.molecule_return molecule375 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:2: ( inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1608);
            inin374=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin374.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1610);
            molecule375=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule375.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:17: -> ^( NODE[\"PrepPhrase\"] inin molecule )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:21: ^( NODE[\"PrepPhrase\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent376 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:2: ( prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1634);
            prepphraseAtmosphereContent376=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent376.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:32: -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:36: ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder377 = null;

        ChemicalChunkerParser.dt_return dt378 = null;

        ChemicalChunkerParser.advAdj_return advAdj379 = null;

        ChemicalChunkerParser.molecule_return molecule380 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere381 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1654);
            inunder377=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder377.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:12: ( dt )?
            int alt88=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt88=1;
                    }
                    break;
            }

            switch (alt88) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1657);
                    dt378=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt378.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:16: ( advAdj )*
            loop89:
            do {
                int alt89=2;
                alt89 = dfa89.predict(input);
                switch (alt89) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1660);
            	    advAdj379=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj379.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1663);
            molecule380=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule380.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:33: ( nnatmosphere )?
            int alt90=2;
            switch ( input.LA(1) ) {
                case 40:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA90_3 = input.LA(3);

                            if ( (synpred306_ChemicalChunker()) ) {
                                alt90=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt90) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1665);
                    nnatmosphere381=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere381.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in382 = null;

        ChemicalChunkerParser.inafter_return inafter383 = null;

        ChemicalChunkerParser.inas_return inas384 = null;

        ChemicalChunkerParser.inbefore_return inbefore385 = null;

        ChemicalChunkerParser.inby_return inby386 = null;

        ChemicalChunkerParser.infor_return infor387 = null;

        ChemicalChunkerParser.infrom_return infrom388 = null;

        ChemicalChunkerParser.inin_return inin389 = null;

        ChemicalChunkerParser.ininto_return ininto390 = null;

        ChemicalChunkerParser.inof_return inof391 = null;

        ChemicalChunkerParser.inoff_return inoff392 = null;

        ChemicalChunkerParser.inon_return inon393 = null;

        ChemicalChunkerParser.inover_return inover394 = null;

        ChemicalChunkerParser.inunder_return inunder395 = null;

        ChemicalChunkerParser.invia_return invia396 = null;

        ChemicalChunkerParser.inwith_return inwith397 = null;

        ChemicalChunkerParser.inwithout_return inwithout398 = null;

        ChemicalChunkerParser.to_return to399 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt91=18;
            switch ( input.LA(1) ) {
            case 142:
                {
                alt91=1;
                }
                break;
            case 20:
                {
                alt91=2;
                }
                break;
            case 18:
                {
                alt91=3;
                }
                break;
            case 19:
                {
                alt91=4;
                }
                break;
            case 25:
                {
                alt91=5;
                }
                break;
            case 29:
                {
                alt91=6;
                }
                break;
            case 30:
                {
                alt91=7;
                }
                break;
            case 21:
                {
                alt91=8;
                }
                break;
            case 22:
                {
                alt91=9;
                }
                break;
            case 27:
                {
                alt91=10;
                }
                break;
            case 33:
                {
                alt91=11;
                }
                break;
            case 28:
                {
                alt91=12;
                }
                break;
            case 32:
                {
                alt91=13;
                }
                break;
            case 31:
                {
                alt91=14;
                }
                break;
            case 26:
                {
                alt91=15;
                }
                break;
            case 23:
                {
                alt91=16;
                }
                break;
            case 24:
                {
                alt91=17;
                }
                break;
            case 180:
                {
                alt91=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1677);
                    in382=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in382.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1679);
                    inafter383=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter383.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1681);
                    inas384=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas384.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1683);
                    inbefore385=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore385.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1685);
                    inby386=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby386.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1687);
                    infor387=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor387.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1689);
                    infrom388=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom388.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1691);
                    inin389=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin389.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1693);
                    ininto390=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto390.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1695);
                    inof391=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof391.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1697);
                    inoff392=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff392.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll1699);
                    inon393=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon393.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll1701);
                    inover394=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover394.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll1703);
                    inunder395=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder395.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll1705);
                    invia396=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia396.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll1707);
                    inwith397=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith397.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll1709);
                    inwithout398=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout398.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll1711);
                    to399=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to399.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:1: prepphraseTemp : prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent400 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:15: ( prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1718);
            prepphraseTempContent400=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent400.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 136:40: -> ^( NODE[\"TempPhrase\"] prepphraseTempContent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:44: ^( NODE[\"TempPhrase\"] prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj401 = null;

        ChemicalChunkerParser.inAll_return inAll402 = null;

        ChemicalChunkerParser.dt_return dt403 = null;

        ChemicalChunkerParser.advAdj_return advAdj404 = null;

        ChemicalChunkerParser.cd_return cd405 = null;

        ChemicalChunkerParser.nntemp_return nntemp406 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:5: ( advAdj )?
            int alt92=2;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1740);
                    advAdj401=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj401.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:13: ( inAll )?
            int alt93=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 142:
                case 180:
                    {
                    alt93=1;
                    }
                    break;
            }

            switch (alt93) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1743);
                    inAll402=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll402.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:20: ( dt )?
            int alt94=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt94=1;
                    }
                    break;
            }

            switch (alt94) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1746);
                    dt403=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt403.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:24: ( advAdj )?
            int alt95=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                case 172:
                case 173:
                case 175:
                case 176:
                case 178:
                    {
                    alt95=1;
                    }
                    break;
            }

            switch (alt95) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1749);
                    advAdj404=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj404.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:32: ( cd )?
            int alt96=2;
            switch ( input.LA(1) ) {
                case 125:
                    {
                    alt96=1;
                    }
                    break;
            }

            switch (alt96) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1752);
                    cd405=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd405.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:36: ( nntemp )+
            int cnt97=0;
            loop97:
            do {
                int alt97=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA97_2 = input.LA(2);

                    if ( (synpred329_ChemicalChunker()) ) {
                        alt97=1;
                    }


                    }
                    break;

                }

                switch (alt97) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1755);
            	    nntemp406=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp406.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt97 >= 1 ) break loop97;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(97, input);
                        throw eee;
                }
                cnt97++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:1: amount : ( cd )+ nnamount -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd407 = null;

        ChemicalChunkerParser.nnamount_return nnamount408 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:8: ( ( cd )+ nnamount -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:10: ( cd )+ nnamount
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:10: ( cd )+
            int cnt98=0;
            loop98:
            do {
                int alt98=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt98=1;
                    }
                    break;

                }

                switch (alt98) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount1770);
            	    cd407=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd407.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt98 >= 1 ) break loop98;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(98, input);
                        throw eee;
                }
                cnt98++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount1773);
            nnamount408=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount408.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:23: -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:26: ^( NODE[\"AMOUNT\"] ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:1: mass : ( cd )+ nnmass -> ^( NODE[\"MASS\"] ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd409 = null;

        ChemicalChunkerParser.nnmass_return nnmass410 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:6: ( ( cd )+ nnmass -> ^( NODE[\"MASS\"] ( cd )+ nnmass ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:8: ( cd )+ nnmass
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:8: ( cd )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt99=1;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass1795);
            	    cd409=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd409.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass1798);
            nnmass410=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass410.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 143:18: -> ^( NODE[\"MASS\"] ( cd )+ nnmass )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:21: ^( NODE[\"MASS\"] ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:1: percent : cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd411 = null;

        ChemicalChunkerParser.nn_return nn412 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent413 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:9: ( cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:11: cd ( nn )? nnpercent
            {
            pushFollow(FOLLOW_cd_in_percent1820);
            cd411=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd411.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:14: ( nn )?
            int alt100=2;
            switch ( input.LA(1) ) {
                case 149:
                    {
                    alt100=1;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent1822);
                    nn412=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn412.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent1825);
            nnpercent413=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent413.getTree());


            // AST REWRITE
            // elements: nnpercent, nn, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:28: -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:31: ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:1: volume : ( cd )+ nnvol -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd414 = null;

        ChemicalChunkerParser.nnvol_return nnvol415 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:8: ( ( cd )+ nnvol -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:10: ( cd )+ nnvol
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:10: ( cd )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt101=1;
                    }
                    break;

                }

                switch (alt101) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume1849);
            	    cd414=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd414.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume1852);
            nnvol415=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol415.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 145:20: -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:23: ^( NODE[\"VOLUME\"] ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:1: molar : ( cd )* nnmolar -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd416 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar417 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:7: ( ( cd )* nnmolar -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:9: ( cd )* nnmolar
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:9: ( cd )*
            loop102:
            do {
                int alt102=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt102=1;
                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar1874);
            	    cd416=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd416.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar1877);
            nnmolar417=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar417.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 146:21: -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:24: ^( NODE[\"MOLAR\"] ( cd )* nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLAR"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:42: ( cd )*
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize418 = null;

        ChemicalChunkerParser.inas_return inas419 = null;

        ChemicalChunkerParser.nnexample_return nnexample420 = null;

        ChemicalChunkerParser.cd_return cd421 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase422 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1901);
            vbsynthesize418=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize418.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1903);
            inas419=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas419.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:22: ( nnexample cd | prepphrase )
            int alt103=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt103=1;
                }
                break;
            case 12:
            case 13:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 36:
            case 44:
            case 103:
            case 125:
            case 130:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 172:
            case 173:
            case 175:
            case 176:
            case 178:
            case 180:
                {
                alt103=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1906);
                    nnexample420=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample420.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1908);
                    cd421=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd421.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1911);
                    prepphrase422=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase422.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus423 = null;

        ChemicalChunkerParser.conjunction_return conjunction424 = null;

        ChemicalChunkerParser.apparatus_return apparatus425 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1924);
            apparatus423=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus423.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:14: ( ( conjunction )* apparatus )*
            loop105:
            do {
                int alt105=2;
                alt105 = dfa105.predict(input);
                switch (alt105) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:15: ( conjunction )* apparatus
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:15: ( conjunction )*
            	    loop104:
            	    do {
            	        int alt104=2;
            	        alt104 = dfa104.predict(input);
            	        switch (alt104) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1927);
            	    	    conjunction424=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction424.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop104;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1930);
            	    apparatus425=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus425.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt426 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus427 = null;

        ChemicalChunkerParser.nnApp_return nnApp428 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:4: ( dt )?
            int alt106=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt106=1;
                    }
                    break;
            }

            switch (alt106) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1942);
                    dt426=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt426.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:8: ( preapparatus )*
            loop107:
            do {
                int alt107=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 35:
                case 38:
                case 43:
                case 48:
                case 54:
                case 59:
                case 101:
                case 109:
                case 125:
                case 143:
                case 144:
                case 145:
                case 146:
                case 149:
                    {
                    alt107=1;
                    }
                    break;

                }

                switch (alt107) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1945);
            	    preapparatus427=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus427.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:22: ( nnApp )+
            int cnt108=0;
            loop108:
            do {
                int alt108=2;
                switch ( input.LA(1) ) {
                case 69:
                    {
                    int LA108_2 = input.LA(2);

                    if ( (synpred340_ChemicalChunker()) ) {
                        alt108=1;
                    }


                    }
                    break;

                }

                switch (alt108) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1948);
            	    nnApp428=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp428.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt108 >= 1 ) break loop108;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(108, input);
                        throw eee;
                }
                cnt108++;
            } while (true);



            // AST REWRITE
            // elements: nnApp, preapparatus, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:28: -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:31: ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:53: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:57: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus429 = null;

        ChemicalChunkerParser.dash_return dash430 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus431 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:4: ( nnapparatus )+
            int cnt109=0;
            loop109:
            do {
                int alt109=2;
                switch ( input.LA(1) ) {
                case 69:
                    {
                    int LA109_2 = input.LA(2);

                    if ( (synpred341_ChemicalChunker()) ) {
                        alt109=1;
                    }


                    }
                    break;

                }

                switch (alt109) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1977);
            	    nnapparatus429=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus429.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt109 >= 1 ) break loop109;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(109, input);
                        throw eee;
                }
                cnt109++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:17: ( dash nnapparatus )*
            loop110:
            do {
                int alt110=2;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 69:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA110_5 = input.LA(5);

                                if ( (synpred342_ChemicalChunker()) ) {
                                    alt110=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt110) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1981);
            	    dash430=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash430.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1983);
            	    nnapparatus431=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus431.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity432 = null;

        ChemicalChunkerParser.adj_return adj433 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure434 = null;

        ChemicalChunkerParser.nnadd_return nnadd435 = null;

        ChemicalChunkerParser.molecule_return molecule436 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity437 = null;

        ChemicalChunkerParser.nnstate_return nnstate438 = null;

        ChemicalChunkerParser.nn_return nn439 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt111=0;
            loop111:
            do {
                int alt111=9;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1997);
            	    quantity432=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity432.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1999);
            	    adj433=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj433.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus2001);
            	    nnpressure434=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure434.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus2003);
            	    nnadd435=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd435.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus2005);
            	    molecule436=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule436.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus2007);
            	    nnchementity437=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity437.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus2009);
            	    nnstate438=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate438.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus2011);
            	    nn439=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn439.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt111 >= 1 ) break loop111;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(111, input);
                        throw eee;
                }
                cnt111++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd440 = null;

        ChemicalChunkerParser.nn_return nn441 = null;

        ChemicalChunkerParser.multiple_return multiple442 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes443 = null;

        ChemicalChunkerParser.dt_return dt444 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:3: ( cd nn )?
            int alt112=2;
            switch ( input.LA(1) ) {
                case 125:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 149:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 38:
                                                case 125:
                                                    {
                                                    alt112=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt112) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2022);
                    cd440=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd440.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2024);
                    nn441=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn441.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:12: ( multiple | measurementtypes )
            int alt113=2;
            switch ( input.LA(1) ) {
            case 125:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 37:
                    case 38:
                    case 39:
                    case 42:
                    case 106:
                    case 125:
                    case 149:
                        {
                        alt113=2;
                        }
                        break;
                    case 17:
                        {
                        alt113=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 113, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt113=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2029);
                    multiple442=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple442.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2031);
                    measurementtypes443=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes443.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:43: ( dt )?
            int alt114=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA114_3 = input.LA(3);

                            if ( (synpred353_ChemicalChunker()) ) {
                                alt114=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt114) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2037);
                    dt444=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt444.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:1: multiple : cd cdunicode ( measurementtypes )? -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd445 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode446 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes447 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:10: ( cd cdunicode ( measurementtypes )? -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2045);
            cd445=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd445.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2047);
            cdunicode446=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode446.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:25: ( measurementtypes )?
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2049);
                    measurementtypes447=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes447.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: measurementtypes, cd, cdunicode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 162:43: -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:46: ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:80: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:1: measurementtypes : ( molar | amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar448 = null;

        ChemicalChunkerParser.amount_return amount449 = null;

        ChemicalChunkerParser.mass_return mass450 = null;

        ChemicalChunkerParser.percent_return percent451 = null;

        ChemicalChunkerParser.volume_return volume452 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:2: ( molar | amount | mass | percent | volume )
            int alt116=5;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2077);
                    molar448=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar448.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2079);
                    amount449=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount449.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2081);
                    mass450=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass450.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:22: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2083);
                    percent451=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent451.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:30: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2085);
                    volume452=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume452.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:1: oscarCompound : ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj453 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1454 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2455 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3456 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4457 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm458 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:15: ( ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:18: ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:18: ( adj )*
            loop117:
            do {
                int alt117=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 143:
                case 144:
                case 145:
                case 146:
                    {
                    alt117=1;
                    }
                    break;

                }

                switch (alt117) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound2097);
            	    adj453=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj453.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            int alt118=5;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:24: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound2101);
                    oscarCompound1454=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1454.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:39: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound2103);
                    oscarCompound2455=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2455.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:54: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound2105);
                    oscarCompound3456=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3456.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:69: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound2107);
                    oscarCompound4457=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4457.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:84: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound2109);
                    oscarcm458=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm458.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: oscarCompound4 : lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb459 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm460 = null;

        ChemicalChunkerParser.rrb_return rrb461 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:16: ( lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound42119);
            lrb459=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb459.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound42122);
            oscarcm460=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm460.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound42124);
            rrb461=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb461.getTree());


            // AST REWRITE
            // elements: lrb, oscarcm, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 169:35: -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:38: ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:1: oscarCompound3 : oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm462 = null;

        ChemicalChunkerParser.dash_return dash463 = null;

        ChemicalChunkerParser.apost_return apost464 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_apost=new RewriteRuleSubtreeStream(adaptor,"rule apost");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:16: ( oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:18: oscarcm ( dash | apost )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound32148);
            oscarcm462=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm462.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:26: ( dash | apost )+
            int cnt119=0;
            loop119:
            do {
                int alt119=3;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA119_4 = input.LA(3);

                        if ( (synpred364_ChemicalChunker()) ) {
                            alt119=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 102:
                    {
                    alt119=2;
                    }
                    break;

                }

                switch (alt119) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:27: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound32151);
            	    dash463=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash463.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:32: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound32153);
            	    apost464=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apost.add(apost464.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);



            // AST REWRITE
            // elements: apost, oscarcm, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 170:40: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:43: ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:72: ( dash )*
                while ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:78: ( apost )*
                while ( stream_apost.hasNext() ) {
                    adaptor.addChild(root_1, stream_apost.nextTree());

                }
                stream_apost.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:1: oscarCompound2 : oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm465 = null;

        ChemicalChunkerParser.dash_return dash466 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm467 = null;

        ChemicalChunkerParser.dash_return dash468 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:16: ( oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:18: oscarcm ( dash oscarcm )+ ( dash )?
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound22181);
            oscarcm465=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm465.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:26: ( dash oscarcm )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                switch ( input.LA(1) ) {
                case 104:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 54:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA120_5 = input.LA(5);

                                if ( (synpred366_ChemicalChunker()) ) {
                                    alt120=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt120) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:27: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound22184);
            	    dash466=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash466.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound22186);
            	    oscarcm467=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm467.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:42: ( dash )?
            int alt121=2;
            switch ( input.LA(1) ) {
                case 104:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA121_3 = input.LA(3);

                            if ( (synpred367_ChemicalChunker()) ) {
                                alt121=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt121) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound22190);
                    dash468=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash468.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dash, oscarcm, oscarcm, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 171:47: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:50: ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()||stream_dash.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext()||stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:96: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:1: oscarCompound1 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm469 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm470 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound12221);
            oscarcm469=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm469.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:26: ( oscarcm )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                switch ( input.LA(1) ) {
                case 54:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA122_3 = input.LA(3);

                        if ( (synpred368_ChemicalChunker()) ) {
                            alt122=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt122) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound12223);
            	    oscarcm470=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm470.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 172:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity471 = null;

        ChemicalChunkerParser.mixture_return mixture472 = null;

        ChemicalChunkerParser.inof_return inof473 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound474 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:2: ( ( quantity | mixture )+ inof oscarCompound )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:3: ( quantity | mixture )+ inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:3: ( quantity | mixture )+
            int cnt123=0;
            loop123:
            do {
                int alt123=3;
                switch ( input.LA(1) ) {
                case 109:
                    {
                    int LA123_2 = input.LA(2);

                    if ( (synpred369_ChemicalChunker()) ) {
                        alt123=1;
                    }
                    else if ( (synpred370_ChemicalChunker()) ) {
                        alt123=2;
                    }


                    }
                    break;
                case 38:
                case 125:
                    {
                    alt123=1;
                    }
                    break;
                case 101:
                    {
                    alt123=2;
                    }
                    break;

                }

                switch (alt123) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount12248);
            	    quantity471=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity471.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount12250);
            	    mixture472=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture472.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount12254);
            inof473=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof473.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount12256);
            oscarCompound474=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound474.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity475 = null;

        ChemicalChunkerParser.mixture_return mixture476 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound477 = null;

        ChemicalChunkerParser.citation_return citation478 = null;

        ChemicalChunkerParser.quantity_return quantity479 = null;

        ChemicalChunkerParser.mixture_return mixture480 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:2: ( ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:3: ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:3: ( quantity | mixture )*
            loop124:
            do {
                int alt124=3;
                alt124 = dfa124.predict(input);
                switch (alt124) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22266);
            	    quantity475=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity475.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22268);
            	    mixture476=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture476.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:23: ( oscarCompound )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                alt125 = dfa125.predict(input);
                switch (alt125) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount22272);
            	    oscarCompound477=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound477.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:39: ( citation | quantity | mixture )*
            loop126:
            do {
                int alt126=4;
                alt126 = dfa126.predict(input);
                switch (alt126) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:40: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount22277);
            	    citation478=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation478.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:49: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22279);
            	    quantity479=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity479.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:58: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22281);
            	    mixture480=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture480.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1481 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2482 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:16: ( moleculeamount1 | moleculeamount2 )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount2292);
                    moleculeamount1481=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1481.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount2296);
                    moleculeamount2482=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2482.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount483 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule2317);
            moleculeamount483=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount483.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class oscarcdType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcdType"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: oscarcdType : lrb ( oscarcd | cd ) rrb ;
    public final ChemicalChunkerParser.oscarcdType_return oscarcdType() throws RecognitionException {
        ChemicalChunkerParser.oscarcdType_return retval = new ChemicalChunkerParser.oscarcdType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb484 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd485 = null;

        ChemicalChunkerParser.cd_return cd486 = null;

        ChemicalChunkerParser.rrb_return rrb487 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:13: ( lrb ( oscarcd | cd ) rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:16: lrb ( oscarcd | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_oscarcdType2340);
            lrb484=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb484.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:20: ( oscarcd | cd )
            int alt128=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt128=1;
                }
                break;
            case 125:
                {
                alt128=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:21: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_oscarcdType2343);
                    oscarcd485=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd485.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:29: cd
                    {
                    pushFollow(FOLLOW_cd_in_oscarcdType2345);
                    cd486=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd486.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_oscarcdType2348);
            rrb487=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb487.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcdType"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:1: unnamedmoleculeamount1 : quantity inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity488 = null;

        ChemicalChunkerParser.inof_return inof489 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd490 = null;

        ChemicalChunkerParser.cd_return cd491 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:2: ( quantity inof ( oscarcd | cd ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:4: quantity inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount12357);
            quantity488=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity488.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount12359);
            inof489=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof489.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:18: ( oscarcd | cd )
            int alt129=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt129=1;
                }
                break;
            case 125:
                {
                alt129=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }

            switch (alt129) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:19: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount12362);
                    oscarcd490=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd490.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:27: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount12364);
                    cd491=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd491.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:1: unnamedmoleculeamount2 : ( oscarcd | oscarcdType ) ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd492 = null;

        ChemicalChunkerParser.oscarcdType_return oscarcdType493 = null;

        ChemicalChunkerParser.citation_return citation494 = null;

        ChemicalChunkerParser.quantity_return quantity495 = null;

        ChemicalChunkerParser.mixture_return mixture496 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:2: ( ( oscarcd | oscarcdType ) ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:3: ( oscarcd | oscarcdType ) ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:3: ( oscarcd | oscarcdType )
            int alt130=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt130=1;
                }
                break;
            case 109:
                {
                alt130=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:4: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount22373);
                    oscarcd492=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd492.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:12: oscarcdType
                    {
                    pushFollow(FOLLOW_oscarcdType_in_unnamedmoleculeamount22375);
                    oscarcdType493=oscarcdType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcdType493.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:25: ( citation | quantity | mixture )*
            loop131:
            do {
                int alt131=4;
                alt131 = dfa131.predict(input);
                switch (alt131) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:26: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount22379);
            	    citation494=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation494.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:35: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount22381);
            	    quantity495=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity495.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:44: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount22383);
            	    mixture496=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture496.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity497 = null;

        ChemicalChunkerParser.inof_return inof498 = null;

        ChemicalChunkerParser.jj_return jj499 = null;

        ChemicalChunkerParser.noun_return noun500 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:2: ( quantity inof ( ( jj )? noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount32399);
            quantity497=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity497.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount32401);
            inof498=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof498.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:17: ( ( jj )? noun )+
            int cnt133=0;
            loop133:
            do {
                int alt133=2;
                alt133 = dfa133.predict(input);
                switch (alt133) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:18: ( jj )? noun
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:18: ( jj )?
            	    int alt132=2;
            	    switch ( input.LA(1) ) {
            	        case 143:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA132_3 = input.LA(3);

            	                    if ( (synpred384_ChemicalChunker()) ) {
            	                        alt132=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt132) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount32404);
            	            jj499=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj499.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount32407);
            	    noun500=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun500.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt133 >= 1 ) break loop133;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(133, input);
                        throw eee;
                }
                cnt133++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:1: unnamedmoleculeamount4 : ( quantity | mixture ) nnchementity ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity501 = null;

        ChemicalChunkerParser.mixture_return mixture502 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity503 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:2: ( ( quantity | mixture ) nnchementity )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:3: ( quantity | mixture ) nnchementity
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:3: ( quantity | mixture )
            int alt134=2;
            switch ( input.LA(1) ) {
            case 109:
                {
                int LA134_1 = input.LA(2);

                if ( (synpred386_ChemicalChunker()) ) {
                    alt134=1;
                }
                else if ( (true) ) {
                    alt134=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 1, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 125:
                {
                alt134=1;
                }
                break;
            case 101:
                {
                alt134=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }

            switch (alt134) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount42420);
                    quantity501=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity501.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount42422);
                    mixture502=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture502.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount42425);
            nnchementity503=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity503.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1504 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2505 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3506 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4507 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:2: ( ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            int alt135=4;
            switch ( input.LA(1) ) {
            case 109:
                {
                int LA135_1 = input.LA(2);

                if ( (synpred387_ChemicalChunker()) ) {
                    alt135=1;
                }
                else if ( (synpred388_ChemicalChunker()) ) {
                    alt135=2;
                }
                else if ( (synpred389_ChemicalChunker()) ) {
                    alt135=3;
                }
                else if ( (true) ) {
                    alt135=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;
                }
                }
                break;
            case 125:
                {
                int LA135_2 = input.LA(2);

                if ( (synpred387_ChemicalChunker()) ) {
                    alt135=1;
                }
                else if ( (synpred389_ChemicalChunker()) ) {
                    alt135=3;
                }
                else if ( (true) ) {
                    alt135=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA135_3 = input.LA(2);

                if ( (synpred387_ChemicalChunker()) ) {
                    alt135=1;
                }
                else if ( (synpred389_ChemicalChunker()) ) {
                    alt135=3;
                }
                else if ( (true) ) {
                    alt135=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 3, input);

                    throw nvae;
                }
                }
                break;
            case 11:
                {
                alt135=2;
                }
                break;
            case 101:
                {
                alt135=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:4: unnamedmoleculeamount1
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2434);
                    unnamedmoleculeamount1504=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1504.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:29: unnamedmoleculeamount2
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2438);
                    unnamedmoleculeamount2505=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2505.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:54: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2442);
                    unnamedmoleculeamount3506=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3506.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:77: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2444);
                    unnamedmoleculeamount4507=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4507.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount508 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2458);
            unnamedmoleculeamount508=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount508.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 208:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:1: quantity : ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1509 = null;

        ChemicalChunkerParser.quantity2_return quantity2510 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:11: ( ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:14: ( quantity1 | quantity2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:14: ( quantity1 | quantity2 )
            int alt136=2;
            switch ( input.LA(1) ) {
            case 109:
                {
                alt136=1;
                }
                break;
            case 38:
            case 125:
                {
                alt136=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity2481);
                    quantity1509=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1509.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity2483);
                    quantity2510=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2510.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity2, quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:36: -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:41: ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "QUANTITY"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:61: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:72: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb511 = null;

        ChemicalChunkerParser.measurements_return measurements512 = null;

        ChemicalChunkerParser.comma_return comma513 = null;

        ChemicalChunkerParser.measurements_return measurements514 = null;

        ChemicalChunkerParser.comma_return comma515 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase516 = null;

        ChemicalChunkerParser.stop_return stop517 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase518 = null;

        ChemicalChunkerParser.rrb_return rrb519 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12508);
            lrb511=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb511.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12510);
            measurements512=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements512.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:21: ( comma measurements )*
            loop137:
            do {
                int alt137=2;
                switch ( input.LA(1) ) {
                case 101:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 125:
                            {
                            alt137=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt137) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12513);
            	    comma513=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma513.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12516);
            	    measurements514=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements514.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:44: ( comma preparationphrase )*
            loop138:
            do {
                int alt138=2;
                switch ( input.LA(1) ) {
                case 101:
                    {
                    alt138=1;
                    }
                    break;

                }

                switch (alt138) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12521);
            	    comma515=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma515.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12523);
            	    preparationphrase516=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase516.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:71: ( stop preparationphrase )*
            loop139:
            do {
                int alt139=2;
                switch ( input.LA(1) ) {
                case 105:
                    {
                    alt139=1;
                    }
                    break;

                }

                switch (alt139) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12528);
            	    stop517=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop517.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12530);
            	    preparationphrase518=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase518.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12535);
            rrb519=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb519.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements520 = null;

        ChemicalChunkerParser.comma_return comma521 = null;

        ChemicalChunkerParser.measurements_return measurements522 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:2: ( measurements ( comma measurements )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22546);
            measurements520=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements520.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:18: ( comma measurements )*
            loop140:
            do {
                int alt140=2;
                alt140 = dfa140.predict(input);
                switch (alt140) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22549);
            	    comma521=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma521.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22552);
            	    measurements522=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements522.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral523 = null;

        ChemicalChunkerParser.nn_return nn524 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod525 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd526 = null;

        ChemicalChunkerParser.cd_return cd527 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:5: ( nngeneral | nn )?
            int alt141=3;
            switch ( input.LA(1) ) {
                case 46:
                    {
                    alt141=1;
                    }
                    break;
                case 149:
                    {
                    alt141=2;
                    }
                    break;
            }

            switch (alt141) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2568);
                    nngeneral523=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral523.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2570);
                    nn524=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn524.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2574);
            nnmethod525=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod525.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:30: ( oscarcd | cd )?
            int alt142=3;
            switch ( input.LA(1) ) {
                case 11:
                    {
                    alt142=1;
                    }
                    break;
                case 125:
                    {
                    alt142=2;
                    }
                    break;
            }

            switch (alt142) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:31: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_method2577);
                    oscarcd526=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd526.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:39: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2579);
                    cd527=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd527.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb528 = null;

        ChemicalChunkerParser.rrb_return rrb529 = null;

        ChemicalChunkerParser.lsqb_return lsqb530 = null;

        ChemicalChunkerParser.rsqb_return rsqb531 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt143=0;
            loop143:
            do {
                int alt143=5;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2601);
            	    lrb528=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb528.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2603);
            	    rrb529=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb529.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2605);
            	    lsqb530=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb530.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2607);
            	    rsqb531=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb531.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal532=null;
        Token TOKEN533=null;

        Object string_literal532_tree=null;
        Object TOKEN533_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:8: ( 'OSCAR-CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal532=(Token)match(input,11,FOLLOW_11_in_oscarcd2615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal532_tree = (Object)adaptor.create(string_literal532);
            adaptor.addChild(root_0, string_literal532_tree);
            }
            TOKEN533=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd2617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN533_tree = (Object)adaptor.create(TOKEN533);
            adaptor.addChild(root_0, TOKEN533_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal534=null;
        Token TOKEN535=null;

        Object string_literal534_tree=null;
        Object TOKEN535_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:8: ( 'OSCAR-CJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal534=(Token)match(input,12,FOLLOW_12_in_oscarcj2622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal534_tree = (Object)adaptor.create(string_literal534);
            adaptor.addChild(root_0, string_literal534_tree);
            }
            TOKEN535=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2624); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN535_tree = (Object)adaptor.create(TOKEN535);
            adaptor.addChild(root_0, TOKEN535_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal536=null;
        Token TOKEN537=null;

        Object string_literal536_tree=null;
        Object TOKEN537_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:8: ( 'OSCAR-RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal536=(Token)match(input,13,FOLLOW_13_in_oscarrn2629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal536_tree = (Object)adaptor.create(string_literal536);
            adaptor.addChild(root_0, string_literal536_tree);
            }
            TOKEN537=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN537_tree = (Object)adaptor.create(TOKEN537);
            adaptor.addChild(root_0, TOKEN537_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal538=null;
        Token TOKEN539=null;

        Object string_literal538_tree=null;
        Object TOKEN539_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:9: ( 'OSCAR-CPR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal538=(Token)match(input,14,FOLLOW_14_in_oscarcpr2636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal538_tree = (Object)adaptor.create(string_literal538);
            adaptor.addChild(root_0, string_literal538_tree);
            }
            TOKEN539=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr2638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN539_tree = (Object)adaptor.create(TOKEN539);
            adaptor.addChild(root_0, TOKEN539_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal540=null;
        Token TOKEN541=null;

        Object string_literal540_tree=null;
        Object TOKEN541_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:9: ( 'OSCAR-ONT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal540=(Token)match(input,15,FOLLOW_15_in_oscaront2644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal540_tree = (Object)adaptor.create(string_literal540);
            adaptor.addChild(root_0, string_literal540_tree);
            }
            TOKEN541=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN541_tree = (Object)adaptor.create(TOKEN541);
            adaptor.addChild(root_0, TOKEN541_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal542=null;
        Token TOKEN543=null;

        Object string_literal542_tree=null;
        Object TOKEN543_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:10: ( 'TM-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal542=(Token)match(input,16,FOLLOW_16_in_tmunicode2651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal542_tree = (Object)adaptor.create(string_literal542);
            adaptor.addChild(root_0, string_literal542_tree);
            }
            TOKEN543=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN543_tree = (Object)adaptor.create(TOKEN543);
            adaptor.addChild(root_0, TOKEN543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal544=null;
        Token TOKEN545=null;

        Object string_literal544_tree=null;
        Object TOKEN545_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:10: ( 'CD-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal544=(Token)match(input,17,FOLLOW_17_in_cdunicode2658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal544_tree = (Object)adaptor.create(string_literal544);
            adaptor.addChild(root_0, string_literal544_tree);
            }
            TOKEN545=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN545_tree = (Object)adaptor.create(TOKEN545);
            adaptor.addChild(root_0, TOKEN545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal546=null;
        Token TOKEN547=null;

        Object string_literal546_tree=null;
        Object TOKEN547_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:5: ( 'IN-AS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal546=(Token)match(input,18,FOLLOW_18_in_inas2667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal546_tree = (Object)adaptor.create(string_literal546);
            adaptor.addChild(root_0, string_literal546_tree);
            }
            TOKEN547=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas2669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN547_tree = (Object)adaptor.create(TOKEN547);
            adaptor.addChild(root_0, TOKEN547_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal548=null;
        Token TOKEN549=null;

        Object string_literal548_tree=null;
        Object TOKEN549_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:9: ( 'IN-BEFORE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal548=(Token)match(input,19,FOLLOW_19_in_inbefore2674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal548_tree = (Object)adaptor.create(string_literal548);
            adaptor.addChild(root_0, string_literal548_tree);
            }
            TOKEN549=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore2676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN549_tree = (Object)adaptor.create(TOKEN549);
            adaptor.addChild(root_0, TOKEN549_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal550=null;
        Token TOKEN551=null;

        Object string_literal550_tree=null;
        Object TOKEN551_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:8: ( 'IN-AFTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal550=(Token)match(input,20,FOLLOW_20_in_inafter2681); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal550_tree = (Object)adaptor.create(string_literal550);
            adaptor.addChild(root_0, string_literal550_tree);
            }
            TOKEN551=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter2683); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN551_tree = (Object)adaptor.create(TOKEN551);
            adaptor.addChild(root_0, TOKEN551_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal552=null;
        Token TOKEN553=null;

        Object string_literal552_tree=null;
        Object TOKEN553_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:5: ( 'IN-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal552=(Token)match(input,21,FOLLOW_21_in_inin2688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal552_tree = (Object)adaptor.create(string_literal552);
            adaptor.addChild(root_0, string_literal552_tree);
            }
            TOKEN553=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin2690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN553_tree = (Object)adaptor.create(TOKEN553);
            adaptor.addChild(root_0, TOKEN553_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal554=null;
        Token TOKEN555=null;

        Object string_literal554_tree=null;
        Object TOKEN555_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:7: ( 'IN-INTO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal554=(Token)match(input,22,FOLLOW_22_in_ininto2695); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal554_tree = (Object)adaptor.create(string_literal554);
            adaptor.addChild(root_0, string_literal554_tree);
            }
            TOKEN555=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto2697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN555_tree = (Object)adaptor.create(TOKEN555);
            adaptor.addChild(root_0, TOKEN555_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal556=null;
        Token TOKEN557=null;

        Object string_literal556_tree=null;
        Object TOKEN557_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:7: ( 'IN-WITH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal556=(Token)match(input,23,FOLLOW_23_in_inwith2702); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = (Object)adaptor.create(string_literal556);
            adaptor.addChild(root_0, string_literal556_tree);
            }
            TOKEN557=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith2704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN557_tree = (Object)adaptor.create(TOKEN557);
            adaptor.addChild(root_0, TOKEN557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal558=null;
        Token TOKEN559=null;

        Object string_literal558_tree=null;
        Object TOKEN559_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:10: ( 'IN-WITHOUT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal558=(Token)match(input,24,FOLLOW_24_in_inwithout2709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal558_tree = (Object)adaptor.create(string_literal558);
            adaptor.addChild(root_0, string_literal558_tree);
            }
            TOKEN559=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout2711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN559_tree = (Object)adaptor.create(TOKEN559);
            adaptor.addChild(root_0, TOKEN559_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal560=null;
        Token TOKEN561=null;

        Object string_literal560_tree=null;
        Object TOKEN561_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:5: ( 'IN-BY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal560=(Token)match(input,25,FOLLOW_25_in_inby2716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal560_tree = (Object)adaptor.create(string_literal560);
            adaptor.addChild(root_0, string_literal560_tree);
            }
            TOKEN561=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby2718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN561_tree = (Object)adaptor.create(TOKEN561);
            adaptor.addChild(root_0, TOKEN561_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal562=null;
        Token TOKEN563=null;

        Object string_literal562_tree=null;
        Object TOKEN563_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:6: ( 'IN-VIA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal562=(Token)match(input,26,FOLLOW_26_in_invia2723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = (Object)adaptor.create(string_literal562);
            adaptor.addChild(root_0, string_literal562_tree);
            }
            TOKEN563=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia2725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN563_tree = (Object)adaptor.create(TOKEN563);
            adaptor.addChild(root_0, TOKEN563_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal564=null;
        Token TOKEN565=null;

        Object string_literal564_tree=null;
        Object TOKEN565_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:5: ( 'IN-OF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal564=(Token)match(input,27,FOLLOW_27_in_inof2730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal564_tree = (Object)adaptor.create(string_literal564);
            adaptor.addChild(root_0, string_literal564_tree);
            }
            TOKEN565=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof2732); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN565_tree = (Object)adaptor.create(TOKEN565);
            adaptor.addChild(root_0, TOKEN565_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal566=null;
        Token TOKEN567=null;

        Object string_literal566_tree=null;
        Object TOKEN567_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:5: ( 'IN-ON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal566=(Token)match(input,28,FOLLOW_28_in_inon2737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal566_tree = (Object)adaptor.create(string_literal566);
            adaptor.addChild(root_0, string_literal566_tree);
            }
            TOKEN567=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon2739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN567_tree = (Object)adaptor.create(TOKEN567);
            adaptor.addChild(root_0, TOKEN567_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal568=null;
        Token TOKEN569=null;

        Object string_literal568_tree=null;
        Object TOKEN569_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:6: ( 'IN-FOR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal568=(Token)match(input,29,FOLLOW_29_in_infor2744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal568_tree = (Object)adaptor.create(string_literal568);
            adaptor.addChild(root_0, string_literal568_tree);
            }
            TOKEN569=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor2746); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN569_tree = (Object)adaptor.create(TOKEN569);
            adaptor.addChild(root_0, TOKEN569_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal570=null;
        Token TOKEN571=null;

        Object string_literal570_tree=null;
        Object TOKEN571_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:7: ( 'IN-FROM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal570=(Token)match(input,30,FOLLOW_30_in_infrom2751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal570_tree = (Object)adaptor.create(string_literal570);
            adaptor.addChild(root_0, string_literal570_tree);
            }
            TOKEN571=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom2753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN571_tree = (Object)adaptor.create(TOKEN571);
            adaptor.addChild(root_0, TOKEN571_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal572=null;
        Token TOKEN573=null;

        Object string_literal572_tree=null;
        Object TOKEN573_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:8: ( 'IN-UNDER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal572=(Token)match(input,31,FOLLOW_31_in_inunder2758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal572_tree = (Object)adaptor.create(string_literal572);
            adaptor.addChild(root_0, string_literal572_tree);
            }
            TOKEN573=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder2760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN573_tree = (Object)adaptor.create(TOKEN573);
            adaptor.addChild(root_0, TOKEN573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal574=null;
        Token TOKEN575=null;

        Object string_literal574_tree=null;
        Object TOKEN575_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:7: ( 'IN-OVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal574=(Token)match(input,32,FOLLOW_32_in_inover2765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal574_tree = (Object)adaptor.create(string_literal574);
            adaptor.addChild(root_0, string_literal574_tree);
            }
            TOKEN575=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover2767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN575_tree = (Object)adaptor.create(TOKEN575);
            adaptor.addChild(root_0, TOKEN575_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal576=null;
        Token TOKEN577=null;

        Object string_literal576_tree=null;
        Object TOKEN577_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:6: ( 'IN-OFF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal576=(Token)match(input,33,FOLLOW_33_in_inoff2772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal576_tree = (Object)adaptor.create(string_literal576);
            adaptor.addChild(root_0, string_literal576_tree);
            }
            TOKEN577=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff2774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN577_tree = (Object)adaptor.create(TOKEN577);
            adaptor.addChild(root_0, TOKEN577_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:1: nnexample : 'NN-EXAMPLE' TOKEN ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal578=null;
        Token TOKEN579=null;

        Object string_literal578_tree=null;
        Object TOKEN579_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:10: ( 'NN-EXAMPLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:11: 'NN-EXAMPLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal578=(Token)match(input,34,FOLLOW_34_in_nnexample2781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal578_tree = (Object)adaptor.create(string_literal578);
            adaptor.addChild(root_0, string_literal578_tree);
            }
            TOKEN579=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample2783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN579_tree = (Object)adaptor.create(TOKEN579);
            adaptor.addChild(root_0, TOKEN579_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal580=null;
        Token TOKEN581=null;

        Object string_literal580_tree=null;
        Object TOKEN581_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:8: ( 'NN-STATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal580=(Token)match(input,35,FOLLOW_35_in_nnstate2788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = (Object)adaptor.create(string_literal580);
            adaptor.addChild(root_0, string_literal580_tree);
            }
            TOKEN581=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate2790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN581_tree = (Object)adaptor.create(TOKEN581);
            adaptor.addChild(root_0, TOKEN581_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal582=null;
        Token TOKEN583=null;

        Object string_literal582_tree=null;
        Object TOKEN583_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:7: ( 'NN-TIME' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal582=(Token)match(input,36,FOLLOW_36_in_nntime2795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal582_tree = (Object)adaptor.create(string_literal582);
            adaptor.addChild(root_0, string_literal582_tree);
            }
            TOKEN583=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime2797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN583_tree = (Object)adaptor.create(TOKEN583);
            adaptor.addChild(root_0, TOKEN583_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:1: nnmass : 'NN-MASS' TOKEN ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal584=null;
        Token TOKEN585=null;

        Object string_literal584_tree=null;
        Object TOKEN585_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:7: ( 'NN-MASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:8: 'NN-MASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal584=(Token)match(input,37,FOLLOW_37_in_nnmass2802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal584_tree = (Object)adaptor.create(string_literal584);
            adaptor.addChild(root_0, string_literal584_tree);
            }
            TOKEN585=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass2804); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN585_tree = (Object)adaptor.create(TOKEN585);
            adaptor.addChild(root_0, TOKEN585_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:1: nnmolar : 'NN-MOLAR' TOKEN ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal586=null;
        Token TOKEN587=null;

        Object string_literal586_tree=null;
        Object TOKEN587_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:8: ( 'NN-MOLAR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:10: 'NN-MOLAR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal586=(Token)match(input,38,FOLLOW_38_in_nnmolar2810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = (Object)adaptor.create(string_literal586);
            adaptor.addChild(root_0, string_literal586_tree);
            }
            TOKEN587=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar2813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN587_tree = (Object)adaptor.create(TOKEN587);
            adaptor.addChild(root_0, TOKEN587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal588=null;
        Token TOKEN589=null;

        Object string_literal588_tree=null;
        Object TOKEN589_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:9: ( 'NN-AMOUNT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal588=(Token)match(input,39,FOLLOW_39_in_nnamount2818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal588_tree = (Object)adaptor.create(string_literal588);
            adaptor.addChild(root_0, string_literal588_tree);
            }
            TOKEN589=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount2820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN589_tree = (Object)adaptor.create(TOKEN589);
            adaptor.addChild(root_0, TOKEN589_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal590=null;
        Token TOKEN591=null;

        Object string_literal590_tree=null;
        Object TOKEN591_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:13: ( 'NN-ATMOSPHERE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal590=(Token)match(input,40,FOLLOW_40_in_nnatmosphere2825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal590_tree = (Object)adaptor.create(string_literal590);
            adaptor.addChild(root_0, string_literal590_tree);
            }
            TOKEN591=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere2827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN591_tree = (Object)adaptor.create(TOKEN591);
            adaptor.addChild(root_0, TOKEN591_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal592=null;
        Token TOKEN593=null;

        Object string_literal592_tree=null;
        Object TOKEN593_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:5: ( 'NN-EQ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal592=(Token)match(input,41,FOLLOW_41_in_nneq2832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = (Object)adaptor.create(string_literal592);
            adaptor.addChild(root_0, string_literal592_tree);
            }
            TOKEN593=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq2834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN593_tree = (Object)adaptor.create(TOKEN593);
            adaptor.addChild(root_0, TOKEN593_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal594=null;
        Token TOKEN595=null;

        Object string_literal594_tree=null;
        Object TOKEN595_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:6: ( 'NN-VOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal594=(Token)match(input,42,FOLLOW_42_in_nnvol2839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal594_tree = (Object)adaptor.create(string_literal594);
            adaptor.addChild(root_0, string_literal594_tree);
            }
            TOKEN595=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol2841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN595_tree = (Object)adaptor.create(TOKEN595);
            adaptor.addChild(root_0, TOKEN595_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal596=null;
        Token TOKEN597=null;

        Object string_literal596_tree=null;
        Object TOKEN597_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:13: ( 'NN-CHEMENTITY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal596=(Token)match(input,43,FOLLOW_43_in_nnchementity2846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal596_tree = (Object)adaptor.create(string_literal596);
            adaptor.addChild(root_0, string_literal596_tree);
            }
            TOKEN597=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity2848); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN597_tree = (Object)adaptor.create(TOKEN597);
            adaptor.addChild(root_0, TOKEN597_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal598=null;
        Token TOKEN599=null;

        Object string_literal598_tree=null;
        Object TOKEN599_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:7: ( 'NN-TEMP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal598=(Token)match(input,44,FOLLOW_44_in_nntemp2853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal598_tree = (Object)adaptor.create(string_literal598);
            adaptor.addChild(root_0, string_literal598_tree);
            }
            TOKEN599=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp2855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN599_tree = (Object)adaptor.create(TOKEN599);
            adaptor.addChild(root_0, TOKEN599_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal600=null;
        Token TOKEN601=null;

        Object string_literal600_tree=null;
        Object TOKEN601_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:8: ( 'NN-FLASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal600=(Token)match(input,45,FOLLOW_45_in_nnflash2860); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = (Object)adaptor.create(string_literal600);
            adaptor.addChild(root_0, string_literal600_tree);
            }
            TOKEN601=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash2862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN601_tree = (Object)adaptor.create(TOKEN601);
            adaptor.addChild(root_0, TOKEN601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal602=null;
        Token TOKEN603=null;

        Object string_literal602_tree=null;
        Object TOKEN603_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:10: ( 'NN-GENERAL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal602=(Token)match(input,46,FOLLOW_46_in_nngeneral2867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal602_tree = (Object)adaptor.create(string_literal602);
            adaptor.addChild(root_0, string_literal602_tree);
            }
            TOKEN603=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral2869); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN603_tree = (Object)adaptor.create(TOKEN603);
            adaptor.addChild(root_0, TOKEN603_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal604=null;
        Token TOKEN605=null;

        Object string_literal604_tree=null;
        Object TOKEN605_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:9: ( 'NN-METHOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal604=(Token)match(input,47,FOLLOW_47_in_nnmethod2874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal604_tree = (Object)adaptor.create(string_literal604);
            adaptor.addChild(root_0, string_literal604_tree);
            }
            TOKEN605=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod2876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN605_tree = (Object)adaptor.create(TOKEN605);
            adaptor.addChild(root_0, TOKEN605_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal606=null;
        Token TOKEN607=null;

        Object string_literal606_tree=null;
        Object TOKEN607_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:11: ( 'NN-PRESSURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal606=(Token)match(input,48,FOLLOW_48_in_nnpressure2882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = (Object)adaptor.create(string_literal606);
            adaptor.addChild(root_0, string_literal606_tree);
            }
            TOKEN607=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure2884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN607_tree = (Object)adaptor.create(TOKEN607);
            adaptor.addChild(root_0, TOKEN607_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal608=null;
        Token TOKEN609=null;

        Object string_literal608_tree=null;
        Object TOKEN609_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:9: ( 'NN-COLUMN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal608=(Token)match(input,49,FOLLOW_49_in_nncolumn2889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = (Object)adaptor.create(string_literal608);
            adaptor.addChild(root_0, string_literal608_tree);
            }
            TOKEN609=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn2891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN609_tree = (Object)adaptor.create(TOKEN609);
            adaptor.addChild(root_0, TOKEN609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal610=null;
        Token TOKEN611=null;

        Object string_literal610_tree=null;
        Object TOKEN611_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal610=(Token)match(input,50,FOLLOW_50_in_nnchromatography2896); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            TOKEN611=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography2898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN611_tree = (Object)adaptor.create(TOKEN611);
            adaptor.addChild(root_0, TOKEN611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal612=null;
        Token TOKEN613=null;

        Object string_literal612_tree=null;
        Object TOKEN613_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:9: ( 'NN-VACUUM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal612=(Token)match(input,51,FOLLOW_51_in_nnvacuum2903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal612_tree = (Object)adaptor.create(string_literal612);
            adaptor.addChild(root_0, string_literal612_tree);
            }
            TOKEN613=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum2905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN613_tree = (Object)adaptor.create(TOKEN613);
            adaptor.addChild(root_0, TOKEN613_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal614=null;
        Token TOKEN615=null;

        Object string_literal614_tree=null;
        Object TOKEN615_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:8: ( 'NN-CYCLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal614=(Token)match(input,52,FOLLOW_52_in_nncycle2910); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal614_tree = (Object)adaptor.create(string_literal614);
            adaptor.addChild(root_0, string_literal614_tree);
            }
            TOKEN615=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle2912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN615_tree = (Object)adaptor.create(TOKEN615);
            adaptor.addChild(root_0, TOKEN615_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal616=null;
        Token TOKEN617=null;

        Object string_literal616_tree=null;
        Object TOKEN617_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:8: ( 'NN-TIMES' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal616=(Token)match(input,53,FOLLOW_53_in_nntimes2917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal616_tree = (Object)adaptor.create(string_literal616);
            adaptor.addChild(root_0, string_literal616_tree);
            }
            TOKEN617=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes2919); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN617_tree = (Object)adaptor.create(TOKEN617);
            adaptor.addChild(root_0, TOKEN617_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal618=null;
        Token TOKEN619=null;

        Object string_literal618_tree=null;
        Object TOKEN619_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:8: ( 'OSCAR-CM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal618=(Token)match(input,54,FOLLOW_54_in_oscarcm2926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal618_tree = (Object)adaptor.create(string_literal618);
            adaptor.addChild(root_0, string_literal618_tree);
            }
            TOKEN619=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm2928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN619_tree = (Object)adaptor.create(TOKEN619);
            adaptor.addChild(root_0, TOKEN619_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal620=null;
        Token TOKEN621=null;

        Object string_literal620_tree=null;
        Object TOKEN621_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:6: ( 'VB-USE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal620=(Token)match(input,55,FOLLOW_55_in_vbuse2935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal620_tree = (Object)adaptor.create(string_literal620);
            adaptor.addChild(root_0, string_literal620_tree);
            }
            TOKEN621=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse2937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN621_tree = (Object)adaptor.create(TOKEN621);
            adaptor.addChild(root_0, TOKEN621_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal622=null;
        Token TOKEN623=null;

        Object string_literal622_tree=null;
        Object TOKEN623_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:9: ( 'VB-CHANGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal622=(Token)match(input,56,FOLLOW_56_in_vbchange2942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal622_tree = (Object)adaptor.create(string_literal622);
            adaptor.addChild(root_0, string_literal622_tree);
            }
            TOKEN623=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange2944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN623_tree = (Object)adaptor.create(TOKEN623);
            adaptor.addChild(root_0, TOKEN623_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal624=null;
        Token TOKEN625=null;

        Object string_literal624_tree=null;
        Object TOKEN625_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:11: ( 'VB-SUBMERGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal624=(Token)match(input,57,FOLLOW_57_in_vbsubmerge2949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal624_tree = (Object)adaptor.create(string_literal624);
            adaptor.addChild(root_0, string_literal624_tree);
            }
            TOKEN625=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge2951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN625_tree = (Object)adaptor.create(TOKEN625);
            adaptor.addChild(root_0, TOKEN625_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal626=null;
        Token TOKEN627=null;

        Object string_literal626_tree=null;
        Object TOKEN627_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:10: ( 'VB-SUBJECT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal626=(Token)match(input,58,FOLLOW_58_in_vbsubject2956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal626_tree = (Object)adaptor.create(string_literal626);
            adaptor.addChild(root_0, string_literal626_tree);
            }
            TOKEN627=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject2958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN627_tree = (Object)adaptor.create(TOKEN627);
            adaptor.addChild(root_0, TOKEN627_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal628=null;
        Token TOKEN629=null;

        Object string_literal628_tree=null;
        Object TOKEN629_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:6: ( 'NN-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal628=(Token)match(input,59,FOLLOW_59_in_nnadd2965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal628_tree = (Object)adaptor.create(string_literal628);
            adaptor.addChild(root_0, string_literal628_tree);
            }
            TOKEN629=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd2967); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN629_tree = (Object)adaptor.create(TOKEN629);
            adaptor.addChild(root_0, TOKEN629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal630=null;
        Token TOKEN631=null;

        Object string_literal630_tree=null;
        Object TOKEN631_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:10: ( 'NN-MIXTURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:281:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal630=(Token)match(input,60,FOLLOW_60_in_nnmixture2972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal630_tree = (Object)adaptor.create(string_literal630);
            adaptor.addChild(root_0, string_literal630_tree);
            }
            TOKEN631=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture2974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN631_tree = (Object)adaptor.create(TOKEN631);
            adaptor.addChild(root_0, TOKEN631_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal632=null;
        Token TOKEN633=null;

        Object string_literal632_tree=null;
        Object TOKEN633_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:6: ( 'VB-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal632=(Token)match(input,61,FOLLOW_61_in_vbadd2979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal632_tree = (Object)adaptor.create(string_literal632);
            adaptor.addChild(root_0, string_literal632_tree);
            }
            TOKEN633=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd2981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN633_tree = (Object)adaptor.create(TOKEN633);
            adaptor.addChild(root_0, TOKEN633_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal634=null;
        Token TOKEN635=null;

        Object string_literal634_tree=null;
        Object TOKEN635_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:9: ( 'VB-CHARGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal634=(Token)match(input,62,FOLLOW_62_in_vbcharge2986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal634_tree = (Object)adaptor.create(string_literal634);
            adaptor.addChild(root_0, string_literal634_tree);
            }
            TOKEN635=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge2988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN635_tree = (Object)adaptor.create(TOKEN635);
            adaptor.addChild(root_0, TOKEN635_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal636=null;
        Token TOKEN637=null;

        Object string_literal636_tree=null;
        Object TOKEN637_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:10: ( 'VB-CONTAIN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal636=(Token)match(input,63,FOLLOW_63_in_vbcontain2993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal636_tree = (Object)adaptor.create(string_literal636);
            adaptor.addChild(root_0, string_literal636_tree);
            }
            TOKEN637=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain2995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN637_tree = (Object)adaptor.create(TOKEN637);
            adaptor.addChild(root_0, TOKEN637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal638=null;
        Token TOKEN639=null;

        Object string_literal638_tree=null;
        Object TOKEN639_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:7: ( 'VB-DROP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal638=(Token)match(input,64,FOLLOW_64_in_vbdrop3000); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal638_tree = (Object)adaptor.create(string_literal638);
            adaptor.addChild(root_0, string_literal638_tree);
            }
            TOKEN639=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN639_tree = (Object)adaptor.create(TOKEN639);
            adaptor.addChild(root_0, TOKEN639_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal640=null;
        Token TOKEN641=null;

        Object string_literal640_tree=null;
        Object TOKEN641_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:7: ( 'VB-FILL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal640=(Token)match(input,65,FOLLOW_65_in_vbfill3007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal640_tree = (Object)adaptor.create(string_literal640);
            adaptor.addChild(root_0, string_literal640_tree);
            }
            TOKEN641=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN641_tree = (Object)adaptor.create(TOKEN641);
            adaptor.addChild(root_0, TOKEN641_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal642=null;
        Token TOKEN643=null;

        Object string_literal642_tree=null;
        Object TOKEN643_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:10: ( 'VB-SUSPEND' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal642=(Token)match(input,66,FOLLOW_66_in_vbsuspend3014); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal642_tree = (Object)adaptor.create(string_literal642);
            adaptor.addChild(root_0, string_literal642_tree);
            }
            TOKEN643=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3016); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN643_tree = (Object)adaptor.create(TOKEN643);
            adaptor.addChild(root_0, TOKEN643_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal644=null;
        Token TOKEN645=null;

        Object string_literal644_tree=null;
        Object TOKEN645_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:8: ( 'VB-TREAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal644=(Token)match(input,67,FOLLOW_67_in_vbtreat3021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal644_tree = (Object)adaptor.create(string_literal644);
            adaptor.addChild(root_0, string_literal644_tree);
            }
            TOKEN645=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3023); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN645_tree = (Object)adaptor.create(TOKEN645);
            adaptor.addChild(root_0, TOKEN645_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal646=null;
        Token TOKEN647=null;

        Object string_literal646_tree=null;
        Object TOKEN647_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:12: ( 'VB-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal646=(Token)match(input,68,FOLLOW_68_in_vbapparatus3030); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal646_tree = (Object)adaptor.create(string_literal646);
            adaptor.addChild(root_0, string_literal646_tree);
            }
            TOKEN647=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN647_tree = (Object)adaptor.create(TOKEN647);
            adaptor.addChild(root_0, TOKEN647_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:12: ( 'NN-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal648=(Token)match(input,69,FOLLOW_69_in_nnapparatus3037); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal648_tree = (Object)adaptor.create(string_literal648);
            adaptor.addChild(root_0, string_literal648_tree);
            }
            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus3039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN649_tree = (Object)adaptor.create(TOKEN649);
            adaptor.addChild(root_0, TOKEN649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:14: ( 'VB-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal650=(Token)match(input,70,FOLLOW_70_in_vbconcentrate3046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal650_tree = (Object)adaptor.create(string_literal650);
            adaptor.addChild(root_0, string_literal650_tree);
            }
            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate3048); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN651_tree = (Object)adaptor.create(TOKEN651);
            adaptor.addChild(root_0, TOKEN651_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:14: ( 'NN-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal652=(Token)match(input,71,FOLLOW_71_in_nnconcentrate3053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal652_tree = (Object)adaptor.create(string_literal652);
            adaptor.addChild(root_0, string_literal652_tree);
            }
            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate3055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN653_tree = (Object)adaptor.create(TOKEN653);
            adaptor.addChild(root_0, TOKEN653_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:7: ( 'VB-COOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal654=(Token)match(input,72,FOLLOW_72_in_vbcool3062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal654_tree = (Object)adaptor.create(string_literal654);
            adaptor.addChild(root_0, string_literal654_tree);
            }
            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool3064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN655_tree = (Object)adaptor.create(TOKEN655);
            adaptor.addChild(root_0, TOKEN655_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:9: ( 'VB-DEGASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal656=(Token)match(input,73,FOLLOW_73_in_vbdegass3071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal656_tree = (Object)adaptor.create(string_literal656);
            adaptor.addChild(root_0, string_literal656_tree);
            }
            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass3073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN657_tree = (Object)adaptor.create(TOKEN657);
            adaptor.addChild(root_0, TOKEN657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:11: ( 'VB-DISSOLVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal658=(Token)match(input,74,FOLLOW_74_in_vbdissolve3080); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal658_tree = (Object)adaptor.create(string_literal658);
            adaptor.addChild(root_0, string_literal658_tree);
            }
            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve3082); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN659_tree = (Object)adaptor.create(TOKEN659);
            adaptor.addChild(root_0, TOKEN659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:6: ( 'VB-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal660=(Token)match(input,75,FOLLOW_75_in_vbdry3089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal660_tree = (Object)adaptor.create(string_literal660);
            adaptor.addChild(root_0, string_literal660_tree);
            }
            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry3091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN661_tree = (Object)adaptor.create(TOKEN661);
            adaptor.addChild(root_0, TOKEN661_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:6: ( 'NN-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal662=(Token)match(input,76,FOLLOW_76_in_nndry3096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal662_tree = (Object)adaptor.create(string_literal662);
            adaptor.addChild(root_0, string_literal662_tree);
            }
            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry3098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN663_tree = (Object)adaptor.create(TOKEN663);
            adaptor.addChild(root_0, TOKEN663_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:10: ( 'VB-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal664=(Token)match(input,77,FOLLOW_77_in_vbextract3105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal664_tree = (Object)adaptor.create(string_literal664);
            adaptor.addChild(root_0, string_literal664_tree);
            }
            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract3107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN665_tree = (Object)adaptor.create(TOKEN665);
            adaptor.addChild(root_0, TOKEN665_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:10: ( 'NN-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal666=(Token)match(input,78,FOLLOW_78_in_nnextract3112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal666_tree = (Object)adaptor.create(string_literal666);
            adaptor.addChild(root_0, string_literal666_tree);
            }
            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract3114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN667_tree = (Object)adaptor.create(TOKEN667);
            adaptor.addChild(root_0, TOKEN667_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:9: ( 'VB-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal668=(Token)match(input,79,FOLLOW_79_in_vbfilter3121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal668_tree = (Object)adaptor.create(string_literal668);
            adaptor.addChild(root_0, string_literal668_tree);
            }
            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter3123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN669_tree = (Object)adaptor.create(TOKEN669);
            adaptor.addChild(root_0, TOKEN669_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:9: ( 'NN-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal670=(Token)match(input,80,FOLLOW_80_in_nnfilter3128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal670_tree = (Object)adaptor.create(string_literal670);
            adaptor.addChild(root_0, string_literal670_tree);
            }
            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter3130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN671_tree = (Object)adaptor.create(TOKEN671);
            adaptor.addChild(root_0, TOKEN671_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:7: ( 'VB-HEAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal672=(Token)match(input,81,FOLLOW_81_in_vbheat3137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal672_tree = (Object)adaptor.create(string_literal672);
            adaptor.addChild(root_0, string_literal672_tree);
            }
            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat3139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN673_tree = (Object)adaptor.create(TOKEN673);
            adaptor.addChild(root_0, TOKEN673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:321:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:321:11: ( 'VB-INCREASE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:321:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal674=(Token)match(input,82,FOLLOW_82_in_vbincrease3144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal674_tree = (Object)adaptor.create(string_literal674);
            adaptor.addChild(root_0, string_literal674_tree);
            }
            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease3146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN675_tree = (Object)adaptor.create(TOKEN675);
            adaptor.addChild(root_0, TOKEN675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:324:1: vbimmerse : 'VB-IMMERSE' TOKEN ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal676=null;
        Token TOKEN677=null;

        Object string_literal676_tree=null;
        Object TOKEN677_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:2: ( 'VB-IMMERSE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:4: 'VB-IMMERSE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal676=(Token)match(input,83,FOLLOW_83_in_vbimmerse3156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal676_tree = (Object)adaptor.create(string_literal676);
            adaptor.addChild(root_0, string_literal676_tree);
            }
            TOKEN677=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse3159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN677_tree = (Object)adaptor.create(TOKEN677);
            adaptor.addChild(root_0, TOKEN677_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:327:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal678=null;
        Token TOKEN679=null;

        Object string_literal678_tree=null;
        Object TOKEN679_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:327:12: ( 'VB-PARTITION' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:327:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal678=(Token)match(input,84,FOLLOW_84_in_vbpartition3165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal678_tree = (Object)adaptor.create(string_literal678);
            adaptor.addChild(root_0, string_literal678_tree);
            }
            TOKEN679=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition3167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN679_tree = (Object)adaptor.create(TOKEN679);
            adaptor.addChild(root_0, TOKEN679_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:330:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal680=null;
        Token TOKEN681=null;

        Object string_literal680_tree=null;
        Object TOKEN681_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:330:14: ( 'VB-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:330:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal680=(Token)match(input,85,FOLLOW_85_in_vbprecipitate3174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal680_tree = (Object)adaptor.create(string_literal680);
            adaptor.addChild(root_0, string_literal680_tree);
            }
            TOKEN681=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate3176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN681_tree = (Object)adaptor.create(TOKEN681);
            adaptor.addChild(root_0, TOKEN681_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal682=null;
        Token TOKEN683=null;

        Object string_literal682_tree=null;
        Object TOKEN683_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:14: ( 'NN-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal682=(Token)match(input,86,FOLLOW_86_in_nnprecipitate3181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal682_tree = (Object)adaptor.create(string_literal682);
            adaptor.addChild(root_0, string_literal682_tree);
            }
            TOKEN683=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate3183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN683_tree = (Object)adaptor.create(TOKEN683);
            adaptor.addChild(root_0, TOKEN683_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal684=null;
        Token TOKEN685=null;

        Object string_literal684_tree=null;
        Object TOKEN685_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:9: ( 'VB-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal684=(Token)match(input,87,FOLLOW_87_in_vbpurify3190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal684_tree = (Object)adaptor.create(string_literal684);
            adaptor.addChild(root_0, string_literal684_tree);
            }
            TOKEN685=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify3192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN685_tree = (Object)adaptor.create(TOKEN685);
            adaptor.addChild(root_0, TOKEN685_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal686=null;
        Token TOKEN687=null;

        Object string_literal686_tree=null;
        Object TOKEN687_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:9: ( 'NN-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal686=(Token)match(input,88,FOLLOW_88_in_nnpurify3197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal686_tree = (Object)adaptor.create(string_literal686);
            adaptor.addChild(root_0, string_literal686_tree);
            }
            TOKEN687=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify3199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN687_tree = (Object)adaptor.create(TOKEN687);
            adaptor.addChild(root_0, TOKEN687_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal688=null;
        Token TOKEN689=null;

        Object string_literal688_tree=null;
        Object TOKEN689_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:9: ( 'VB-QUENCH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal688=(Token)match(input,89,FOLLOW_89_in_vbquench3206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal688_tree = (Object)adaptor.create(string_literal688);
            adaptor.addChild(root_0, string_literal688_tree);
            }
            TOKEN689=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench3208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN689_tree = (Object)adaptor.create(TOKEN689);
            adaptor.addChild(root_0, TOKEN689_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal690=null;
        Token TOKEN691=null;

        Object string_literal690_tree=null;
        Object TOKEN691_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:10: ( 'VB-RECOVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal690=(Token)match(input,90,FOLLOW_90_in_vbrecover3215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal690_tree = (Object)adaptor.create(string_literal690);
            adaptor.addChild(root_0, string_literal690_tree);
            }
            TOKEN691=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover3217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN691_tree = (Object)adaptor.create(TOKEN691);
            adaptor.addChild(root_0, TOKEN691_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal692=null;
        Token TOKEN693=null;

        Object string_literal692_tree=null;
        Object TOKEN693_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:9: ( 'VB-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal692=(Token)match(input,91,FOLLOW_91_in_vbremove3224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal692_tree = (Object)adaptor.create(string_literal692);
            adaptor.addChild(root_0, string_literal692_tree);
            }
            TOKEN693=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove3226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN693_tree = (Object)adaptor.create(TOKEN693);
            adaptor.addChild(root_0, TOKEN693_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:345:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal694=null;
        Token TOKEN695=null;

        Object string_literal694_tree=null;
        Object TOKEN695_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:345:9: ( 'NN-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:345:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal694=(Token)match(input,92,FOLLOW_92_in_nnremove3231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal694_tree = (Object)adaptor.create(string_literal694);
            adaptor.addChild(root_0, string_literal694_tree);
            }
            TOKEN695=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove3233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN695_tree = (Object)adaptor.create(TOKEN695);
            adaptor.addChild(root_0, TOKEN695_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:348:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal696=null;
        Token TOKEN697=null;

        Object string_literal696_tree=null;
        Object TOKEN697_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:348:7: ( 'VB-STIR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:348:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal696=(Token)match(input,93,FOLLOW_93_in_vbstir3240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal696_tree = (Object)adaptor.create(string_literal696);
            adaptor.addChild(root_0, string_literal696_tree);
            }
            TOKEN697=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir3242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN697_tree = (Object)adaptor.create(TOKEN697);
            adaptor.addChild(root_0, TOKEN697_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:351:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:351:13: ( 'VB-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:351:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal698=(Token)match(input,94,FOLLOW_94_in_vbsynthesize3249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal698_tree = (Object)adaptor.create(string_literal698);
            adaptor.addChild(root_0, string_literal698_tree);
            }
            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize3251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN699_tree = (Object)adaptor.create(TOKEN699);
            adaptor.addChild(root_0, TOKEN699_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:13: ( 'NN-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal700=(Token)match(input,95,FOLLOW_95_in_nnsynthesize3256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal700_tree = (Object)adaptor.create(string_literal700);
            adaptor.addChild(root_0, string_literal700_tree);
            }
            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize3258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN701_tree = (Object)adaptor.create(TOKEN701);
            adaptor.addChild(root_0, TOKEN701_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:7: ( 'VB-WAIT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal702=(Token)match(input,96,FOLLOW_96_in_vbwait3265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal702_tree = (Object)adaptor.create(string_literal702);
            adaptor.addChild(root_0, string_literal702_tree);
            }
            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait3267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN703_tree = (Object)adaptor.create(TOKEN703);
            adaptor.addChild(root_0, TOKEN703_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:7: ( 'VB-WASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal704=(Token)match(input,97,FOLLOW_97_in_vbwash3274); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal704_tree = (Object)adaptor.create(string_literal704);
            adaptor.addChild(root_0, string_literal704_tree);
            }
            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash3276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN705_tree = (Object)adaptor.create(TOKEN705);
            adaptor.addChild(root_0, TOKEN705_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:8: ( 'VB-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal706=(Token)match(input,98,FOLLOW_98_in_vbyield3283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal706_tree = (Object)adaptor.create(string_literal706);
            adaptor.addChild(root_0, string_literal706_tree);
            }
            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield3285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN707_tree = (Object)adaptor.create(TOKEN707);
            adaptor.addChild(root_0, TOKEN707_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:1: nnyield : 'NN-YIELD' TOKEN ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:8: ( 'NN-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:9: 'NN-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal708=(Token)match(input,99,FOLLOW_99_in_nnyield3292); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal708_tree = (Object)adaptor.create(string_literal708);
            adaptor.addChild(root_0, string_literal708_tree);
            }
            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield3294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN709_tree = (Object)adaptor.create(TOKEN709);
            adaptor.addChild(root_0, TOKEN709_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:366:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:366:6: ( 'COLON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:366:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal710=(Token)match(input,100,FOLLOW_100_in_colon3300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal710_tree = (Object)adaptor.create(string_literal710);
            adaptor.addChild(root_0, string_literal710_tree);
            }
            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon3302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN711_tree = (Object)adaptor.create(TOKEN711);
            adaptor.addChild(root_0, TOKEN711_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:6: ( 'COMMA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal712=(Token)match(input,101,FOLLOW_101_in_comma3307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal712_tree = (Object)adaptor.create(string_literal712);
            adaptor.addChild(root_0, string_literal712_tree);
            }
            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma3309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN713_tree = (Object)adaptor.create(TOKEN713);
            adaptor.addChild(root_0, TOKEN713_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:6: ( 'APOST' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:368:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal714=(Token)match(input,102,FOLLOW_102_in_apost3314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal714_tree = (Object)adaptor.create(string_literal714);
            adaptor.addChild(root_0, string_literal714_tree);
            }
            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost3316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN715_tree = (Object)adaptor.create(TOKEN715);
            adaptor.addChild(root_0, TOKEN715_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:369:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:369:4: ( 'NEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:369:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal716=(Token)match(input,103,FOLLOW_103_in_neg3321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal716_tree = (Object)adaptor.create(string_literal716);
            adaptor.addChild(root_0, string_literal716_tree);
            }
            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg3323); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN717_tree = (Object)adaptor.create(TOKEN717);
            adaptor.addChild(root_0, TOKEN717_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:5: ( 'DASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal718=(Token)match(input,104,FOLLOW_104_in_dash3328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal718_tree = (Object)adaptor.create(string_literal718);
            adaptor.addChild(root_0, string_literal718_tree);
            }
            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash3330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN719_tree = (Object)adaptor.create(TOKEN719);
            adaptor.addChild(root_0, TOKEN719_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:5: ( 'STOP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:371:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal720=(Token)match(input,105,FOLLOW_105_in_stop3335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal720_tree = (Object)adaptor.create(string_literal720);
            adaptor.addChild(root_0, string_literal720_tree);
            }
            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop3337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN721_tree = (Object)adaptor.create(TOKEN721);
            adaptor.addChild(root_0, TOKEN721_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:372:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:372:10: ( 'NN-PERCENT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:372:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal722=(Token)match(input,106,FOLLOW_106_in_nnpercent3342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal722_tree = (Object)adaptor.create(string_literal722);
            adaptor.addChild(root_0, string_literal722_tree);
            }
            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent3344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN723_tree = (Object)adaptor.create(TOKEN723);
            adaptor.addChild(root_0, TOKEN723_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:5: ( 'LSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal724=(Token)match(input,107,FOLLOW_107_in_lsqb3349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal724_tree = (Object)adaptor.create(string_literal724);
            adaptor.addChild(root_0, string_literal724_tree);
            }
            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb3351); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN725_tree = (Object)adaptor.create(TOKEN725);
            adaptor.addChild(root_0, TOKEN725_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:5: ( 'RSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:374:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal726=(Token)match(input,108,FOLLOW_108_in_rsqb3356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal726_tree = (Object)adaptor.create(string_literal726);
            adaptor.addChild(root_0, string_literal726_tree);
            }
            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb3358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN727_tree = (Object)adaptor.create(TOKEN727);
            adaptor.addChild(root_0, TOKEN727_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:4: ( '-LRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal728=(Token)match(input,109,FOLLOW_109_in_lrb3364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal728_tree = (Object)adaptor.create(string_literal728);
            adaptor.addChild(root_0, string_literal728_tree);
            }
            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb3366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN729_tree = (Object)adaptor.create(TOKEN729);
            adaptor.addChild(root_0, TOKEN729_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:4: ( '-RRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:377:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal730=(Token)match(input,110,FOLLOW_110_in_rrb3371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal730_tree = (Object)adaptor.create(string_literal730);
            adaptor.addChild(root_0, string_literal730_tree);
            }
            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb3373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN731_tree = (Object)adaptor.create(TOKEN731);
            adaptor.addChild(root_0, TOKEN731_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:4: ( 'ABL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal732=(Token)match(input,111,FOLLOW_111_in_abl3382); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal732_tree = (Object)adaptor.create(string_literal732);
            adaptor.addChild(root_0, string_literal732_tree);
            }
            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl3384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN733_tree = (Object)adaptor.create(TOKEN733);
            adaptor.addChild(root_0, TOKEN733_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:4: ( 'ABN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal734=(Token)match(input,112,FOLLOW_112_in_abn3391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal734_tree = (Object)adaptor.create(string_literal734);
            adaptor.addChild(root_0, string_literal734_tree);
            }
            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn3393); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN735_tree = (Object)adaptor.create(TOKEN735);
            adaptor.addChild(root_0, TOKEN735_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:4: ( 'ABX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal736=(Token)match(input,113,FOLLOW_113_in_abx3400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal736_tree = (Object)adaptor.create(string_literal736);
            adaptor.addChild(root_0, string_literal736_tree);
            }
            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx3402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN737_tree = (Object)adaptor.create(TOKEN737);
            adaptor.addChild(root_0, TOKEN737_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:3: ( 'AP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal738=(Token)match(input,114,FOLLOW_114_in_ap3409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal738_tree = (Object)adaptor.create(string_literal738);
            adaptor.addChild(root_0, string_literal738_tree);
            }
            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap3411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN739_tree = (Object)adaptor.create(TOKEN739);
            adaptor.addChild(root_0, TOKEN739_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:3: ( 'AT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal740=(Token)match(input,115,FOLLOW_115_in_at3418); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal740_tree = (Object)adaptor.create(string_literal740);
            adaptor.addChild(root_0, string_literal740_tree);
            }
            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at3420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN741_tree = (Object)adaptor.create(TOKEN741);
            adaptor.addChild(root_0, TOKEN741_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:3: ( 'BE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal742=(Token)match(input,116,FOLLOW_116_in_be3427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal742_tree = (Object)adaptor.create(string_literal742);
            adaptor.addChild(root_0, string_literal742_tree);
            }
            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be3429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN743_tree = (Object)adaptor.create(TOKEN743);
            adaptor.addChild(root_0, TOKEN743_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:4: ( 'BED' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal744=(Token)match(input,117,FOLLOW_117_in_bed3436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal744_tree = (Object)adaptor.create(string_literal744);
            adaptor.addChild(root_0, string_literal744_tree);
            }
            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed3438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN745_tree = (Object)adaptor.create(TOKEN745);
            adaptor.addChild(root_0, TOKEN745_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:5: ( 'BEDZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal746=(Token)match(input,118,FOLLOW_118_in_bedz3445); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal746_tree = (Object)adaptor.create(string_literal746);
            adaptor.addChild(root_0, string_literal746_tree);
            }
            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz3447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN747_tree = (Object)adaptor.create(TOKEN747);
            adaptor.addChild(root_0, TOKEN747_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:4: ( 'BEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal748=(Token)match(input,119,FOLLOW_119_in_beg3454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal748_tree = (Object)adaptor.create(string_literal748);
            adaptor.addChild(root_0, string_literal748_tree);
            }
            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg3456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN749_tree = (Object)adaptor.create(TOKEN749);
            adaptor.addChild(root_0, TOKEN749_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:4: ( 'BEM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal750=(Token)match(input,120,FOLLOW_120_in_bem3463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal750_tree = (Object)adaptor.create(string_literal750);
            adaptor.addChild(root_0, string_literal750_tree);
            }
            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem3465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN751_tree = (Object)adaptor.create(TOKEN751);
            adaptor.addChild(root_0, TOKEN751_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:4: ( 'BEN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal752=(Token)match(input,121,FOLLOW_121_in_ben3472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal752_tree = (Object)adaptor.create(string_literal752);
            adaptor.addChild(root_0, string_literal752_tree);
            }
            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben3474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN753_tree = (Object)adaptor.create(TOKEN753);
            adaptor.addChild(root_0, TOKEN753_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:4: ( 'BER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal754=(Token)match(input,122,FOLLOW_122_in_ber3481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal754_tree = (Object)adaptor.create(string_literal754);
            adaptor.addChild(root_0, string_literal754_tree);
            }
            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber3483); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN755_tree = (Object)adaptor.create(TOKEN755);
            adaptor.addChild(root_0, TOKEN755_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:4: ( 'BEZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal756=(Token)match(input,123,FOLLOW_123_in_bez3490); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal756_tree = (Object)adaptor.create(string_literal756);
            adaptor.addChild(root_0, string_literal756_tree);
            }
            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez3492); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN757_tree = (Object)adaptor.create(TOKEN757);
            adaptor.addChild(root_0, TOKEN757_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:3: ( 'CC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal758=(Token)match(input,124,FOLLOW_124_in_cc3499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal758_tree = (Object)adaptor.create(string_literal758);
            adaptor.addChild(root_0, string_literal758_tree);
            }
            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc3501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN759_tree = (Object)adaptor.create(TOKEN759);
            adaptor.addChild(root_0, TOKEN759_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:3: ( 'CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal760=(Token)match(input,125,FOLLOW_125_in_cd3508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal760_tree = (Object)adaptor.create(string_literal760);
            adaptor.addChild(root_0, string_literal760_tree);
            }
            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd3510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN761_tree = (Object)adaptor.create(TOKEN761);
            adaptor.addChild(root_0, TOKEN761_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:3: ( 'CS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal762=(Token)match(input,126,FOLLOW_126_in_cs3517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal762_tree = (Object)adaptor.create(string_literal762);
            adaptor.addChild(root_0, string_literal762_tree);
            }
            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs3519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN763_tree = (Object)adaptor.create(TOKEN763);
            adaptor.addChild(root_0, TOKEN763_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:7: ( 'DO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal764=(Token)match(input,127,FOLLOW_127_in_dotok3527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal764_tree = (Object)adaptor.create(string_literal764);
            adaptor.addChild(root_0, string_literal764_tree);
            }
            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok3529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN765_tree = (Object)adaptor.create(TOKEN765);
            adaptor.addChild(root_0, TOKEN765_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:4: ( 'DOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal766=(Token)match(input,128,FOLLOW_128_in_dod3536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal766_tree = (Object)adaptor.create(string_literal766);
            adaptor.addChild(root_0, string_literal766_tree);
            }
            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod3538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN767_tree = (Object)adaptor.create(TOKEN767);
            adaptor.addChild(root_0, TOKEN767_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:4: ( 'DOZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal768=(Token)match(input,129,FOLLOW_129_in_doz3545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal768_tree = (Object)adaptor.create(string_literal768);
            adaptor.addChild(root_0, string_literal768_tree);
            }
            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz3547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN769_tree = (Object)adaptor.create(TOKEN769);
            adaptor.addChild(root_0, TOKEN769_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:3: ( 'DT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal770=(Token)match(input,130,FOLLOW_130_in_dt3554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal770_tree = (Object)adaptor.create(string_literal770);
            adaptor.addChild(root_0, string_literal770_tree);
            }
            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt3556); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN771_tree = (Object)adaptor.create(TOKEN771);
            adaptor.addChild(root_0, TOKEN771_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:443:1: dtTHE : 'DT-THE' TOKEN ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:443:6: ( 'DT-THE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:443:7: 'DT-THE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal772=(Token)match(input,131,FOLLOW_131_in_dtTHE3564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal772_tree = (Object)adaptor.create(string_literal772);
            adaptor.addChild(root_0, string_literal772_tree);
            }
            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE3566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN773_tree = (Object)adaptor.create(TOKEN773);
            adaptor.addChild(root_0, TOKEN773_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:4: ( 'DTI' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal774=(Token)match(input,132,FOLLOW_132_in_dti3572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal774_tree = (Object)adaptor.create(string_literal774);
            adaptor.addChild(root_0, string_literal774_tree);
            }
            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti3574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN775_tree = (Object)adaptor.create(TOKEN775);
            adaptor.addChild(root_0, TOKEN775_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:4: ( 'DTS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal776=(Token)match(input,133,FOLLOW_133_in_dts3581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal776_tree = (Object)adaptor.create(string_literal776);
            adaptor.addChild(root_0, string_literal776_tree);
            }
            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts3583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN777_tree = (Object)adaptor.create(TOKEN777);
            adaptor.addChild(root_0, TOKEN777_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:4: ( 'DTX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal778=(Token)match(input,134,FOLLOW_134_in_dtx3590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal778_tree = (Object)adaptor.create(string_literal778);
            adaptor.addChild(root_0, string_literal778_tree);
            }
            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx3592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN779_tree = (Object)adaptor.create(TOKEN779);
            adaptor.addChild(root_0, TOKEN779_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:3: ( 'EX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal780=(Token)match(input,135,FOLLOW_135_in_ex3599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal780_tree = (Object)adaptor.create(string_literal780);
            adaptor.addChild(root_0, string_literal780_tree);
            }
            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex3601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN781_tree = (Object)adaptor.create(TOKEN781);
            adaptor.addChild(root_0, TOKEN781_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:3: ( 'FW' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal782=(Token)match(input,136,FOLLOW_136_in_fw3608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal782_tree = (Object)adaptor.create(string_literal782);
            adaptor.addChild(root_0, string_literal782_tree);
            }
            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw3610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN783_tree = (Object)adaptor.create(TOKEN783);
            adaptor.addChild(root_0, TOKEN783_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:1: fwin : 'FW-IN' TOKEN ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:5: ( 'FW-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:6: 'FW-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal784=(Token)match(input,137,FOLLOW_137_in_fwin3617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal784_tree = (Object)adaptor.create(string_literal784);
            adaptor.addChild(root_0, string_literal784_tree);
            }
            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin3619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN785_tree = (Object)adaptor.create(TOKEN785);
            adaptor.addChild(root_0, TOKEN785_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:3: ( 'HV' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal786=(Token)match(input,138,FOLLOW_138_in_hv3626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal786_tree = (Object)adaptor.create(string_literal786);
            adaptor.addChild(root_0, string_literal786_tree);
            }
            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv3628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN787_tree = (Object)adaptor.create(TOKEN787);
            adaptor.addChild(root_0, TOKEN787_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:4: ( 'HVD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal788=(Token)match(input,139,FOLLOW_139_in_hvd3635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal788_tree = (Object)adaptor.create(string_literal788);
            adaptor.addChild(root_0, string_literal788_tree);
            }
            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd3637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN789_tree = (Object)adaptor.create(TOKEN789);
            adaptor.addChild(root_0, TOKEN789_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:4: ( 'HVG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal790=(Token)match(input,140,FOLLOW_140_in_hvg3644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal790_tree = (Object)adaptor.create(string_literal790);
            adaptor.addChild(root_0, string_literal790_tree);
            }
            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg3646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN791_tree = (Object)adaptor.create(TOKEN791);
            adaptor.addChild(root_0, TOKEN791_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:4: ( 'HVN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal792=(Token)match(input,141,FOLLOW_141_in_hvn3653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal792_tree = (Object)adaptor.create(string_literal792);
            adaptor.addChild(root_0, string_literal792_tree);
            }
            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn3655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN793_tree = (Object)adaptor.create(TOKEN793);
            adaptor.addChild(root_0, TOKEN793_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:3: ( 'IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal794=(Token)match(input,142,FOLLOW_142_in_in3662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal794_tree = (Object)adaptor.create(string_literal794);
            adaptor.addChild(root_0, string_literal794_tree);
            }
            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in3664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN795_tree = (Object)adaptor.create(TOKEN795);
            adaptor.addChild(root_0, TOKEN795_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:3: ( 'JJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:478:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal796=(Token)match(input,143,FOLLOW_143_in_jj3671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal796_tree = (Object)adaptor.create(string_literal796);
            adaptor.addChild(root_0, string_literal796_tree);
            }
            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj3673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN797_tree = (Object)adaptor.create(TOKEN797);
            adaptor.addChild(root_0, TOKEN797_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:4: ( 'JJR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal798=(Token)match(input,144,FOLLOW_144_in_jjr3680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal798_tree = (Object)adaptor.create(string_literal798);
            adaptor.addChild(root_0, string_literal798_tree);
            }
            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr3682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN799_tree = (Object)adaptor.create(TOKEN799);
            adaptor.addChild(root_0, TOKEN799_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:4: ( 'JJS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:484:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal800=(Token)match(input,145,FOLLOW_145_in_jjs3689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal800_tree = (Object)adaptor.create(string_literal800);
            adaptor.addChild(root_0, string_literal800_tree);
            }
            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs3691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN801_tree = (Object)adaptor.create(TOKEN801);
            adaptor.addChild(root_0, TOKEN801_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:4: ( 'JJT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:487:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal802=(Token)match(input,146,FOLLOW_146_in_jjt3698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal802_tree = (Object)adaptor.create(string_literal802);
            adaptor.addChild(root_0, string_literal802_tree);
            }
            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt3700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN803_tree = (Object)adaptor.create(TOKEN803);
            adaptor.addChild(root_0, TOKEN803_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:3: ( 'MD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:490:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal804=(Token)match(input,147,FOLLOW_147_in_md3707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal804_tree = (Object)adaptor.create(string_literal804);
            adaptor.addChild(root_0, string_literal804_tree);
            }
            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md3709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN805_tree = (Object)adaptor.create(TOKEN805);
            adaptor.addChild(root_0, TOKEN805_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:3: ( 'NC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:493:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal806=(Token)match(input,148,FOLLOW_148_in_nc3716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal806_tree = (Object)adaptor.create(string_literal806);
            adaptor.addChild(root_0, string_literal806_tree);
            }
            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc3718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN807_tree = (Object)adaptor.create(TOKEN807);
            adaptor.addChild(root_0, TOKEN807_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:3: ( 'NN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:496:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal808=(Token)match(input,149,FOLLOW_149_in_nn3725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal808_tree = (Object)adaptor.create(string_literal808);
            adaptor.addChild(root_0, string_literal808_tree);
            }
            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn3727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN809_tree = (Object)adaptor.create(TOKEN809);
            adaptor.addChild(root_0, TOKEN809_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:8: ( 'NN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:499:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal810=(Token)match(input,150,FOLLOW_150_in_nn_poss3734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal810_tree = (Object)adaptor.create(string_literal810);
            adaptor.addChild(root_0, string_literal810_tree);
            }
            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss3736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN811_tree = (Object)adaptor.create(TOKEN811);
            adaptor.addChild(root_0, TOKEN811_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:4: ( 'NNS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:502:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal812=(Token)match(input,151,FOLLOW_151_in_nns3743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal812_tree = (Object)adaptor.create(string_literal812);
            adaptor.addChild(root_0, string_literal812_tree);
            }
            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns3745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN813_tree = (Object)adaptor.create(TOKEN813);
            adaptor.addChild(root_0, TOKEN813_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:9: ( 'NNS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:505:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal814=(Token)match(input,152,FOLLOW_152_in_nns_poss3752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal814_tree = (Object)adaptor.create(string_literal814);
            adaptor.addChild(root_0, string_literal814_tree);
            }
            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss3754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN815_tree = (Object)adaptor.create(TOKEN815);
            adaptor.addChild(root_0, TOKEN815_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:3: ( 'NP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:508:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal816=(Token)match(input,153,FOLLOW_153_in_np3761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal816_tree = (Object)adaptor.create(string_literal816);
            adaptor.addChild(root_0, string_literal816_tree);
            }
            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np3763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN817_tree = (Object)adaptor.create(TOKEN817);
            adaptor.addChild(root_0, TOKEN817_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:4: ( 'NNP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal818=(Token)match(input,154,FOLLOW_154_in_nnp3771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal818_tree = (Object)adaptor.create(string_literal818);
            adaptor.addChild(root_0, string_literal818_tree);
            }
            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp3773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN819_tree = (Object)adaptor.create(TOKEN819);
            adaptor.addChild(root_0, TOKEN819_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:516:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:516:8: ( 'NP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:516:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal820=(Token)match(input,155,FOLLOW_155_in_np_poss3781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal820_tree = (Object)adaptor.create(string_literal820);
            adaptor.addChild(root_0, string_literal820_tree);
            }
            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss3783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN821_tree = (Object)adaptor.create(TOKEN821);
            adaptor.addChild(root_0, TOKEN821_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:519:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:519:4: ( 'NPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:519:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal822=(Token)match(input,156,FOLLOW_156_in_nps3790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal822_tree = (Object)adaptor.create(string_literal822);
            adaptor.addChild(root_0, string_literal822_tree);
            }
            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps3792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN823_tree = (Object)adaptor.create(TOKEN823);
            adaptor.addChild(root_0, TOKEN823_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:522:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:522:9: ( 'NPS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:522:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal824=(Token)match(input,157,FOLLOW_157_in_nps_poss3799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal824_tree = (Object)adaptor.create(string_literal824);
            adaptor.addChild(root_0, string_literal824_tree);
            }
            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss3801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN825_tree = (Object)adaptor.create(TOKEN825);
            adaptor.addChild(root_0, TOKEN825_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:525:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:525:3: ( 'NR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:525:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal826=(Token)match(input,158,FOLLOW_158_in_nr3808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal826_tree = (Object)adaptor.create(string_literal826);
            adaptor.addChild(root_0, string_literal826_tree);
            }
            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr3810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN827_tree = (Object)adaptor.create(TOKEN827);
            adaptor.addChild(root_0, TOKEN827_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:3: ( 'OD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal828=(Token)match(input,159,FOLLOW_159_in_od3817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal828_tree = (Object)adaptor.create(string_literal828);
            adaptor.addChild(root_0, string_literal828_tree);
            }
            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od3819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN829_tree = (Object)adaptor.create(TOKEN829);
            adaptor.addChild(root_0, TOKEN829_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:3: ( 'PN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal830=(Token)match(input,160,FOLLOW_160_in_pn3826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal830_tree = (Object)adaptor.create(string_literal830);
            adaptor.addChild(root_0, string_literal830_tree);
            }
            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn3828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN831_tree = (Object)adaptor.create(TOKEN831);
            adaptor.addChild(root_0, TOKEN831_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:8: ( 'PN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal832=(Token)match(input,161,FOLLOW_161_in_pn_poss3835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal832_tree = (Object)adaptor.create(string_literal832);
            adaptor.addChild(root_0, string_literal832_tree);
            }
            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss3837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN833_tree = (Object)adaptor.create(TOKEN833);
            adaptor.addChild(root_0, TOKEN833_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:8: ( 'PP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal834=(Token)match(input,162,FOLLOW_162_in_pp_poss3844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal834_tree = (Object)adaptor.create(string_literal834);
            adaptor.addChild(root_0, string_literal834_tree);
            }
            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss3846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN835_tree = (Object)adaptor.create(TOKEN835);
            adaptor.addChild(root_0, TOKEN835_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:13: ( 'PP$$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal836=(Token)match(input,163,FOLLOW_163_in_pp_poss_poss3853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal836_tree = (Object)adaptor.create(string_literal836);
            adaptor.addChild(root_0, string_literal836_tree);
            }
            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss3855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN837_tree = (Object)adaptor.create(TOKEN837);
            adaptor.addChild(root_0, TOKEN837_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:543:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:543:4: ( 'PPL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:543:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal838=(Token)match(input,164,FOLLOW_164_in_ppl3862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal838_tree = (Object)adaptor.create(string_literal838);
            adaptor.addChild(root_0, string_literal838_tree);
            }
            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl3864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN839_tree = (Object)adaptor.create(TOKEN839);
            adaptor.addChild(root_0, TOKEN839_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:5: ( 'PPLS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal840=(Token)match(input,165,FOLLOW_165_in_ppls3871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal840_tree = (Object)adaptor.create(string_literal840);
            adaptor.addChild(root_0, string_literal840_tree);
            }
            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls3873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN841_tree = (Object)adaptor.create(TOKEN841);
            adaptor.addChild(root_0, TOKEN841_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:548:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:548:5: ( 'PRP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:548:7: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal842=(Token)match(input,166,FOLLOW_166_in_prp3881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal842_tree = (Object)adaptor.create(string_literal842);
            adaptor.addChild(root_0, string_literal842_tree);
            }
            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp3884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN843_tree = (Object)adaptor.create(TOKEN843);
            adaptor.addChild(root_0, TOKEN843_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:551:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:551:4: ( 'PPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:551:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal844=(Token)match(input,167,FOLLOW_167_in_ppo3891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal844_tree = (Object)adaptor.create(string_literal844);
            adaptor.addChild(root_0, string_literal844_tree);
            }
            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo3893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN845_tree = (Object)adaptor.create(TOKEN845);
            adaptor.addChild(root_0, TOKEN845_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:554:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:554:4: ( 'PPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:554:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal846=(Token)match(input,168,FOLLOW_168_in_pps3900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal846_tree = (Object)adaptor.create(string_literal846);
            adaptor.addChild(root_0, string_literal846_tree);
            }
            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps3902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN847_tree = (Object)adaptor.create(TOKEN847);
            adaptor.addChild(root_0, TOKEN847_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:557:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:557:5: ( 'PPSS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:557:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal848=(Token)match(input,169,FOLLOW_169_in_ppss3909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal848_tree = (Object)adaptor.create(string_literal848);
            adaptor.addChild(root_0, string_literal848_tree);
            }
            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss3911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN849_tree = (Object)adaptor.create(TOKEN849);
            adaptor.addChild(root_0, TOKEN849_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:3: ( 'QL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal850=(Token)match(input,170,FOLLOW_170_in_ql3918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal850_tree = (Object)adaptor.create(string_literal850);
            adaptor.addChild(root_0, string_literal850_tree);
            }
            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql3920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN851_tree = (Object)adaptor.create(TOKEN851);
            adaptor.addChild(root_0, TOKEN851_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:4: ( 'QLP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal852=(Token)match(input,171,FOLLOW_171_in_qlp3927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal852_tree = (Object)adaptor.create(string_literal852);
            adaptor.addChild(root_0, string_literal852_tree);
            }
            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp3929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN853_tree = (Object)adaptor.create(TOKEN853);
            adaptor.addChild(root_0, TOKEN853_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:3: ( 'RB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal854=(Token)match(input,172,FOLLOW_172_in_rb3936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal854_tree = (Object)adaptor.create(string_literal854);
            adaptor.addChild(root_0, string_literal854_tree);
            }
            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb3938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN855_tree = (Object)adaptor.create(TOKEN855);
            adaptor.addChild(root_0, TOKEN855_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:569:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:569:4: ( 'RBR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:569:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal856=(Token)match(input,173,FOLLOW_173_in_rbr3945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal856_tree = (Object)adaptor.create(string_literal856);
            adaptor.addChild(root_0, string_literal856_tree);
            }
            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr3947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN857_tree = (Object)adaptor.create(TOKEN857);
            adaptor.addChild(root_0, TOKEN857_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:1: rbconj : 'RB-CONJ' TOKEN ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:8: ( 'RB-CONJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:10: 'RB-CONJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal858=(Token)match(input,174,FOLLOW_174_in_rbconj3956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal858_tree = (Object)adaptor.create(string_literal858);
            adaptor.addChild(root_0, string_literal858_tree);
            }
            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj3959); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN859_tree = (Object)adaptor.create(TOKEN859);
            adaptor.addChild(root_0, TOKEN859_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:4: ( 'RBT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal860=(Token)match(input,175,FOLLOW_175_in_rbt3967); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal860_tree = (Object)adaptor.create(string_literal860);
            adaptor.addChild(root_0, string_literal860_tree);
            }
            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt3969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN861_tree = (Object)adaptor.create(TOKEN861);
            adaptor.addChild(root_0, TOKEN861_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:1: rbs : 'RBS' TOKEN ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:4: ( 'RBS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:5: 'RBS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal862=(Token)match(input,176,FOLLOW_176_in_rbs3976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal862_tree = (Object)adaptor.create(string_literal862);
            adaptor.addChild(root_0, string_literal862_tree);
            }
            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs3978); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN863_tree = (Object)adaptor.create(TOKEN863);
            adaptor.addChild(root_0, TOKEN863_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:582:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:582:3: ( 'RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:582:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal864=(Token)match(input,177,FOLLOW_177_in_rn3986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal864_tree = (Object)adaptor.create(string_literal864);
            adaptor.addChild(root_0, string_literal864_tree);
            }
            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn3988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN865_tree = (Object)adaptor.create(TOKEN865);
            adaptor.addChild(root_0, TOKEN865_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:585:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:585:3: ( 'RP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:585:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal866=(Token)match(input,178,FOLLOW_178_in_rp3995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal866_tree = (Object)adaptor.create(string_literal866);
            adaptor.addChild(root_0, string_literal866_tree);
            }
            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp3997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN867_tree = (Object)adaptor.create(TOKEN867);
            adaptor.addChild(root_0, TOKEN867_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:588:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:588:5: ( 'SYM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:588:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal868=(Token)match(input,179,FOLLOW_179_in_sym4006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal868_tree = (Object)adaptor.create(string_literal868);
            adaptor.addChild(root_0, string_literal868_tree);
            }
            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym4008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN869_tree = (Object)adaptor.create(TOKEN869);
            adaptor.addChild(root_0, TOKEN869_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:591:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:591:3: ( 'TO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:591:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal870=(Token)match(input,180,FOLLOW_180_in_to4015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal870_tree = (Object)adaptor.create(string_literal870);
            adaptor.addChild(root_0, string_literal870_tree);
            }
            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to4017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN871_tree = (Object)adaptor.create(TOKEN871);
            adaptor.addChild(root_0, TOKEN871_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:3: ( 'UH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal872=(Token)match(input,181,FOLLOW_181_in_uh4024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal872_tree = (Object)adaptor.create(string_literal872);
            adaptor.addChild(root_0, string_literal872_tree);
            }
            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh4026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN873_tree = (Object)adaptor.create(TOKEN873);
            adaptor.addChild(root_0, TOKEN873_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:597:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:597:3: ( 'VB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:597:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal874=(Token)match(input,182,FOLLOW_182_in_vb4033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal874_tree = (Object)adaptor.create(string_literal874);
            adaptor.addChild(root_0, string_literal874_tree);
            }
            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb4035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN875_tree = (Object)adaptor.create(TOKEN875);
            adaptor.addChild(root_0, TOKEN875_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:599:1: vbp : 'VBP' TOKEN ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:599:5: ( 'VBP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:599:7: 'VBP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal876=(Token)match(input,183,FOLLOW_183_in_vbp4043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal876_tree = (Object)adaptor.create(string_literal876);
            adaptor.addChild(root_0, string_literal876_tree);
            }
            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp4045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN877_tree = (Object)adaptor.create(TOKEN877);
            adaptor.addChild(root_0, TOKEN877_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:4: ( 'VBD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal878=(Token)match(input,184,FOLLOW_184_in_vbd4054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal878_tree = (Object)adaptor.create(string_literal878);
            adaptor.addChild(root_0, string_literal878_tree);
            }
            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd4056); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN879_tree = (Object)adaptor.create(TOKEN879);
            adaptor.addChild(root_0, TOKEN879_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:606:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:606:4: ( 'VBG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:606:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal880=(Token)match(input,185,FOLLOW_185_in_vbg4063); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal880_tree = (Object)adaptor.create(string_literal880);
            adaptor.addChild(root_0, string_literal880_tree);
            }
            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg4065); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN881_tree = (Object)adaptor.create(TOKEN881);
            adaptor.addChild(root_0, TOKEN881_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:609:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:609:4: ( 'VBN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:609:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal882=(Token)match(input,186,FOLLOW_186_in_vbn4072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal882_tree = (Object)adaptor.create(string_literal882);
            adaptor.addChild(root_0, string_literal882_tree);
            }
            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn4074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN883_tree = (Object)adaptor.create(TOKEN883);
            adaptor.addChild(root_0, TOKEN883_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:612:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:612:4: ( 'VBZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:612:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal884=(Token)match(input,187,FOLLOW_187_in_vbz4081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal884_tree = (Object)adaptor.create(string_literal884);
            adaptor.addChild(root_0, string_literal884_tree);
            }
            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz4083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN885_tree = (Object)adaptor.create(TOKEN885);
            adaptor.addChild(root_0, TOKEN885_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:615:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:615:4: ( 'WDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:615:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal886=(Token)match(input,188,FOLLOW_188_in_wdt4090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal886_tree = (Object)adaptor.create(string_literal886);
            adaptor.addChild(root_0, string_literal886_tree);
            }
            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt4092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN887_tree = (Object)adaptor.create(TOKEN887);
            adaptor.addChild(root_0, TOKEN887_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:618:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:618:8: ( 'WP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:618:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal888=(Token)match(input,189,FOLLOW_189_in_wp_poss4099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal888_tree = (Object)adaptor.create(string_literal888);
            adaptor.addChild(root_0, string_literal888_tree);
            }
            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss4101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN889_tree = (Object)adaptor.create(TOKEN889);
            adaptor.addChild(root_0, TOKEN889_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:622:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:622:4: ( 'WPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:622:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal890=(Token)match(input,190,FOLLOW_190_in_wpo4109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal890_tree = (Object)adaptor.create(string_literal890);
            adaptor.addChild(root_0, string_literal890_tree);
            }
            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo4111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN891_tree = (Object)adaptor.create(TOKEN891);
            adaptor.addChild(root_0, TOKEN891_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:625:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:625:4: ( 'WPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:625:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal892=(Token)match(input,191,FOLLOW_191_in_wps4118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal892_tree = (Object)adaptor.create(string_literal892);
            adaptor.addChild(root_0, string_literal892_tree);
            }
            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps4120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN893_tree = (Object)adaptor.create(TOKEN893);
            adaptor.addChild(root_0, TOKEN893_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:629:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:629:4: ( 'WQL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:629:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal894=(Token)match(input,192,FOLLOW_192_in_wql4128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal894_tree = (Object)adaptor.create(string_literal894);
            adaptor.addChild(root_0, string_literal894_tree);
            }
            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql4130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN895_tree = (Object)adaptor.create(TOKEN895);
            adaptor.addChild(root_0, TOKEN895_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:632:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:632:4: ( 'WRB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:632:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal896=(Token)match(input,193,FOLLOW_193_in_wrb4137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal896_tree = (Object)adaptor.create(string_literal896);
            adaptor.addChild(root_0, string_literal896_tree);
            }
            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb4139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN897_tree = (Object)adaptor.create(TOKEN897);
            adaptor.addChild(root_0, TOKEN897_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:634:1: pdt : 'PDT' TOKEN ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:634:6: ( 'PDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:634:8: 'PDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal898=(Token)match(input,194,FOLLOW_194_in_pdt4148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal898_tree = (Object)adaptor.create(string_literal898);
            adaptor.addChild(root_0, string_literal898_tree);
            }
            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt4150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN899_tree = (Object)adaptor.create(TOKEN899);
            adaptor.addChild(root_0, TOKEN899_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: ( sentence )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
        {
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker230);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: ( unmatchedPhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
        {
        pushFollow(FOLLOW_comma_in_synpred4_ChemicalChunker240);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: ( nounphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker253);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: ( verbphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker255);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: ( prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker257);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker262);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: ( colon )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker264);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:66: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:66: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker270);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:78: ( rbconj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:78: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker272);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
        {
        pushFollow(FOLLOW_fw_in_synpred13_ChemicalChunker306);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
        {
        pushFollow(FOLLOW_noun_in_synpred14_ChemicalChunker308);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred15_ChemicalChunker
    public final void synpred15_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
        {
        pushFollow(FOLLOW_verb_in_synpred15_ChemicalChunker310);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
        {
        pushFollow(FOLLOW_dt_in_synpred17_ChemicalChunker314);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:33: ( oscarcd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:33: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred19_ChemicalChunker318);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:41: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:41: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred20_ChemicalChunker320);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:49: ( oscarrn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:49: oscarrn
        {
        pushFollow(FOLLOW_oscarrn_in_synpred21_ChemicalChunker322);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:57: ( oscaront )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:57: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred22_ChemicalChunker324);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred23_ChemicalChunker
    public final void synpred23_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:66: ( brackets )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:66: brackets
        {
        pushFollow(FOLLOW_brackets_in_synpred23_ChemicalChunker326);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_ChemicalChunker

    // $ANTLR start synpred24_ChemicalChunker
    public final void synpred24_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:75: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:75: sym
        {
        pushFollow(FOLLOW_sym_in_synpred24_ChemicalChunker328);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_ChemicalChunker

    // $ANTLR start synpred28_ChemicalChunker
    public final void synpred28_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:92: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:92: number
        {
        pushFollow(FOLLOW_number_in_synpred28_ChemicalChunker336);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: comma
        {
        pushFollow(FOLLOW_comma_in_synpred29_ChemicalChunker338);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:105: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:105: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred30_ChemicalChunker340);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: ( nounphraseStructure1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred31_ChemicalChunker377);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred33_ChemicalChunker
    public final void synpred33_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:11: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred33_ChemicalChunker412);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:15: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred34_ChemicalChunker415);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:25: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred35_ChemicalChunker420);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:40: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:40: noun
        {
        pushFollow(FOLLOW_noun_in_synpred36_ChemicalChunker422);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:45: number
        {
        pushFollow(FOLLOW_number_in_synpred37_ChemicalChunker424);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:52: ( ratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:52: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred38_ChemicalChunker426);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred39_ChemicalChunker434);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:77: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:77: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred40_ChemicalChunker437);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:86: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:86: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred41_ChemicalChunker441);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:101: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:101: noun
        {
        pushFollow(FOLLOW_noun_in_synpred42_ChemicalChunker443);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred43_ChemicalChunker
    public final void synpred43_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:106: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:106: number
        {
        pushFollow(FOLLOW_number_in_synpred43_ChemicalChunker445);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_ChemicalChunker

    // $ANTLR start synpred44_ChemicalChunker
    public final void synpred44_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:64: ( conjunction )*
        loop144:
        do {
            int alt144=2;
            alt144 = dfa144.predict(input);
            switch (alt144) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred44_ChemicalChunker434);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop144;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:77: ( advAdj )*
        loop145:
        do {
            int alt145=2;
            alt145 = dfa145.predict(input);
            switch (alt145) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred44_ChemicalChunker437);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop145;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:85: ( dissolvePhrase | noun | number | ratio )
        int alt146=4;
        alt146 = dfa146.predict(input);
        switch (alt146) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:86: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred44_ChemicalChunker441);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:101: noun
                {
                pushFollow(FOLLOW_noun_in_synpred44_ChemicalChunker443);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:106: number
                {
                pushFollow(FOLLOW_number_in_synpred44_ChemicalChunker445);
                number();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:113: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred44_ChemicalChunker447);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred44_ChemicalChunker

    // $ANTLR start synpred46_ChemicalChunker
    public final void synpred46_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:155: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:155: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred46_ChemicalChunker463);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_ChemicalChunker

    // $ANTLR start synpred47_ChemicalChunker
    public final void synpred47_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:126: ( prepphraseOf | prepphraseIN )
        int alt147=2;
        switch ( input.LA(1) ) {
        case 27:
            {
            alt147=1;
            }
            break;
        case 21:
            {
            alt147=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 147, 0, input);

            throw nvae;
        }

        switch (alt147) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:127: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred47_ChemicalChunker457);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:141: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred47_ChemicalChunker460);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:155: ( dissolvePhrase )?
        int alt148=2;
        switch ( input.LA(1) ) {
            case 11:
            case 12:
            case 13:
            case 38:
            case 54:
            case 101:
            case 109:
            case 125:
            case 143:
            case 144:
            case 145:
            case 146:
            case 154:
                {
                alt148=1;
                }
                break;
        }

        switch (alt148) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred47_ChemicalChunker463);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred47_ChemicalChunker

    // $ANTLR start synpred48_ChemicalChunker
    public final void synpred48_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:5: ( dissolveStructure1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:58:5: dissolveStructure1
        {
        pushFollow(FOLLOW_dissolveStructure1_in_synpred48_ChemicalChunker478);
        dissolveStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_ChemicalChunker

    // $ANTLR start synpred49_ChemicalChunker
    public final void synpred49_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: adj
        {
        pushFollow(FOLLOW_adj_in_synpred49_ChemicalChunker506);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_ChemicalChunker

    // $ANTLR start synpred51_ChemicalChunker
    public final void synpred51_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:19: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:19: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred51_ChemicalChunker513);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_ChemicalChunker

    // $ANTLR start synpred52_ChemicalChunker
    public final void synpred52_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:51: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:51: adj
        {
        pushFollow(FOLLOW_adj_in_synpred52_ChemicalChunker521);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_ChemicalChunker

    // $ANTLR start synpred54_ChemicalChunker
    public final void synpred54_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:62: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:62: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred54_ChemicalChunker528);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_ChemicalChunker

    // $ANTLR start synpred56_ChemicalChunker
    public final void synpred56_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:4: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred56_ChemicalChunker544);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_ChemicalChunker

    // $ANTLR start synpred58_ChemicalChunker
    public final void synpred58_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:15: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:15: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred58_ChemicalChunker551);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_ChemicalChunker

    // $ANTLR start synpred59_ChemicalChunker
    public final void synpred59_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:47: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:47: adj
        {
        pushFollow(FOLLOW_adj_in_synpred59_ChemicalChunker559);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_ChemicalChunker

    // $ANTLR start synpred61_ChemicalChunker
    public final void synpred61_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:58: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:58: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred61_ChemicalChunker566);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_ChemicalChunker

    // $ANTLR start synpred62_ChemicalChunker
    public final void synpred62_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:42: ( inin ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:42: inin ( adj )? ( nnp )? ( molecule | unnamedmolecule )
        {
        pushFollow(FOLLOW_inin_in_synpred62_ChemicalChunker557);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:47: ( adj )?
        int alt152=2;
        alt152 = dfa152.predict(input);
        switch (alt152) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred62_ChemicalChunker559);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:52: ( nnp )?
        int alt153=2;
        switch ( input.LA(1) ) {
            case 154:
                {
                alt153=1;
                }
                break;
        }

        switch (alt153) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred62_ChemicalChunker562);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:57: ( molecule | unnamedmolecule )
        int alt154=2;
        alt154 = dfa154.predict(input);
        switch (alt154) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:58: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred62_ChemicalChunker566);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:63:67: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred62_ChemicalChunker568);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred62_ChemicalChunker

    // $ANTLR start synpred65_ChemicalChunker
    public final void synpred65_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:28: ( to )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:28: to
        {
        pushFollow(FOLLOW_to_in_synpred65_ChemicalChunker618);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_ChemicalChunker

    // $ANTLR start synpred66_ChemicalChunker
    public final void synpred66_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:32: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred66_ChemicalChunker621);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_ChemicalChunker

    // $ANTLR start synpred72_ChemicalChunker
    public final void synpred72_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:71: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred72_ChemicalChunker640);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_ChemicalChunker

    // $ANTLR start synpred73_ChemicalChunker
    public final void synpred73_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:77: ( md )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:77: md
        {
        pushFollow(FOLLOW_md_in_synpred73_ChemicalChunker643);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_ChemicalChunker

    // $ANTLR start synpred74_ChemicalChunker
    public final void synpred74_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:81: ( adv )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred74_ChemicalChunker646);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_ChemicalChunker

    // $ANTLR start synpred75_ChemicalChunker
    public final void synpred75_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:86: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred75_ChemicalChunker649);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_ChemicalChunker

    // $ANTLR start synpred76_ChemicalChunker
    public final void synpred76_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:91: ( neg )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred76_ChemicalChunker652);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_ChemicalChunker

    // $ANTLR start synpred77_ChemicalChunker
    public final void synpred77_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:49: ( md )*
        loop155:
        do {
            int alt155=2;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt155=1;
                }
                break;

            }

            switch (alt155) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred77_ChemicalChunker628);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop155;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:53: ( rbconj )?
        int alt156=2;
        switch ( input.LA(1) ) {
            case 174:
                {
                alt156=1;
                }
                break;
        }

        switch (alt156) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred77_ChemicalChunker631);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:61: ( adv )*
        loop157:
        do {
            int alt157=2;
            switch ( input.LA(1) ) {
            case 172:
            case 173:
            case 175:
            case 176:
            case 178:
                {
                alt157=1;
                }
                break;

            }

            switch (alt157) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred77_ChemicalChunker634);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop157;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:66: ( adj )?
        int alt158=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 143:
            case 144:
            case 145:
            case 146:
                {
                alt158=1;
                }
                break;
        }

        switch (alt158) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred77_ChemicalChunker637);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:71: ( verb )+
        int cnt159=0;
        loop159:
        do {
            int alt159=2;
            switch ( input.LA(1) ) {
            case 55:
            case 56:
            case 57:
            case 58:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 70:
            case 72:
            case 73:
            case 74:
            case 75:
            case 77:
            case 79:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 87:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 96:
            case 97:
            case 98:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
                {
                alt159=1;
                }
                break;

            }

            switch (alt159) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred77_ChemicalChunker640);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt159 >= 1 ) break loop159;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(159, input);
                    throw eee;
            }
            cnt159++;
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:77: ( md )*
        loop160:
        do {
            int alt160=2;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt160=1;
                }
                break;

            }

            switch (alt160) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred77_ChemicalChunker643);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop160;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:81: ( adv )*
        loop161:
        do {
            int alt161=2;
            switch ( input.LA(1) ) {
            case 172:
            case 173:
            case 175:
            case 176:
            case 178:
                {
                alt161=1;
                }
                break;

            }

            switch (alt161) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred77_ChemicalChunker646);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop161;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:86: ( adj )?
        int alt162=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 143:
            case 144:
            case 145:
            case 146:
                {
                alt162=1;
                }
                break;
        }

        switch (alt162) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred77_ChemicalChunker649);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:91: ( neg )?
        int alt163=2;
        switch ( input.LA(1) ) {
            case 103:
                {
                alt163=1;
                }
                break;
        }

        switch (alt163) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred77_ChemicalChunker652);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred77_ChemicalChunker

    // $ANTLR start synpred78_ChemicalChunker
    public final void synpred78_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:99: ( inoff )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred78_ChemicalChunker658);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred78_ChemicalChunker

    // $ANTLR start synpred81_ChemicalChunker
    public final void synpred81_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:107: ( ( cc )? ( comma )? prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:107: ( cc )? ( comma )? prepphrase
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:107: ( cc )?
        int alt164=2;
        switch ( input.LA(1) ) {
            case 124:
                {
                alt164=1;
                }
                break;
        }

        switch (alt164) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred81_ChemicalChunker662);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:111: ( comma )?
        int alt165=2;
        switch ( input.LA(1) ) {
            case 101:
                {
                alt165=1;
                }
                break;
        }

        switch (alt165) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred81_ChemicalChunker665);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred81_ChemicalChunker668);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred81_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:22: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:22: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred123_ChemicalChunker779);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:26: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:26: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred124_ChemicalChunker781);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:24: ( dash nounStructure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred129_ChemicalChunker802);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred129_ChemicalChunker804);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred131_ChemicalChunker
    public final void synpred131_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:22: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:22: citation
        {
        pushFollow(FOLLOW_citation_in_synpred131_ChemicalChunker817);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_ChemicalChunker

    // $ANTLR start synpred132_ChemicalChunker
    public final void synpred132_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:31: ( cycles )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:31: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred132_ChemicalChunker819);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_ChemicalChunker

    // $ANTLR start synpred133_ChemicalChunker
    public final void synpred133_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:38: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred133_ChemicalChunker821);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_ChemicalChunker

    // $ANTLR start synpred134_ChemicalChunker
    public final void synpred134_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:47: ( apparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:47: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred134_ChemicalChunker823);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_ChemicalChunker

    // $ANTLR start synpred135_ChemicalChunker
    public final void synpred135_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:57: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:57: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred135_ChemicalChunker825);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_ChemicalChunker

    // $ANTLR start synpred137_ChemicalChunker
    public final void synpred137_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:81: ( nnstate )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:81: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred137_ChemicalChunker829);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred137_ChemicalChunker

    // $ANTLR start synpred138_ChemicalChunker
    public final void synpred138_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:89: ( nn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:89: nn
        {
        pushFollow(FOLLOW_nn_in_synpred138_ChemicalChunker831);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_ChemicalChunker

    // $ANTLR start synpred141_ChemicalChunker
    public final void synpred141_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:100: ( nnadd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:100: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred141_ChemicalChunker837);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_ChemicalChunker

    // $ANTLR start synpred145_ChemicalChunker
    public final void synpred145_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:143: ( range )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:143: range
        {
        pushFollow(FOLLOW_range_in_synpred145_ChemicalChunker845);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_ChemicalChunker

    // $ANTLR start synpred146_ChemicalChunker
    public final void synpred146_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:149: ( amount )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:149: amount
        {
        pushFollow(FOLLOW_amount_in_synpred146_ChemicalChunker847);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_ChemicalChunker

    // $ANTLR start synpred147_ChemicalChunker
    public final void synpred147_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:156: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:156: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred147_ChemicalChunker849);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:189: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:189: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred151_ChemicalChunker857);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:198: ( nnchementity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:198: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred152_ChemicalChunker859);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred153_ChemicalChunker
    public final void synpred153_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:211: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:211: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred153_ChemicalChunker861);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_ChemicalChunker

    // $ANTLR start synpred159_ChemicalChunker
    public final void synpred159_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:267: ( nnpressure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:267: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred159_ChemicalChunker873);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_ChemicalChunker

    // $ANTLR start synpred168_ChemicalChunker
    public final void synpred168_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:358: ( wdt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:358: wdt
        {
        pushFollow(FOLLOW_wdt_in_synpred168_ChemicalChunker891);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred168_ChemicalChunker

    // $ANTLR start synpred169_ChemicalChunker
    public final void synpred169_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:362: ( wp_poss )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:362: wp_poss
        {
        pushFollow(FOLLOW_wp_poss_in_synpred169_ChemicalChunker893);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_ChemicalChunker

    // $ANTLR start synpred170_ChemicalChunker
    public final void synpred170_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:370: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:370: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred170_ChemicalChunker895);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_ChemicalChunker

    // $ANTLR start synpred171_ChemicalChunker
    public final void synpred171_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:374: ( wps )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:374: wps
        {
        pushFollow(FOLLOW_wps_in_synpred171_ChemicalChunker897);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:416: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:416: number
        {
        pushFollow(FOLLOW_number_in_synpred176_ChemicalChunker907);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:423: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:79:423: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred177_ChemicalChunker909);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:10: ( numberratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred191_ChemicalChunker1003);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:20: ( colon cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:20: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred192_ChemicalChunker1032);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred192_ChemicalChunker1034);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:12: ( colon noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred193_ChemicalChunker1051);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred193_ChemicalChunker1053);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred203_ChemicalChunker
    public final void synpred203_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:20: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred203_ChemicalChunker1197);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_ChemicalChunker

    // $ANTLR start synpred204_ChemicalChunker
    public final void synpred204_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:23: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred204_ChemicalChunker1199);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_ChemicalChunker

    // $ANTLR start synpred205_ChemicalChunker
    public final void synpred205_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:28: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:28: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred205_ChemicalChunker1201);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_ChemicalChunker

    // $ANTLR start synpred207_ChemicalChunker
    public final void synpred207_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:44: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:44: stop
        {
        pushFollow(FOLLOW_stop_in_synpred207_ChemicalChunker1205);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_ChemicalChunker

    // $ANTLR start synpred208_ChemicalChunker
    public final void synpred208_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:49: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:49: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred208_ChemicalChunker1207);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_ChemicalChunker

    // $ANTLR start synpred209_ChemicalChunker
    public final void synpred209_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:63: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:63: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred209_ChemicalChunker1209);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_ChemicalChunker

    // $ANTLR start synpred210_ChemicalChunker
    public final void synpred210_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:72: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:72: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred210_ChemicalChunker1211);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_ChemicalChunker

    // $ANTLR start synpred212_ChemicalChunker
    public final void synpred212_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:93: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:93: sym
        {
        pushFollow(FOLLOW_sym_in_synpred212_ChemicalChunker1215);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:97: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:97: cd
        {
        pushFollow(FOLLOW_cd_in_synpred213_ChemicalChunker1217);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred214_ChemicalChunker
    public final void synpred214_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:100: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:100: noun
        {
        pushFollow(FOLLOW_noun_in_synpred214_ChemicalChunker1219);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_ChemicalChunker

    // $ANTLR start synpred215_ChemicalChunker
    public final void synpred215_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:105: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:105: inof
        {
        pushFollow(FOLLOW_inof_in_synpred215_ChemicalChunker1221);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_ChemicalChunker

    // $ANTLR start synpred216_ChemicalChunker
    public final void synpred216_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:110: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:110: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred216_ChemicalChunker1223);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_ChemicalChunker

    // $ANTLR start synpred217_ChemicalChunker
    public final void synpred217_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:116: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:116: cd
        {
        pushFollow(FOLLOW_cd_in_synpred217_ChemicalChunker1225);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_ChemicalChunker

    // $ANTLR start synpred218_ChemicalChunker
    public final void synpred218_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:119: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:119: comma
        {
        pushFollow(FOLLOW_comma_in_synpred218_ChemicalChunker1227);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_ChemicalChunker

    // $ANTLR start synpred219_ChemicalChunker
    public final void synpred219_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:125: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:125: adj
        {
        pushFollow(FOLLOW_adj_in_synpred219_ChemicalChunker1229);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred219_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:142: ( minimixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:142: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred221_ChemicalChunker1237);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:154: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:154: fw
        {
        pushFollow(FOLLOW_fw_in_synpred222_ChemicalChunker1239);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred223_ChemicalChunker
    public final void synpred223_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:157: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:157: verb
        {
        pushFollow(FOLLOW_verb_in_synpred223_ChemicalChunker1241);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_ChemicalChunker

    // $ANTLR start synpred224_ChemicalChunker
    public final void synpred224_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:162: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:162: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred224_ChemicalChunker1243);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_ChemicalChunker

    // $ANTLR start synpred225_ChemicalChunker
    public final void synpred225_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:175: ( nnyield )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:175: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred225_ChemicalChunker1245);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:186: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:186: stop
        {
        pushFollow(FOLLOW_stop_in_synpred227_ChemicalChunker1249);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:191: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:191: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred228_ChemicalChunker1251);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:205: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:205: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred229_ChemicalChunker1253);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:214: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:214: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred230_ChemicalChunker1255);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:235: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:235: sym
        {
        pushFollow(FOLLOW_sym_in_synpred232_ChemicalChunker1259);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:239: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:239: cd
        {
        pushFollow(FOLLOW_cd_in_synpred233_ChemicalChunker1261);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred234_ChemicalChunker
    public final void synpred234_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:242: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:242: noun
        {
        pushFollow(FOLLOW_noun_in_synpred234_ChemicalChunker1263);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_ChemicalChunker

    // $ANTLR start synpred235_ChemicalChunker
    public final void synpred235_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:247: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:247: inof
        {
        pushFollow(FOLLOW_inof_in_synpred235_ChemicalChunker1265);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_ChemicalChunker

    // $ANTLR start synpred236_ChemicalChunker
    public final void synpred236_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:252: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:252: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred236_ChemicalChunker1267);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_ChemicalChunker

    // $ANTLR start synpred237_ChemicalChunker
    public final void synpred237_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:258: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:258: cd
        {
        pushFollow(FOLLOW_cd_in_synpred237_ChemicalChunker1269);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_ChemicalChunker

    // $ANTLR start synpred238_ChemicalChunker
    public final void synpred238_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:261: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:261: comma
        {
        pushFollow(FOLLOW_comma_in_synpred238_ChemicalChunker1271);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:267: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:267: adj
        {
        pushFollow(FOLLOW_adj_in_synpred239_ChemicalChunker1273);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:277: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:277: stop
        {
        pushFollow(FOLLOW_stop_in_synpred241_ChemicalChunker1277);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred243_ChemicalChunker
    public final void synpred243_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:24: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:24: fw
        {
        pushFollow(FOLLOW_fw_in_synpred243_ChemicalChunker1339);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:27: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:27: verb
        {
        pushFollow(FOLLOW_verb_in_synpred244_ChemicalChunker1341);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred245_ChemicalChunker
    public final void synpred245_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:32: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:32: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred245_ChemicalChunker1343);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_ChemicalChunker

    // $ANTLR start synpred247_ChemicalChunker
    public final void synpred247_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:48: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:48: stop
        {
        pushFollow(FOLLOW_stop_in_synpred247_ChemicalChunker1347);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_ChemicalChunker

    // $ANTLR start synpred248_ChemicalChunker
    public final void synpred248_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:53: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:53: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred248_ChemicalChunker1349);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_ChemicalChunker

    // $ANTLR start synpred249_ChemicalChunker
    public final void synpred249_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:67: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:67: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred249_ChemicalChunker1351);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:76: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:76: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred250_ChemicalChunker1353);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:97: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:97: sym
        {
        pushFollow(FOLLOW_sym_in_synpred252_ChemicalChunker1357);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:101: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:101: cd
        {
        pushFollow(FOLLOW_cd_in_synpred253_ChemicalChunker1359);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:104: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:104: noun
        {
        pushFollow(FOLLOW_noun_in_synpred254_ChemicalChunker1361);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:109: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:109: inof
        {
        pushFollow(FOLLOW_inof_in_synpred255_ChemicalChunker1363);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:114: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:114: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred256_ChemicalChunker1365);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:120: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:120: cd
        {
        pushFollow(FOLLOW_cd_in_synpred257_ChemicalChunker1367);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:123: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:123: comma
        {
        pushFollow(FOLLOW_comma_in_synpred258_ChemicalChunker1369);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:129: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:129: adj
        {
        pushFollow(FOLLOW_adj_in_synpred259_ChemicalChunker1371);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:146: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:146: fw
        {
        pushFollow(FOLLOW_fw_in_synpred261_ChemicalChunker1379);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:149: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:149: verb
        {
        pushFollow(FOLLOW_verb_in_synpred262_ChemicalChunker1381);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:154: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:154: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred263_ChemicalChunker1383);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:167: ( nnyield )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:167: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred264_ChemicalChunker1385);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:178: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:178: stop
        {
        pushFollow(FOLLOW_stop_in_synpred266_ChemicalChunker1389);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:183: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:183: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred267_ChemicalChunker1391);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:197: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:197: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred268_ChemicalChunker1393);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:206: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:206: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred269_ChemicalChunker1395);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:227: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:227: sym
        {
        pushFollow(FOLLOW_sym_in_synpred271_ChemicalChunker1399);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:231: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:231: cd
        {
        pushFollow(FOLLOW_cd_in_synpred272_ChemicalChunker1401);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:234: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:234: noun
        {
        pushFollow(FOLLOW_noun_in_synpred273_ChemicalChunker1403);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:239: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:239: inof
        {
        pushFollow(FOLLOW_inof_in_synpred274_ChemicalChunker1405);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:244: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:244: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred275_ChemicalChunker1407);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:250: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:250: cd
        {
        pushFollow(FOLLOW_cd_in_synpred276_ChemicalChunker1409);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:253: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:253: comma
        {
        pushFollow(FOLLOW_comma_in_synpred277_ChemicalChunker1411);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:259: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:259: adj
        {
        pushFollow(FOLLOW_adj_in_synpred278_ChemicalChunker1413);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:269: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:269: stop
        {
        pushFollow(FOLLOW_stop_in_synpred280_ChemicalChunker1417);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:11: ( prepphraseAtmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred291_ChemicalChunker1470);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:32: ( prepphraseTime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred292_ChemicalChunker1472);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:47: ( prepphraseTemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred293_ChemicalChunker1474);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:62: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred294_ChemicalChunker1476);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:3: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred298_ChemicalChunker1580);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:35: ( nntime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred303_ChemicalChunker1596);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:16: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred305_ChemicalChunker1660);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:33: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred306_ChemicalChunker1665);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred324_ChemicalChunker
    public final void synpred324_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:5: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred324_ChemicalChunker1740);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_ChemicalChunker

    // $ANTLR start synpred329_ChemicalChunker
    public final void synpred329_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:36: ( nntemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred329_ChemicalChunker1755);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred329_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:15: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred336_ChemicalChunker1927);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:15: ( ( conjunction )* apparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:15: ( conjunction )* apparatus
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:15: ( conjunction )*
        loop167:
        do {
            int alt167=2;
            alt167 = dfa167.predict(input);
            switch (alt167) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred337_ChemicalChunker1927);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop167;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred337_ChemicalChunker1930);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred340_ChemicalChunker
    public final void synpred340_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:22: ( nnApp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred340_ChemicalChunker1948);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred340_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:4: ( nnapparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred341_ChemicalChunker1977);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred342_ChemicalChunker
    public final void synpred342_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:18: ( dash nnapparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred342_ChemicalChunker1981);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred342_ChemicalChunker1983);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_ChemicalChunker

    // $ANTLR start synpred343_ChemicalChunker
    public final void synpred343_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:8: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred343_ChemicalChunker1997);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred343_ChemicalChunker

    // $ANTLR start synpred344_ChemicalChunker
    public final void synpred344_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:17: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred344_ChemicalChunker1999);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_ChemicalChunker

    // $ANTLR start synpred345_ChemicalChunker
    public final void synpred345_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:21: ( nnpressure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred345_ChemicalChunker2001);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_ChemicalChunker

    // $ANTLR start synpred346_ChemicalChunker
    public final void synpred346_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:32: ( nnadd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred346_ChemicalChunker2003);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred346_ChemicalChunker

    // $ANTLR start synpred347_ChemicalChunker
    public final void synpred347_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:38: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred347_ChemicalChunker2005);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_ChemicalChunker

    // $ANTLR start synpred348_ChemicalChunker
    public final void synpred348_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:47: ( nnchementity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred348_ChemicalChunker2007);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred348_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:60: ( nnstate )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred349_ChemicalChunker2009);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred350_ChemicalChunker
    public final void synpred350_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:68: ( nn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred350_ChemicalChunker2011);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred350_ChemicalChunker

    // $ANTLR start synpred353_ChemicalChunker
    public final void synpred353_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:43: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:43: dt
        {
        pushFollow(FOLLOW_dt_in_synpred353_ChemicalChunker2037);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred353_ChemicalChunker

    // $ANTLR start synpred354_ChemicalChunker
    public final void synpred354_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:25: ( measurementtypes )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred354_ChemicalChunker2049);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_ChemicalChunker

    // $ANTLR start synpred360_ChemicalChunker
    public final void synpred360_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:24: ( oscarCompound1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:24: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred360_ChemicalChunker2101);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred360_ChemicalChunker

    // $ANTLR start synpred362_ChemicalChunker
    public final void synpred362_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:54: ( oscarCompound3 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:54: oscarCompound3
        {
        pushFollow(FOLLOW_oscarCompound3_in_synpred362_ChemicalChunker2105);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:27: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:27: dash
        {
        pushFollow(FOLLOW_dash_in_synpred364_ChemicalChunker2151);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred366_ChemicalChunker
    public final void synpred366_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:27: ( dash oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:27: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred366_ChemicalChunker2184);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred366_ChemicalChunker2186);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred366_ChemicalChunker

    // $ANTLR start synpred367_ChemicalChunker
    public final void synpred367_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:42: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:42: dash
        {
        pushFollow(FOLLOW_dash_in_synpred367_ChemicalChunker2190);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred367_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:26: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred368_ChemicalChunker2223);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred369_ChemicalChunker
    public final void synpred369_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred369_ChemicalChunker2248);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred369_ChemicalChunker

    // $ANTLR start synpred370_ChemicalChunker
    public final void synpred370_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred370_ChemicalChunker2250);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred370_ChemicalChunker

    // $ANTLR start synpred371_ChemicalChunker
    public final void synpred371_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred371_ChemicalChunker2266);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_ChemicalChunker

    // $ANTLR start synpred372_ChemicalChunker
    public final void synpred372_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred372_ChemicalChunker2268);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_ChemicalChunker

    // $ANTLR start synpred373_ChemicalChunker
    public final void synpred373_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:23: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred373_ChemicalChunker2272);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred373_ChemicalChunker

    // $ANTLR start synpred374_ChemicalChunker
    public final void synpred374_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:40: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:40: citation
        {
        pushFollow(FOLLOW_citation_in_synpred374_ChemicalChunker2277);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred374_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:49: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:49: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred375_ChemicalChunker2279);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred376_ChemicalChunker
    public final void synpred376_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:58: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred376_ChemicalChunker2281);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_ChemicalChunker

    // $ANTLR start synpred377_ChemicalChunker
    public final void synpred377_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:18: ( moleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:18: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred377_ChemicalChunker2292);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_ChemicalChunker

    // $ANTLR start synpred381_ChemicalChunker
    public final void synpred381_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:26: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:26: citation
        {
        pushFollow(FOLLOW_citation_in_synpred381_ChemicalChunker2379);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_ChemicalChunker

    // $ANTLR start synpred382_ChemicalChunker
    public final void synpred382_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:35: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:35: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred382_ChemicalChunker2381);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_ChemicalChunker

    // $ANTLR start synpred383_ChemicalChunker
    public final void synpred383_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:44: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:44: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred383_ChemicalChunker2383);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:18: ( jj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred384_ChemicalChunker2404);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:18: ( ( jj )? noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:18: ( jj )? noun
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:18: ( jj )?
        int alt168=2;
        switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA168_3 = input.LA(3);

                        if ( (synpred384_ChemicalChunker()) ) {
                            alt168=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt168) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred385_ChemicalChunker2404);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred385_ChemicalChunker2407);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred386_ChemicalChunker
    public final void synpred386_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred386_ChemicalChunker2420);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_ChemicalChunker

    // $ANTLR start synpred387_ChemicalChunker
    public final void synpred387_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:4: ( unnamedmoleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:4: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred387_ChemicalChunker2434);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:29: ( unnamedmoleculeamount2 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:29: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred388_ChemicalChunker2438);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:54: ( unnamedmoleculeamount3 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:54: unnamedmoleculeamount3
        {
        pushFollow(FOLLOW_unnamedmoleculeamount3_in_synpred389_ChemicalChunker2442);
        unnamedmoleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:19: ( comma measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred394_ChemicalChunker2549);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred394_ChemicalChunker2552);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:9: ( lrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:9: lrb
        {
        pushFollow(FOLLOW_lrb_in_synpred399_ChemicalChunker2601);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:13: ( rrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:13: rrb
        {
        pushFollow(FOLLOW_rrb_in_synpred400_ChemicalChunker2603);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred401_ChemicalChunker
    public final void synpred401_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:17: ( lsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:17: lsqb
        {
        pushFollow(FOLLOW_lsqb_in_synpred401_ChemicalChunker2605);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:22: ( rsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:22: rsqb
        {
        pushFollow(FOLLOW_rsqb_in_synpred402_ChemicalChunker2607);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred366_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred374_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred370_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred370_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA167 dfa167 = new DFA167(this);
    static final String DFA2_eotS =
        "\u0086\uffff";
    static final String DFA2_eofS =
        "\1\2\u0085\uffff";
    static final String DFA2_minS =
        "\1\13\1\0\1\uffff\u0081\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00c2\1\0\1\uffff\u0081\0\2\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\3\u0081\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\44\1\uffff\1\7\1\170\1\145\1\130\1\70\1\142\1\140\1\174"+
        "\1\36\1\32\1\172\1\30\1\115\1\112\1\42\1\6\1\105\1\72\1\21\1\64"+
        "\1\37\1\156\1\65\1\12\1\110\1\67\1\171\1\124\1\25\1\41\1\135\1\33"+
        "\1\57\1\71\1\11\1\u0080\1\114\1\137\1\46\1\60\1\43\1\20\1\u0081"+
        "\1\161\1\153\1\14\1\104\1\50\1\116\1\173\1\15\1\131\1\5\1\162\1"+
        "\62\1\111\1\151\1\127\1\16\1\123\1\157\1\133\1\132\1\54\1\167\1"+
        "\63\1\155\1\121\1\144\1\13\1\176\1\154\1\102\1\141\1\77\1\51\1\35"+
        "\1\56\1\47\1\31\1\103\1\164\1\1\1\76\1\4\1\23\1\113\1\175\1\160"+
        "\1\166\1\34\1\150\1\143\1\106\1\66\1\75\1\52\1\40\1\10\1\0\1\17"+
        "\1\2\1\27\1\55\1\74\1\100\1\134\1\120\1\146\1\165\1\26\1\53\1\61"+
        "\1\101\1\107\1\147\1\163\1\177\1\22\1\3\1\45\1\126\1\122\1\125\1"+
        "\24\1\152\1\136\1\117\1\73\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\33\1\13\1\14\1\41\1\70\2\uffff\1\110\1\111\1\107\1\115\1"+
            "\116\1\125\1\126\1\112\1\124\1\117\1\121\1\113\1\114\1\123\1"+
            "\122\1\120\1\40\1\21\1\42\1\uffff\1\6\1\51\1\43\1\44\1\60\1"+
            "\20\1\45\1\46\1\47\1\50\1\15\1\52\1\53\1\54\1\55\1\56\1\17\1"+
            "\137\1\176\1\140\1\142\1\16\1\67\1\143\1\144\1\145\1\146\1\147"+
            "\1\150\1\151\1\152\1\23\1\153\1\57\1\154\1\155\1\156\1\157\1"+
            "\71\1\160\1\72\1\161\1\73\1\162\1\163\1\141\1\164\1\165\1\74"+
            "\1\166\1\61\1\167\1\170\1\171\1\75\1\172\1\37\1\66\1\173\1\174"+
            "\1\175\1\35\1\u0083\1\1\1\uffff\1\177\1\uffff\1\2\1\uffff\1"+
            "\u0081\1\u0082\1\4\1\u0080\16\uffff\1\5\4\uffff\1\3\1\24\3\uffff"+
            "\1\103\1\76\1\77\4\uffff\1\106\1\7\1\10\1\11\1\12\1\127\1\uffff"+
            "\1\22\1\uffff\1\36\2\uffff\1\32\13\uffff\1\34\5\uffff\1\25\1"+
            "\26\1\130\1\27\1\31\1\uffff\1\30\1\100\1\105\1\uffff\1\131\1"+
            "\132\1\134\1\133\1\136\1\135\1\62\1\63\1\64\1\65\1\101\1\102"+
            "\1\104",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 36:13: ( sentence | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\u0083\uffff";
    static final String DFA4_eofS =
        "\1\14\u0082\uffff";
    static final String DFA4_minS =
        "\1\13\13\0\1\uffff\163\0\3\uffff";
    static final String DFA4_maxS =
        "\1\u00c2\13\0\1\uffff\163\0\3\uffff";
    static final String DFA4_acceptS =
        "\14\uffff\1\4\163\uffff\1\1\1\2\1\3";
    static final String DFA4_specialS =
        "\1\uffff\1\105\1\2\1\0\1\147\1\144\1\46\1\164\1\22\1\10\1\13\1\110"+
        "\1\uffff\1\131\1\123\1\167\1\16\1\23\1\113\1\117\1\175\1\120\1\76"+
        "\1\27\1\140\1\12\1\47\1\65\1\7\1\30\1\20\1\62\1\101\1\165\1\135"+
        "\1\61\1\157\1\112\1\35\1\24\1\160\1\111\1\152\1\51\1\5\1\25\1\163"+
        "\1\146\1\33\1\56\1\124\1\54\1\3\1\106\1\73\1\122\1\132\1\121\1\162"+
        "\1\31\1\74\1\77\1\34\1\125\1\151\1\55\1\103\1\15\1\107\1\43\1\50"+
        "\1\64\1\32\1\100\1\134\1\136\1\114\1\63\1\145\1\116\1\41\1\130\1"+
        "\155\1\172\1\141\1\102\1\53\1\17\1\174\1\161\1\4\1\57\1\26\1\67"+
        "\1\70\1\40\1\66\1\153\1\42\1\104\1\171\1\143\1\150\1\1\1\36\1\52"+
        "\1\45\1\115\1\154\1\142\1\170\1\6\1\37\1\71\1\126\1\133\1\156\1"+
        "\75\1\44\1\11\1\173\1\166\1\137\1\72\1\60\1\21\1\14\1\127\3\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\34\1\12\1\13\1\42\1\71\2\uffff\1\111\1\112\1\110\1\116\1"+
            "\117\1\126\1\127\1\113\1\125\1\120\1\122\1\114\1\115\1\124\1"+
            "\123\1\121\1\41\1\27\1\43\1\uffff\1\22\1\52\1\44\1\45\1\61\1"+
            "\26\1\46\1\47\1\50\1\51\1\23\1\53\1\54\1\55\1\56\1\57\1\25\1"+
            "\137\1\176\1\140\1\142\1\24\1\70\1\143\1\144\1\145\1\146\1\147"+
            "\1\150\1\151\1\152\1\31\1\153\1\60\1\154\1\155\1\156\1\157\1"+
            "\72\1\160\1\73\1\161\1\74\1\162\1\163\1\141\1\164\1\165\1\75"+
            "\1\166\1\62\1\167\1\170\1\171\1\76\1\172\1\40\1\67\1\173\1\174"+
            "\1\175\1\36\1\14\1\15\1\uffff\1\177\1\uffff\1\14\1\uffff\2\14"+
            "\1\20\1\14\15\uffff\1\14\1\21\4\uffff\1\17\1\32\3\uffff\1\104"+
            "\1\77\1\100\4\uffff\1\107\1\6\1\7\1\10\1\11\1\130\1\uffff\1"+
            "\30\1\uffff\1\37\2\uffff\1\33\13\uffff\1\35\5\uffff\1\1\1\2"+
            "\1\16\1\3\1\5\1\uffff\1\4\1\101\1\106\1\uffff\1\131\1\132\1"+
            "\134\1\133\1\136\1\135\1\63\1\64\1\65\1\66\1\102\1\103\1\105",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\34\uffff";
    static final String DFA5_eofS =
        "\1\1\33\uffff";
    static final String DFA5_minS =
        "\1\13\1\uffff\14\12\14\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00c2\1\uffff\14\12\14\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\30\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\16\uffff\1\5\1\6\1\7\1\3\1\4\1\1\1\0\1\11\1\2\1\12\1\13\1\10\2"+
        "\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\6\1\7\2\1\2\uffff\23\1\1\uffff\76\1\1\15\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\2\1\3\uffff"+
            "\3\1\4\uffff\1\1\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\13\uffff\1\1\5\uffff\1\10\1\11\1\1\1\12\1\14\1"+
            "\uffff\1\13\2\1\1\uffff\15\1",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 38:48: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\u008c\uffff";
    static final String DFA7_eofS =
        "\u008c\uffff";
    static final String DFA7_minS =
        "\1\13\1\0\1\uffff\3\0\1\uffff\10\0\6\uffff\1\0\3\uffff\1\0\30\uffff"+
        "\1\0\6\uffff\1\0\122\uffff";
    static final String DFA7_maxS =
        "\1\u00c2\1\0\1\uffff\3\0\1\uffff\10\0\6\uffff\1\0\3\uffff\1\0\30"+
        "\uffff\1\0\6\uffff\1\0\122\uffff";
    static final String DFA7_acceptS =
        "\2\uffff\1\2\73\uffff\1\3\45\uffff\1\4\21\uffff\1\6\1\13\2\uffff"+
        "\1\15\1\16\1\17\1\22\4\uffff\1\23\1\1\1\21\1\20\1\11\1\10\1\5\1"+
        "\7\1\12\1\14";
    static final String DFA7_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1"+
        "\11\1\12\1\13\6\uffff\1\14\3\uffff\1\15\30\uffff\1\16\6\uffff\1"+
        "\17\122\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\25\1\13\1\14\1\2\1\62\2\uffff\20\144\3\2\1\uffff\20\2\1\15"+
            "\4\76\2\2\10\76\1\2\1\76\1\2\4\76\1\2\1\76\1\2\1\76\1\2\5\76"+
            "\1\2\1\76\1\2\3\76\1\2\1\76\1\31\1\2\3\76\1\2\1\172\1\4\1\uffff"+
            "\1\174\3\uffff\2\167\1\3\1\167\16\uffff\1\5\4\uffff\1\16\1\166"+
            "\3\uffff\1\2\1\1\1\2\4\uffff\1\144\1\7\1\10\1\11\1\12\1\173"+
            "\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff\2"+
            "\175\1\u0082\2\175\1\uffff\1\175\1\71\1\144\1\uffff\6\76\7\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "45:4: ( fw | noun | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_3 = input.LA(1);

                         
                        int index7_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred23_ChemicalChunker()) ) {s = 119;}

                         
                        input.seek(index7_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred29_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred28_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_9 = input.LA(1);

                         
                        int index7_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_21 = input.LA(1);

                         
                        int index7_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred28_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index7_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_25 = input.LA(1);

                         
                        int index7_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index7_25);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_50 = input.LA(1);

                         
                        int index7_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index7_50);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA7_57 = input.LA(1);

                         
                        int index7_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred24_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index7_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\105\uffff";
    static final String DFA8_eofS =
        "\105\uffff";
    static final String DFA8_minS =
        "\1\13\22\0\62\uffff";
    static final String DFA8_maxS =
        "\1\u00c2\22\0\62\uffff";
    static final String DFA8_acceptS =
        "\23\uffff\1\2\60\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\62\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\23\1\11\1\12\2\23\22\uffff\1\23\1\20\1\23\1\uffff\1\4\4\23"+
            "\1\17\4\23\1\13\5\23\1\16\4\uffff\1\14\1\23\10\uffff\1\22\1"+
            "\uffff\1\23\4\uffff\1\23\1\uffff\1\23\1\uffff\1\23\5\uffff\1"+
            "\23\1\uffff\1\23\3\uffff\1\23\1\uffff\2\23\3\uffff\1\23\1\uffff"+
            "\1\15\7\uffff\1\2\17\uffff\1\3\4\uffff\1\1\1\23\3\uffff\3\23"+
            "\5\uffff\1\5\1\6\1\7\1\10\2\uffff\1\21\1\uffff\1\23\2\uffff"+
            "\1\23\13\uffff\1\23\5\uffff\2\23\1\uffff\2\23\1\uffff\2\23\10"+
            "\uffff\7\23",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "51:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\17\uffff";
    static final String DFA11_eofS =
        "\17\uffff";
    static final String DFA11_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA11_maxS =
        "\1\u00c2\1\uffff\6\12\1\uffff\6\0";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA11_specialS =
        "\11\uffff\1\3\1\0\1\2\1\1\1\4\1\5}>";
    static final String[] DFA11_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\1\7\uffff\1\1\17\uffff\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff"+
            "\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\2\10\1\uffff\2\10\1\uffff\1\10\1\1\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\103\uffff";
    static final String DFA12_eofS =
        "\1\1\102\uffff";
    static final String DFA12_minS =
        "\1\13\1\uffff\75\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00c2\1\uffff\75\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\75\uffff\1\1\1\2\1\4\1\3";
    static final String DFA12_specialS =
        "\2\uffff\1\61\1\23\1\11\1\51\1\26\1\67\1\62\1\25\1\63\1\73\1\6\1"+
        "\71\1\55\1\47\1\41\1\30\1\31\1\50\1\66\1\5\1\21\1\0\1\33\1\2\1\40"+
        "\1\20\1\16\1\57\1\34\1\15\1\46\1\1\1\52\1\70\1\13\1\42\1\32\1\22"+
        "\1\74\1\65\1\36\1\3\1\64\1\45\1\17\1\7\1\60\1\44\1\56\1\54\1\27"+
        "\1\37\1\35\1\12\1\43\1\14\1\72\1\10\1\24\1\4\1\53\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\16\1\7\1\10\1\33\1\62\2\uffff\20\1\1\32\1\24\1\34\1\uffff"+
            "\1\14\1\43\1\35\1\36\1\52\1\23\1\37\1\40\1\41\1\42\1\21\1\44"+
            "\1\45\1\46\1\47\1\50\1\15\4\1\1\22\1\61\10\1\1\26\1\1\1\51\4"+
            "\1\1\63\1\1\1\64\1\1\1\65\5\1\1\66\1\1\1\53\3\1\1\67\1\1\1\31"+
            "\1\60\3\1\1\27\1\1\1\2\1\uffff\3\1\1\uffff\2\1\1\11\1\1\15\uffff"+
            "\1\1\1\13\4\uffff\1\20\1\1\3\uffff\1\75\1\70\1\71\4\uffff\1"+
            "\1\1\3\1\4\1\5\1\6\1\1\1\uffff\1\25\1\uffff\1\30\2\uffff\1\12"+
            "\13\uffff\1\17\5\uffff\5\1\1\uffff\1\1\1\72\1\1\1\uffff\6\1"+
            "\1\54\1\55\1\56\1\57\1\73\1\74\1\76",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 56:24: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA16_eotS =
        "\106\uffff";
    static final String DFA16_eofS =
        "\1\1\105\uffff";
    static final String DFA16_minS =
        "\1\13\1\uffff\103\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00c2\1\uffff\103\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\103\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\4\1\17\1\16\1\45\1\21\1\57\1\33\1\51\1\62\1\7\1\10\1"+
        "\77\1\63\1\67\1\43\1\2\1\46\1\11\1\31\1\54\1\101\1\75\1\14\1\72"+
        "\1\35\1\60\1\20\1\36\1\52\1\102\1\100\1\76\1\73\1\5\1\53\1\66\1"+
        "\6\1\24\1\32\1\25\1\56\1\42\1\65\1\61\1\3\1\23\1\15\1\41\1\74\1"+
        "\34\1\27\1\55\1\40\1\0\1\37\1\64\1\71\1\12\1\70\1\44\1\1\1\26\1"+
        "\30\1\22\1\47\1\50\1\13\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\33\1\13\1\14\1\41\1\70\2\uffff\20\1\1\40\1\27\1\42\1\uffff"+
            "\1\22\1\51\1\43\1\44\1\60\1\26\1\45\1\46\1\47\1\50\1\23\1\52"+
            "\1\53\1\54\1\55\1\56\1\25\4\1\1\24\1\67\10\1\1\31\1\1\1\57\4"+
            "\1\1\71\1\1\1\72\1\1\1\73\5\1\1\74\1\1\1\61\3\1\1\75\1\1\1\37"+
            "\1\66\3\1\1\35\1\1\1\16\1\uffff\3\1\1\uffff\2\1\1\20\1\1\15"+
            "\uffff\1\15\1\21\4\uffff\1\17\1\1\3\uffff\1\103\1\76\1\77\4"+
            "\uffff\1\1\1\7\1\10\1\11\1\12\1\1\1\uffff\1\30\1\uffff\1\36"+
            "\2\uffff\1\32\13\uffff\1\34\5\uffff\1\2\1\3\1\1\1\4\1\6\1\uffff"+
            "\1\5\1\100\1\1\1\uffff\6\1\1\62\1\63\1\64\1\65\1\101\1\102\1"+
            "\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\104\uffff";
    static final String DFA13_eofS =
        "\104\uffff";
    static final String DFA13_minS =
        "\1\13\17\uffff\1\0\63\uffff";
    static final String DFA13_maxS =
        "\1\u00c2\17\uffff\1\0\63\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\101\uffff\1\1";
    static final String DFA13_specialS =
        "\20\uffff\1\0\63\uffff}>";
    static final String[] DFA13_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\20\7\uffff"+
            "\1\1\16\uffff\1\103\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff\4\1"+
            "\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\2"+
            "\1\1\uffff\2\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\17\uffff";
    static final String DFA14_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA14_maxS =
        "\1\u00c2\1\uffff\6\12\1\uffff\6\0";
    static final String DFA14_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA14_specialS =
        "\11\uffff\1\3\1\4\1\2\1\0\1\1\1\5}>";
    static final String[] DFA14_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\1\7\uffff\1\1\17\uffff\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff"+
            "\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\2\10\1\uffff\2\10\1\uffff\1\10\1\1\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA15_eotS =
        "\102\uffff";
    static final String DFA15_eofS =
        "\102\uffff";
    static final String DFA15_minS =
        "\1\13\75\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00c2\75\0\4\uffff";
    static final String DFA15_acceptS =
        "\76\uffff\1\1\1\2\1\4\1\3";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\15\1\6\1\7\1\32\1\61\22\uffff\1\31\1\23\1\33\1\uffff\1\12"+
            "\1\42\1\34\1\35\1\51\1\22\1\36\1\37\1\40\1\41\1\20\1\43\1\44"+
            "\1\45\1\46\1\47\1\14\4\uffff\1\21\1\60\10\uffff\1\25\1\uffff"+
            "\1\50\4\uffff\1\62\1\uffff\1\63\1\uffff\1\64\5\uffff\1\65\1"+
            "\uffff\1\52\3\uffff\1\66\1\uffff\1\30\1\57\3\uffff\1\26\1\uffff"+
            "\1\13\7\uffff\1\1\17\uffff\1\11\4\uffff\1\17\4\uffff\1\74\1"+
            "\67\1\70\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\24\1\uffff\1\27\2"+
            "\uffff\1\10\13\uffff\1\16\14\uffff\1\71\10\uffff\1\53\1\54\1"+
            "\55\1\56\1\72\1\73\1\75",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "56:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\20\uffff";
    static final String DFA18_eofS =
        "\1\16\17\uffff";
    static final String DFA18_minS =
        "\1\13\15\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00c2\15\0\2\uffff";
    static final String DFA18_acceptS =
        "\16\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\4\1\2\1\7\1\6\1\11\1\12\1\3\1\14\1\13\1\0\1\5\1\1\1\10"+
        "\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\15\1\6\1\7\2\16\2\uffff\23\16\1\uffff\1\12\17\16\1\14\56"+
            "\16\1\13\1\uffff\3\16\1\uffff\2\16\1\1\1\16\15\uffff\1\16\1"+
            "\11\4\uffff\2\16\3\uffff\3\16\4\uffff\1\16\1\2\1\3\1\4\1\5\1"+
            "\16\1\uffff\1\16\1\uffff\1\16\2\uffff\1\10\13\uffff\1\16\5\uffff"+
            "\5\16\1\uffff\3\16\1\uffff\15\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "56:155: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\17\uffff";
    static final String DFA20_eofS =
        "\17\uffff";
    static final String DFA20_minS =
        "\1\13\1\0\15\uffff";
    static final String DFA20_maxS =
        "\1\u009a\1\0\15\uffff";
    static final String DFA20_acceptS =
        "\2\uffff\1\2\13\uffff\1\1";
    static final String DFA20_specialS =
        "\1\uffff\1\0\15\uffff}>";
    static final String[] DFA20_transitionS = {
            "\3\2\30\uffff\1\2\17\uffff\1\2\56\uffff\1\2\7\uffff\1\1\17\uffff"+
            "\1\2\21\uffff\4\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "58:4: ( dissolveStructure1 | dissolveStructure2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA21_eotS =
        "\17\uffff";
    static final String DFA21_eofS =
        "\17\uffff";
    static final String DFA21_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA21_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA21_specialS =
        "\10\uffff\1\0\1\5\1\1\1\3\1\4\1\2\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "61:8: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA23_eotS =
        "\15\uffff";
    static final String DFA23_eofS =
        "\15\uffff";
    static final String DFA23_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA23_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA23_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "61:18: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\17\uffff";
    static final String DFA24_eofS =
        "\17\uffff";
    static final String DFA24_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA24_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA24_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA24_specialS =
        "\10\uffff\1\0\1\3\1\4\1\1\1\2\1\5\1\uffff}>";
    static final String[] DFA24_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "61:51: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA24_8 = input.LA(1);

                         
                        int index24_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA24_11 = input.LA(1);

                         
                        int index24_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA24_12 = input.LA(1);

                         
                        int index24_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA24_9 = input.LA(1);

                         
                        int index24_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA24_10 = input.LA(1);

                         
                        int index24_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA24_13 = input.LA(1);

                         
                        int index24_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index24_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA26_eotS =
        "\15\uffff";
    static final String DFA26_eofS =
        "\15\uffff";
    static final String DFA26_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA26_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA26_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA26_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "61:61: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA28_eotS =
        "\17\uffff";
    static final String DFA28_eofS =
        "\17\uffff";
    static final String DFA28_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA28_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA28_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA28_specialS =
        "\10\uffff\1\0\1\3\1\4\1\1\1\2\1\5\1\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "63:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_8 = input.LA(1);

                         
                        int index28_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA28_11 = input.LA(1);

                         
                        int index28_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA28_12 = input.LA(1);

                         
                        int index28_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA28_9 = input.LA(1);

                         
                        int index28_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA28_10 = input.LA(1);

                         
                        int index28_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA28_13 = input.LA(1);

                         
                        int index28_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index28_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\15\uffff";
    static final String DFA30_eofS =
        "\15\uffff";
    static final String DFA30_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA30_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA30_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA30_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "63:14: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_1 = input.LA(1);

                         
                        int index30_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index30_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_2 = input.LA(1);

                         
                        int index30_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index30_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA30_3 = input.LA(1);

                         
                        int index30_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index30_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA30_4 = input.LA(1);

                         
                        int index30_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index30_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\17\uffff";
    static final String DFA31_eofS =
        "\17\uffff";
    static final String DFA31_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA31_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA31_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA31_specialS =
        "\10\uffff\1\5\1\4\1\2\1\1\1\3\1\0\1\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "63:47: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\15\uffff";
    static final String DFA33_eofS =
        "\15\uffff";
    static final String DFA33_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA33_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA33_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA33_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "63:57: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_1 = input.LA(1);

                         
                        int index33_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index33_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_3 = input.LA(1);

                         
                        int index33_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index33_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_4 = input.LA(1);

                         
                        int index33_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index33_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\67\uffff";
    static final String DFA49_eofS =
        "\1\1\66\uffff";
    static final String DFA49_minS =
        "\1\13\1\uffff\64\0\1\uffff";
    static final String DFA49_maxS =
        "\1\u00c2\1\uffff\64\0\1\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA49_specialS =
        "\2\uffff\1\43\1\23\1\57\1\5\1\4\1\7\1\34\1\35\1\25\1\3\1\11\1\22"+
        "\1\42\1\10\1\21\1\31\1\36\1\14\1\1\1\51\1\16\1\56\1\15\1\44\1\60"+
        "\1\45\1\17\1\2\1\13\1\30\1\46\1\62\1\27\1\41\1\52\1\12\1\32\1\55"+
        "\1\20\1\50\1\26\1\61\1\47\1\24\1\53\1\37\1\33\1\63\1\6\1\54\1\40"+
        "\1\0\1\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\1\1\13\1\14\2\1\2\uffff\23\1\1\uffff\21\1\1\26\1\65\1\27"+
            "\1\31\2\1\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\1\1\42\1"+
            "\1\1\43\1\44\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\30"+
            "\1\53\1\54\1\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\16\1\1\1\62"+
            "\1\63\1\64\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff"+
            "\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\1\1\1\7\1\10\1\11\1\12"+
            "\1\17\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\15\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1\20\1\21\1\23"+
            "\1\22\1\25\1\24\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()+ loopback of 72:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_53 = input.LA(1);

                         
                        int index49_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_53);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_20 = input.LA(1);

                         
                        int index49_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA49_29 = input.LA(1);

                         
                        int index49_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_29);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA49_11 = input.LA(1);

                         
                        int index49_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA49_50 = input.LA(1);

                         
                        int index49_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_50);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA49_15 = input.LA(1);

                         
                        int index49_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA49_37 = input.LA(1);

                         
                        int index49_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_37);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA49_30 = input.LA(1);

                         
                        int index49_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_30);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA49_19 = input.LA(1);

                         
                        int index49_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA49_24 = input.LA(1);

                         
                        int index49_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_24);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA49_22 = input.LA(1);

                         
                        int index49_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_22);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA49_28 = input.LA(1);

                         
                        int index49_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_28);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA49_40 = input.LA(1);

                         
                        int index49_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_40);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA49_16 = input.LA(1);

                         
                        int index49_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_16);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA49_45 = input.LA(1);

                         
                        int index49_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_45);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA49_42 = input.LA(1);

                         
                        int index49_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_42);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA49_34 = input.LA(1);

                         
                        int index49_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_34);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA49_31 = input.LA(1);

                         
                        int index49_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_31);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA49_17 = input.LA(1);

                         
                        int index49_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_17);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA49_38 = input.LA(1);

                         
                        int index49_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_38);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA49_48 = input.LA(1);

                         
                        int index49_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_48);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA49_18 = input.LA(1);

                         
                        int index49_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_18);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA49_47 = input.LA(1);

                         
                        int index49_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_47);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA49_52 = input.LA(1);

                         
                        int index49_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_52);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA49_35 = input.LA(1);

                         
                        int index49_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA49_14 = input.LA(1);

                         
                        int index49_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_14);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA49_25 = input.LA(1);

                         
                        int index49_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_25);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA49_27 = input.LA(1);

                         
                        int index49_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_27);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA49_32 = input.LA(1);

                         
                        int index49_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_32);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA49_44 = input.LA(1);

                         
                        int index49_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_44);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA49_41 = input.LA(1);

                         
                        int index49_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA49_21 = input.LA(1);

                         
                        int index49_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_21);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA49_36 = input.LA(1);

                         
                        int index49_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_36);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA49_46 = input.LA(1);

                         
                        int index49_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA49_51 = input.LA(1);

                         
                        int index49_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_51);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA49_39 = input.LA(1);

                         
                        int index49_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_39);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA49_23 = input.LA(1);

                         
                        int index49_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_23);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA49_26 = input.LA(1);

                         
                        int index49_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_26);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA49_43 = input.LA(1);

                         
                        int index49_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_43);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA49_33 = input.LA(1);

                         
                        int index49_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_33);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA49_49 = input.LA(1);

                         
                        int index49_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index49_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA44_eotS =
        "\52\uffff";
    static final String DFA44_eofS =
        "\1\1\51\uffff";
    static final String DFA44_minS =
        "\1\13\1\uffff\47\0\1\uffff";
    static final String DFA44_maxS =
        "\1\u00c2\1\uffff\47\0\1\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\2\47\uffff\1\1";
    static final String DFA44_specialS =
        "\2\uffff\1\7\1\46\1\20\1\5\1\24\1\3\1\26\1\21\1\2\1\0\1\44\1\31"+
        "\1\1\1\32\1\10\1\17\1\33\1\15\1\34\1\35\1\13\1\37\1\4\1\25\1\41"+
        "\1\40\1\45\1\36\1\30\1\14\1\16\1\12\1\27\1\11\1\43\1\23\1\6\1\42"+
        "\1\22\1\uffff}>";
    static final String[] DFA44_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\21\1\1\11\1\50\1\12\1\14\2\1\1\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\1\1\25\1\1\1\26\1\27\1"+
            "\30\1\31\1\1\1\32\1\1\1\33\1\1\1\34\1\35\1\13\1\36\1\37\1\1"+
            "\1\40\1\1\1\41\1\42\1\43\1\1\1\44\1\2\1\1\1\45\1\46\1\47\3\1"+
            "\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\2"+
            "\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\3\1\4\1\6"+
            "\1\5\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "()+ loopback of 72:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_11 = input.LA(1);

                         
                        int index44_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_14 = input.LA(1);

                         
                        int index44_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA44_24 = input.LA(1);

                         
                        int index44_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA44_38 = input.LA(1);

                         
                        int index44_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA44_16 = input.LA(1);

                         
                        int index44_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA44_35 = input.LA(1);

                         
                        int index44_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_35);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA44_33 = input.LA(1);

                         
                        int index44_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_33);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA44_22 = input.LA(1);

                         
                        int index44_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_22);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA44_31 = input.LA(1);

                         
                        int index44_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_31);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA44_19 = input.LA(1);

                         
                        int index44_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA44_32 = input.LA(1);

                         
                        int index44_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_32);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA44_17 = input.LA(1);

                         
                        int index44_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA44_9 = input.LA(1);

                         
                        int index44_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_9);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA44_40 = input.LA(1);

                         
                        int index44_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_40);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA44_37 = input.LA(1);

                         
                        int index44_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA44_25 = input.LA(1);

                         
                        int index44_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_25);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA44_8 = input.LA(1);

                         
                        int index44_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_8);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA44_34 = input.LA(1);

                         
                        int index44_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_34);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA44_30 = input.LA(1);

                         
                        int index44_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_13);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA44_15 = input.LA(1);

                         
                        int index44_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_15);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA44_18 = input.LA(1);

                         
                        int index44_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_18);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA44_20 = input.LA(1);

                         
                        int index44_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_20);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA44_21 = input.LA(1);

                         
                        int index44_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_21);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA44_29 = input.LA(1);

                         
                        int index44_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_29);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA44_23 = input.LA(1);

                         
                        int index44_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_23);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA44_27 = input.LA(1);

                         
                        int index44_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_27);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA44_26 = input.LA(1);

                         
                        int index44_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_26);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA44_39 = input.LA(1);

                         
                        int index44_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_39);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA44_36 = input.LA(1);

                         
                        int index44_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA44_12 = input.LA(1);

                         
                        int index44_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_12);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA44_28 = input.LA(1);

                         
                        int index44_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_28);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_ChemicalChunker()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\15\uffff";
    static final String DFA46_eofS =
        "\1\1\14\uffff";
    static final String DFA46_minS =
        "\1\13\1\uffff\5\12\5\0\1\uffff";
    static final String DFA46_maxS =
        "\1\u00c2\1\uffff\5\12\5\0\1\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA46_specialS =
        "\7\uffff\1\3\1\2\1\1\1\4\1\0\1\uffff}>";
    static final String[] DFA46_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\100\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\4\1\15\uffff\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\1\2\1\3\1"+
            "\1\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "()* loopback of 72:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_11 = input.LA(1);

                         
                        int index46_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index46_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_7 = input.LA(1);

                         
                        int index46_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index46_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_10 = input.LA(1);

                         
                        int index46_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index46_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\17\uffff";
    static final String DFA47_eofS =
        "\1\7\16\uffff";
    static final String DFA47_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA47_maxS =
        "\1\u00c2\6\12\1\uffff\6\0\1\uffff";
    static final String DFA47_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA47_specialS =
        "\10\uffff\1\2\1\5\1\4\1\0\1\1\1\3\1\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\23\7\1\uffff\100\7\1\uffff\1\7\1\uffff"+
            "\1\7\1\uffff\4\7\15\uffff\2\7\4\uffff\2\7\3\uffff\3\7\4\uffff"+
            "\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\13\uffff\1\7\5\uffff\5\7\1\uffff\3\7\1\uffff\15\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "72:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_11 = input.LA(1);

                         
                        int index47_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index47_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_12 = input.LA(1);

                         
                        int index47_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index47_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_8 = input.LA(1);

                         
                        int index47_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index47_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_13 = input.LA(1);

                         
                        int index47_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index47_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_10 = input.LA(1);

                         
                        int index47_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index47_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_9 = input.LA(1);

                         
                        int index47_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index47_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA53_eotS =
        "\u0087\uffff";
    static final String DFA53_eofS =
        "\1\14\u0086\uffff";
    static final String DFA53_minS =
        "\1\13\13\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\21\uffff\1\0\2\uffff"+
        "\1\0\37\uffff\22\0\47\uffff\1\0\4\uffff";
    static final String DFA53_maxS =
        "\1\u00c2\13\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\21\uffff\1\0\2"+
        "\uffff\1\0\37\uffff\22\0\47\uffff\1\0\4\uffff";
    static final String DFA53_acceptS =
        "\14\uffff\1\2\171\uffff\1\1";
    static final String DFA53_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff"+
        "\1\13\1\14\3\uffff\1\15\1\uffff\1\16\21\uffff\1\17\2\uffff\1\20"+
        "\37\uffff\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\47\uffff\1\43\4\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\14\1\12\1\13\2\14\2\uffff\1\114\1\115\1\113\1\121\1\122\1"+
            "\131\1\132\1\116\1\130\1\123\1\125\1\117\1\120\1\127\1\126\1"+
            "\124\2\14\1\46\1\uffff\6\14\1\51\70\14\1\16\1\uffff\1\u0082"+
            "\1\uffff\1\14\1\uffff\4\14\15\uffff\1\15\1\24\4\uffff\1\22\1"+
            "\14\3\uffff\3\14\4\uffff\1\112\1\6\1\7\1\10\1\11\1\14\1\uffff"+
            "\1\14\1\uffff\1\14\2\uffff\1\14\13\uffff\1\14\5\uffff\1\1\1"+
            "\2\1\14\1\3\1\5\1\uffff\1\4\1\14\1\111\1\uffff\15\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "()* loopback of 72:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_1 = input.LA(1);

                         
                        int index53_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA53_2 = input.LA(1);

                         
                        int index53_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA53_3 = input.LA(1);

                         
                        int index53_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA53_4 = input.LA(1);

                         
                        int index53_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA53_5 = input.LA(1);

                         
                        int index53_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA53_6 = input.LA(1);

                         
                        int index53_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA53_7 = input.LA(1);

                         
                        int index53_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA53_8 = input.LA(1);

                         
                        int index53_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA53_9 = input.LA(1);

                         
                        int index53_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA53_10 = input.LA(1);

                         
                        int index53_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA53_11 = input.LA(1);

                         
                        int index53_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA53_13 = input.LA(1);

                         
                        int index53_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA53_14 = input.LA(1);

                         
                        int index53_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA53_18 = input.LA(1);

                         
                        int index53_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_18);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA53_20 = input.LA(1);

                         
                        int index53_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA53_38 = input.LA(1);

                         
                        int index53_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_38);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA53_41 = input.LA(1);

                         
                        int index53_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_41);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA53_73 = input.LA(1);

                         
                        int index53_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_73);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA53_74 = input.LA(1);

                         
                        int index53_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_74);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA53_75 = input.LA(1);

                         
                        int index53_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_75);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA53_76 = input.LA(1);

                         
                        int index53_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_76);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA53_77 = input.LA(1);

                         
                        int index53_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_77);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA53_78 = input.LA(1);

                         
                        int index53_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_78);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA53_79 = input.LA(1);

                         
                        int index53_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_79);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA53_80 = input.LA(1);

                         
                        int index53_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_80);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA53_81 = input.LA(1);

                         
                        int index53_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_81);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA53_82 = input.LA(1);

                         
                        int index53_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_82);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA53_83 = input.LA(1);

                         
                        int index53_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_83);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA53_84 = input.LA(1);

                         
                        int index53_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_84);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA53_85 = input.LA(1);

                         
                        int index53_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_85);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA53_86 = input.LA(1);

                         
                        int index53_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_86);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA53_87 = input.LA(1);

                         
                        int index53_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_87);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA53_88 = input.LA(1);

                         
                        int index53_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_88);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA53_89 = input.LA(1);

                         
                        int index53_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_89);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA53_90 = input.LA(1);

                         
                        int index53_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_90);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA53_130 = input.LA(1);

                         
                        int index53_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index53_130);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\14\uffff";
    static final String DFA56_eofS =
        "\14\uffff";
    static final String DFA56_minS =
        "\1\u0087\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA56_maxS =
        "\1\u00c2\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA56_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\7\64\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "76:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred124_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA58_eotS =
        "\122\uffff";
    static final String DFA58_eofS =
        "\122\uffff";
    static final String DFA58_minS =
        "\1\13\1\uffff\13\0\1\uffff\5\0\1\uffff\1\0\26\uffff\4\0\43\uffff";
    static final String DFA58_maxS =
        "\1\u00c2\1\uffff\13\0\1\uffff\5\0\1\uffff\1\0\26\uffff\4\0\43\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\1\13\uffff\1\5\7\uffff\1\7\1\12\1\13\1\15\1\16\1\17\1"+
        "\23\1\24\1\25\1\31\1\32\1\33\1\34\1\35\1\37\1\40\1\41\1\42\1\43"+
        "\1\44\1\45\1\46\4\uffff\1\53\1\54\1\55\1\56\1\61\1\62\1\63\1\64"+
        "\1\65\1\66\1\67\1\70\3\uffff\1\2\1\4\1\6\1\22\1\26\1\60\1\3\1\20"+
        "\1\21\1\30\1\57\1\36\1\14\1\27\1\10\1\11\1\47\1\50\1\51\1\52";
    static final String DFA58_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff"+
        "\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\26\uffff\1\21\1\22\1\23\1"+
        "\24\43\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\24\1\12\1\13\1\32\1\61\22\uffff\1\31\1\21\1\33\1\uffff\1"+
            "\5\1\42\1\34\1\35\1\51\1\20\1\36\1\37\1\40\1\41\1\16\1\43\1"+
            "\44\1\45\1\46\1\47\1\14\4\uffff\1\17\1\60\10\uffff\1\15\1\uffff"+
            "\1\50\4\uffff\1\62\1\uffff\1\63\1\uffff\1\64\5\uffff\1\65\1"+
            "\uffff\1\52\3\uffff\1\66\1\uffff\1\30\1\57\3\uffff\1\25\1\uffff"+
            "\1\3\7\uffff\1\2\17\uffff\1\4\4\uffff\1\15\4\uffff\1\72\1\67"+
            "\1\70\5\uffff\1\6\1\7\1\10\1\11\2\uffff\1\22\1\uffff\1\26\2"+
            "\uffff\1\27\13\uffff\1\1\14\uffff\1\71\10\uffff\1\53\1\54\1"+
            "\55\1\56\3\72",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "79:1: nounStructure : ( prp | citation | cycles | molecule | apparatus | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_2 = input.LA(1);

                         
                        int index58_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred151_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index58_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA58_3 = input.LA(1);

                         
                        int index58_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index58_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA58_4 = input.LA(1);

                         
                        int index58_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred145_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred146_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred151_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred153_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index58_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA58_5 = input.LA(1);

                         
                        int index58_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred151_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred153_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index58_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA58_6 = input.LA(1);

                         
                        int index58_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index58_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA58_7 = input.LA(1);

                         
                        int index58_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index58_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA58_8 = input.LA(1);

                         
                        int index58_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index58_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA58_9 = input.LA(1);

                         
                        int index58_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index58_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA58_10 = input.LA(1);

                         
                        int index58_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index58_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA58_11 = input.LA(1);

                         
                        int index58_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index58_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA58_12 = input.LA(1);

                         
                        int index58_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index58_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred159_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA58_15 = input.LA(1);

                         
                        int index58_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred141_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index58_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA58_16 = input.LA(1);

                         
                        int index58_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred152_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index58_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA58_17 = input.LA(1);

                         
                        int index58_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred137_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index58_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA58_18 = input.LA(1);

                         
                        int index58_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred138_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index58_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA58_20 = input.LA(1);

                         
                        int index58_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index58_20);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA58_43 = input.LA(1);

                         
                        int index58_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 78;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index58_43);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA58_44 = input.LA(1);

                         
                        int index58_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 79;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index58_44);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA58_45 = input.LA(1);

                         
                        int index58_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index58_45);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA58_46 = input.LA(1);

                         
                        int index58_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 81;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index58_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA70_eotS =
        "\u0087\uffff";
    static final String DFA70_eofS =
        "\u0087\uffff";
    static final String DFA70_minS =
        "\1\13\1\0\42\uffff\1\0\4\uffff\2\0\1\uffff\13\0\1\uffff\1\0\56\uffff"+
        "\1\0\37\uffff";
    static final String DFA70_maxS =
        "\1\u00c2\1\0\42\uffff\1\0\4\uffff\2\0\1\uffff\13\0\1\uffff\1\0\56"+
        "\uffff\1\0\37\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\2\50\uffff\1\4\13\uffff\1\11\1\uffff\1\14\56\uffff\1"+
        "\16\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23\1\6\1\21\1"+
        "\20\1\12\1\15";
    static final String DFA70_specialS =
        "\1\uffff\1\0\42\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\uffff\1\17\56\uffff\1\20"+
        "\37\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\66\1\61\1\62\2\71\2\uffff\11\150\1\147\6\150\3\71\1\uffff"+
            "\1\52\17\71\1\63\4\2\2\71\10\2\1\71\1\2\1\71\4\2\1\71\1\2\1"+
            "\71\1\2\1\71\5\2\1\71\1\2\1\71\3\2\1\71\1\2\1\44\1\71\3\2\1"+
            "\71\1\171\1\65\2\uffff\1\67\1\54\3\uffff\1\64\17\uffff\1\51"+
            "\4\uffff\1\71\4\uffff\1\71\1\1\1\71\4\uffff\1\150\1\55\1\56"+
            "\1\57\1\60\1\53\1\uffff\1\71\1\uffff\1\71\2\uffff\1\71\13\uffff"+
            "\1\71\14\uffff\1\70\1\150\1\uffff\6\2\7\71",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "99:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_1 = input.LA(1);

                         
                        int index70_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index70_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA70_36 = input.LA(1);

                         
                        int index70_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index70_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA70_41 = input.LA(1);

                         
                        int index70_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred205_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred217_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index70_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA70_42 = input.LA(1);

                         
                        int index70_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred205_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index70_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA70_44 = input.LA(1);

                         
                        int index70_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 129;}

                         
                        input.seek(index70_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA70_45 = input.LA(1);

                         
                        int index70_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred219_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index70_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA70_46 = input.LA(1);

                         
                        int index70_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred219_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index70_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA70_47 = input.LA(1);

                         
                        int index70_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred219_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index70_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA70_48 = input.LA(1);

                         
                        int index70_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred219_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index70_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA70_49 = input.LA(1);

                         
                        int index70_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred219_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index70_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA70_50 = input.LA(1);

                         
                        int index70_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred219_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index70_50);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA70_51 = input.LA(1);

                         
                        int index70_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index70_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA70_52 = input.LA(1);

                         
                        int index70_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index70_52);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA70_53 = input.LA(1);

                         
                        int index70_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred218_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index70_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA70_54 = input.LA(1);

                         
                        int index70_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred210_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index70_54);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA70_56 = input.LA(1);

                         
                        int index70_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred212_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index70_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA70_103 = input.LA(1);

                         
                        int index70_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred216_ChemicalChunker()) ) {s = 104;}

                         
                        input.seek(index70_103);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA71_eotS =
        "\u008a\uffff";
    static final String DFA71_eofS =
        "\u008a\uffff";
    static final String DFA71_minS =
        "\1\13\1\uffff\3\0\42\uffff\1\0\4\uffff\3\0\1\uffff\11\0\1\uffff"+
        "\1\0\55\uffff\1\0\41\uffff";
    static final String DFA71_maxS =
        "\1\u00c2\1\uffff\3\0\42\uffff\1\0\4\uffff\3\0\1\uffff\11\0\1\uffff"+
        "\1\0\55\uffff\1\0\41\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\26\3\uffff\1\3\51\uffff\1\6\11\uffff\1\13\1\uffff\1\16"+
        "\55\uffff\1\20\20\uffff\1\24\1\1\1\11\1\12\1\22\1\10\1\2\1\4\1\15"+
        "\1\21\1\5\1\7\1\25\1\23\1\14\1\17";
    static final String DFA71_specialS =
        "\2\uffff\1\0\1\1\1\2\42\uffff\1\3\4\uffff\1\4\1\5\1\6\1\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\55\uffff"+
        "\1\21\41\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\70\1\65\1\66\2\73\2\uffff\11\151\1\150\6\151\3\73\1\uffff"+
            "\1\55\17\73\1\67\4\5\2\73\10\5\1\73\1\5\1\73\4\5\1\73\1\5\1"+
            "\73\1\5\1\73\5\5\1\73\1\5\1\73\3\5\1\73\1\5\1\47\1\73\3\5\1"+
            "\56\1\172\1\2\2\uffff\1\71\1\60\3\uffff\1\3\1\1\16\uffff\1\54"+
            "\4\uffff\1\73\4\uffff\1\73\1\4\1\73\4\uffff\1\151\1\61\1\62"+
            "\1\63\1\64\1\57\1\uffff\1\73\1\uffff\1\73\2\uffff\1\73\13\uffff"+
            "\1\73\14\uffff\1\72\1\151\1\uffff\6\5\7\73",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "()+ loopback of 99:141: ( minimixture | fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_2 = input.LA(1);

                         
                        int index71_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 126;}

                         
                        input.seek(index71_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_3 = input.LA(1);

                         
                        int index71_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index71_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_4 = input.LA(1);

                         
                        int index71_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index71_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA71_39 = input.LA(1);

                         
                        int index71_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index71_39);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA71_44 = input.LA(1);

                         
                        int index71_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index71_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA71_45 = input.LA(1);

                         
                        int index71_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index71_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA71_46 = input.LA(1);

                         
                        int index71_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index71_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA71_48 = input.LA(1);

                         
                        int index71_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred241_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index71_48);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA71_49 = input.LA(1);

                         
                        int index71_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index71_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA71_50 = input.LA(1);

                         
                        int index71_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index71_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA71_51 = input.LA(1);

                         
                        int index71_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index71_51);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA71_52 = input.LA(1);

                         
                        int index71_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index71_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA71_53 = input.LA(1);

                         
                        int index71_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index71_53);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA71_54 = input.LA(1);

                         
                        int index71_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred239_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index71_54);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA71_55 = input.LA(1);

                         
                        int index71_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index71_55);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA71_56 = input.LA(1);

                         
                        int index71_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index71_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA71_58 = input.LA(1);

                         
                        int index71_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index71_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA71_104 = input.LA(1);

                         
                        int index71_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred236_ChemicalChunker()) ) {s = 105;}

                         
                        input.seek(index71_104);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA73_eotS =
        "\u0087\uffff";
    static final String DFA73_eofS =
        "\u0087\uffff";
    static final String DFA73_minS =
        "\1\13\1\0\42\uffff\1\0\4\uffff\2\0\1\uffff\13\0\1\uffff\1\0\56\uffff"+
        "\1\0\37\uffff";
    static final String DFA73_maxS =
        "\1\u00c2\1\0\42\uffff\1\0\4\uffff\2\0\1\uffff\13\0\1\uffff\1\0\56"+
        "\uffff\1\0\37\uffff";
    static final String DFA73_acceptS =
        "\2\uffff\1\2\50\uffff\1\4\13\uffff\1\11\1\uffff\1\14\56\uffff\1"+
        "\16\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23\1\6\1\21\1"+
        "\20\1\12\1\15";
    static final String DFA73_specialS =
        "\1\uffff\1\0\42\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\uffff\1\17\56\uffff\1\20"+
        "\37\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\66\1\61\1\62\2\71\2\uffff\11\150\1\147\6\150\3\71\1\uffff"+
            "\1\52\17\71\1\63\4\2\2\71\10\2\1\71\1\2\1\71\4\2\1\71\1\2\1"+
            "\71\1\2\1\71\5\2\1\71\1\2\1\71\3\2\1\71\1\2\1\44\1\71\3\2\1"+
            "\71\1\171\1\65\2\uffff\1\67\1\54\3\uffff\1\64\17\uffff\1\51"+
            "\4\uffff\1\71\4\uffff\1\71\1\1\1\71\4\uffff\1\150\1\55\1\56"+
            "\1\57\1\60\1\53\1\uffff\1\71\1\uffff\1\71\2\uffff\1\71\13\uffff"+
            "\1\71\14\uffff\1\70\1\150\1\uffff\6\2\7\71",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "104:23: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_1 = input.LA(1);

                         
                        int index73_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index73_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_36 = input.LA(1);

                         
                        int index73_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index73_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_41 = input.LA(1);

                         
                        int index73_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred253_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index73_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA73_42 = input.LA(1);

                         
                        int index73_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index73_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA73_44 = input.LA(1);

                         
                        int index73_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 128;}

                        else if ( (true) ) {s = 129;}

                         
                        input.seek(index73_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA73_45 = input.LA(1);

                         
                        int index73_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index73_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA73_46 = input.LA(1);

                         
                        int index73_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index73_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA73_47 = input.LA(1);

                         
                        int index73_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index73_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA73_48 = input.LA(1);

                         
                        int index73_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index73_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA73_49 = input.LA(1);

                         
                        int index73_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index73_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA73_50 = input.LA(1);

                         
                        int index73_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index73_50);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA73_51 = input.LA(1);

                         
                        int index73_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index73_51);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA73_52 = input.LA(1);

                         
                        int index73_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index73_52);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA73_53 = input.LA(1);

                         
                        int index73_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index73_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA73_54 = input.LA(1);

                         
                        int index73_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index73_54);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA73_56 = input.LA(1);

                         
                        int index73_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred254_ChemicalChunker()) ) {s = 57;}

                         
                        input.seek(index73_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA73_103 = input.LA(1);

                         
                        int index73_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 104;}

                         
                        input.seek(index73_103);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA74_eotS =
        "\u0089\uffff";
    static final String DFA74_eofS =
        "\1\1\u0088\uffff";
    static final String DFA74_minS =
        "\1\13\1\uffff\1\0\42\uffff\1\0\4\uffff\3\0\1\uffff\13\0\1\uffff"+
        "\1\0\55\uffff\1\0\40\uffff";
    static final String DFA74_maxS =
        "\1\u00c2\1\uffff\1\0\42\uffff\1\0\4\uffff\3\0\1\uffff\13\0\1\uffff"+
        "\1\0\55\uffff\1\0\40\uffff";
    static final String DFA74_acceptS =
        "\1\uffff\1\25\1\uffff\1\2\51\uffff\1\5\13\uffff\1\12\1\uffff\1\15"+
        "\55\uffff\1\17\20\uffff\1\23\1\1\1\3\1\10\1\11\1\14\1\20\1\4\1\6"+
        "\1\24\1\7\1\22\1\21\1\13\1\16";
    static final String DFA74_specialS =
        "\2\uffff\1\0\42\uffff\1\1\4\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\55\uffff"+
        "\1\21\40\uffff}>";
    static final String[] DFA74_transitionS = {
            "\1\70\1\63\1\64\2\73\2\uffff\11\151\1\150\6\151\3\73\1\uffff"+
            "\1\53\17\73\1\65\4\3\2\73\10\3\1\73\1\3\1\73\4\3\1\73\1\3\1"+
            "\73\1\3\1\73\5\3\1\73\1\3\1\73\3\3\1\73\1\3\1\45\1\73\3\3\1"+
            "\54\1\172\1\67\2\uffff\1\71\1\56\3\uffff\1\66\17\uffff\1\52"+
            "\4\uffff\1\73\4\uffff\1\73\1\2\1\73\4\uffff\1\151\1\57\1\60"+
            "\1\61\1\62\1\55\1\uffff\1\73\1\uffff\1\73\2\uffff\1\73\13\uffff"+
            "\1\73\14\uffff\1\72\1\151\1\uffff\6\3\7\73",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "()+ loopback of 104:145: ( fw | verb | measurements | nnyield | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_2 = input.LA(1);

                         
                        int index74_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index74_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA74_37 = input.LA(1);

                         
                        int index74_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index74_37);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA74_42 = input.LA(1);

                         
                        int index74_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred272_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred276_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index74_42);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA74_43 = input.LA(1);

                         
                        int index74_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index74_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA74_44 = input.LA(1);

                         
                        int index74_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index74_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA74_46 = input.LA(1);

                         
                        int index74_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index74_46);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA74_47 = input.LA(1);

                         
                        int index74_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred278_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index74_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA74_48 = input.LA(1);

                         
                        int index74_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred278_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index74_48);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA74_49 = input.LA(1);

                         
                        int index74_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred278_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index74_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA74_50 = input.LA(1);

                         
                        int index74_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred278_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index74_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA74_51 = input.LA(1);

                         
                        int index74_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred278_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index74_51);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA74_52 = input.LA(1);

                         
                        int index74_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred278_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index74_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA74_53 = input.LA(1);

                         
                        int index74_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index74_53);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA74_54 = input.LA(1);

                         
                        int index74_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index74_54);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA74_55 = input.LA(1);

                         
                        int index74_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred277_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index74_55);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA74_56 = input.LA(1);

                         
                        int index74_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index74_56);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA74_58 = input.LA(1);

                         
                        int index74_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index74_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA74_104 = input.LA(1);

                         
                        int index74_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred275_ChemicalChunker()) ) {s = 105;}

                         
                        input.seek(index74_104);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA78_eotS =
        "\45\uffff";
    static final String DFA78_eofS =
        "\45\uffff";
    static final String DFA78_minS =
        "\1\14\37\0\5\uffff";
    static final String DFA78_maxS =
        "\1\u00b4\37\0\5\uffff";
    static final String DFA78_acceptS =
        "\40\uffff\1\2\1\3\1\1\1\5\1\4";
    static final String DFA78_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\5\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\13\1\14\4\uffff\1\17\1\20\1\16\1\24\1\25\1\33\1\34\1\21\1"+
            "\32\1\26\1\30\1\22\1\23\1\1\1\31\1\27\2\uffff\1\40\7\uffff\1"+
            "\41\120\uffff\1\37\4\uffff\1\36\13\uffff\1\15\1\7\1\10\1\11"+
            "\1\12\31\uffff\1\2\1\3\1\uffff\1\4\1\6\1\uffff\1\5\1\uffff\1"+
            "\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "112:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA78_1 = input.LA(1);

                         
                        int index78_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA78_2 = input.LA(1);

                         
                        int index78_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA78_3 = input.LA(1);

                         
                        int index78_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA78_4 = input.LA(1);

                         
                        int index78_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA78_5 = input.LA(1);

                         
                        int index78_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA78_6 = input.LA(1);

                         
                        int index78_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA78_7 = input.LA(1);

                         
                        int index78_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA78_8 = input.LA(1);

                         
                        int index78_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA78_9 = input.LA(1);

                         
                        int index78_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA78_10 = input.LA(1);

                         
                        int index78_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA78_11 = input.LA(1);

                         
                        int index78_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA78_12 = input.LA(1);

                         
                        int index78_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA78_13 = input.LA(1);

                         
                        int index78_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA78_14 = input.LA(1);

                         
                        int index78_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA78_15 = input.LA(1);

                         
                        int index78_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA78_16 = input.LA(1);

                         
                        int index78_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA78_17 = input.LA(1);

                         
                        int index78_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA78_18 = input.LA(1);

                         
                        int index78_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA78_19 = input.LA(1);

                         
                        int index78_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA78_20 = input.LA(1);

                         
                        int index78_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA78_21 = input.LA(1);

                         
                        int index78_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA78_22 = input.LA(1);

                         
                        int index78_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA78_23 = input.LA(1);

                         
                        int index78_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA78_24 = input.LA(1);

                         
                        int index78_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA78_25 = input.LA(1);

                         
                        int index78_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA78_26 = input.LA(1);

                         
                        int index78_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA78_27 = input.LA(1);

                         
                        int index78_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA78_28 = input.LA(1);

                         
                        int index78_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA78_29 = input.LA(1);

                         
                        int index78_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index78_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA78_30 = input.LA(1);

                         
                        int index78_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                         
                        input.seek(index78_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA78_31 = input.LA(1);

                         
                        int index78_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 33;}

                         
                        input.seek(index78_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 78, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA82_eotS =
        "\31\uffff";
    static final String DFA82_eofS =
        "\31\uffff";
    static final String DFA82_minS =
        "\1\14\1\uffff\13\12\13\0\1\uffff";
    static final String DFA82_maxS =
        "\1\u00b4\1\uffff\13\12\13\0\1\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\2\26\uffff\1\1";
    static final String DFA82_specialS =
        "\15\uffff\1\6\1\3\1\10\1\7\1\4\1\12\1\1\1\5\1\11\1\2\1\0\1\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\13\1\14\4\uffff\20\1\2\uffff\1\1\130\uffff\1\1\4\uffff\1"+
            "\1\13\uffff\1\1\1\7\1\10\1\11\1\12\31\uffff\1\2\1\3\1\uffff"+
            "\1\4\1\6\1\uffff\1\5\1\uffff\1\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()* loopback of 124:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_23 = input.LA(1);

                         
                        int index82_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_23);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA82_19 = input.LA(1);

                         
                        int index82_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA82_22 = input.LA(1);

                         
                        int index82_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA82_14 = input.LA(1);

                         
                        int index82_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA82_17 = input.LA(1);

                         
                        int index82_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_17);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA82_20 = input.LA(1);

                         
                        int index82_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA82_13 = input.LA(1);

                         
                        int index82_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_13);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA82_16 = input.LA(1);

                         
                        int index82_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA82_15 = input.LA(1);

                         
                        int index82_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA82_21 = input.LA(1);

                         
                        int index82_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA82_18 = input.LA(1);

                         
                        int index82_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA89_eotS =
        "\17\uffff";
    static final String DFA89_eofS =
        "\17\uffff";
    static final String DFA89_minS =
        "\1\14\1\uffff\6\12\1\uffff\6\0";
    static final String DFA89_maxS =
        "\1\u00b2\1\uffff\6\12\1\uffff\6\0";
    static final String DFA89_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA89_specialS =
        "\11\uffff\1\4\1\3\1\1\1\5\1\2\1\0}>";
    static final String[] DFA89_transitionS = {
            "\1\6\1\7\30\uffff\1\1\17\uffff\1\1\56\uffff\1\1\7\uffff\1\1"+
            "\17\uffff\1\1\21\uffff\1\2\1\3\1\4\1\5\31\uffff\2\10\1\uffff"+
            "\2\10\1\uffff\1\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "()* loopback of 132:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_14 = input.LA(1);

                         
                        int index89_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index89_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA89_11 = input.LA(1);

                         
                        int index89_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index89_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA89_13 = input.LA(1);

                         
                        int index89_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index89_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA89_10 = input.LA(1);

                         
                        int index89_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index89_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA89_9 = input.LA(1);

                         
                        int index89_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index89_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA89_12 = input.LA(1);

                         
                        int index89_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index89_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\31\uffff";
    static final String DFA92_eofS =
        "\31\uffff";
    static final String DFA92_minS =
        "\1\14\13\12\1\uffff\13\0\1\uffff";
    static final String DFA92_maxS =
        "\1\u00b4\13\12\1\uffff\13\0\1\uffff";
    static final String DFA92_acceptS =
        "\14\uffff\1\2\13\uffff\1\1";
    static final String DFA92_specialS =
        "\15\uffff\1\3\1\7\1\0\1\12\1\10\1\6\1\1\1\4\1\11\1\2\1\5\1\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\12\1\13\4\uffff\20\14\12\uffff\1\14\120\uffff\1\14\4\uffff"+
            "\1\14\13\uffff\1\14\1\6\1\7\1\10\1\11\31\uffff\1\1\1\2\1\uffff"+
            "\1\3\1\5\1\uffff\1\4\1\uffff\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "139:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_15 = input.LA(1);

                         
                        int index92_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA92_19 = input.LA(1);

                         
                        int index92_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA92_22 = input.LA(1);

                         
                        int index92_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA92_13 = input.LA(1);

                         
                        int index92_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA92_20 = input.LA(1);

                         
                        int index92_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA92_23 = input.LA(1);

                         
                        int index92_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_23);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA92_18 = input.LA(1);

                         
                        int index92_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA92_14 = input.LA(1);

                         
                        int index92_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA92_17 = input.LA(1);

                         
                        int index92_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA92_21 = input.LA(1);

                         
                        int index92_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA92_16 = input.LA(1);

                         
                        int index92_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index92_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA105_eotS =
        "\u0088\uffff";
    static final String DFA105_eofS =
        "\1\1\u0087\uffff";
    static final String DFA105_minS =
        "\1\13\5\uffff\6\0\1\uffff\2\0\3\uffff\13\0\153\uffff";
    static final String DFA105_maxS =
        "\1\u00c2\5\uffff\6\0\1\uffff\2\0\3\uffff\13\0\153\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\2\u0085\uffff\1\1";
    static final String DFA105_specialS =
        "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\153\uffff}>";
    static final String[] DFA105_transitionS = {
            "\1\1\1\12\1\13\2\1\2\uffff\21\1\1\32\1\1\1\uffff\1\25\4\1\1"+
            "\31\4\1\1\26\5\1\1\30\4\1\1\27\11\1\1\34\37\1\1\16\1\uffff\3"+
            "\1\1\uffff\2\1\1\23\1\1\15\uffff\1\15\1\24\4\uffff\1\22\1\1"+
            "\3\uffff\3\1\4\uffff\1\1\1\6\1\7\1\10\1\11\1\1\1\uffff\1\33"+
            "\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\3"+
            "\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "()* loopback of 152:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_6 = input.LA(1);

                         
                        int index105_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA105_7 = input.LA(1);

                         
                        int index105_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA105_8 = input.LA(1);

                         
                        int index105_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA105_9 = input.LA(1);

                         
                        int index105_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA105_10 = input.LA(1);

                         
                        int index105_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA105_11 = input.LA(1);

                         
                        int index105_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA105_13 = input.LA(1);

                         
                        int index105_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_13);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA105_14 = input.LA(1);

                         
                        int index105_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA105_18 = input.LA(1);

                         
                        int index105_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA105_19 = input.LA(1);

                         
                        int index105_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA105_20 = input.LA(1);

                         
                        int index105_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA105_21 = input.LA(1);

                         
                        int index105_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA105_22 = input.LA(1);

                         
                        int index105_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA105_23 = input.LA(1);

                         
                        int index105_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA105_24 = input.LA(1);

                         
                        int index105_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA105_25 = input.LA(1);

                         
                        int index105_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA105_26 = input.LA(1);

                         
                        int index105_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA105_27 = input.LA(1);

                         
                        int index105_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA105_28 = input.LA(1);

                         
                        int index105_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA104_eotS =
        "\24\uffff";
    static final String DFA104_eofS =
        "\24\uffff";
    static final String DFA104_minS =
        "\1\14\14\uffff\1\0\6\uffff";
    static final String DFA104_maxS =
        "\1\u0095\14\uffff\1\0\6\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\2\21\uffff\1\1";
    static final String DFA104_specialS =
        "\15\uffff\1\0\6\uffff}>";
    static final String[] DFA104_transitionS = {
            "\2\1\25\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\5\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\1\37\uffff\1\15\7\uffff\1\1\16\uffff"+
            "\1\23\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "()* loopback of 152:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_13 = input.LA(1);

                         
                        int index104_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\32\uffff";
    static final String DFA111_eofS =
        "\1\1\31\uffff";
    static final String DFA111_minS =
        "\1\14\1\uffff\20\0\10\uffff";
    static final String DFA111_maxS =
        "\1\u0095\1\uffff\20\0\10\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\11\20\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA111_specialS =
        "\2\uffff\1\0\1\11\1\14\1\4\1\16\1\13\1\7\1\3\1\2\1\6\1\15\1\10\1"+
        "\17\1\1\1\5\1\12\10\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\11\1\12\25\uffff\1\20\2\uffff\1\4\4\uffff\1\17\4\uffff\1"+
            "\13\5\uffff\1\16\4\uffff\1\14\11\uffff\1\1\37\uffff\1\15\7\uffff"+
            "\1\2\17\uffff\1\3\21\uffff\1\5\1\6\1\7\1\10\2\uffff\1\21",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()+ loopback of 159:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_15 = input.LA(1);

                         
                        int index111_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred348_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA111_16 = input.LA(1);

                         
                        int index111_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_16);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA111_11 = input.LA(1);

                         
                        int index111_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA111_13 = input.LA(1);

                         
                        int index111_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA111_17 = input.LA(1);

                         
                        int index111_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA111_12 = input.LA(1);

                         
                        int index111_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_12);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA111_6 = input.LA(1);

                         
                        int index111_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_6);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA111_14 = input.LA(1);

                         
                        int index111_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA115_eotS =
        "\u0088\uffff";
    static final String DFA115_eofS =
        "\1\3\u0087\uffff";
    static final String DFA115_minS =
        "\1\13\2\0\u0085\uffff";
    static final String DFA115_maxS =
        "\1\u00c2\2\0\u0085\uffff";
    static final String DFA115_acceptS =
        "\3\uffff\1\2\u0083\uffff\1\1";
    static final String DFA115_specialS =
        "\1\uffff\1\0\1\1\u0085\uffff}>";
    static final String[] DFA115_transitionS = {
            "\5\3\2\uffff\23\3\1\uffff\1\2\77\3\1\uffff\3\3\1\uffff\4\3\15"+
            "\uffff\1\3\1\1\4\uffff\2\3\3\uffff\3\3\4\uffff\6\3\1\uffff\1"+
            "\3\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff\5\3\1\uffff"+
            "\3\3\1\uffff\15\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "162:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA115_1 = input.LA(1);

                         
                        int index115_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index115_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA115_2 = input.LA(1);

                         
                        int index115_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index115_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA116_eotS =
        "\12\uffff";
    static final String DFA116_eofS =
        "\12\uffff";
    static final String DFA116_minS =
        "\1\46\1\12\1\uffff\1\45\1\uffff\1\12\3\uffff\1\45";
    static final String DFA116_maxS =
        "\1\175\1\12\1\uffff\1\u0095\1\uffff\1\12\3\uffff\1\175";
    static final String DFA116_acceptS =
        "\2\uffff\1\1\1\uffff\1\5\1\uffff\1\3\1\4\1\2\1\uffff";
    static final String DFA116_specialS =
        "\12\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\2\126\uffff\1\1",
            "\1\3",
            "",
            "\1\6\1\2\1\10\2\uffff\1\4\77\uffff\1\7\22\uffff\1\5\27\uffff"+
            "\1\7",
            "",
            "\1\11",
            "",
            "",
            "",
            "\1\6\1\2\1\10\2\uffff\1\4\122\uffff\1\5"
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "163:1: measurementtypes : ( molar | amount | mass | percent | volume );";
        }
    }
    static final String DFA118_eotS =
        "\14\uffff";
    static final String DFA118_eofS =
        "\3\uffff\1\5\10\uffff";
    static final String DFA118_minS =
        "\1\66\1\12\1\uffff\1\13\1\12\1\uffff\1\12\1\uffff\1\66\1\0\2\uffff";
    static final String DFA118_maxS =
        "\1\155\1\12\1\uffff\1\u00c2\1\12\1\uffff\1\12\1\uffff\1\66\1\0\2"+
        "\uffff";
    static final String DFA118_acceptS =
        "\2\uffff\1\4\2\uffff\1\5\1\uffff\1\3\2\uffff\1\2\1\1";
    static final String DFA118_specialS =
        "\10\uffff\1\1\1\0\2\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\1\66\uffff\1\2",
            "\1\3",
            "",
            "\5\5\2\uffff\23\5\1\uffff\20\5\1\6\57\5\1\7\1\5\1\4\1\5\1\uffff"+
            "\4\5\15\uffff\2\5\4\uffff\2\5\3\uffff\3\5\4\uffff\6\5\1\uffff"+
            "\1\5\1\uffff\1\5\2\uffff\1\5\13\uffff\1\5\5\uffff\5\5\1\uffff"+
            "\3\5\1\uffff\15\5",
            "\1\10",
            "",
            "\1\11",
            "",
            "\1\12",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "167:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA118_9 = input.LA(1);

                         
                        int index118_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred360_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA118_8 = input.LA(1);

                         
                        int index118_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA118_8==54) ) {s = 10;}

                        else if ( (synpred362_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index118_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\14\uffff";
    static final String DFA124_eofS =
        "\14\uffff";
    static final String DFA124_minS =
        "\1\14\7\uffff\1\0\3\uffff";
    static final String DFA124_maxS =
        "\1\u0092\7\uffff\1\0\3\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\3\7\uffff\1\1\1\uffff\1\2";
    static final String DFA124_specialS =
        "\10\uffff\1\0\3\uffff}>";
    static final String[] DFA124_transitionS = {
            "\2\1\30\uffff\1\11\17\uffff\1\1\56\uffff\1\13\7\uffff\1\10\17"+
            "\uffff\1\11\21\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "()* loopback of 180:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_8 = input.LA(1);

                         
                        int index124_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred372_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\13\uffff";
    static final String DFA125_eofS =
        "\1\2\12\uffff";
    static final String DFA125_minS =
        "\1\13\1\0\1\uffff\7\0\1\uffff";
    static final String DFA125_maxS =
        "\1\u00c2\1\0\1\uffff\7\0\1\uffff";
    static final String DFA125_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA125_specialS =
        "\1\uffff\1\3\1\uffff\1\0\1\7\1\6\1\1\1\4\1\2\1\5\1\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\2\1\7\1\10\2\2\2\uffff\23\2\1\uffff\20\2\1\11\57\2\1\uffff"+
            "\3\2\1\uffff\2\2\1\1\1\2\15\uffff\2\2\4\uffff\2\2\3\uffff\3"+
            "\2\4\uffff\1\2\1\3\1\4\1\5\1\6\1\2\1\uffff\1\2\1\uffff\1\2\2"+
            "\uffff\1\2\13\uffff\1\2\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "()+ loopback of 180:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_3 = input.LA(1);

                         
                        int index125_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_6 = input.LA(1);

                         
                        int index125_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA125_8 = input.LA(1);

                         
                        int index125_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA125_7 = input.LA(1);

                         
                        int index125_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA125_9 = input.LA(1);

                         
                        int index125_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA125_5 = input.LA(1);

                         
                        int index125_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA125_4 = input.LA(1);

                         
                        int index125_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index125_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA126_eotS =
        "\u008a\uffff";
    static final String DFA126_eofS =
        "\1\1\u0089\uffff";
    static final String DFA126_minS =
        "\1\13\3\uffff\1\0\13\uffff\1\0\1\uffff\2\0\166\uffff";
    static final String DFA126_maxS =
        "\1\u00c2\3\uffff\1\0\13\uffff\1\0\1\uffff\2\0\166\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\4\u0085\uffff\1\1\1\3\1\2";
    static final String DFA126_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\uffff\1\2\1\3\166\uffff}>";
    static final String[] DFA126_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\1\23\76\1\1\4\1\uffff\3\1\1\uffff"+
            "\2\1\1\20\1\1\15\uffff\1\1\1\22\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "()* loopback of 180:39: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_4 = input.LA(1);

                         
                        int index126_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred374_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred376_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_16 = input.LA(1);

                         
                        int index126_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred374_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred376_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA126_18 = input.LA(1);

                         
                        int index126_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA126_19 = input.LA(1);

                         
                        int index126_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA127_eotS =
        "\15\uffff";
    static final String DFA127_eofS =
        "\15\uffff";
    static final String DFA127_minS =
        "\1\14\4\0\10\uffff";
    static final String DFA127_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA127_acceptS =
        "\5\uffff\1\2\6\uffff\1\1";
    static final String DFA127_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA127_transitionS = {
            "\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1\17\uffff"+
            "\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "181:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_1 = input.LA(1);

                         
                        int index127_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index127_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA127_2 = input.LA(1);

                         
                        int index127_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index127_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA127_3 = input.LA(1);

                         
                        int index127_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index127_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA127_4 = input.LA(1);

                         
                        int index127_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index127_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\u008a\uffff";
    static final String DFA131_eofS =
        "\1\1\u0089\uffff";
    static final String DFA131_minS =
        "\1\13\3\uffff\1\0\13\uffff\1\0\1\uffff\2\0\166\uffff";
    static final String DFA131_maxS =
        "\1\u00c2\3\uffff\1\0\13\uffff\1\0\1\uffff\2\0\166\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\4\u0085\uffff\1\1\1\3\1\2";
    static final String DFA131_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\uffff\1\2\1\3\166\uffff}>";
    static final String[] DFA131_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\1\23\76\1\1\4\1\uffff\3\1\1\uffff"+
            "\2\1\1\20\1\1\15\uffff\1\1\1\22\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "()* loopback of 192:25: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_4 = input.LA(1);

                         
                        int index131_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred381_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_16 = input.LA(1);

                         
                        int index131_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred381_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA131_18 = input.LA(1);

                         
                        int index131_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA131_19 = input.LA(1);

                         
                        int index131_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\100\uffff";
    static final String DFA133_eofS =
        "\1\1\77\uffff";
    static final String DFA133_minS =
        "\1\13\1\uffff\75\0\1\uffff";
    static final String DFA133_maxS =
        "\1\u00c2\1\uffff\75\0\1\uffff";
    static final String DFA133_acceptS =
        "\1\uffff\1\2\75\uffff\1\1";
    static final String DFA133_specialS =
        "\2\uffff\1\72\1\11\1\67\1\56\1\62\1\61\1\6\1\42\1\47\1\66\1\50\1"+
        "\65\1\64\1\26\1\63\1\71\1\36\1\7\1\27\1\30\1\51\1\5\1\24\1\40\1"+
        "\22\1\4\1\21\1\57\1\25\1\13\1\52\1\15\1\70\1\31\1\0\1\73\1\10\1"+
        "\55\1\20\1\17\1\32\1\54\1\74\1\44\1\33\1\12\1\16\1\37\1\41\1\53"+
        "\1\23\1\46\1\3\1\35\1\34\1\1\1\43\1\14\1\2\1\45\1\60\1\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\16\1\7\1\10\1\33\1\62\2\uffff\20\1\1\32\1\24\1\34\1\uffff"+
            "\1\14\1\43\1\35\1\36\1\52\1\23\1\37\1\40\1\41\1\42\1\21\1\44"+
            "\1\45\1\46\1\47\1\50\1\15\4\1\1\22\1\61\10\1\1\26\1\1\1\51\4"+
            "\1\1\63\1\1\1\64\1\1\1\65\5\1\1\66\1\1\1\53\3\1\1\67\1\1\1\31"+
            "\1\60\3\1\1\27\1\1\1\2\1\uffff\3\1\1\uffff\2\1\1\11\1\1\15\uffff"+
            "\1\1\1\13\4\uffff\1\20\1\1\3\uffff\1\75\1\70\1\71\4\uffff\1"+
            "\1\1\3\1\4\1\5\1\6\1\1\1\uffff\1\25\1\uffff\1\30\2\uffff\1\12"+
            "\13\uffff\1\17\5\uffff\5\1\1\uffff\1\1\1\72\1\1\1\uffff\6\1"+
            "\1\54\1\55\1\56\1\57\1\73\1\74\1\76",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "()+ loopback of 198:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_36 = input.LA(1);

                         
                        int index133_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_36);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_57 = input.LA(1);

                         
                        int index133_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_57);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA133_60 = input.LA(1);

                         
                        int index133_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_60);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA133_54 = input.LA(1);

                         
                        int index133_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_54);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA133_27 = input.LA(1);

                         
                        int index133_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_27);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA133_23 = input.LA(1);

                         
                        int index133_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_23);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA133_8 = input.LA(1);

                         
                        int index133_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA133_19 = input.LA(1);

                         
                        int index133_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA133_38 = input.LA(1);

                         
                        int index133_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_38);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA133_3 = input.LA(1);

                         
                        int index133_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA133_47 = input.LA(1);

                         
                        int index133_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_47);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA133_31 = input.LA(1);

                         
                        int index133_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_31);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA133_59 = input.LA(1);

                         
                        int index133_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_59);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA133_33 = input.LA(1);

                         
                        int index133_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_33);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA133_48 = input.LA(1);

                         
                        int index133_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_48);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA133_41 = input.LA(1);

                         
                        int index133_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_41);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA133_40 = input.LA(1);

                         
                        int index133_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_40);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA133_28 = input.LA(1);

                         
                        int index133_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_28);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA133_26 = input.LA(1);

                         
                        int index133_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_26);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA133_52 = input.LA(1);

                         
                        int index133_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_52);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA133_24 = input.LA(1);

                         
                        int index133_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA133_30 = input.LA(1);

                         
                        int index133_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_30);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA133_15 = input.LA(1);

                         
                        int index133_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_15);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA133_20 = input.LA(1);

                         
                        int index133_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_20);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA133_21 = input.LA(1);

                         
                        int index133_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_21);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA133_35 = input.LA(1);

                         
                        int index133_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_35);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA133_42 = input.LA(1);

                         
                        int index133_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_42);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA133_46 = input.LA(1);

                         
                        int index133_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_46);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA133_56 = input.LA(1);

                         
                        int index133_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_56);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA133_55 = input.LA(1);

                         
                        int index133_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_55);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA133_18 = input.LA(1);

                         
                        int index133_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_18);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA133_49 = input.LA(1);

                         
                        int index133_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_49);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA133_25 = input.LA(1);

                         
                        int index133_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_25);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA133_50 = input.LA(1);

                         
                        int index133_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_50);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA133_9 = input.LA(1);

                         
                        int index133_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_9);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA133_58 = input.LA(1);

                         
                        int index133_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_58);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA133_45 = input.LA(1);

                         
                        int index133_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_45);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA133_61 = input.LA(1);

                         
                        int index133_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_61);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA133_53 = input.LA(1);

                         
                        int index133_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_53);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA133_10 = input.LA(1);

                         
                        int index133_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_10);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA133_12 = input.LA(1);

                         
                        int index133_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_12);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA133_22 = input.LA(1);

                         
                        int index133_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_22);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA133_32 = input.LA(1);

                         
                        int index133_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_32);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA133_51 = input.LA(1);

                         
                        int index133_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_51);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA133_43 = input.LA(1);

                         
                        int index133_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_43);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA133_39 = input.LA(1);

                         
                        int index133_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_39);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA133_5 = input.LA(1);

                         
                        int index133_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_5);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA133_29 = input.LA(1);

                         
                        int index133_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_29);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA133_62 = input.LA(1);

                         
                        int index133_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_62);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA133_7 = input.LA(1);

                         
                        int index133_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_7);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA133_6 = input.LA(1);

                         
                        int index133_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_6);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA133_16 = input.LA(1);

                         
                        int index133_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_16);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA133_14 = input.LA(1);

                         
                        int index133_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_14);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA133_13 = input.LA(1);

                         
                        int index133_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_13);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA133_11 = input.LA(1);

                         
                        int index133_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_11);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA133_4 = input.LA(1);

                         
                        int index133_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_4);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA133_34 = input.LA(1);

                         
                        int index133_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_34);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA133_17 = input.LA(1);

                         
                        int index133_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_17);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA133_2 = input.LA(1);

                         
                        int index133_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_2);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA133_37 = input.LA(1);

                         
                        int index133_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_37);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA133_44 = input.LA(1);

                         
                        int index133_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA140_eotS =
        "\u0088\uffff";
    static final String DFA140_eofS =
        "\1\1\u0087\uffff";
    static final String DFA140_minS =
        "\1\13\1\uffff\1\0\u0085\uffff";
    static final String DFA140_maxS =
        "\1\u00c2\1\uffff\1\0\u0085\uffff";
    static final String DFA140_acceptS =
        "\1\uffff\1\2\u0085\uffff\1\1";
    static final String DFA140_specialS =
        "\2\uffff\1\0\u0085\uffff}>";
    static final String[] DFA140_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\77\1\1\2\1\uffff\3\1\1\uffff\4\1\15"+
            "\uffff\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1"+
            "\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1"+
            "\1\uffff\15\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "()* loopback of 214:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_2 = input.LA(1);

                         
                        int index140_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred394_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\12\uffff";
    static final String DFA143_eofS =
        "\1\1\11\uffff";
    static final String DFA143_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA143_maxS =
        "\1\u00c2\1\uffff\4\0\4\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\2\1\3\1\4";
    static final String DFA143_specialS =
        "\2\uffff\1\0\1\1\1\3\1\2\4\uffff}>";
    static final String[] DFA143_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\100\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\4\1\5\1\2\1\3\16\uffff\1\1\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()+ loopback of 219:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA143_5 = input.LA(1);

                         
                        int index143_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA143_4 = input.LA(1);

                         
                        int index143_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\104\uffff";
    static final String DFA144_eofS =
        "\104\uffff";
    static final String DFA144_minS =
        "\1\13\17\uffff\1\0\63\uffff";
    static final String DFA144_maxS =
        "\1\u00c2\17\uffff\1\0\63\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\2\101\uffff\1\1";
    static final String DFA144_specialS =
        "\20\uffff\1\0\63\uffff}>";
    static final String[] DFA144_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\20\7\uffff"+
            "\1\1\16\uffff\1\103\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff\4\1"+
            "\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\2"+
            "\1\1\uffff\2\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_16 = input.LA(1);

                         
                        int index144_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA145_eotS =
        "\17\uffff";
    static final String DFA145_eofS =
        "\17\uffff";
    static final String DFA145_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA145_maxS =
        "\1\u00c2\1\uffff\6\12\1\uffff\6\0";
    static final String DFA145_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA145_specialS =
        "\11\uffff\1\1\1\0\1\4\1\5\1\2\1\3}>";
    static final String[] DFA145_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\1\7\uffff\1\1\17\uffff\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff"+
            "\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\2\10\1\uffff\2\10\1\uffff\1\10\1\1\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()* loopback of 56:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_10 = input.LA(1);

                         
                        int index145_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA145_9 = input.LA(1);

                         
                        int index145_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA145_13 = input.LA(1);

                         
                        int index145_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA145_14 = input.LA(1);

                         
                        int index145_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA145_11 = input.LA(1);

                         
                        int index145_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA145_12 = input.LA(1);

                         
                        int index145_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index145_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\102\uffff";
    static final String DFA146_eofS =
        "\102\uffff";
    static final String DFA146_minS =
        "\1\13\75\0\4\uffff";
    static final String DFA146_maxS =
        "\1\u00c2\75\0\4\uffff";
    static final String DFA146_acceptS =
        "\76\uffff\1\1\1\2\1\4\1\3";
    static final String DFA146_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\4\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\15\1\6\1\7\1\32\1\61\22\uffff\1\31\1\23\1\33\1\uffff\1\12"+
            "\1\42\1\34\1\35\1\51\1\22\1\36\1\37\1\40\1\41\1\20\1\43\1\44"+
            "\1\45\1\46\1\47\1\14\4\uffff\1\21\1\60\10\uffff\1\25\1\uffff"+
            "\1\50\4\uffff\1\62\1\uffff\1\63\1\uffff\1\64\5\uffff\1\65\1"+
            "\uffff\1\52\3\uffff\1\66\1\uffff\1\30\1\57\3\uffff\1\26\1\uffff"+
            "\1\13\7\uffff\1\1\17\uffff\1\11\4\uffff\1\17\4\uffff\1\74\1"+
            "\67\1\70\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\24\1\uffff\1\27\2"+
            "\uffff\1\10\13\uffff\1\16\14\uffff\1\71\10\uffff\1\53\1\54\1"+
            "\55\1\56\1\72\1\73\1\75",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "56:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_5 = input.LA(1);

                         
                        int index146_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_6 = input.LA(1);

                         
                        int index146_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA146_7 = input.LA(1);

                         
                        int index146_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA146_8 = input.LA(1);

                         
                        int index146_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA146_9 = input.LA(1);

                         
                        int index146_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA146_10 = input.LA(1);

                         
                        int index146_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA146_11 = input.LA(1);

                         
                        int index146_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA146_12 = input.LA(1);

                         
                        int index146_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA146_13 = input.LA(1);

                         
                        int index146_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred43_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA146_14 = input.LA(1);

                         
                        int index146_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA146_15 = input.LA(1);

                         
                        int index146_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA146_16 = input.LA(1);

                         
                        int index146_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA146_17 = input.LA(1);

                         
                        int index146_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA146_18 = input.LA(1);

                         
                        int index146_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA146_19 = input.LA(1);

                         
                        int index146_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA146_20 = input.LA(1);

                         
                        int index146_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA146_21 = input.LA(1);

                         
                        int index146_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA146_22 = input.LA(1);

                         
                        int index146_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA146_23 = input.LA(1);

                         
                        int index146_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA146_24 = input.LA(1);

                         
                        int index146_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA146_25 = input.LA(1);

                         
                        int index146_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA146_26 = input.LA(1);

                         
                        int index146_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA146_27 = input.LA(1);

                         
                        int index146_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA146_28 = input.LA(1);

                         
                        int index146_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA146_29 = input.LA(1);

                         
                        int index146_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA146_30 = input.LA(1);

                         
                        int index146_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA146_31 = input.LA(1);

                         
                        int index146_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA146_32 = input.LA(1);

                         
                        int index146_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA146_33 = input.LA(1);

                         
                        int index146_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA146_34 = input.LA(1);

                         
                        int index146_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA146_35 = input.LA(1);

                         
                        int index146_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA146_36 = input.LA(1);

                         
                        int index146_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA146_37 = input.LA(1);

                         
                        int index146_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA146_38 = input.LA(1);

                         
                        int index146_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA146_39 = input.LA(1);

                         
                        int index146_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA146_40 = input.LA(1);

                         
                        int index146_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA146_41 = input.LA(1);

                         
                        int index146_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA146_42 = input.LA(1);

                         
                        int index146_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA146_43 = input.LA(1);

                         
                        int index146_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA146_44 = input.LA(1);

                         
                        int index146_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA146_45 = input.LA(1);

                         
                        int index146_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA146_46 = input.LA(1);

                         
                        int index146_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA146_47 = input.LA(1);

                         
                        int index146_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA146_48 = input.LA(1);

                         
                        int index146_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA146_49 = input.LA(1);

                         
                        int index146_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA146_50 = input.LA(1);

                         
                        int index146_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA146_51 = input.LA(1);

                         
                        int index146_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA146_52 = input.LA(1);

                         
                        int index146_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA146_53 = input.LA(1);

                         
                        int index146_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA146_54 = input.LA(1);

                         
                        int index146_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA146_55 = input.LA(1);

                         
                        int index146_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA146_56 = input.LA(1);

                         
                        int index146_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA146_57 = input.LA(1);

                         
                        int index146_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA146_58 = input.LA(1);

                         
                        int index146_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA146_59 = input.LA(1);

                         
                        int index146_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA146_60 = input.LA(1);

                         
                        int index146_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA146_61 = input.LA(1);

                         
                        int index146_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index146_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\17\uffff";
    static final String DFA152_eofS =
        "\17\uffff";
    static final String DFA152_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA152_maxS =
        "\1\u009a\6\12\1\uffff\6\0\1\uffff";
    static final String DFA152_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA152_specialS =
        "\10\uffff\1\5\1\0\1\1\1\3\1\2\1\4\1\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\7\1\5\1\6\30\uffff\1\7\17\uffff\1\7\56\uffff\1\7\7\uffff"+
            "\1\7\17\uffff\1\7\21\uffff\1\1\1\2\1\3\1\4\7\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "63:47: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_9 = input.LA(1);

                         
                        int index152_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index152_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA152_10 = input.LA(1);

                         
                        int index152_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index152_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA152_12 = input.LA(1);

                         
                        int index152_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index152_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA152_11 = input.LA(1);

                         
                        int index152_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index152_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA152_13 = input.LA(1);

                         
                        int index152_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index152_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA152_8 = input.LA(1);

                         
                        int index152_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index152_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\15\uffff";
    static final String DFA154_eofS =
        "\15\uffff";
    static final String DFA154_minS =
        "\1\13\4\0\10\uffff";
    static final String DFA154_maxS =
        "\1\u0092\4\0\10\uffff";
    static final String DFA154_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA154_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\14\2\5\30\uffff\1\3\17\uffff\1\5\56\uffff\1\4\7\uffff\1\1"+
            "\17\uffff\1\2\21\uffff\4\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "63:57: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_1 = input.LA(1);

                         
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_2 = input.LA(1);

                         
                        int index154_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index154_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA154_3 = input.LA(1);

                         
                        int index154_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index154_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA154_4 = input.LA(1);

                         
                        int index154_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index154_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA167_eotS =
        "\24\uffff";
    static final String DFA167_eofS =
        "\24\uffff";
    static final String DFA167_minS =
        "\1\14\14\uffff\1\0\6\uffff";
    static final String DFA167_maxS =
        "\1\u0095\14\uffff\1\0\6\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\2\21\uffff\1\1";
    static final String DFA167_specialS =
        "\15\uffff\1\0\6\uffff}>";
    static final String[] DFA167_transitionS = {
            "\2\1\25\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\5\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\1\37\uffff\1\15\7\uffff\1\1\16\uffff"+
            "\1\23\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "()* loopback of 152:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_13 = input.LA(1);

                         
                        int index167_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document208 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x200078BFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_sentence_in_sentences230 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20007ABFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences232 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x20007ABFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_sentences240 = new BitSet(new long[]{0x0000000000000002L,0x0000022000000000L});
    public static final BitSet FOLLOW_stop_in_sentences242 = new BitSet(new long[]{0x0000000000000002L,0x0000022000000000L});
    public static final BitSet FOLLOW_nounphrase_in_sentence253 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020BFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_verbphrase_in_sentence255 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020BFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphrase_in_sentence257 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020BFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_advAdj_in_sentence262 = new BitSet(new long[]{0x0000000000003002L,0x1000003000000000L,0x0005F00000078000L});
    public static final BitSet FOLLOW_colon_in_sentence264 = new BitSet(new long[]{0x0000000000003002L,0x1000003000000000L,0x0005F00000078000L});
    public static final BitSet FOLLOW_conjunction_in_sentence270 = new BitSet(new long[]{0x0000000000000002L,0x1000002000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rbconj_in_sentence272 = new BitSet(new long[]{0x0000000000000002L,0x1000002000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_unmatchedTokens306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dtTHE_in_unmatchedTokens316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_unmatchedTokens334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_unmatchedTokens336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_unmatchedTokens340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_unmatchedTokens342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2409 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2412 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2415 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2420 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2422 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure2424 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2426 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2434 = new BitSet(new long[]{0x187FFFDC0000F800L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2437 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2441 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2443 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure2445 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2447 = new BitSet(new long[]{0x187FFFDC0820F802L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2457 = new BitSet(new long[]{0x0040004008203802L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2460 = new BitSet(new long[]{0x0040004008203802L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2463 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_dissolvePhrase478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_dissolvePhrase480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_dissolveStructure1504 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure1506 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1509 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1513 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1515 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure1519 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure1521 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1524 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1528 = new BitSet(new long[]{0x0000000000200000L,0x0000400000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1530 = new BitSet(new long[]{0x0000000000200000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_dissolveStructure1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure2544 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2547 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2551 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2553 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure2557 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure2559 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2562 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2566 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2568 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_cc_in_conjunction584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_verbphraseStructure615 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure618 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure621 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure624 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure628 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure631 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure634 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure637 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure640 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure643 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure646 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure649 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure652 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure658 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure662 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure665 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure668 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x300020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_vb_in_verb680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbimmerse_in_verb696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounStructure_in_noun799 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_noun802 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_nounStructure_in_noun804 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_prp_in_nounStructure815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_nounStructure817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycles_in_nounStructure819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_nounStructure821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_nounStructure823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_nounStructure827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_nounStructure829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_nounStructure831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_nounStructure833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_nounStructure835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_nounStructure837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnexample_in_nounStructure841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_nounStructure843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_nounStructure845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_nounStructure847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_nounStructure849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_nounStructure851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_nounStructure855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_nounStructure857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_nounStructure859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_nounStructure861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_nounStructure863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_nounStructure865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_nounStructure867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_nounStructure869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_nounStructure871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_nounStructure873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_nounStructure875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_nounStructure881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_nounStructure883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_nounStructure887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_nounStructure889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_nounStructure891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_nounStructure893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_nounStructure895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_nounStructure897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_nounStructure901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_nounStructure903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nndry_in_nounStructure905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_nounStructure907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_nounStructure909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_nounStructure911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_nounStructure913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_nounStructure917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_nounStructure919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_nounStructure921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_nounStructure923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_nounStructure925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_range931 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_range933 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_range935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycleStructure_in_cycles942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_cycleStructure960 = new BitSet(new long[]{0x0851084800003000L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_dashNN_in_cycleStructure962 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_nncycle_in_cycleStructure965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_dashNN975 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_nn_in_dashNN977 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_cd_in_dashNN979 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_dashNN983 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_adj_in_dashNN986 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_nn_in_dashNN988 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_cd_in_dashNN990 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_numberratio_in_ratio1003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounratio_in_ratio1005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_numberratio1029 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_colon_in_numberratio1032 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_numberratio1034 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_noun_in_nounratio1047 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_colon_in_nounratio1051 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_nounratio1053 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_citationStructure1_in_citation1066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure2_in_citation1068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_citationStructure11091 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure11093 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure11095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_citationStructure21101 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_lrb_in_citationStructure21103 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure21105 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure21107 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_comma_in_citationStructure21109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_citationContent1118 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_fw_in_citationContent1120 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_cd_in_citationContent1122 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_conjunction_in_citationContent1124 = new BitSet(new long[]{0x0000000000000000L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_nnp_in_citationContent1128 = new BitSet(new long[]{0x0000000000000002L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_fw_in_citationContent1130 = new BitSet(new long[]{0x0000000000000002L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_cd_in_citationContent1132 = new BitSet(new long[]{0x0000000000000002L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_conjunction_in_citationContent1134 = new BitSet(new long[]{0x0000000000000002L,0x3000002000000000L,0x0000000004000100L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture1146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture1148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21169 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure21171 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure21173 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure21175 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure11184 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure11186 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure11188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1197 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_verb_in_mixtureContent1199 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1201 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_mixtureContent1203 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1205 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1207 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1209 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1211 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_dash_in_mixtureContent1213 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_sym_in_mixtureContent1215 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1217 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_mixtureContent1219 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inof_in_mixtureContent1221 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1223 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1225 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_mixtureContent1227 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_mixtureContent1229 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_colon_in_mixtureContent1231 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1233 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_minimixture_in_mixtureContent1237 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1239 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_verb_in_mixtureContent1241 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1243 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_nnyield_in_mixtureContent1245 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_mixtureContent1247 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1249 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1251 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1253 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1255 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_dash_in_mixtureContent1257 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_sym_in_mixtureContent1259 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1261 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_mixtureContent1263 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inof_in_mixtureContent1265 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1267 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1269 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_mixtureContent1271 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_mixtureContent1273 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_colon_in_mixtureContent1275 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1277 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture1290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21311 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure21313 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure21315 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure21317 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure11326 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure11328 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure11330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_minimixtureContent1339 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_verb_in_minimixtureContent1341 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1343 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_minimixtureContent1345 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1347 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1349 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1351 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1353 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_dash_in_minimixtureContent1355 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_sym_in_minimixtureContent1357 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1359 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_minimixtureContent1361 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inof_in_minimixtureContent1363 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1365 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1367 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_minimixtureContent1369 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_minimixtureContent1371 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_colon_in_minimixtureContent1373 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1375 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_fw_in_minimixtureContent1379 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_verb_in_minimixtureContent1381 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1383 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_nnyield_in_minimixtureContent1385 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_md_in_minimixtureContent1387 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1389 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1391 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1393 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1395 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_dash_in_minimixtureContent1397 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_sym_in_minimixtureContent1399 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1401 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_minimixtureContent1403 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inof_in_minimixtureContent1405 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1407 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1409 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_minimixtureContent1411 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_adj_in_minimixtureContent1413 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_colon_in_minimixtureContent1415 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1417 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x2000233FFFFFFFFFL,0xFFDDF04004AFC384L,0x0000000000000007L});
    public static final BitSet FOLLOW_jj_in_adj1428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj1436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj1438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv1445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv1447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv1453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase1466 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_advAdj1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_advAdj1494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1503 = new BitSet(new long[]{0x00000003FFFC3000L,0x0000000000000000L,0x0015B0000007C000L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther1506 = new BitSet(new long[]{0x187FFFDFFFFCF800L,0x20002028D14150A0L,0xF01DB04004A7C38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf1537 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1580 = new BitSet(new long[]{0x00000013FFFC3000L,0x2000000000000000L,0x0015B0000007C004L});
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1583 = new BitSet(new long[]{0x0000001000003000L,0x2000000000000000L,0x0005B00000078004L});
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1587 = new BitSet(new long[]{0x0000001000003000L,0x2000000000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1590 = new BitSet(new long[]{0x0000001000003000L,0x2000000000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1593 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1596 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1608 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1654 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0005B00000078004L});
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1657 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1660 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1663 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll1701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll1703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll1705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll1707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll1709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1740 = new BitSet(new long[]{0x00001003FFFC3000L,0x2000000000000000L,0x0015B0000007C004L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1743 = new BitSet(new long[]{0x0000100000003000L,0x2000000000000000L,0x0005B00000078004L});
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1746 = new BitSet(new long[]{0x0000100000003000L,0x2000000000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1749 = new BitSet(new long[]{0x0000100000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1752 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1755 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_cd_in_amount1770 = new BitSet(new long[]{0x0000008000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nnamount_in_amount1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass1795 = new BitSet(new long[]{0x0000002000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nnmass_in_mass1798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1820 = new BitSet(new long[]{0x0841084800003000L,0x2000242000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nn_in_percent1822 = new BitSet(new long[]{0x0841084800003000L,0x2000242000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1849 = new BitSet(new long[]{0x0000040000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_molar1874 = new BitSet(new long[]{0x0000004000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_nnmolar_in_molar1877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1901 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_inas_in_preparationphrase1903 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1906 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_preparationphrase1908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1924 = new BitSet(new long[]{0x0841084800003002L,0x3000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1927 = new BitSet(new long[]{0x0841084800003000L,0x3000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1930 = new BitSet(new long[]{0x0841084800003002L,0x3000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_dt_in_apparatus1942 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_preapparatus_in_apparatus1945 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_nnApp_in_apparatus1948 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1977 = new BitSet(new long[]{0x0841084800003002L,0x2000212000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_dash_in_nnApp1981 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1983 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_quantity_in_preapparatus1997 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_adj_in_preapparatus1999 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnpressure_in_preapparatus2001 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnadd_in_preapparatus2003 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_molecule_in_preapparatus2005 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnchementity_in_preapparatus2007 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nnstate_in_preapparatus2009 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nn_in_preapparatus2011 = new BitSet(new long[]{0x0841084800003002L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_cd_in_measurements2022 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000000L,0x0000000000278000L});
    public static final BitSet FOLLOW_nn_in_measurements2024 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_multiple_in_measurements2029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_measurementtypes_in_measurements2031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_dt_in_measurements2037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_multiple2045 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_cdunicode_in_multiple2047 = new BitSet(new long[]{0x0000004000000002L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurementtypes_in_multiple2049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molar_in_measurementtypes2077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_measurementtypes2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurementtypes2081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurementtypes2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurementtypes2085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_oscarCompound2097 = new BitSet(new long[]{0x0040000000003000L,0x0000200000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound2103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound2107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarCompound42119 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound42122 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound42124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound32148 = new BitSet(new long[]{0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound32151 = new BitSet(new long[]{0x0000000000000002L,0x0000014000000000L});
    public static final BitSet FOLLOW_apost_in_oscarCompound32153 = new BitSet(new long[]{0x0000000000000002L,0x0000014000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound22181 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound22184 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound22186 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound22190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12221 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12223 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount12248 = new BitSet(new long[]{0x0000004008000000L,0x2000202000000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount12250 = new BitSet(new long[]{0x0000004008000000L,0x2000202000000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount12254 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount12256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount22266 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount22268 = new BitSet(new long[]{0x0040004000003000L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount22272 = new BitSet(new long[]{0x0040004000003002L,0x2000202000000000L,0x0000000000078000L});
    public static final BitSet FOLLOW_citation_in_moleculeamount22277 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount22279 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount22281 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount2292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount2296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule2317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarcdType2340 = new BitSet(new long[]{0x0000000000000800L,0x2000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_oscarcdType2343 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_cd_in_oscarcdType2345 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarcdType2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount12357 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount12359 = new BitSet(new long[]{0x0000000000000800L,0x2000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount12362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount12364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount22373 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_oscarcdType_in_unnamedmoleculeamount22375 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount22379 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount22381 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount22383 = new BitSet(new long[]{0x0000004000000002L,0x2000202000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount32399 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount32401 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount32404 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount32407 = new BitSet(new long[]{0x187FFFDC0000F802L,0x20002028D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount42420 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount42422 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount42425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity1_in_quantity2481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity2_in_quantity2483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity12508 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity12510 = new BitSet(new long[]{0x0000000000000000L,0x0000422000000000L});
    public static final BitSet FOLLOW_comma_in_quantity12513 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity12516 = new BitSet(new long[]{0x0000000000000000L,0x0000422000000000L});
    public static final BitSet FOLLOW_comma_in_quantity12521 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12523 = new BitSet(new long[]{0x0000000000000000L,0x0000422000000000L});
    public static final BitSet FOLLOW_stop_in_quantity12528 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12530 = new BitSet(new long[]{0x0000000000000000L,0x0000422000000000L});
    public static final BitSet FOLLOW_rrb_in_quantity12535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_quantity22546 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_comma_in_quantity22549 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity22552 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_nngeneral_in_method2568 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nn_in_method2570 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method2574 = new BitSet(new long[]{0x0000000000000802L,0x2000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method2577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method2579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets2601 = new BitSet(new long[]{0x0000000000000002L,0x0000780000000000L});
    public static final BitSet FOLLOW_rrb_in_brackets2603 = new BitSet(new long[]{0x0000000000000002L,0x0000780000000000L});
    public static final BitSet FOLLOW_lsqb_in_brackets2605 = new BitSet(new long[]{0x0000000000000002L,0x0000780000000000L});
    public static final BitSet FOLLOW_rsqb_in_brackets2607 = new BitSet(new long[]{0x0000000000000002L,0x0000780000000000L});
    public static final BitSet FOLLOW_11_in_oscarcd2615 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd2617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj2622 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn2629 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr2636 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr2638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront2644 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront2646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode2651 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode2658 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inas2667 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas2669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inbefore2674 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inafter2681 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inin2688 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin2690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ininto2695 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwith2702 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwithout2709 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout2711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inby2716 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby2718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_invia2723 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inof2730 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inon2737 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon2739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infor2744 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor2746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infrom2751 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inunder2758 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder2760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inover2765 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover2767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inoff2772 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nnexample2781 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnexample2783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nnstate2788 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate2790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nntime2795 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime2797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnmass2802 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass2804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnmolar2810 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmolar2813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnamount2818 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount2820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnatmosphere2825 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nneq2832 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq2834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nnvol2839 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnchementity2846 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity2848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nntemp2853 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp2855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnflash2860 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash2862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nngeneral2867 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral2869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nnmethod2874 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod2876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnpressure2882 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure2884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nncolumn2889 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn2891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nnchromatography2896 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography2898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nnvacuum2903 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum2905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_nncycle2910 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle2912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_nntimes2917 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes2919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_oscarcm2926 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm2928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbuse2935 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse2937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbchange2942 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange2944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_vbsubmerge2949 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_vbsubject2956 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_nnadd2965 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_nnmixture2972 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture2974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbadd2979 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd2981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbcharge2986 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbcontain2993 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbdrop3000 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbfill3007 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill3009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbsuspend3014 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbtreat3021 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbapparatus3030 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnapparatus3037 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus3039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbconcentrate3046 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_nnconcentrate3053 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbcool3062 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool3064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdegass3071 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass3073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbdissolve3080 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbdry3089 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry3091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nndry3096 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry3098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbextract3105 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnextract3112 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbfilter3121 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter3123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nnfilter3128 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter3130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbheat3137 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat3139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbincrease3144 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease3146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbimmerse3156 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse3159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbpartition3165 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition3167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_vbprecipitate3174 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate3176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_nnprecipitate3181 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate3183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_vbpurify3190 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify3192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_nnpurify3197 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify3199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbquench3206 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbrecover3215 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_vbremove3224 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove3226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_nnremove3231 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove3233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbstir3240 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir3242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_vbsynthesize3249 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize3251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_nnsynthesize3256 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize3258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbwait3265 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait3267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_vbwash3274 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_vbyield3283 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield3285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_nnyield3292 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnyield3294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_colon3300 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon3302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_comma3307 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma3309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_apost3314 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_neg3321 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_dash3328 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash3330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_stop3335 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop3337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_nnpercent3342 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_lsqb3349 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb3351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_rsqb3356 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb3358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_lrb3364 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_rrb3371 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_abl3382 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl3384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_abn3391 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn3393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_abx3400 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx3402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_ap3409 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap3411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_at3418 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at3420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_be3427 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_bed3436 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed3438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_bedz3445 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz3447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_beg3454 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg3456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_bem3463 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_ben3472 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben3474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_ber3481 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber3483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_bez3490 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez3492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_cc3499 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc3501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_cd3508 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd3510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_cs3517 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_dotok3527 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok3529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dod3536 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod3538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_doz3545 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz3547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_dt3554 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt3556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_dtTHE3564 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtTHE3566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_dti3572 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti3574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_dts3581 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts3583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_dtx3590 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx3592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_ex3599 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex3601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_fw3608 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw3610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_fwin3617 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fwin3619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_hv3626 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv3628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_hvd3635 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd3637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_hvg3644 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg3646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_hvn3653 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_in3662 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in3664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_jj3671 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj3673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_jjr3680 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr3682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_jjs3689 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_jjt3698 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt3700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_md3707 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md3709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_nc3716 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nn3725 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn3727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_nn_poss3734 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss3736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nns3743 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns3745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_nns_poss3752 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss3754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_np3761 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np3763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_nnp3771 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_np_poss3781 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss3783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_nps3790 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps3792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_nps_poss3799 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_nr3808 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr3810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_od3817 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_pn3826 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn3828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_pn_poss3835 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss3837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_pp_poss3844 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss3846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_pp_poss_poss3853 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss3855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ppl3862 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl3864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ppls3871 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls3873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_prp3881 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp3884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ppo3891 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo3893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_pps3900 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_ppss3909 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss3911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_ql3918 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql3920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_qlp3927 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp3929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_rb3936 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_rbr3945 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr3947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_rbconj3956 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_rbt3967 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt3969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_rbs3976 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbs3978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_rn3986 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn3988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_rp3995 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp3997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_sym4006 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym4008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_to4015 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to4017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_uh4024 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_vb4033 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb4035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_vbp4043 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbp4045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_vbd4054 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd4056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_vbg4063 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg4065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_vbn4072 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn4074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_vbz4081 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz4083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_wdt4090 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt4092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_wp_poss4099 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss4101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_wpo4109 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo4111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_wps4118 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_wql4128 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql4130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_wrb4137 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb4139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_pdt4148 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pdt4150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred4_ChemicalChunker240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred13_ChemicalChunker306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred14_ChemicalChunker308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred15_ChemicalChunker310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred17_ChemicalChunker314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred19_ChemicalChunker318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred20_ChemicalChunker320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred21_ChemicalChunker322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred22_ChemicalChunker324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred23_ChemicalChunker326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred24_ChemicalChunker328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred28_ChemicalChunker336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred29_ChemicalChunker338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred30_ChemicalChunker340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred31_ChemicalChunker377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred33_ChemicalChunker412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred34_ChemicalChunker415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred35_ChemicalChunker420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred36_ChemicalChunker422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred37_ChemicalChunker424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred38_ChemicalChunker426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred39_ChemicalChunker434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred40_ChemicalChunker437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred41_ChemicalChunker441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred42_ChemicalChunker443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred43_ChemicalChunker445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred44_ChemicalChunker434 = new BitSet(new long[]{0x187FFFDC0000F800L,0x30002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_advAdj_in_synpred44_ChemicalChunker437 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF00DB04004A7838CL,0x0000000000000007L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred44_ChemicalChunker441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred44_ChemicalChunker443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred44_ChemicalChunker445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred44_ChemicalChunker447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred46_ChemicalChunker463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred47_ChemicalChunker457 = new BitSet(new long[]{0x0040004000003802L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred47_ChemicalChunker460 = new BitSet(new long[]{0x0040004000003802L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred47_ChemicalChunker463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_synpred48_ChemicalChunker478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred49_ChemicalChunker506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred51_ChemicalChunker513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred52_ChemicalChunker521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred54_ChemicalChunker528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred56_ChemicalChunker544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred58_ChemicalChunker551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred59_ChemicalChunker559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred61_ChemicalChunker566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred62_ChemicalChunker557 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_adj_in_synpred62_ChemicalChunker559 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_nnp_in_synpred62_ChemicalChunker562 = new BitSet(new long[]{0x0040004000003800L,0x2000202000000000L,0x0000000004078000L});
    public static final BitSet FOLLOW_molecule_in_synpred62_ChemicalChunker566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred62_ChemicalChunker568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred65_ChemicalChunker618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred66_ChemicalChunker621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred72_ChemicalChunker640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred73_ChemicalChunker643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred74_ChemicalChunker646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred75_ChemicalChunker649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred76_ChemicalChunker652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred77_ChemicalChunker628 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_rbconj_in_synpred77_ChemicalChunker631 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_adv_in_synpred77_ChemicalChunker634 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_adj_in_synpred77_ChemicalChunker637 = new BitSet(new long[]{0xE7800003FFFC3000L,0x000000076EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_verb_in_synpred77_ChemicalChunker640 = new BitSet(new long[]{0xE7800003FFFC3002L,0x000000876EBEAF5FL,0x0FD5F000000FC004L});
    public static final BitSet FOLLOW_md_in_synpred77_ChemicalChunker643 = new BitSet(new long[]{0x0000000000003002L,0x0000008000000000L,0x0005B000000F8000L});
    public static final BitSet FOLLOW_adv_in_synpred77_ChemicalChunker646 = new BitSet(new long[]{0x0000000000003002L,0x0000008000000000L,0x0005B00000078000L});
    public static final BitSet FOLLOW_adj_in_synpred77_ChemicalChunker649 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_neg_in_synpred77_ChemicalChunker652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_synpred78_ChemicalChunker658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred81_ChemicalChunker662 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_comma_in_synpred81_ChemicalChunker665 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x200020AFFFFFFFFFL,0xFFDDF04004AFC38CL,0x0000000000000007L});
    public static final BitSet FOLLOW_prepphrase_in_synpred81_ChemicalChunker668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred123_ChemicalChunker779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred124_ChemicalChunker781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred129_ChemicalChunker802 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_nounStructure_in_synpred129_ChemicalChunker804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred131_ChemicalChunker817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycles_in_synpred132_ChemicalChunker819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred133_ChemicalChunker821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred134_ChemicalChunker823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred135_ChemicalChunker825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred137_ChemicalChunker829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred138_ChemicalChunker831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred141_ChemicalChunker837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_synpred145_ChemicalChunker845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred146_ChemicalChunker847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred147_ChemicalChunker849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred151_ChemicalChunker857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred152_ChemicalChunker859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred153_ChemicalChunker861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred159_ChemicalChunker873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_synpred168_ChemicalChunker891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_synpred169_ChemicalChunker893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred170_ChemicalChunker895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_synpred171_ChemicalChunker897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred176_ChemicalChunker907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred177_ChemicalChunker909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_synpred191_ChemicalChunker1003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred192_ChemicalChunker1032 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_cd_in_synpred192_ChemicalChunker1034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred193_ChemicalChunker1051 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_synpred193_ChemicalChunker1053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred203_ChemicalChunker1197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred204_ChemicalChunker1199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred205_ChemicalChunker1201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred207_ChemicalChunker1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred208_ChemicalChunker1207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred209_ChemicalChunker1209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred210_ChemicalChunker1211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred212_ChemicalChunker1215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred213_ChemicalChunker1217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred214_ChemicalChunker1219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred215_ChemicalChunker1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred216_ChemicalChunker1223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred217_ChemicalChunker1225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred218_ChemicalChunker1227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred219_ChemicalChunker1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minimixture_in_synpred221_ChemicalChunker1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred222_ChemicalChunker1239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred223_ChemicalChunker1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred224_ChemicalChunker1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_synpred225_ChemicalChunker1245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred227_ChemicalChunker1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred228_ChemicalChunker1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred229_ChemicalChunker1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred230_ChemicalChunker1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred232_ChemicalChunker1259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred233_ChemicalChunker1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred234_ChemicalChunker1263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred235_ChemicalChunker1265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred236_ChemicalChunker1267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred237_ChemicalChunker1269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred238_ChemicalChunker1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred239_ChemicalChunker1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred241_ChemicalChunker1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred243_ChemicalChunker1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred244_ChemicalChunker1341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred245_ChemicalChunker1343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred247_ChemicalChunker1347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred248_ChemicalChunker1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred249_ChemicalChunker1351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred250_ChemicalChunker1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred252_ChemicalChunker1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred253_ChemicalChunker1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred254_ChemicalChunker1361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred255_ChemicalChunker1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred256_ChemicalChunker1365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred257_ChemicalChunker1367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred258_ChemicalChunker1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred259_ChemicalChunker1371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred261_ChemicalChunker1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred262_ChemicalChunker1381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred263_ChemicalChunker1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_synpred264_ChemicalChunker1385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred266_ChemicalChunker1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred267_ChemicalChunker1391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred268_ChemicalChunker1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred269_ChemicalChunker1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred271_ChemicalChunker1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred272_ChemicalChunker1401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred273_ChemicalChunker1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred274_ChemicalChunker1405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred275_ChemicalChunker1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred276_ChemicalChunker1409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred277_ChemicalChunker1411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred278_ChemicalChunker1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred280_ChemicalChunker1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred291_ChemicalChunker1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_synpred292_ChemicalChunker1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred293_ChemicalChunker1474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred294_ChemicalChunker1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred298_ChemicalChunker1580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_synpred303_ChemicalChunker1596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred305_ChemicalChunker1660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_synpred306_ChemicalChunker1665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred324_ChemicalChunker1740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_synpred329_ChemicalChunker1755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred336_ChemicalChunker1927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred337_ChemicalChunker1927 = new BitSet(new long[]{0x0841084800003000L,0x3000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_apparatus_in_synpred337_ChemicalChunker1930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnApp_in_synpred340_ChemicalChunker1948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred341_ChemicalChunker1977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred342_ChemicalChunker1981 = new BitSet(new long[]{0x0841084800003000L,0x2000202000000020L,0x0000000000278004L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred342_ChemicalChunker1983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred343_ChemicalChunker1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred344_ChemicalChunker1999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred345_ChemicalChunker2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred346_ChemicalChunker2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred347_ChemicalChunker2005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred348_ChemicalChunker2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred349_ChemicalChunker2009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred350_ChemicalChunker2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred353_ChemicalChunker2037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurementtypes_in_synpred354_ChemicalChunker2049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred360_ChemicalChunker2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_synpred362_ChemicalChunker2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred364_ChemicalChunker2151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred366_ChemicalChunker2184 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred366_ChemicalChunker2186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred367_ChemicalChunker2190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred368_ChemicalChunker2223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred369_ChemicalChunker2248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred370_ChemicalChunker2250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred371_ChemicalChunker2266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred372_ChemicalChunker2268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred373_ChemicalChunker2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred374_ChemicalChunker2277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred375_ChemicalChunker2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred376_ChemicalChunker2281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_synpred377_ChemicalChunker2292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred381_ChemicalChunker2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred382_ChemicalChunker2381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred383_ChemicalChunker2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred384_ChemicalChunker2404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred385_ChemicalChunker2404 = new BitSet(new long[]{0x187FFFDC0000F800L,0x20002028D14150A0L,0xF008004004A78384L,0x0000000000000007L});
    public static final BitSet FOLLOW_noun_in_synpred385_ChemicalChunker2407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred386_ChemicalChunker2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred387_ChemicalChunker2434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred388_ChemicalChunker2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_synpred389_ChemicalChunker2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred394_ChemicalChunker2549 = new BitSet(new long[]{0x0000004000000000L,0x2000200000000000L});
    public static final BitSet FOLLOW_measurements_in_synpred394_ChemicalChunker2552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred399_ChemicalChunker2601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred400_ChemicalChunker2603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred401_ChemicalChunker2605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred402_ChemicalChunker2607 = new BitSet(new long[]{0x0000000000000002L});

}