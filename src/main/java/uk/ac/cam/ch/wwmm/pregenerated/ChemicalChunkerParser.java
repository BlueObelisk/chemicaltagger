// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-10-17 19:09:10

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=36;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=35;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=34;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=33;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[788+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public boolean isAtTokenPositionZero(TokenStream stream){
    	return stream.index()==0;
    }

    public boolean followedByVBDorVBZthenVBYIELDed(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	if ("VBD".equals(nextTokenTypeStr) || "VBZ".equals(nextTokenTypeStr)){
    		String twoAheadTypeStr = stream.LT(3).getText();
    		if ("VB-YIELD".equals(twoAheadTypeStr)){
    			String twoAheadTokenText = stream.LT(4).getText();
    			if (twoAheadTokenText !=null && twoAheadTokenText.toLowerCase().endsWith("ed")){
    				return true;
    			}
    		}
    	}
    	return false;
    }

    public boolean cdHasRoleOtherThanIdentifier(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	if (isQuantityUnit(nextTokenTypeStr)){
    		return true;//quantity
    	}
    	if ("NN-TIMES".equals(nextTokenTypeStr)){
    		return true;//e.g. washed with the compound 3 times
    	}
    	if ("COLON".equals(nextTokenTypeStr)){
    		String twoAheadTypeStr = stream.LT(3).getText();
    		if ("CD".equals(twoAheadTypeStr)){
    			String threeAheadTypeStr = stream.LT(5).getText();
    			if (!isQuantityUnit(threeAheadTypeStr)){
    				return true;//ratio
    			}
    		}
    	}
    	return false;
    }

    public boolean followedByQuantityUnits(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	return isQuantityUnit(nextTokenTypeStr);
    }

    public boolean isQuantityUnit(String tokenType){
    	return ("NN-MOLAR".equals(tokenType) || "NN-AMOUNT".equals(tokenType) ||
    			"NN-MASS".equals(tokenType) || "NN-VOL".equals(tokenType) ||
    			"NN-EQ".equals(tokenType) || "NN-PERCENT".equals(tokenType));
    }

    public boolean precededByProduct(TokenStream stream){
    	Token previousToken = stream.LT(-1);
    	if (previousToken !=null && previousToken.getText().equalsIgnoreCase("product")){
    		return true;
    	}
    	return false;
    }

    public boolean suitableVbYieldOrSynthesizeForReference(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("VB-YIELD".equals(nextTokenType.getText()) || "VB-SYNTHESIZE".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.toLowerCase().endsWith("ed")){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean nextIsSemiColon(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("STOP".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.equals(";")){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean notFollowedByBracketedYear(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("-LRB-".equals(nextTokenType.getText())){
    		Token nextNextTokenType = stream.LT(3);
    		if ("CD".equals(nextNextTokenType.getText())){
    			String nextNextTokenText = stream.LT(4).getText();
    			if (nextNextTokenText !=null){
    				try{
    					int i = Integer.parseInt(nextNextTokenText);
    					if (i >1000){
    						return false;
    					}
    				}
    				catch (NumberFormatException e) {
    				}
    			}
    		}
    	}
    	return true;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:1: document : ( sentence )+ -> ( ^( Sentence sentence ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence1 = null;


        RewriteRuleSubtreeStream stream_sentence=new RewriteRuleSubtreeStream(adaptor,"rule sentence");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:9: ( ( sentence )+ -> ( ^( Sentence sentence ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:11: ( sentence )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:11: ( sentence )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_document199_static.FOLLOW_sentence_in_document199);
            	    sentence1=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentence.add(sentence1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 157:20: -> ( ^( Sentence sentence ) )+
            {
                if ( !(stream_sentence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentence.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:23: ^( Sentence sentence )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentence.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentence.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:1: sentence : ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);
        int sentence_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase2 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure3 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:9: ( ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ )
            int alt3=2;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:12: procedureNounPhrase
                    {
                    pushFollow(FOLLOW_procedureNounPhrase_in_sentence219_static.FOLLOW_procedureNounPhrase_in_sentence219);
                    procedureNounPhrase2=procedureNounPhrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNounPhrase2.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:34: ( sentenceStructure | unmatchedPhrase )+
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:34: ( sentenceStructure | unmatchedPhrase )+
                    int cnt2=0;
                    loop2:
                    do {
                        int alt2=3;
                        alt2 = dfa2.predict(input);
                        switch (alt2) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:35: sentenceStructure
                    	    {
                    	    pushFollow(FOLLOW_sentenceStructure_in_sentence224_static.FOLLOW_sentenceStructure_in_sentence224);
                    	    sentenceStructure3=sentenceStructure();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure3.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:53: unmatchedPhrase
                    	    {
                    	    pushFollow(FOLLOW_unmatchedPhrase_in_sentence226_static.FOLLOW_unmatchedPhrase_in_sentence226);
                    	    unmatchedPhrase4=unmatchedPhrase();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase4.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt2 >= 1 ) break loop2;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(2, input);
                                throw eee;
                        }
                        cnt2++;
                    } while (true);


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:72: ( stop )*
            loop4:
            do {
                int alt4=2;
                switch ( input.LA(1) ) {
                case 135:
                    {
                    alt4=1;
                    }
                    break;

                }

                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentence231_static.FOLLOW_stop_in_sentence231);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentence_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter9 = null;

        ChemicalChunkerParser.advAdj_return advAdj10 = null;

        ChemicalChunkerParser.colon_return colon11 = null;

        ChemicalChunkerParser.conjunction_return conjunction12 = null;

        ChemicalChunkerParser.rbconj_return rbconj13 = null;

        ChemicalChunkerParser.comma_return comma14 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt5=0;
            loop5:
            do {
                int alt5=5;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure241_static.FOLLOW_nounphrase_in_sentenceStructure241);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure243_static.FOLLOW_verbphrase_in_sentenceStructure243);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure245_static.FOLLOW_prepphrase_in_sentenceStructure245);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure247_static.FOLLOW_prepphraseAfter_in_sentenceStructure247);
            	    prepphraseAfter9=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter9.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:73: ( advAdj | colon )*
            loop6:
            do {
                int alt6=3;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure252_static.FOLLOW_advAdj_in_sentenceStructure252);
            	    advAdj10=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj10.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure254_static.FOLLOW_colon_in_sentenceStructure254);
            	    colon11=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:89: ( conjunction | rbconj | comma )*
            loop7:
            do {
                int alt7=4;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure259_static.FOLLOW_conjunction_in_sentenceStructure259);
            	    conjunction12=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction12.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure261_static.FOLLOW_rbconj_in_sentenceStructure261);
            	    rbconj13=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj13.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure263_static.FOLLOW_comma_in_sentenceStructure263);
            	    comma14=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma14.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken15 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase275_static.FOLLOW_unmatchedToken_in_unmatchedPhrase275);
            unmatchedToken15=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken15.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 164:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric16 = null;

        ChemicalChunkerParser.advAdj_return advAdj17 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode18 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode19 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp20 = null;

        ChemicalChunkerParser.inAll_return inAll21 = null;

        ChemicalChunkerParser.nnexample_return nnexample22 = null;

        ChemicalChunkerParser.nnstate_return nnstate23 = null;

        ChemicalChunkerParser.nntime_return nntime24 = null;

        ChemicalChunkerParser.nnmass_return nnmass25 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar26 = null;

        ChemicalChunkerParser.nnamount_return nnamount27 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere28 = null;

        ChemicalChunkerParser.nneq_return nneq29 = null;

        ChemicalChunkerParser.nnvol_return nnvol30 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity31 = null;

        ChemicalChunkerParser.nntemp_return nntemp32 = null;

        ChemicalChunkerParser.nnph_return nnph33 = null;

        ChemicalChunkerParser.nnflash_return nnflash34 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral35 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod36 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure37 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn38 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography39 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum40 = null;

        ChemicalChunkerParser.nncycle_return nncycle41 = null;

        ChemicalChunkerParser.nntimes_return nntimes42 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm43 = null;

        ChemicalChunkerParser.oscarase_return oscarase44 = null;

        ChemicalChunkerParser.verb_return verb45 = null;

        ChemicalChunkerParser.nnadd_return nnadd46 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture47 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus48 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate49 = null;

        ChemicalChunkerParser.nndry_return nndry50 = null;

        ChemicalChunkerParser.nnextract_return nnextract51 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter52 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate53 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify54 = null;

        ChemicalChunkerParser.nnremove_return nnremove55 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize56 = null;

        ChemicalChunkerParser.nnyield_return nnyield57 = null;

        ChemicalChunkerParser.colon_return colon58 = null;

        ChemicalChunkerParser.apost_return apost59 = null;

        ChemicalChunkerParser.neg_return neg60 = null;

        ChemicalChunkerParser.dash_return dash61 = null;

        ChemicalChunkerParser.percentsign_return percentsign62 = null;

        ChemicalChunkerParser.lsqb_return lsqb63 = null;

        ChemicalChunkerParser.rsqb_return rsqb64 = null;

        ChemicalChunkerParser.lrb_return lrb65 = null;

        ChemicalChunkerParser.rrb_return rrb66 = null;

        ChemicalChunkerParser.cc_return cc67 = null;

        ChemicalChunkerParser.dt_return dt68 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE69 = null;

        ChemicalChunkerParser.fw_return fw70 = null;

        ChemicalChunkerParser.md_return md71 = null;

        ChemicalChunkerParser.nn_return nn72 = null;

        ChemicalChunkerParser.nns_return nns73 = null;

        ChemicalChunkerParser.nnp_return nnp74 = null;

        ChemicalChunkerParser.prp_return prp75 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss76 = null;

        ChemicalChunkerParser.rbconj_return rbconj77 = null;

        ChemicalChunkerParser.sym_return sym78 = null;

        ChemicalChunkerParser.uh_return uh79 = null;

        ChemicalChunkerParser.clause_return clause80 = null;

        ChemicalChunkerParser.comma_return comma81 = null;

        ChemicalChunkerParser.ls_return ls82 = null;

        ChemicalChunkerParser.nnps_return nnps83 = null;

        ChemicalChunkerParser.pos_return pos84 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier85 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt8=70;
            switch ( input.LA(1) ) {
            case 37:
            case 144:
                {
                alt8=1;
                }
                break;
            case 38:
            case 39:
            case 43:
            case 149:
            case 150:
            case 151:
            case 162:
            case 163:
            case 164:
            case 165:
                {
                alt8=2;
                }
                break;
            case 41:
                {
                alt8=3;
                }
                break;
            case 42:
                {
                alt8=4;
                }
                break;
            case 44:
                {
                alt8=5;
                }
                break;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 148:
            case 167:
                {
                alt8=6;
                }
                break;
            case 81:
                {
                alt8=7;
                }
                break;
            case 61:
                {
                alt8=8;
                }
                break;
            case 62:
                {
                alt8=9;
                }
                break;
            case 63:
                {
                alt8=10;
                }
                break;
            case 65:
                {
                alt8=11;
                }
                break;
            case 64:
                {
                alt8=12;
                }
                break;
            case 66:
                {
                alt8=13;
                }
                break;
            case 67:
                {
                alt8=14;
                }
                break;
            case 68:
                {
                alt8=15;
                }
                break;
            case 69:
                {
                alt8=16;
                }
                break;
            case 70:
                {
                alt8=17;
                }
                break;
            case 71:
                {
                alt8=18;
                }
                break;
            case 72:
                {
                alt8=19;
                }
                break;
            case 73:
                {
                alt8=20;
                }
                break;
            case 74:
                {
                alt8=21;
                }
                break;
            case 75:
                {
                alt8=22;
                }
                break;
            case 76:
                {
                alt8=23;
                }
                break;
            case 77:
                {
                alt8=24;
                }
                break;
            case 78:
                {
                alt8=25;
                }
                break;
            case 79:
                {
                alt8=26;
                }
                break;
            case 80:
                {
                alt8=27;
                }
                break;
            case 82:
                {
                alt8=28;
                }
                break;
            case 40:
                {
                alt8=29;
                }
                break;
            case 83:
            case 84:
            case 85:
            case 86:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 99:
            case 101:
            case 102:
            case 103:
            case 104:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 116:
            case 118:
            case 119:
            case 120:
            case 122:
            case 123:
            case 125:
            case 126:
            case 127:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt8=30;
                }
                break;
            case 87:
                {
                alt8=31;
                }
                break;
            case 88:
                {
                alt8=32;
                }
                break;
            case 98:
                {
                alt8=33;
                }
                break;
            case 100:
                {
                alt8=34;
                }
                break;
            case 105:
                {
                alt8=35;
                }
                break;
            case 107:
                {
                alt8=36;
                }
                break;
            case 109:
                {
                alt8=37;
                }
                break;
            case 115:
                {
                alt8=38;
                }
                break;
            case 117:
                {
                alt8=39;
                }
                break;
            case 121:
                {
                alt8=40;
                }
                break;
            case 124:
                {
                alt8=41;
                }
                break;
            case 128:
                {
                alt8=42;
                }
                break;
            case 130:
                {
                alt8=43;
                }
                break;
            case 132:
                {
                alt8=44;
                }
                break;
            case 133:
                {
                alt8=45;
                }
                break;
            case 134:
                {
                alt8=46;
                }
                break;
            case 136:
                {
                alt8=47;
                }
                break;
            case 137:
                {
                alt8=48;
                }
                break;
            case 138:
                {
                alt8=49;
                }
                break;
            case 141:
                {
                alt8=50;
                }
                break;
            case 142:
                {
                alt8=51;
                }
                break;
            case 143:
                {
                alt8=52;
                }
                break;
            case 145:
                {
                alt8=53;
                }
                break;
            case 140:
                {
                alt8=54;
                }
                break;
            case 147:
                {
                alt8=55;
                }
                break;
            case 153:
                {
                alt8=56;
                }
                break;
            case 154:
                {
                alt8=57;
                }
                break;
            case 155:
                {
                alt8=58;
                }
                break;
            case 156:
                {
                alt8=59;
                }
                break;
            case 160:
                {
                alt8=60;
                }
                break;
            case 161:
                {
                alt8=61;
                }
                break;
            case 129:
                {
                alt8=62;
                }
                break;
            case 166:
                {
                alt8=63;
                }
                break;
            case 168:
                {
                alt8=64;
                }
                break;
            case 146:
            case 158:
            case 175:
            case 176:
            case 177:
            case 178:
                {
                alt8=65;
                }
                break;
            case 131:
                {
                alt8=66;
                }
                break;
            case 152:
                {
                alt8=67;
                }
                break;
            case 157:
                {
                alt8=68;
                }
                break;
            case 159:
                {
                alt8=69;
                }
                break;
            case 139:
                {
                alt8=70;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken294_static.FOLLOW_numeric_in_unmatchedToken294);
                    numeric16=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric16.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken296_static.FOLLOW_advAdj_in_unmatchedToken296);
                    advAdj17=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj17.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken298_static.FOLLOW_tmunicode_in_unmatchedToken298);
                    tmunicode18=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode18.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken300_static.FOLLOW_cdunicode_in_unmatchedToken300);
                    cdunicode19=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode19.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken302_static.FOLLOW_jjcomp_in_unmatchedToken302);
                    jjcomp20=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp20.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken304_static.FOLLOW_inAll_in_unmatchedToken304);
                    inAll21=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll21.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken308_static.FOLLOW_nnexample_in_unmatchedToken308);
                    nnexample22=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample22.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken310_static.FOLLOW_nnstate_in_unmatchedToken310);
                    nnstate23=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate23.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken312_static.FOLLOW_nntime_in_unmatchedToken312);
                    nntime24=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime24.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken314_static.FOLLOW_nnmass_in_unmatchedToken314);
                    nnmass25=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass25.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken316_static.FOLLOW_nnmolar_in_unmatchedToken316);
                    nnmolar26=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar26.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken318_static.FOLLOW_nnamount_in_unmatchedToken318);
                    nnamount27=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount27.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken320_static.FOLLOW_nnatmosphere_in_unmatchedToken320);
                    nnatmosphere28=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere28.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken322_static.FOLLOW_nneq_in_unmatchedToken322);
                    nneq29=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq29.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken324_static.FOLLOW_nnvol_in_unmatchedToken324);
                    nnvol30=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol30.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken326_static.FOLLOW_nnchementity_in_unmatchedToken326);
                    nnchementity31=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity31.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken328_static.FOLLOW_nntemp_in_unmatchedToken328);
                    nntemp32=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp32.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken330_static.FOLLOW_nnph_in_unmatchedToken330);
                    nnph33=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph33.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken332_static.FOLLOW_nnflash_in_unmatchedToken332);
                    nnflash34=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash34.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken334_static.FOLLOW_nngeneral_in_unmatchedToken334);
                    nngeneral35=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral35.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken336_static.FOLLOW_nnmethod_in_unmatchedToken336);
                    nnmethod36=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod36.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken338_static.FOLLOW_nnpressure_in_unmatchedToken338);
                    nnpressure37=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure37.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken340_static.FOLLOW_nncolumn_in_unmatchedToken340);
                    nncolumn38=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn38.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken342_static.FOLLOW_nnchromatography_in_unmatchedToken342);
                    nnchromatography39=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography39.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken344_static.FOLLOW_nnvacuum_in_unmatchedToken344);
                    nnvacuum40=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum40.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken346_static.FOLLOW_nncycle_in_unmatchedToken346);
                    nncycle41=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle41.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken348_static.FOLLOW_nntimes_in_unmatchedToken348);
                    nntimes42=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes42.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken352_static.FOLLOW_oscarcm_in_unmatchedToken352);
                    oscarcm43=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm43.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:10: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken354_static.FOLLOW_oscarase_in_unmatchedToken354);
                    oscarase44=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase44.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:19: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken356_static.FOLLOW_verb_in_unmatchedToken356);
                    verb45=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb45.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:24: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken358_static.FOLLOW_nnadd_in_unmatchedToken358);
                    nnadd46=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd46.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:30: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken360_static.FOLLOW_nnmixture_in_unmatchedToken360);
                    nnmixture47=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture47.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:40: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken362_static.FOLLOW_nnapparatus_in_unmatchedToken362);
                    nnapparatus48=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus48.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:52: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken364_static.FOLLOW_nnconcentrate_in_unmatchedToken364);
                    nnconcentrate49=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate49.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:66: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken366_static.FOLLOW_nndry_in_unmatchedToken366);
                    nndry50=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry50.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:72: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken368_static.FOLLOW_nnextract_in_unmatchedToken368);
                    nnextract51=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract51.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:82: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken370_static.FOLLOW_nnfilter_in_unmatchedToken370);
                    nnfilter52=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter52.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:91: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken372_static.FOLLOW_nnprecipitate_in_unmatchedToken372);
                    nnprecipitate53=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate53.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:105: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken374_static.FOLLOW_nnpurify_in_unmatchedToken374);
                    nnpurify54=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify54.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:114: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken376_static.FOLLOW_nnremove_in_unmatchedToken376);
                    nnremove55=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove55.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:123: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken378_static.FOLLOW_nnsynthesize_in_unmatchedToken378);
                    nnsynthesize56=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize56.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:136: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken380_static.FOLLOW_nnyield_in_unmatchedToken380);
                    nnyield57=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield57.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:144: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken382_static.FOLLOW_colon_in_unmatchedToken382);
                    colon58=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon58.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:150: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken384_static.FOLLOW_apost_in_unmatchedToken384);
                    apost59=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost59.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:156: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken386_static.FOLLOW_neg_in_unmatchedToken386);
                    neg60=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg60.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:160: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken388_static.FOLLOW_dash_in_unmatchedToken388);
                    dash61=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash61.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:165: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_unmatchedToken390_static.FOLLOW_percentsign_in_unmatchedToken390);
                    percentsign62=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign62.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:177: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken392_static.FOLLOW_lsqb_in_unmatchedToken392);
                    lsqb63=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb63.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:182: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken394_static.FOLLOW_rsqb_in_unmatchedToken394);
                    rsqb64=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb64.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:187: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken396_static.FOLLOW_lrb_in_unmatchedToken396);
                    lrb65=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb65.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:191: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken398_static.FOLLOW_rrb_in_unmatchedToken398);
                    rrb66=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb66.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken402_static.FOLLOW_cc_in_unmatchedToken402);
                    cc67=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc67.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken404_static.FOLLOW_dt_in_unmatchedToken404);
                    dt68=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt68.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken406_static.FOLLOW_dtTHE_in_unmatchedToken406);
                    dtTHE69=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE69.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken408_static.FOLLOW_fw_in_unmatchedToken408);
                    fw70=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw70.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken410_static.FOLLOW_md_in_unmatchedToken410);
                    md71=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md71.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken412_static.FOLLOW_nn_in_unmatchedToken412);
                    nn72=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn72.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken414_static.FOLLOW_nns_in_unmatchedToken414);
                    nns73=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns73.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken416_static.FOLLOW_nnp_in_unmatchedToken416);
                    nnp74=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp74.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken418_static.FOLLOW_prp_in_unmatchedToken418);
                    prp75=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp75.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken420_static.FOLLOW_prp_poss_in_unmatchedToken420);
                    prp_poss76=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss76.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken422_static.FOLLOW_rbconj_in_unmatchedToken422);
                    rbconj77=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj77.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken424_static.FOLLOW_sym_in_unmatchedToken424);
                    sym78=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym78.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken426_static.FOLLOW_uh_in_unmatchedToken426);
                    uh79=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh79.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken428_static.FOLLOW_clause_in_unmatchedToken428);
                    clause80=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause80.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken430_static.FOLLOW_comma_in_unmatchedToken430);
                    comma81=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma81.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken432_static.FOLLOW_ls_in_unmatchedToken432);
                    ls82=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls82.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken434_static.FOLLOW_nnps_in_unmatchedToken434);
                    nnps83=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps83.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken436_static.FOLLOW_pos_in_unmatchedToken436);
                    pos84=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos84.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken438_static.FOLLOW_nnidentifier_in_unmatchedToken438);
                    nnidentifier85=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier85.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class procedureNounPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNounPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:1: procedureNounPhrase : {...}? headingProcedure -> ^( NounPhrase headingProcedure ) ;
    public final ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase() throws RecognitionException {
        ChemicalChunkerParser.procedureNounPhrase_return retval = new ChemicalChunkerParser.procedureNounPhrase_return();
        retval.start = input.LT(1);
        int procedureNounPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedure_return headingProcedure86 = null;


        RewriteRuleSubtreeStream stream_headingProcedure=new RewriteRuleSubtreeStream(adaptor,"rule headingProcedure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:2: ({...}? headingProcedure -> ^( NounPhrase headingProcedure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:4: {...}? headingProcedure
            {
            if ( !((isAtTokenPositionZero(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "procedureNounPhrase", "isAtTokenPositionZero(input)");
            }
            pushFollow(FOLLOW_headingProcedure_in_procedureNounPhrase451_static.FOLLOW_headingProcedure_in_procedureNounPhrase451);
            headingProcedure86=headingProcedure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_headingProcedure.add(headingProcedure86.getTree());


            // AST REWRITE
            // elements: headingProcedure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 173:54: -> ^( NounPhrase headingProcedure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:57: ^( NounPhrase headingProcedure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_headingProcedure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, procedureNounPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNounPhrase"

    public static class headingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:1: headingProcedure : ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? );
    public final ChemicalChunkerParser.headingProcedure_return headingProcedure() throws RecognitionException {
        ChemicalChunkerParser.headingProcedure_return retval = new ChemicalChunkerParser.headingProcedure_return();
        retval.start = input.LT(1);
        int headingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator87 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators88 = null;

        ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure89 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators90 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:2: ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? )
            int alt10=2;
            switch ( input.LA(1) ) {
            case 37:
            case 139:
            case 144:
                {
                alt10=1;
                }
                break;
            case 137:
            case 141:
                {
                alt10=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:4: headingProcedureRequiringTerminator headingProcedureTerminators
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure470_static.FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure470);
                    headingProcedureRequiringTerminator87=headingProcedureRequiringTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureRequiringTerminator87.getTree());
                    pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure472_static.FOLLOW_headingProcedureTerminators_in_headingProcedure472);
                    headingProcedureTerminators88=headingProcedureTerminators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators88.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:70: bracketedHeadingProcedure ( headingProcedureTerminators )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedHeadingProcedure_in_headingProcedure476_static.FOLLOW_bracketedHeadingProcedure_in_headingProcedure476);
                    bracketedHeadingProcedure89=bracketedHeadingProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedHeadingProcedure89.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:96: ( headingProcedureTerminators )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case 142:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_5 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 135:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_6 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 130:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_7 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: headingProcedureTerminators
                            {
                            pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure478_static.FOLLOW_headingProcedureTerminators_in_headingProcedure478);
                            headingProcedureTerminators90=headingProcedureTerminators();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators90.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, headingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedure"

    public static class headingProcedureRequiringTerminator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureRequiringTerminator"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:1: headingProcedureRequiringTerminator : ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureRequiringTerminator_return retval = new ChemicalChunkerParser.headingProcedureRequiringTerminator_return();
        retval.start = input.LT(1);
        int headingProcedureRequiringTerminator_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier91 = null;

        ChemicalChunkerParser.numeric_return numeric92 = null;


        RewriteRuleSubtreeStream stream_nnidentifier=new RewriteRuleSubtreeStream(adaptor,"rule nnidentifier");
        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:2: ( ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:4: ( nnidentifier | numeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:4: ( nnidentifier | numeric )
            int alt11=2;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt11=1;
                }
                break;
            case 37:
            case 144:
                {
                alt11=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:5: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator489_static.FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator489);
                    nnidentifier91=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnidentifier.add(nnidentifier91.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:18: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_headingProcedureRequiringTerminator491_static.FOLLOW_numeric_in_headingProcedureRequiringTerminator491);
                    numeric92=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric92.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numeric, nnidentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 179:27: -> ^( PROCEDURE ( nnidentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:30: ^( PROCEDURE ( nnidentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:42: ( nnidentifier )?
                if ( stream_nnidentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnidentifier.nextTree());

                }
                stream_nnidentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:56: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, headingProcedureRequiringTerminator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureRequiringTerminator"

    public static class bracketedHeadingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedHeadingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:1: bracketedHeadingProcedure : ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) ;
    public final ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure() throws RecognitionException {
        ChemicalChunkerParser.bracketedHeadingProcedure_return retval = new ChemicalChunkerParser.bracketedHeadingProcedure_return();
        retval.start = input.LT(1);
        int bracketedHeadingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier93 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric94 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference95 = null;


        RewriteRuleSubtreeStream stream_bracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule bracketedIdentifier");
        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:2: ( ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            int alt12=3;
            switch ( input.LA(1) ) {
            case 141:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 144:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 139:
                                {
                                alt12=1;
                                }
                                break;
                            case 142:
                                {
                                alt12=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 12, 7, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 12, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 37:
                        {
                        alt12=2;
                        }
                        break;
                    case 139:
                        {
                        alt12=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 12, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;
                }

                }
                break;
            case 137:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:5: bracketedIdentifier
                    {
                    pushFollow(FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure514_static.FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure514);
                    bracketedIdentifier93=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedIdentifier.add(bracketedIdentifier93.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:27: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure518_static.FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure518);
                    bracketedNumeric94=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric94.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:46: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure522_static.FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure522);
                    squareBracketedReference95=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference95.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, bracketedIdentifier, bracketedNumeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 182:72: -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:75: ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:87: ( bracketedIdentifier )?
                if ( stream_bracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedIdentifier.nextTree());

                }
                stream_bracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:108: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:126: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bracketedHeadingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedHeadingProcedure"

    public static class headingProcedureTerminators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureTerminators"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:1: headingProcedureTerminators : ( rrb | stop | colon );
    public final ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureTerminators_return retval = new ChemicalChunkerParser.headingProcedureTerminators_return();
        retval.start = input.LT(1);
        int headingProcedureTerminators_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rrb_return rrb96 = null;

        ChemicalChunkerParser.stop_return stop97 = null;

        ChemicalChunkerParser.colon_return colon98 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:2: ( rrb | stop | colon )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 142:
                {
                alt13=1;
                }
                break;
            case 135:
                {
                alt13=2;
                }
                break;
            case 130:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:4: rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rrb_in_headingProcedureTerminators547_static.FOLLOW_rrb_in_headingProcedureTerminators547);
                    rrb96=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb96.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:8: stop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stop_in_headingProcedureTerminators549_static.FOLLOW_stop_in_headingProcedureTerminators549);
                    stop97=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop97.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:13: colon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_colon_in_headingProcedureTerminators551_static.FOLLOW_colon_in_headingProcedureTerminators551);
                    colon98=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon98.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, headingProcedureTerminators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureTerminators"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure99 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase560_static.FOLLOW_nounphraseStructure_in_nounphrase560);
            nounphraseStructure99=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure99.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 188:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1100 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2101 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt14=2;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure579_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure579);
                    nounphraseStructure1100=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure1100.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure581_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure581);
                    nounphraseStructure2101=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure2101.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus102 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1590_static.FOLLOW_multiApparatus_in_nounphraseStructure1590);
            multiApparatus102=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus102.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 193:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:1: nounphraseStructure2 : ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )? ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE103 = null;

        ChemicalChunkerParser.dt_return dt104 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent105 = null;

        ChemicalChunkerParser.conjunction_return conjunction106 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent107 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf108 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN109 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:2: ( ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:4: ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:4: ( dtTHE )?
            int alt15=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt15=1;
                    }
                    break;
            }

            switch (alt15) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2607_static.FOLLOW_dtTHE_in_nounphraseStructure2607);
                    dtTHE103=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE103.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:11: ( dt )?
            int alt16=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA16_3 = input.LA(3);

                            if ( (synpred93_ChemicalChunker()) ) {
                                alt16=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt16) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2610_static.FOLLOW_dt_in_nounphraseStructure2610);
                    dt104=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt104.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2613_static.FOLLOW_nounphraseContent_in_nounphraseStructure2613);
            nounphraseContent105=nounphraseContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent105.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:34: ( ( conjunction )* nounphraseContent {...}?)*
            loop18:
            do {
                int alt18=2;
                alt18 = dfa18.predict(input);
                switch (alt18) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )* nounphraseContent {...}?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )*
            	    loop17:
            	    do {
            	        int alt17=2;
            	        alt17 = dfa17.predict(input);
            	        switch (alt17) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2617_static.FOLLOW_conjunction_in_nounphraseStructure2617);
            	    	    conjunction106=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction106.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop17;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2620_static.FOLLOW_nounphraseContent_in_nounphraseStructure2620);
            	    nounphraseContent107=nounphraseContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent107.getTree());
            	    if ( !((!followedByVBDorVBZthenVBYIELDed(input))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "nounphraseStructure2", "!followedByVBDorVBZthenVBYIELDed(input)");
            	    }

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:111: ( prepphraseOf | prepphraseIN )?
            int alt19=3;
            switch ( input.LA(1) ) {
                case 54:
                    {
                    int LA19_1 = input.LA(2);

                    if ( (synpred96_ChemicalChunker()) ) {
                        alt19=1;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred97_ChemicalChunker()) ) {
                        alt19=2;
                    }
                    }
                    break;
            }

            switch (alt19) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:112: prepphraseOf
                    {
                    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2627_static.FOLLOW_prepphraseOf_in_nounphraseStructure2627);
                    prepphraseOf108=prepphraseOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf108.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:126: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2630_static.FOLLOW_prepphraseIN_in_nounphraseStructure2630);
                    prepphraseIN109=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN109.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class nounphraseContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:1: nounphraseContent : ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+ ;
    public final ChemicalChunkerParser.nounphraseContent_return nounphraseContent() throws RecognitionException {
        ChemicalChunkerParser.nounphraseContent_return retval = new ChemicalChunkerParser.nounphraseContent_return();
        retval.start = input.LT(1);
        int nounphraseContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj110 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase111 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio112 = null;

        ChemicalChunkerParser.noun_return noun113 = null;

        ChemicalChunkerParser.numeric_return numeric114 = null;

        ChemicalChunkerParser.bracketedContent_return bracketedContent115 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:2: ( ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( advAdj )*
            loop20:
            do {
                int alt20=2;
                alt20 = dfa20.predict(input);
                switch (alt20) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseContent642_static.FOLLOW_advAdj_in_nounphraseContent642);
            	    advAdj110=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj110.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+
            int cnt21=0;
            loop21:
            do {
                int alt21=6;
                alt21 = dfa21.predict(input);
                switch (alt21) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:14: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseContent647_static.FOLLOW_dissolvePhrase_in_nounphraseContent647);
            	    dissolvePhrase111=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase111.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:29: ratioOrBracketedRatio
            	    {
            	    pushFollow(FOLLOW_ratioOrBracketedRatio_in_nounphraseContent649_static.FOLLOW_ratioOrBracketedRatio_in_nounphraseContent649);
            	    ratioOrBracketedRatio112=ratioOrBracketedRatio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio112.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:51: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseContent651_static.FOLLOW_noun_in_nounphraseContent651);
            	    noun113=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun113.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:56: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseContent653_static.FOLLOW_numeric_in_nounphraseContent653);
            	    numeric114=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric114.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:64: bracketedContent
            	    {
            	    pushFollow(FOLLOW_bracketedContent_in_nounphraseContent655_static.FOLLOW_bracketedContent_in_nounphraseContent655);
            	    bracketedContent115=bracketedContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContent115.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, nounphraseContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseContent"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure116 = null;

        ChemicalChunkerParser.lrb_return lrb117 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure118 = null;

        ChemicalChunkerParser.rrb_return rrb119 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase667_static.FOLLOW_dissolveStructure_in_dissolvePhrase667);
                    dissolveStructure116=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure116.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase669_static.FOLLOW_lrb_in_dissolvePhrase669);
                    lrb117=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb117.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase671_static.FOLLOW_dissolveStructure_in_dissolvePhrase671);
                    dissolveStructure118=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure118.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase673_static.FOLLOW_rrb_in_dissolvePhrase673);
                    rrb119=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb119.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: lrb, dissolveStructure, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 201:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj120 = null;

        ChemicalChunkerParser.nnp_return nnp121 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity122 = null;

        ChemicalChunkerParser.nnp_return nnp123 = null;

        ChemicalChunkerParser.molecule_return molecule124 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule125 = null;

        ChemicalChunkerParser.inMolecule_return inMolecule126 = null;

        ChemicalChunkerParser.conjunction_return conjunction127 = null;

        ChemicalChunkerParser.molecule_return molecule128 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( adj )?
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure698_static.FOLLOW_adj_in_dissolveStructure698);
                    adj120=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj120.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt26=2;
            switch ( input.LA(1) ) {
            case 156:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 69:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 37:
                            case 45:
                            case 54:
                            case 57:
                            case 71:
                            case 123:
                            case 127:
                            case 128:
                            case 131:
                            case 137:
                            case 139:
                            case 141:
                            case 144:
                                {
                                alt26=2;
                                }
                                break;
                            case 48:
                                {
                                alt26=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 26, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 43:
                    case 44:
                    case 61:
                    case 66:
                    case 71:
                    case 81:
                    case 82:
                    case 88:
                    case 128:
                    case 131:
                    case 137:
                    case 139:
                    case 141:
                    case 144:
                    case 149:
                    case 150:
                    case 151:
                        {
                        alt26=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;
                }

                }
                break;
            case 37:
            case 38:
            case 39:
            case 40:
            case 43:
            case 44:
            case 61:
            case 66:
            case 69:
            case 71:
            case 81:
            case 82:
            case 88:
            case 128:
            case 131:
            case 137:
            case 139:
            case 141:
            case 144:
            case 149:
            case 150:
            case 151:
                {
                alt26=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure702_static.FOLLOW_nnp_in_dissolveStructure702);
                    nnp121=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp121.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure704_static.FOLLOW_nnchementity_in_dissolveStructure704);
                    nnchementity122=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity122.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:28: ( nnp )?
                    int alt24=2;
                    switch ( input.LA(1) ) {
                        case 156:
                            {
                            alt24=1;
                            }
                            break;
                    }

                    switch (alt24) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure707_static.FOLLOW_nnp_in_dissolveStructure707);
                            nnp123=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp123.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:32: ( molecule | unnamedmolecule )
                    int alt25=2;
                    alt25 = dfa25.predict(input);
                    switch (alt25) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure710_static.FOLLOW_molecule_in_dissolveStructure710);
                            molecule124=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule124.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure712_static.FOLLOW_unnamedmolecule_in_dissolveStructure712);
                            unnamedmolecule125=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule125.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_inMolecule_in_dissolveStructure716_static.FOLLOW_inMolecule_in_dissolveStructure716);
            inMolecule126=inMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inMolecule126.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:71: ( conjunction molecule )*
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:72: conjunction molecule
            	    {
            	    pushFollow(FOLLOW_conjunction_in_dissolveStructure719_static.FOLLOW_conjunction_in_dissolveStructure719);
            	    conjunction127=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction127.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure721_static.FOLLOW_molecule_in_dissolveStructure721);
            	    molecule128=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule128.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class inMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:1: inMolecule : inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ;
    public final ChemicalChunkerParser.inMolecule_return inMolecule() throws RecognitionException {
        ChemicalChunkerParser.inMolecule_return retval = new ChemicalChunkerParser.inMolecule_return();
        retval.start = input.LT(1);
        int inMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin129 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE130 = null;

        ChemicalChunkerParser.adj_return adj131 = null;

        ChemicalChunkerParser.nnp_return nnp132 = null;

        ChemicalChunkerParser.molecule_return molecule133 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule134 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:2: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:4: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inin_in_inMolecule733_static.FOLLOW_inin_in_inMolecule733);
            inin129=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin129.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:9: ( dtTHE )?
            int alt28=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt28=1;
                    }
                    break;
            }

            switch (alt28) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_inMolecule735_static.FOLLOW_dtTHE_in_inMolecule735);
                    dtTHE130=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE130.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:16: ( adj )?
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_inMolecule738_static.FOLLOW_adj_in_inMolecule738);
                    adj131=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj131.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:21: ( nnp )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt30=1;
                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_inMolecule741_static.FOLLOW_nnp_in_inMolecule741);
                    nnp132=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp132.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:26: ( molecule | unnamedmolecule )
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:27: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_inMolecule745_static.FOLLOW_molecule_in_inMolecule745);
                    molecule133=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule133.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:36: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_inMolecule747_static.FOLLOW_unnamedmolecule_in_inMolecule747);
                    unnamedmolecule134=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule134.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, inMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMolecule"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure135 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase757_static.FOLLOW_verbphraseStructure_in_verbphrase757);
            verbphraseStructure135=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure135.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt136 = null;

        ChemicalChunkerParser.to_return to137 = null;

        ChemicalChunkerParser.inAll_return inAll138 = null;

        ChemicalChunkerParser.inafter_return inafter139 = null;

        ChemicalChunkerParser.md_return md140 = null;

        ChemicalChunkerParser.rbconj_return rbconj141 = null;

        ChemicalChunkerParser.adv_return adv142 = null;

        ChemicalChunkerParser.adj_return adj143 = null;

        ChemicalChunkerParser.verb_return verb144 = null;

        ChemicalChunkerParser.md_return md145 = null;

        ChemicalChunkerParser.adv_return adv146 = null;

        ChemicalChunkerParser.adj_return adj147 = null;

        ChemicalChunkerParser.neg_return neg148 = null;

        ChemicalChunkerParser.inoff_return inoff149 = null;

        ChemicalChunkerParser.cc_return cc150 = null;

        ChemicalChunkerParser.comma_return comma151 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase152 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:24: ( dt )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt32=1;
                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure775_static.FOLLOW_dt_in_verbphraseStructure775);
                    dt136=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt136.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:28: ( to )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 167:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_3 = input.LA(3);

                            if ( (synpred115_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure778_static.FOLLOW_to_in_verbphraseStructure778);
                    to137=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to137.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:32: ( inAll )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 148:
                case 167:
                    {
                    alt34=1;
                    }
                    break;
                case 47:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA34_4 = input.LA(3);

                            if ( (synpred116_ChemicalChunker()) ) {
                                alt34=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure781_static.FOLLOW_inAll_in_verbphraseStructure781);
                    inAll138=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll138.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:39: ( inafter )?
            int alt35=2;
            switch ( input.LA(1) ) {
                case 47:
                    {
                    alt35=1;
                    }
                    break;
            }

            switch (alt35) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure784_static.FOLLOW_inafter_in_verbphraseStructure784);
                    inafter139=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter139.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                alt45 = dfa45.predict(input);
                switch (alt45) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:49: ( md )*
            	    loop36:
            	    do {
            	        int alt36=2;
            	        switch ( input.LA(1) ) {
            	        case 153:
            	            {
            	            alt36=1;
            	            }
            	            break;

            	        }

            	        switch (alt36) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure788_static.FOLLOW_md_in_verbphraseStructure788);
            	    	    md140=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md140.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop36;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:53: ( rbconj )?
            	    int alt37=2;
            	    switch ( input.LA(1) ) {
            	        case 129:
            	            {
            	            alt37=1;
            	            }
            	            break;
            	    }

            	    switch (alt37) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure791_static.FOLLOW_rbconj_in_verbphraseStructure791);
            	            rbconj141=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj141.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:61: ( adv )*
            	    loop38:
            	    do {
            	        int alt38=2;
            	        switch ( input.LA(1) ) {
            	        case 162:
            	        case 163:
            	        case 164:
            	        case 165:
            	            {
            	            alt38=1;
            	            }
            	            break;

            	        }

            	        switch (alt38) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure794_static.FOLLOW_adv_in_verbphraseStructure794);
            	    	    adv142=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv142.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop38;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:66: ( adj )?
            	    int alt39=2;
            	    switch ( input.LA(1) ) {
            	        case 38:
            	        case 39:
            	        case 43:
            	        case 149:
            	        case 150:
            	        case 151:
            	            {
            	            alt39=1;
            	            }
            	            break;
            	    }

            	    switch (alt39) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure797_static.FOLLOW_adj_in_verbphraseStructure797);
            	            adj143=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj143.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:71: ( verb )+
            	    int cnt40=0;
            	    loop40:
            	    do {
            	        int alt40=2;
            	        alt40 = dfa40.predict(input);
            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure800_static.FOLLOW_verb_in_verbphraseStructure800);
            	    	    verb144=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb144.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt40 >= 1 ) break loop40;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(40, input);
            	                throw eee;
            	        }
            	        cnt40++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:77: ( md )*
            	    loop41:
            	    do {
            	        int alt41=2;
            	        switch ( input.LA(1) ) {
            	        case 153:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA41_3 = input.LA(3);

            	                if ( (synpred123_ChemicalChunker()) ) {
            	                    alt41=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt41) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure803_static.FOLLOW_md_in_verbphraseStructure803);
            	    	    md145=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md145.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop41;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:81: ( adv )*
            	    loop42:
            	    do {
            	        int alt42=2;
            	        alt42 = dfa42.predict(input);
            	        switch (alt42) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure806_static.FOLLOW_adv_in_verbphraseStructure806);
            	    	    adv146=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv146.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop42;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:86: ( adj )?
            	    int alt43=2;
            	    alt43 = dfa43.predict(input);
            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure809_static.FOLLOW_adj_in_verbphraseStructure809);
            	            adj147=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj147.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:91: ( neg )?
            	    int alt44=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA44_3 = input.LA(3);

            	                    if ( (synpred126_ChemicalChunker()) ) {
            	                        alt44=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt44) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure812_static.FOLLOW_neg_in_verbphraseStructure812);
            	            neg148=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg148.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:99: ( inoff )?
            int alt46=2;
            switch ( input.LA(1) ) {
                case 60:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA46_3 = input.LA(3);

                            if ( (synpred128_ChemicalChunker()) ) {
                                alt46=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt46) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure818_static.FOLLOW_inoff_in_verbphraseStructure818);
                    inoff149=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff149.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:106: ( ( cc )? ( comma )? prepphrase )*
            loop49:
            do {
                int alt49=2;
                alt49 = dfa49.predict(input);
                switch (alt49) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:107: ( cc )?
            	    int alt47=2;
            	    switch ( input.LA(1) ) {
            	        case 143:
            	            {
            	            alt47=1;
            	            }
            	            break;
            	    }

            	    switch (alt47) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure822_static.FOLLOW_cc_in_verbphraseStructure822);
            	            cc150=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc150.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:111: ( comma )?
            	    int alt48=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt48=1;
            	            }
            	            break;
            	    }

            	    switch (alt48) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure825_static.FOLLOW_comma_in_verbphraseStructure825);
            	            comma151=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma151.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure828_static.FOLLOW_prepphrase_in_verbphraseStructure828);
            	    prepphrase152=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase152.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb153 = null;

        ChemicalChunkerParser.vbp_return vbp154 = null;

        ChemicalChunkerParser.vbg_return vbg155 = null;

        ChemicalChunkerParser.vbd_return vbd156 = null;

        ChemicalChunkerParser.vbz_return vbz157 = null;

        ChemicalChunkerParser.vbn_return vbn158 = null;

        ChemicalChunkerParser.vbuse_return vbuse159 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge160 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse161 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb162 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject163 = null;

        ChemicalChunkerParser.vbadd_return vbadd164 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute165 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge166 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain167 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop168 = null;

        ChemicalChunkerParser.vbfill_return vbfill169 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend170 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat171 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus172 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate173 = null;

        ChemicalChunkerParser.vbcool_return vbcool174 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass175 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve176 = null;

        ChemicalChunkerParser.vbdry_return vbdry177 = null;

        ChemicalChunkerParser.vbextract_return vbextract178 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter179 = null;

        ChemicalChunkerParser.vbheat_return vbheat180 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease181 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition182 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate183 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify184 = null;

        ChemicalChunkerParser.vbquench_return vbquench185 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover186 = null;

        ChemicalChunkerParser.vbremove_return vbremove187 = null;

        ChemicalChunkerParser.vbstir_return vbstir188 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize189 = null;

        ChemicalChunkerParser.vbwait_return vbwait190 = null;

        ChemicalChunkerParser.vbwash_return vbwash191 = null;

        ChemicalChunkerParser.vbyield_return vbyield192 = null;

        ChemicalChunkerParser.vbchange_return vbchange193 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt50=41;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb840_static.FOLLOW_vb_in_verb840);
                    vb153=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb153.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb842_static.FOLLOW_vbp_in_verb842);
                    vbp154=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp154.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb844_static.FOLLOW_vbg_in_verb844);
                    vbg155=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg155.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb846_static.FOLLOW_vbd_in_verb846);
                    vbd156=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd156.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb848_static.FOLLOW_vbz_in_verb848);
                    vbz157=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz157.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb850_static.FOLLOW_vbn_in_verb850);
                    vbn158=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn158.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb852_static.FOLLOW_vbuse_in_verb852);
                    vbuse159=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse159.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb854_static.FOLLOW_vbsubmerge_in_verb854);
                    vbsubmerge160=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge160.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb856_static.FOLLOW_vbimmerse_in_verb856);
                    vbimmerse161=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse161.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb858_static.FOLLOW_degassMultiVerb_in_verb858);
                    degassMultiVerb162=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb162.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb860_static.FOLLOW_vbsubject_in_verb860);
                    vbsubject163=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject163.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb862_static.FOLLOW_vbadd_in_verb862);
                    vbadd164=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd164.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb864_static.FOLLOW_vbdilute_in_verb864);
                    vbdilute165=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute165.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb866_static.FOLLOW_vbcharge_in_verb866);
                    vbcharge166=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge166.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb868_static.FOLLOW_vbcontain_in_verb868);
                    vbcontain167=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain167.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb870_static.FOLLOW_vbdrop_in_verb870);
                    vbdrop168=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop168.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb872_static.FOLLOW_vbfill_in_verb872);
                    vbfill169=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill169.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb874_static.FOLLOW_vbsuspend_in_verb874);
                    vbsuspend170=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend170.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb876_static.FOLLOW_vbtreat_in_verb876);
                    vbtreat171=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat171.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb878_static.FOLLOW_vbapparatus_in_verb878);
                    vbapparatus172=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus172.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb880_static.FOLLOW_vbconcentrate_in_verb880);
                    vbconcentrate173=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate173.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb882_static.FOLLOW_vbcool_in_verb882);
                    vbcool174=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool174.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb884_static.FOLLOW_vbdegass_in_verb884);
                    vbdegass175=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass175.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb886_static.FOLLOW_vbdissolve_in_verb886);
                    vbdissolve176=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve176.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb888_static.FOLLOW_vbdry_in_verb888);
                    vbdry177=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry177.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb890_static.FOLLOW_vbextract_in_verb890);
                    vbextract178=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract178.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb892_static.FOLLOW_vbfilter_in_verb892);
                    vbfilter179=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter179.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb895_static.FOLLOW_vbheat_in_verb895);
                    vbheat180=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat180.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb897_static.FOLLOW_vbincrease_in_verb897);
                    vbincrease181=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease181.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb899_static.FOLLOW_vbpartition_in_verb899);
                    vbpartition182=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition182.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb901_static.FOLLOW_vbprecipitate_in_verb901);
                    vbprecipitate183=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate183.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb903_static.FOLLOW_vbpurify_in_verb903);
                    vbpurify184=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify184.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb905_static.FOLLOW_vbquench_in_verb905);
                    vbquench185=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench185.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb907_static.FOLLOW_vbrecover_in_verb907);
                    vbrecover186=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover186.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb909_static.FOLLOW_vbremove_in_verb909);
                    vbremove187=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove187.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb911_static.FOLLOW_vbstir_in_verb911);
                    vbstir188=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir188.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb913_static.FOLLOW_vbsynthesize_in_verb913);
                    vbsynthesize189=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize189.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb915_static.FOLLOW_vbwait_in_verb915);
                    vbwait190=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait190.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb917_static.FOLLOW_vbwash_in_verb917);
                    vbwash191=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash191.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb919_static.FOLLOW_vbyield_in_verb919);
                    vbyield192=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield192.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb921_static.FOLLOW_vbchange_in_verb921);
                    vbchange193=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange193.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass194 = null;

        ChemicalChunkerParser.cc_return cc195 = null;

        ChemicalChunkerParser.vbfill_return vbfill196 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb930_static.FOLLOW_vbdegass_in_degassMultiVerb930);
            vbdegass194=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass194.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb932_static.FOLLOW_cc_in_degassMultiVerb932);
            cc195=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc195.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb934_static.FOLLOW_vbfill_in_degassMultiVerb934);
            vbfill196=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill196.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure197 = null;

        ChemicalChunkerParser.dash_return dash198 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure199 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun943_static.FOLLOW_nounStructure_in_noun943);
            nounStructure197=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure197.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:23: ( dash nounStructure )*
            loop51:
            do {
                int alt51=2;
                switch ( input.LA(1) ) {
                case 134:
                    {
                    int LA51_2 = input.LA(2);

                    if ( (synpred172_ChemicalChunker()) ) {
                        alt51=1;
                    }


                    }
                    break;

                }

                switch (alt51) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun946_static.FOLLOW_dash_in_noun946);
            	    dash198=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash198.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun948_static.FOLLOW_nounStructure_in_noun948);
            	    nounStructure199=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure199.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp200 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss201 = null;

        ChemicalChunkerParser.citation_return citation202 = null;

        ChemicalChunkerParser.cycles_return cycles203 = null;

        ChemicalChunkerParser.molecule_return molecule204 = null;

        ChemicalChunkerParser.apparatus_return apparatus205 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule206 = null;

        ChemicalChunkerParser.nnstate_return nnstate207 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode208 = null;

        ChemicalChunkerParser.nn_return nn209 = null;

        ChemicalChunkerParser.nns_return nns210 = null;

        ChemicalChunkerParser.nnp_return nnp211 = null;

        ChemicalChunkerParser.nnadd_return nnadd212 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase213 = null;

        ChemicalChunkerParser.nnexample_return nnexample214 = null;

        ChemicalChunkerParser.range_return range215 = null;

        ChemicalChunkerParser.nntime_return nntime216 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere217 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode218 = null;

        ChemicalChunkerParser.quantity_return quantity219 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity220 = null;

        ChemicalChunkerParser.nntemp_return nntemp221 = null;

        ChemicalChunkerParser.nnph_return nnph222 = null;

        ChemicalChunkerParser.nnflash_return nnflash223 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral224 = null;

        ChemicalChunkerParser.nnamount_return nnamount225 = null;

        ChemicalChunkerParser.nneq_return nneq226 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure227 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn228 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography229 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum230 = null;

        ChemicalChunkerParser.nncycle_return nncycle231 = null;

        ChemicalChunkerParser.nntimes_return nntimes232 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate233 = null;

        ChemicalChunkerParser.nnvol_return nnvol234 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify235 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize236 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture237 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference238 = null;

        ChemicalChunkerParser.nndry_return nndry239 = null;

        ChemicalChunkerParser.nnextract_return nnextract240 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter241 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate242 = null;

        ChemicalChunkerParser.nnremove_return nnremove243 = null;

        ChemicalChunkerParser.nnyield_return nnyield244 = null;

        ChemicalChunkerParser.fw_return fw245 = null;

        ChemicalChunkerParser.sym_return sym246 = null;

        ChemicalChunkerParser.clause_return clause247 = null;

        ChemicalChunkerParser.ls_return ls248 = null;

        ChemicalChunkerParser.nnps_return nnps249 = null;

        ChemicalChunkerParser.pos_return pos250 = null;

        ChemicalChunkerParser.oscarase_return oscarase251 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt52=52;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure959_static.FOLLOW_prp_in_nounStructure959);
                    prp200=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp200.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure961_static.FOLLOW_prp_poss_in_nounStructure961);
                    prp_poss201=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss201.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure963_static.FOLLOW_citation_in_nounStructure963);
                    citation202=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation202.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure965_static.FOLLOW_cycles_in_nounStructure965);
                    cycles203=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles203.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure967_static.FOLLOW_molecule_in_nounStructure967);
                    molecule204=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule204.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure969_static.FOLLOW_apparatus_in_nounStructure969);
                    apparatus205=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus205.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:66: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure971_static.FOLLOW_unnamedmolecule_in_nounStructure971);
                    unnamedmolecule206=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule206.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:82: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure973_static.FOLLOW_nnstate_in_nounStructure973);
                    nnstate207=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate207.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:90: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure975_static.FOLLOW_procedureNode_in_nounStructure975);
                    procedureNode208=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode208.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:104: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure977_static.FOLLOW_nn_in_nounStructure977);
                    nn209=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn209.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:107: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure979_static.FOLLOW_nns_in_nounStructure979);
                    nns210=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns210.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:111: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure981_static.FOLLOW_nnp_in_nounStructure981);
                    nnp211=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp211.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:115: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure983_static.FOLLOW_nnadd_in_nounStructure983);
                    nnadd212=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd212.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:121: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure985_static.FOLLOW_preparationphrase_in_nounStructure985);
                    preparationphrase213=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase213.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:139: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure987_static.FOLLOW_nnexample_in_nounStructure987);
                    nnexample214=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample214.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:149: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure989_static.FOLLOW_range_in_nounStructure989);
                    range215=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range215.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:155: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure991_static.FOLLOW_nntime_in_nounStructure991);
                    nntime216=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime216.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:162: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure993_static.FOLLOW_nnatmosphere_in_nounStructure993);
                    nnatmosphere217=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere217.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:175: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure995_static.FOLLOW_tmunicode_in_nounStructure995);
                    tmunicode218=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode218.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:185: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure997_static.FOLLOW_quantity_in_nounStructure997);
                    quantity219=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity219.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:194: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure999_static.FOLLOW_nnchementity_in_nounStructure999);
                    nnchementity220=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity220.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:207: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure1001_static.FOLLOW_nntemp_in_nounStructure1001);
                    nntemp221=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp221.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:214: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure1003_static.FOLLOW_nnph_in_nounStructure1003);
                    nnph222=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph222.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:219: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure1005_static.FOLLOW_nnflash_in_nounStructure1005);
                    nnflash223=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash223.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:227: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure1007_static.FOLLOW_nngeneral_in_nounStructure1007);
                    nngeneral224=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral224.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:237: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure1009_static.FOLLOW_nnamount_in_nounStructure1009);
                    nnamount225=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount225.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:246: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure1011_static.FOLLOW_nneq_in_nounStructure1011);
                    nneq226=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq226.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:251: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure1013_static.FOLLOW_nnpressure_in_nounStructure1013);
                    nnpressure227=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure227.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:262: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure1015_static.FOLLOW_nncolumn_in_nounStructure1015);
                    nncolumn228=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn228.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:271: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure1017_static.FOLLOW_nnchromatography_in_nounStructure1017);
                    nnchromatography229=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography229.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:288: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure1019_static.FOLLOW_nnvacuum_in_nounStructure1019);
                    nnvacuum230=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum230.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:297: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure1021_static.FOLLOW_nncycle_in_nounStructure1021);
                    nncycle231=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle231.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:305: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure1023_static.FOLLOW_nntimes_in_nounStructure1023);
                    nntimes232=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes232.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:313: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure1025_static.FOLLOW_nnconcentrate_in_nounStructure1025);
                    nnconcentrate233=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate233.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:327: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure1027_static.FOLLOW_nnvol_in_nounStructure1027);
                    nnvol234=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol234.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:333: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure1029_static.FOLLOW_nnpurify_in_nounStructure1029);
                    nnpurify235=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify235.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:342: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1031_static.FOLLOW_nnsynthesize_in_nounStructure1031);
                    nnsynthesize236=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize236.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:355: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1033_static.FOLLOW_nnmixture_in_nounStructure1033);
                    nnmixture237=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture237.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:365: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure1035_static.FOLLOW_squareBracketedReference_in_nounStructure1035);
                    squareBracketedReference238=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference238.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:390: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1037_static.FOLLOW_nndry_in_nounStructure1037);
                    nndry239=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry239.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:396: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1039_static.FOLLOW_nnextract_in_nounStructure1039);
                    nnextract240=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract240.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:406: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1041_static.FOLLOW_nnfilter_in_nounStructure1041);
                    nnfilter241=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter241.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:415: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1043_static.FOLLOW_nnprecipitate_in_nounStructure1043);
                    nnprecipitate242=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate242.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:429: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1045_static.FOLLOW_nnremove_in_nounStructure1045);
                    nnremove243=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove243.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:438: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure1047_static.FOLLOW_nnyield_in_nounStructure1047);
                    nnyield244=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield244.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:446: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1049_static.FOLLOW_fw_in_nounStructure1049);
                    fw245=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw245.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:449: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1051_static.FOLLOW_sym_in_nounStructure1051);
                    sym246=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym246.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:453: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1053_static.FOLLOW_clause_in_nounStructure1053);
                    clause247=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause247.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:460: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure1055_static.FOLLOW_ls_in_nounStructure1055);
                    ls248=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls248.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:463: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure1057_static.FOLLOW_nnps_in_nounStructure1057);
                    nnps249=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps249.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:468: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure1059_static.FOLLOW_pos_in_nounStructure1059);
                    pos250=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos250.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:472: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure1061_static.FOLLOW_oscarase_in_nounStructure1061);
                    oscarase251=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase251.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg252 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere253 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime254 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp255 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN256 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole257 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther258 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:5: ( neg )?
            int alt53=2;
            switch ( input.LA(1) ) {
                case 133:
                    {
                    alt53=1;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1073_static.FOLLOW_neg_in_prepphrase1073);
                    neg252=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg252.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt54=6;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1077_static.FOLLOW_prepphraseAtmosphere_in_prepphrase1077);
                    prepphraseAtmosphere253=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere253.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1079_static.FOLLOW_prepphraseTime_in_prepphrase1079);
                    prepphraseTime254=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime254.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1081_static.FOLLOW_prepphraseTemp_in_prepphrase1081);
                    prepphraseTemp255=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp255.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1083_static.FOLLOW_prepphraseIN_in_prepphrase1083);
                    prepphraseIN256=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN256.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1085_static.FOLLOW_prepphraseRole_in_prepphrase1085);
                    prepphraseRole257=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole257.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1087_static.FOLLOW_prepphraseOther_in_prepphrase1087);
                    prepphraseOther258=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther258.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent259 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1099_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1099);
            prepphraseAtmosphereContent259=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent259.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder260 = null;

        ChemicalChunkerParser.dt_return dt261 = null;

        ChemicalChunkerParser.advAdj_return advAdj262 = null;

        ChemicalChunkerParser.molecule_return molecule263 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere264 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1119_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1119);
            inunder260=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder260.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:12: ( dt )?
            int alt55=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt55=1;
                    }
                    break;
            }

            switch (alt55) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1122_static.FOLLOW_dt_in_prepphraseAtmosphereContent1122);
                    dt261=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt261.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:16: ( advAdj )*
            loop56:
            do {
                int alt56=2;
                alt56 = dfa56.predict(input);
                switch (alt56) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1125_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1125);
            	    advAdj262=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj262.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1128_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1128);
            molecule263=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule263.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:33: ( nnatmosphere )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 66:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA57_3 = input.LA(3);

                            if ( (synpred232_ChemicalChunker()) ) {
                                alt57=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1130_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1130);
                    nnatmosphere264=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere264.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure265 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1140_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1140);
            prepPhraseTimeStructure265=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure265.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 233:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj266 = null;

        ChemicalChunkerParser.inAll_return inAll267 = null;

        ChemicalChunkerParser.dt_return dt268 = null;

        ChemicalChunkerParser.advAdj_return advAdj269 = null;

        ChemicalChunkerParser.cd_return cd270 = null;

        ChemicalChunkerParser.nntime_return nntime271 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:3: ( advAdj )*
            loop58:
            do {
                int alt58=2;
                alt58 = dfa58.predict(input);
                switch (alt58) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1158_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1158);
            	    advAdj266=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj266.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:11: ( inAll )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 148:
                case 167:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1161_static.FOLLOW_inAll_in_prepPhraseTimeStructure1161);
                    inAll267=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll267.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:19: ( dt )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1165_static.FOLLOW_dt_in_prepPhraseTimeStructure1165);
                    dt268=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt268.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:23: ( advAdj )*
            loop61:
            do {
                int alt61=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt61=1;
                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1168_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1168);
            	    advAdj269=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj269.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:31: ( cd )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1171_static.FOLLOW_cd_in_prepPhraseTimeStructure1171);
                    cd270=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd270.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:35: ( nntime )+
            int cnt63=0;
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 62:
                    {
                    int LA63_2 = input.LA(2);

                    if ( (synpred238_ChemicalChunker()) ) {
                        alt63=1;
                    }


                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1174_static.FOLLOW_nntime_in_prepPhraseTimeStructure1174);
            	    nntime271=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime271.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt63 >= 1 ) break loop63;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(63, input);
                        throw eee;
                }
                cnt63++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent272 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1184_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1184);
            prepphraseTempContent272=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent272.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 238:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj273 = null;

        ChemicalChunkerParser.inAll_return inAll274 = null;

        ChemicalChunkerParser.dt_return dt275 = null;

        ChemicalChunkerParser.advAdj_return advAdj276 = null;

        ChemicalChunkerParser.cd_return cd277 = null;

        ChemicalChunkerParser.nntemp_return nntemp278 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:5: ( advAdj )?
            int alt64=2;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1205_static.FOLLOW_advAdj_in_prepphraseTempContent1205);
                    advAdj273=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj273.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:13: ( inAll )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 148:
                case 167:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1208_static.FOLLOW_inAll_in_prepphraseTempContent1208);
                    inAll274=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll274.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:20: ( dt )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1211_static.FOLLOW_dt_in_prepphraseTempContent1211);
                    dt275=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt275.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:24: ( advAdj )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1214_static.FOLLOW_advAdj_in_prepphraseTempContent1214);
                    advAdj276=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj276.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:32: ( cd )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1217_static.FOLLOW_cd_in_prepphraseTempContent1217);
                    cd277=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd277.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:36: ( nntemp )+
            int cnt69=0;
            loop69:
            do {
                int alt69=2;
                switch ( input.LA(1) ) {
                case 70:
                    {
                    int LA69_2 = input.LA(2);

                    if ( (synpred244_ChemicalChunker()) ) {
                        alt69=1;
                    }


                    }
                    break;

                }

                switch (alt69) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1220_static.FOLLOW_nntemp_in_prepphraseTempContent1220);
            	    nntemp278=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp278.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt69 >= 1 ) break loop69;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(69, input);
                        throw eee;
                }
                cnt69++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin279 = null;

        ChemicalChunkerParser.molecule_return molecule280 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1229_static.FOLLOW_inin_in_prepphraseIN1229);
            inin279=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin279.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1231_static.FOLLOW_molecule_in_prepphraseIN1231);
            molecule280=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule280.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 244:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas281 = null;

        ChemicalChunkerParser.dt_return dt282 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity283 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1252_static.FOLLOW_inas_in_prepphraseRole1252);
            inas281=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas281.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:8: ( dt )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt70=1;
                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1254_static.FOLLOW_dt_in_prepphraseRole1254);
                    dt282=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt282.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1257_static.FOLLOW_nnchementity_in_prepphraseRole1257);
            nnchementity283=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity283.getTree());


            // AST REWRITE
            // elements: dt, nnchementity, inas
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 247:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj284 = null;

        ChemicalChunkerParser.inMost_return inMost285 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase286 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:4: ( advAdj )*
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1280_static.FOLLOW_advAdj_in_prepphraseOther1280);
            	    advAdj284=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj284.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:12: ( inMost )+
            int cnt72=0;
            loop72:
            do {
                int alt72=2;
                switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 148:
                case 167:
                    {
                    alt72=1;
                    }
                    break;

                }

                switch (alt72) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1283_static.FOLLOW_inMost_in_prepphraseOther1283);
            	    inMost285=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost285.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1287_static.FOLLOW_nounphrase_in_prepphraseOther1287);
            nounphrase286=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase286.getTree());


            // AST REWRITE
            // elements: advAdj, inMost, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 250:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof287 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase288 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1313_static.FOLLOW_inof_in_prepphraseOf1313);
            inof287=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof287.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1316_static.FOLLOW_nounphrase_in_prepphraseOf1316);
            nounphrase288=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase288.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj289 = null;

        ChemicalChunkerParser.inafter_return inafter290 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase291 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:5: ( advAdj )?
            int alt73=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt73=1;
                    }
                    break;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1338_static.FOLLOW_advAdj_in_prepphraseAfter1338);
                    advAdj289=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj289.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1341_static.FOLLOW_inafter_in_prepphraseAfter1341);
            inafter290=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter290.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1344_static.FOLLOW_nounphrase_in_prepphraseAfter1344);
            nounphrase291=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase291.getTree());


            // AST REWRITE
            // elements: nounphrase, inafter, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize292 = null;

        ChemicalChunkerParser.inas_return inas293 = null;

        ChemicalChunkerParser.nnexample_return nnexample294 = null;

        ChemicalChunkerParser.cd_return cd295 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase296 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1369_static.FOLLOW_vbsynthesize_in_preparationphrase1369);
            vbsynthesize292=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize292.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1371_static.FOLLOW_inas_in_preparationphrase1371);
            inas293=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas293.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:22: ( nnexample cd | prepphrase )
            int alt74=2;
            switch ( input.LA(1) ) {
            case 81:
                {
                alt74=1;
                }
                break;
            case 38:
            case 39:
            case 43:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 62:
            case 70:
            case 133:
            case 144:
            case 145:
            case 148:
            case 149:
            case 150:
            case 151:
            case 162:
            case 163:
            case 164:
            case 165:
            case 167:
                {
                alt74=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1374_static.FOLLOW_nnexample_in_preparationphrase1374);
                    nnexample294=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample294.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1376_static.FOLLOW_cd_in_preparationphrase1376);
                    cd295=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd295.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1379_static.FOLLOW_prepphrase_in_preparationphrase1379);
                    prepphrase296=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase296.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus297 = null;

        ChemicalChunkerParser.conjunction_return conjunction298 = null;

        ChemicalChunkerParser.apparatus_return apparatus299 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1390_static.FOLLOW_apparatus_in_multiApparatus1390);
            apparatus297=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus297.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:14: ( ( conjunction )* apparatus )*
            loop76:
            do {
                int alt76=2;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:15: ( conjunction )*
            	    loop75:
            	    do {
            	        int alt75=2;
            	        alt75 = dfa75.predict(input);
            	        switch (alt75) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1393_static.FOLLOW_conjunction_in_multiApparatus1393);
            	    	    conjunction298=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction298.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop75;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1396_static.FOLLOW_apparatus_in_multiApparatus1396);
            	    apparatus299=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus299.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt300 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus301 = null;

        ChemicalChunkerParser.nnApp_return nnApp302 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:4: ( dt )?
            int alt77=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt77=1;
                    }
                    break;
            }

            switch (alt77) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1407_static.FOLLOW_dt_in_apparatus1407);
                    dt300=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt300.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:8: ( preapparatus )*
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 44:
                case 61:
                case 69:
                case 71:
                case 75:
                case 82:
                case 87:
                case 128:
                case 131:
                case 137:
                case 141:
                case 144:
                case 149:
                case 150:
                case 151:
                case 154:
                    {
                    alt78=1;
                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1410_static.FOLLOW_preapparatus_in_apparatus1410);
            	    preapparatus301=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus301.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:22: ( nnApp )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred254_ChemicalChunker()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1413_static.FOLLOW_nnApp_in_apparatus1413);
            	    nnApp302=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp302.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, dt, nnApp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus303 = null;

        ChemicalChunkerParser.dash_return dash304 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus305 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:4: ( nnapparatus )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    int LA80_2 = input.LA(2);

                    if ( (synpred255_ChemicalChunker()) ) {
                        alt80=1;
                    }


                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1440_static.FOLLOW_nnapparatus_in_nnApp1440);
            	    nnapparatus303=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus303.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:17: ( dash nnapparatus )*
            loop81:
            do {
                int alt81=2;
                switch ( input.LA(1) ) {
                case 134:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 98:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA81_5 = input.LA(5);

                                if ( (synpred256_ChemicalChunker()) ) {
                                    alt81=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1444_static.FOLLOW_dash_in_nnApp1444);
            	    dash304=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash304.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1446_static.FOLLOW_nnapparatus_in_nnApp1446);
            	    nnapparatus305=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus305.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity306 = null;

        ChemicalChunkerParser.adj_return adj307 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure308 = null;

        ChemicalChunkerParser.nnadd_return nnadd309 = null;

        ChemicalChunkerParser.molecule_return molecule310 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity311 = null;

        ChemicalChunkerParser.nnstate_return nnstate312 = null;

        ChemicalChunkerParser.nn_return nn313 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt82=0;
            loop82:
            do {
                int alt82=9;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1460_static.FOLLOW_quantity_in_preapparatus1460);
            	    quantity306=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity306.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1462_static.FOLLOW_adj_in_preapparatus1462);
            	    adj307=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj307.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1464_static.FOLLOW_nnpressure_in_preapparatus1464);
            	    nnpressure308=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure308.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1466_static.FOLLOW_nnadd_in_preapparatus1466);
            	    nnadd309=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd309.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1468_static.FOLLOW_molecule_in_preapparatus1468);
            	    molecule310=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule310.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1470_static.FOLLOW_nnchementity_in_preapparatus1470);
            	    nnchementity311=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity311.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1472_static.FOLLOW_nnstate_in_preapparatus1472);
            	    nnstate312=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate312.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1474_static.FOLLOW_nn_in_preapparatus1474);
            	    nn313=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn313.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:1: oscarCompound : ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp314 = null;

        ChemicalChunkerParser.adj_return adj315 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure316 = null;

        ChemicalChunkerParser.adj_return adj317 = null;

        ChemicalChunkerParser.nnstate_return nnstate318 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity319 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity320 = null;

        ChemicalChunkerParser.quantity_return quantity321 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure322 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:15: ( ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:18: ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:18: ( jjcomp | adj )*
            loop83:
            do {
                int alt83=3;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    alt83=1;
                    }
                    break;
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                    {
                    alt83=2;
                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:19: jjcomp
            	    {
            	    pushFollow(FOLLOW_jjcomp_in_oscarCompound1487_static.FOLLOW_jjcomp_in_oscarCompound1487);
            	    jjcomp314=jjcomp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp314.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:26: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1489_static.FOLLOW_adj_in_oscarCompound1489);
            	    adj315=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj315.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1493_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1493);
            oscarCompoundStructure316=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure316.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:55: ( adj )?
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1495_static.FOLLOW_adj_in_oscarCompound1495);
                    adj317=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj317.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:60: ( nnstate )?
            int alt85=2;
            switch ( input.LA(1) ) {
                case 61:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA85_3 = input.LA(3);

                            if ( (synpred268_ChemicalChunker()) ) {
                                alt85=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt85) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_oscarCompound1498_static.FOLLOW_nnstate_in_oscarCompound1498);
                    nnstate318=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate318.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:69: ( numericReferenceOrQuantity | nnchementity )?
            int alt86=3;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:70: numericReferenceOrQuantity
                    {
                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_oscarCompound1502_static.FOLLOW_numericReferenceOrQuantity_in_oscarCompound1502);
                    numericReferenceOrQuantity319=numericReferenceOrQuantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity319.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:99: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1506_static.FOLLOW_nnchementity_in_oscarCompound1506);
                    nnchementity320=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity320.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:115: ( quantity )*
            loop87:
            do {
                int alt87=2;
                alt87 = dfa87.predict(input);
                switch (alt87) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1511_static.FOLLOW_quantity_in_oscarCompound1511);
            	    quantity321=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity321.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:125: ( fromProcedure )?
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_oscarCompound1514_static.FOLLOW_fromProcedure_in_oscarCompound1514);
                    fromProcedure322=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure322.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:1: oscarCompoundStructure : ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm323 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure324 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure325 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:23: ( ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:25: ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:25: ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt91=2;
            switch ( input.LA(1) ) {
            case 82:
                {
                alt91=1;
                }
                break;
            case 141:
                {
                alt91=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:26: ( oscarcm )+ ( afterOscarCompoundStructure )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:26: ( oscarcm )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        switch ( input.LA(1) ) {
                        case 82:
                            {
                            int LA89_2 = input.LA(2);

                            if ( (synpred273_ChemicalChunker()) ) {
                                alt89=1;
                            }


                            }
                            break;

                        }

                        switch (alt89) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1523_static.FOLLOW_oscarcm_in_oscarCompoundStructure1523);
                    	    oscarcm323=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm323.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:35: ( afterOscarCompoundStructure )?
                    int alt90=2;
                    alt90 = dfa90.predict(input);
                    switch (alt90) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1526_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1526);
                            afterOscarCompoundStructure324=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure324.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:66: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1531_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1531);
                    bracketedOscarCompoundStructure325=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure325.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: oscarcm, afterOscarCompoundStructure, bracketedOscarCompoundStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 273:99: -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:102: ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:112: ( oscarcm )*
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:121: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:150: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:1: afterOscarCompoundStructure : ( ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dash_return dash326 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm327 = null;

        ChemicalChunkerParser.dash_return dash328 = null;

        ChemicalChunkerParser.colon_return colon329 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm330 = null;

        ChemicalChunkerParser.dash_return dash331 = null;

        ChemicalChunkerParser.apost_return apost332 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:28: ( ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ )
            int alt98=3;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==134) ) {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 82:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA98_6 = input.LA(5);

                            if ( (synpred279_ChemicalChunker()) ) {
                                alt98=1;
                            }
                            else if ( (true) ) {
                                alt98=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 98, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 98, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                        {
                        alt98=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 98, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA98_0==130) && (synpred283_ChemicalChunker())) {
                alt98=2;
            }
            else if ( (LA98_0==132) ) {
                alt98=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:30: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:30: ( dash ( oscarcm )+ )+
                    int cnt93=0;
                    loop93:
                    do {
                        int alt93=2;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 82:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA93_5 = input.LA(5);

                                        if ( (synpred277_ChemicalChunker()) ) {
                                            alt93=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt93) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:31: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1554_static.FOLLOW_dash_in_afterOscarCompoundStructure1554);
                    	    dash326=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash326.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:36: ( oscarcm )+
                    	    int cnt92=0;
                    	    loop92:
                    	    do {
                    	        int alt92=2;
                    	        switch ( input.LA(1) ) {
                    	        case 82:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA92_3 = input.LA(3);

                    	                if ( (synpred276_ChemicalChunker()) ) {
                    	                    alt92=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt92) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1556_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1556);
                    	    	    oscarcm327=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm327.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt92 >= 1 ) break loop92;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(92, input);
                    	                throw eee;
                    	        }
                    	        cnt92++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt93 >= 1 ) break loop93;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(93, input);
                                throw eee;
                        }
                        cnt93++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:47: ( dash )?
                    int alt94=2;
                    switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA94_3 = input.LA(3);

                                    if ( (synpred278_ChemicalChunker()) ) {
                                        alt94=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt94) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1561_static.FOLLOW_dash_in_afterOscarCompoundStructure1561);
                            dash328=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash328.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:53: ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:85: ( colon ( oscarcm )+ )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        switch ( input.LA(1) ) {
                        case 130:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 82:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA96_5 = input.LA(5);

                                        if ( (synpred285_ChemicalChunker()) ) {
                                            alt96=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt96) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:86: colon ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_colon_in_afterOscarCompoundStructure1580_static.FOLLOW_colon_in_afterOscarCompoundStructure1580);
                    	    colon329=colon();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon329.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:92: ( oscarcm )+
                    	    int cnt95=0;
                    	    loop95:
                    	    do {
                    	        int alt95=2;
                    	        switch ( input.LA(1) ) {
                    	        case 82:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA95_3 = input.LA(3);

                    	                if ( (synpred284_ChemicalChunker()) ) {
                    	                    alt95=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt95) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1582_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1582);
                    	    	    oscarcm330=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm330.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt95 >= 1 ) break loop95;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(95, input);
                    	                throw eee;
                    	        }
                    	        cnt95++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:103: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:103: ( dash | apost )+
                    int cnt97=0;
                    loop97:
                    do {
                        int alt97=3;
                        switch ( input.LA(1) ) {
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA97_4 = input.LA(3);

                                if ( (synpred287_ChemicalChunker()) ) {
                                    alt97=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA97_5 = input.LA(3);

                                if ( (synpred286_ChemicalChunker()) ) {
                                    alt97=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt97) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:104: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1588_static.FOLLOW_dash_in_afterOscarCompoundStructure1588);
                    	    dash331=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash331.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:109: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1590_static.FOLLOW_apost_in_afterOscarCompoundStructure1590);
                    	    apost332=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost332.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt97 >= 1 ) break loop97;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(97, input);
                                throw eee;
                        }
                        cnt97++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb333 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm334 = null;

        ChemicalChunkerParser.rrb_return rrb335 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1599_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1599);
            lrb333=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb333.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:40: ( oscarcm )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                switch ( input.LA(1) ) {
                case 82:
                    {
                    alt99=1;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1602_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1602);
            	    oscarcm334=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm334.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1605_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1605);
            rrb335=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb335.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount336 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1615_static.FOLLOW_moleculeamount_in_molecule1615);
            moleculeamount336=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount336.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3337 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1338 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2339 = null;

        ChemicalChunkerParser.asAstate_return asAstate340 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt100=3;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1633_static.FOLLOW_moleculeamount3_in_moleculeamount1633);
                    moleculeamount3337=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3337.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1636_static.FOLLOW_moleculeamount1_in_moleculeamount1636);
                    moleculeamount1338=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1338.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1640_static.FOLLOW_moleculeamount2_in_moleculeamount1640);
                    moleculeamount2339=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2339.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:71: ( asAstate )?
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1643_static.FOLLOW_asAstate_in_moleculeamount1643);
                    asAstate340=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate340.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: moleculeamount3 : ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity341 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol342 = null;

        ChemicalChunkerParser.inof_return inof343 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE344 = null;

        ChemicalChunkerParser.dt_return dt345 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio346 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol347 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound348 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:2: ( ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:3: ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:3: ( quantity | bracketedContentInMol )+
            int cnt102=0;
            loop102:
            do {
                int alt102=3;
                switch ( input.LA(1) ) {
                case 141:
                    {
                    int LA102_2 = input.LA(2);

                    if ( (synpred292_ChemicalChunker()) ) {
                        alt102=1;
                    }
                    else if ( (synpred293_ChemicalChunker()) ) {
                        alt102=2;
                    }


                    }
                    break;
                case 144:
                    {
                    int LA102_3 = input.LA(2);

                    if ( (synpred292_ChemicalChunker()) ) {
                        alt102=1;
                    }
                    else if ( (synpred293_ChemicalChunker()) ) {
                        alt102=2;
                    }


                    }
                    break;
                case 71:
                case 128:
                    {
                    alt102=1;
                    }
                    break;
                case 131:
                case 137:
                    {
                    alt102=2;
                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount31654_static.FOLLOW_quantity_in_moleculeamount31654);
            	    quantity341=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity341.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:13: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount31656_static.FOLLOW_bracketedContentInMol_in_moleculeamount31656);
            	    bracketedContentInMol342=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol342.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount31660_static.FOLLOW_inof_in_moleculeamount31660);
            inof343=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof343.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:42: ( dtTHE | dt )?
            int alt103=3;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt103=1;
                    }
                    break;
                case 145:
                    {
                    alt103=2;
                    }
                    break;
            }

            switch (alt103) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:43: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31663_static.FOLLOW_dtTHE_in_moleculeamount31663);
                    dtTHE344=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE344.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:51: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31667_static.FOLLOW_dt_in_moleculeamount31667);
                    dt345=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt345.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_ratioOrBracketedRatio_in_moleculeamount31671_static.FOLLOW_ratioOrBracketedRatio_in_moleculeamount31671);
            ratioOrBracketedRatio346=ratioOrBracketedRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio346.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:78: ( bracketedContentInMol )?
            int alt104=2;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: bracketedContentInMol
                    {
                    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount31673_static.FOLLOW_bracketedContentInMol_in_moleculeamount31673);
                    bracketedContentInMol347=bracketedContentInMol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol347.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31676_static.FOLLOW_oscarCompound_in_moleculeamount31676);
            oscarCompound348=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound348.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:1: moleculeamount1 : ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity349 = null;

        ChemicalChunkerParser.nnstate_return nnstate350 = null;

        ChemicalChunkerParser.quantity_return quantity351 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol352 = null;

        ChemicalChunkerParser.inof_return inof353 = null;

        ChemicalChunkerParser.quantity_return quantity354 = null;

        ChemicalChunkerParser.inof_return inof355 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE356 = null;

        ChemicalChunkerParser.dt_return dt357 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound358 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity359 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:2: ( ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:3: ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:3: ( nnchementity | nnstate )?
            int alt105=3;
            switch ( input.LA(1) ) {
                case 69:
                    {
                    alt105=1;
                    }
                    break;
                case 61:
                    {
                    alt105=2;
                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:4: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_moleculeamount11686_static.FOLLOW_nnchementity_in_moleculeamount11686);
                    nnchementity349=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity349.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:19: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_moleculeamount11690_static.FOLLOW_nnstate_in_moleculeamount11690);
                    nnstate350=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate350.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:29: ( quantity | bracketedContentInMol )+
            int cnt106=0;
            loop106:
            do {
                int alt106=3;
                switch ( input.LA(1) ) {
                case 141:
                    {
                    int LA106_2 = input.LA(2);

                    if ( (synpred299_ChemicalChunker()) ) {
                        alt106=1;
                    }
                    else if ( (synpred300_ChemicalChunker()) ) {
                        alt106=2;
                    }


                    }
                    break;
                case 144:
                    {
                    int LA106_3 = input.LA(2);

                    if ( (synpred299_ChemicalChunker()) ) {
                        alt106=1;
                    }
                    else if ( (synpred300_ChemicalChunker()) ) {
                        alt106=2;
                    }


                    }
                    break;
                case 71:
                case 128:
                    {
                    alt106=1;
                    }
                    break;
                case 131:
                case 137:
                    {
                    alt106=2;
                    }
                    break;

                }

                switch (alt106) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:30: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11695_static.FOLLOW_quantity_in_moleculeamount11695);
            	    quantity351=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity351.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:39: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount11697_static.FOLLOW_bracketedContentInMol_in_moleculeamount11697);
            	    bracketedContentInMol352=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol352.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11701_static.FOLLOW_inof_in_moleculeamount11701);
            inof353=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof353.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:68: ( quantity ( inof )? )?
            int alt108=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 71:
                                case 128:
                                case 144:
                                    {
                                    alt108=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 71:
                case 128:
                case 144:
                    {
                    alt108=1;
                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:69: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11704_static.FOLLOW_quantity_in_moleculeamount11704);
                    quantity354=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity354.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:78: ( inof )?
                    int alt107=2;
                    switch ( input.LA(1) ) {
                        case 54:
                            {
                            alt107=1;
                            }
                            break;
                    }

                    switch (alt107) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11706_static.FOLLOW_inof_in_moleculeamount11706);
                            inof355=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof355.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:86: ( dtTHE | dt )?
            int alt109=3;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt109=1;
                    }
                    break;
                case 145:
                    {
                    alt109=2;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:87: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11712_static.FOLLOW_dtTHE_in_moleculeamount11712);
                    dtTHE356=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE356.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:95: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11716_static.FOLLOW_dt_in_moleculeamount11716);
                    dt357=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt357.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:100: ( oscarCompound )+
            int cnt110=0;
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11720_static.FOLLOW_oscarCompound_in_moleculeamount11720);
            	    oscarCompound358=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound358.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt110 >= 1 ) break loop110;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(110, input);
                        throw eee;
                }
                cnt110++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11723_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11723);
            afterCompoundCitationOrQuantity359=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity359.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:1: moleculeamount2 : ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity360 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol361 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound362 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity363 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:2: ( ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:3: ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:3: ( quantity | bracketedContentInMol )*
            loop111:
            do {
                int alt111=3;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21732_static.FOLLOW_quantity_in_moleculeamount21732);
            	    quantity360=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity360.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:13: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount21734_static.FOLLOW_bracketedContentInMol_in_moleculeamount21734);
            	    bracketedContentInMol361=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol361.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:37: ( oscarCompound )+
            int cnt112=0;
            loop112:
            do {
                int alt112=2;
                alt112 = dfa112.predict(input);
                switch (alt112) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21738_static.FOLLOW_oscarCompound_in_moleculeamount21738);
            	    oscarCompound362=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound362.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21741_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21741);
            afterCompoundCitationOrQuantity363=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity363.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation364 = null;

        ChemicalChunkerParser.quantity_return quantity365 = null;

        ChemicalChunkerParser.comma_return comma366 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node367 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure368 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol369 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*
            loop114:
            do {
                int alt114=5;
                alt114 = dfa114.predict(input);
                switch (alt114) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1749_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1749);
            	    citation364=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation364.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1751_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1751);
            	    quantity365=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity365.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1753_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1753);
            	    comma366=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma366.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:59: ( quantity1Node | citationStructure )
            	    int alt113=2;
            	    switch ( input.LA(1) ) {
            	    case 141:
            	        {
            	        switch ( input.LA(2) ) {
            	        case TOKEN:
            	            {
            	            switch ( input.LA(3) ) {
            	            case 131:
            	            case 143:
            	            case 147:
            	            case 156:
            	                {
            	                alt113=2;
            	                }
            	                break;
            	            case 144:
            	                {
            	                switch ( input.LA(4) ) {
            	                case TOKEN:
            	                    {
            	                    switch ( input.LA(5) ) {
            	                    case 42:
            	                    case 63:
            	                    case 64:
            	                    case 65:
            	                    case 67:
            	                    case 68:
            	                    case 136:
            	                    case 154:
            	                        {
            	                        alt113=1;
            	                        }
            	                        break;
            	                    case 131:
            	                    case 143:
            	                    case 144:
            	                    case 147:
            	                    case 156:
            	                        {
            	                        alt113=2;
            	                        }
            	                        break;
            	                    default:
            	                        if (state.backtracking>0) {state.failed=true; return retval;}
            	                        NoViableAltException nvae =
            	                            new NoViableAltException("", 113, 6, input);

            	                        throw nvae;
            	                    }

            	                    }
            	                    break;
            	                default:
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 113, 4, input);

            	                    throw nvae;
            	                }

            	                }
            	                break;
            	            case 71:
            	            case 128:
            	                {
            	                alt113=1;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 113, 2, input);

            	                throw nvae;
            	            }

            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 113, 1, input);

            	            throw nvae;
            	        }

            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 113, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt113) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1756_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1756);
            	            quantity1Node367=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node367.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1758_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1758);
            	            citationStructure368=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure368.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:93: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1761_static.FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1761);
            	    bracketedContentInMol369=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol369.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: unnamedmolecule : unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription370 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:2: ( unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:4: unnamedmoleculeDescription
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1772_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1772);
            unnamedmoleculeDescription370=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription370.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeDescription
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:31: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:34: ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: unnamedmoleculeDescription : unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart371 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity372 = null;

        ChemicalChunkerParser.asAstate_return asAstate373 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:2: ( unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:4: unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1789_static.FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1789);
            unnamedmoleculeDescriptionStart371=unnamedmoleculeDescriptionStart();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeDescriptionStart371.getTree());
            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1791_static.FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1791);
            afterCompoundCitationOrQuantity372=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity372.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:68: ( asAstate )?
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmoleculeDescription1793_static.FOLLOW_asAstate_in_unnamedmoleculeDescription1793);
                    asAstate373=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate373.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeDescriptionStart_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescriptionStart"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );
    public final ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return retval = new ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescriptionStart_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantityOf_return quantityOf374 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1375 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2376 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule377 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2378 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule379 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:2: ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
            int alt117=3;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:4: quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1803_static.FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1803);
                    quantityOf374=quantityOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantityOf374.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    int alt116=3;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:16: potentialUnnamedMoleculeAmount1
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1806_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1806);
                            potentialUnnamedMoleculeAmount1375=potentialUnnamedMoleculeAmount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount1375.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:50: potentialUnnamedMoleculeAmount2
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1810_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1810);
                            potentialUnnamedMoleculeAmount2376=potentialUnnamedMoleculeAmount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2376.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:84: definiteUnnamedMolecule
                            {
                            pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1814_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1814);
                            definiteUnnamedMolecule377=definiteUnnamedMolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule377.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:112: potentialUnnamedMoleculeAmount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1820_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1820);
                    potentialUnnamedMoleculeAmount2378=potentialUnnamedMoleculeAmount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2378.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:146: definiteUnnamedMolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1824_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1824);
                    definiteUnnamedMolecule379=definiteUnnamedMolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule379.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, unnamedmoleculeDescriptionStart_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescriptionStart"

    public static class quantityOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantityOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: quantityOf : ( quantity )+ ( inof )? ( dtTHE | dt )? ;
    public final ChemicalChunkerParser.quantityOf_return quantityOf() throws RecognitionException {
        ChemicalChunkerParser.quantityOf_return retval = new ChemicalChunkerParser.quantityOf_return();
        retval.start = input.LT(1);
        int quantityOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity380 = null;

        ChemicalChunkerParser.inof_return inof381 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE382 = null;

        ChemicalChunkerParser.dt_return dt383 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:2: ( ( quantity )+ ( inof )? ( dtTHE | dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:4: ( quantity )+ ( inof )? ( dtTHE | dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:4: ( quantity )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                alt118 = dfa118.predict(input);
                switch (alt118) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_quantityOf1833_static.FOLLOW_quantity_in_quantityOf1833);
            	    quantity380=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity380.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:14: ( inof )?
            int alt119=2;
            switch ( input.LA(1) ) {
                case 54:
                    {
                    alt119=1;
                    }
                    break;
            }

            switch (alt119) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                    {
                    pushFollow(FOLLOW_inof_in_quantityOf1836_static.FOLLOW_inof_in_quantityOf1836);
                    inof381=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof381.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:20: ( dtTHE | dt )?
            int alt120=3;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt120=1;
                    }
                    break;
                case 145:
                    {
                    alt120=2;
                    }
                    break;
            }

            switch (alt120) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:21: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_quantityOf1840_static.FOLLOW_dtTHE_in_quantityOf1840);
                    dtTHE382=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE382.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:29: dt
                    {
                    pushFollow(FOLLOW_dt_in_quantityOf1844_static.FOLLOW_dt_in_quantityOf1844);
                    dt383=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt383.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, quantityOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantityOf"

    public static class potentialUnnamedMoleculeAmount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: potentialUnnamedMoleculeAmount1 : potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule384 = null;

        ChemicalChunkerParser.quantity_return quantity385 = null;

        ChemicalChunkerParser.asAstate_return asAstate386 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure387 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:2: ( potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:4: potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11855_static.FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11855);
            potentialUnnamedMolecule384=potentialUnnamedMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMolecule384.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:29: ( quantity )*
            loop121:
            do {
                int alt121=2;
                alt121 = dfa121.predict(input);
                switch (alt121) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11857_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11857);
            	    quantity385=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity385.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:39: ( asAstate )?
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11860_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11860);
                    asAstate386=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate386.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:49: ( fromProcedure )?
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11863_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11863);
                    fromProcedure387=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure387.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, potentialUnnamedMoleculeAmount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount1"

    public static class potentialUnnamedMoleculeAmount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: potentialUnnamedMoleculeAmount2 : ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference388 = null;

        ChemicalChunkerParser.quantity_return quantity389 = null;

        ChemicalChunkerParser.asAstate_return asAstate390 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN391 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity392 = null;

        ChemicalChunkerParser.asAstate_return asAstate393 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure394 = null;

        ChemicalChunkerParser.quantity_return quantity395 = null;

        ChemicalChunkerParser.asAstate_return asAstate396 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure397 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:2: ( ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) )
            int alt126=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt126=1;
                }
                break;
            case 38:
            case 40:
            case 43:
            case 44:
            case 61:
            case 66:
            case 69:
            case 81:
            case 88:
            case 149:
                {
                alt126=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:5: numberCompoundReference ( quantity | asAstate )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21874_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21874);
                    numberCompoundReference388=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference388.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:29: ( quantity | asAstate )
                    int alt124=2;
                    switch ( input.LA(1) ) {
                    case 71:
                    case 128:
                    case 141:
                    case 144:
                        {
                        alt124=1;
                        }
                        break;
                    case 45:
                        {
                        alt124=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);

                        throw nvae;
                    }

                    switch (alt124) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:30: quantity
                            {
                            pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21877_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21877);
                            quantity389=quantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity389.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:41: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21881_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21881);
                            asAstate390=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate390.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:54: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    {
                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21887_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21887);
                    potentialUnnamedMoleculeStructureNN391=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN391.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:90: ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    int alt125=3;
                    switch ( input.LA(1) ) {
                    case 37:
                    case 71:
                    case 128:
                    case 137:
                    case 139:
                    case 141:
                    case 144:
                        {
                        alt125=1;
                        }
                        break;
                    case 45:
                        {
                        alt125=2;
                        }
                        break;
                    case 54:
                    case 57:
                    case 123:
                    case 127:
                        {
                        alt125=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }

                    switch (alt125) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:91: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21890_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21890);
                            numericReferenceOrQuantity392=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity392.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:120: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21894_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21894);
                            asAstate393=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate393.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:131: fromProcedure
                            {
                            pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21898_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21898);
                            fromProcedure394=fromProcedure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure394.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:148: ( quantity )*
            loop127:
            do {
                int alt127=2;
                alt127 = dfa127.predict(input);
                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21903_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21903);
            	    quantity395=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity395.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:158: ( asAstate )?
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21906_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21906);
                    asAstate396=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate396.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:168: ( fromProcedure )?
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21909_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21909);
                    fromProcedure397=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure397.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, potentialUnnamedMoleculeAmount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount2"

    public static class definiteUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: definiteUnnamedMolecule : definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMolecule_return retval = new ChemicalChunkerParser.definiteUnnamedMolecule_return();
        retval.start = input.LT(1);
        int definiteUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure398 = null;

        ChemicalChunkerParser.quantity_return quantity399 = null;

        ChemicalChunkerParser.asAstate_return asAstate400 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure401 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:2: ( definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:4: definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1919_static.FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1919);
            definiteUnnamedMoleculeStructure398=definiteUnnamedMoleculeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMoleculeStructure398.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:37: ( quantity )*
            loop130:
            do {
                int alt130=2;
                alt130 = dfa130.predict(input);
                switch (alt130) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_definiteUnnamedMolecule1921_static.FOLLOW_quantity_in_definiteUnnamedMolecule1921);
            	    quantity399=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity399.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:47: ( asAstate )?
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_definiteUnnamedMolecule1924_static.FOLLOW_asAstate_in_definiteUnnamedMolecule1924);
                    asAstate400=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate400.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:57: ( fromProcedure )?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_definiteUnnamedMolecule1927_static.FOLLOW_fromProcedure_in_definiteUnnamedMolecule1927);
                    fromProcedure401=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure401.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, definiteUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMolecule"

    public static class definiteUnnamedMoleculeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMoleculeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: definiteUnnamedMoleculeStructure : ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return retval = new ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return();
        retval.start = input.LT(1);
        int definiteUnnamedMoleculeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj402 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity403 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference404 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp405 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity406 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity407 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference408 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:2: ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference )
            int alt136=2;
            switch ( input.LA(1) ) {
            case 38:
            case 39:
            case 43:
            case 44:
            case 69:
            case 149:
            case 150:
            case 151:
                {
                alt136=1;
                }
                break;
            case 37:
            case 137:
            case 139:
            case 141:
            case 144:
                {
                alt136=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:4: ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:4: ( adj )*
                    loop133:
                    do {
                        int alt133=2;
                        switch ( input.LA(1) ) {
                        case 38:
                        case 39:
                        case 43:
                        case 149:
                        case 150:
                        case 151:
                            {
                            alt133=1;
                            }
                            break;

                        }

                        switch (alt133) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    	    {
                    	    pushFollow(FOLLOW_adj_in_definiteUnnamedMoleculeStructure1937_static.FOLLOW_adj_in_definiteUnnamedMoleculeStructure1937);
                    	    adj402=adj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj402.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop133;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:9: ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    int alt135=2;
                    switch ( input.LA(1) ) {
                    case 69:
                        {
                        alt135=1;
                        }
                        break;
                    case 44:
                        {
                        alt135=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 0, input);

                        throw nvae;
                    }

                    switch (alt135) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:10: nnchementity numericOrIdentifierCompoundReference
                            {
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1941_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1941);
                            nnchementity403=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity403.getTree());
                            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1943_static.FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1943);
                            numericOrIdentifierCompoundReference404=numericOrIdentifierCompoundReference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference404.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:62: jjcomp nnchementity ( numericReferenceOrQuantity )?
                            {
                            pushFollow(FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1947_static.FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1947);
                            jjcomp405=jjcomp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp405.getTree());
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1949_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1949);
                            nnchementity406=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity406.getTree());
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:82: ( numericReferenceOrQuantity )?
                            int alt134=2;
                            alt134 = dfa134.predict(input);
                            switch (alt134) {
                                case 1 :
                                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                                    {
                                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1951_static.FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1951);
                                    numericReferenceOrQuantity407=numericReferenceOrQuantity();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity407.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:113: alphanumericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1957_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1957);
                    alphanumericOrIdentifierCompoundReference408=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference408.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, definiteUnnamedMoleculeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMoleculeStructure"

    public static class potentialUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: potentialUnnamedMolecule : ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? );
    public final ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMolecule_return retval = new ChemicalChunkerParser.potentialUnnamedMolecule_return();
        retval.start = input.LT(1);
        int potentialUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference409 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN410 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity411 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:2: ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? )
            int alt138=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt138=1;
                }
                break;
            case 38:
            case 40:
            case 43:
            case 44:
            case 61:
            case 66:
            case 69:
            case 81:
            case 88:
            case 149:
                {
                alt138=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:4: numberCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1966_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1966);
                    numberCompoundReference409=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference409.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:30: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1970_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1970);
                    potentialUnnamedMoleculeStructureNN410=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN410.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:66: ( numericReferenceOrQuantity )?
                    int alt137=2;
                    alt137 = dfa137.predict(input);
                    switch (alt137) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1972_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1972);
                            numericReferenceOrQuantity411=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity411.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, potentialUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMolecule"

    public static class potentialUnnamedMoleculeStructureNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeStructureNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity );
    public final ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeStructureNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj412 = null;

        ChemicalChunkerParser.jjchem_return jjchem413 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj414 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp415 = null;

        ChemicalChunkerParser.nnstate_return nnstate416 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound417 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere418 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture419 = null;

        ChemicalChunkerParser.oscarase_return oscarase420 = null;

        ChemicalChunkerParser.jj_return jj421 = null;

        ChemicalChunkerParser.jjchem_return jjchem422 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj423 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity424 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:2: ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity )
            int alt142=2;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:4: ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:4: ( jj | jjchem | oscarcj | jjcomp )*
                    loop139:
                    do {
                        int alt139=5;
                        switch ( input.LA(1) ) {
                        case 149:
                            {
                            alt139=1;
                            }
                            break;
                        case 43:
                            {
                            alt139=2;
                            }
                            break;
                        case 38:
                            {
                            alt139=3;
                            }
                            break;
                        case 44:
                            {
                            alt139=4;
                            }
                            break;

                        }

                        switch (alt139) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:5: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN1985_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN1985);
                    	    jj412=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj412.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:8: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN1987_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN1987);
                    	    jjchem413=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem413.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:15: oscarcj
                    	    {
                    	    pushFollow(FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN1989_static.FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN1989);
                    	    oscarcj414=oscarcj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj414.getTree());

                    	    }
                    	    break;
                    	case 4 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:23: jjcomp
                    	    {
                    	    pushFollow(FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN1991_static.FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN1991);
                    	    jjcomp415=jjcomp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp415.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:32: ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase )
                    int alt140=5;
                    switch ( input.LA(1) ) {
                    case 61:
                        {
                        alt140=1;
                        }
                        break;
                    case 81:
                        {
                        alt140=2;
                        }
                        break;
                    case 66:
                        {
                        alt140=3;
                        }
                        break;
                    case 88:
                        {
                        alt140=4;
                        }
                        break;
                    case 40:
                        {
                        alt140=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 140, 0, input);

                        throw nvae;
                    }

                    switch (alt140) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:33: nnstate
                            {
                            pushFollow(FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN1996_static.FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN1996);
                            nnstate416=nnstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate416.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:41: referenceToExampleCompound
                            {
                            pushFollow(FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN1998_static.FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN1998);
                            referenceToExampleCompound417=referenceToExampleCompound();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound417.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:68: nnatmosphere
                            {
                            pushFollow(FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2000_static.FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2000);
                            nnatmosphere418=nnatmosphere();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere418.getTree());

                            }
                            break;
                        case 4 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:81: nnmixture
                            {
                            pushFollow(FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2002_static.FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2002);
                            nnmixture419=nnmixture();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture419.getTree());

                            }
                            break;
                        case 5 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:91: oscarase
                            {
                            pushFollow(FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2004_static.FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2004);
                            oscarase420=oscarase();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase420.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:103: ( jj | jjchem | oscarcj )* nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:103: ( jj | jjchem | oscarcj )*
                    loop141:
                    do {
                        int alt141=4;
                        switch ( input.LA(1) ) {
                        case 149:
                            {
                            alt141=1;
                            }
                            break;
                        case 43:
                            {
                            alt141=2;
                            }
                            break;
                        case 38:
                            {
                            alt141=3;
                            }
                            break;

                        }

                        switch (alt141) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:104: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2010_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2010);
                    	    jj421=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj421.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:107: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2012_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2012);
                    	    jjchem422=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem422.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:114: oscarcj
                    	    {
                    	    pushFollow(FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2014_static.FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2014);
                    	    oscarcj423=oscarcj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj423.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);

                    pushFollow(FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2018_static.FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2018);
                    nnchementity424=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity424.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, potentialUnnamedMoleculeStructureNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeStructureNN"

    public static class numericReferenceOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericReferenceOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:1: numericReferenceOrQuantity : ( quantity | numericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.numericReferenceOrQuantity_return retval = new ChemicalChunkerParser.numericReferenceOrQuantity_return();
        retval.start = input.LT(1);
        int numericReferenceOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity425 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference426 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:2: ( quantity | numericOrIdentifierCompoundReference )
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:4: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_numericReferenceOrQuantity2028_static.FOLLOW_quantity_in_numericReferenceOrQuantity2028);
                    quantity425=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity425.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:15: numericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2032_static.FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2032);
                    numericOrIdentifierCompoundReference426=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference426.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, numericReferenceOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericReferenceOrQuantity"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: asAstate : inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas427 = null;

        ChemicalChunkerParser.dt_return dt428 = null;

        ChemicalChunkerParser.jj_return jj429 = null;

        ChemicalChunkerParser.jjchem_return jjchem430 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj431 = null;

        ChemicalChunkerParser.nnstate_return nnstate432 = null;

        ChemicalChunkerParser.quantity_return quantity433 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:2: ( inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:4: inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate2041_static.FOLLOW_inas_in_asAstate2041);
            inas427=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas427.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:9: ( dt )?
            int alt144=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt144=1;
                    }
                    break;
            }

            switch (alt144) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate2043_static.FOLLOW_dt_in_asAstate2043);
                    dt428=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt428.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:13: ( jj | jjchem | oscarcj )*
            loop145:
            do {
                int alt145=4;
                switch ( input.LA(1) ) {
                case 149:
                    {
                    alt145=1;
                    }
                    break;
                case 43:
                    {
                    alt145=2;
                    }
                    break;
                case 38:
                    {
                    alt145=3;
                    }
                    break;

                }

                switch (alt145) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate2047_static.FOLLOW_jj_in_asAstate2047);
            	    jj429=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj429.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate2049_static.FOLLOW_jjchem_in_asAstate2049);
            	    jjchem430=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem430.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:24: oscarcj
            	    {
            	    pushFollow(FOLLOW_oscarcj_in_asAstate2051_static.FOLLOW_oscarcj_in_asAstate2051);
            	    oscarcj431=oscarcj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj431.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate2055_static.FOLLOW_nnstate_in_asAstate2055);
            nnstate432=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate432.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:42: ( quantity )*
            loop146:
            do {
                int alt146=2;
                alt146 = dfa146.predict(input);
                switch (alt146) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate2057_static.FOLLOW_quantity_in_asAstate2057);
            	    quantity433=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity433.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:1: alphanumericOrIdentifierCompoundReference : allIdentifierTypesOtherThanCD -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD434 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypesOtherThanCD=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypesOtherThanCD");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:3: ( allIdentifierTypesOtherThanCD -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:5: allIdentifierTypesOtherThanCD
            {
            pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2068_static.FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2068);
            allIdentifierTypesOtherThanCD434=allIdentifierTypesOtherThanCD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypesOtherThanCD.add(allIdentifierTypesOtherThanCD434.getTree());


            // AST REWRITE
            // elements: allIdentifierTypesOtherThanCD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:35: -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:38: ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_allIdentifierTypesOtherThanCD.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: numberCompoundReference : ( cd {...}?) -> ^( REFERENCETOCOMPOUND cd ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd435 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:3: ( ( cd {...}?) -> ^( REFERENCETOCOMPOUND cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:5: ( cd {...}?)
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:5: ( cd {...}?)
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:6: cd {...}?
            {
            pushFollow(FOLLOW_cd_in_numberCompoundReference2087_static.FOLLOW_cd_in_numberCompoundReference2087);
            cd435=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd435.getTree());
            if ( !((!cdHasRoleOtherThanIdentifier(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "numberCompoundReference", "!cdHasRoleOtherThanIdentifier(input)");
            }

            }



            // AST REWRITE
            // elements: cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:50: -> ^( REFERENCETOCOMPOUND cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:53: ^( REFERENCETOCOMPOUND cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:1: numericOrIdentifierCompoundReference : allIdentifierTypes -> ^( REFERENCETOCOMPOUND allIdentifierTypes ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes436 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypes=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:3: ( allIdentifierTypes -> ^( REFERENCETOCOMPOUND allIdentifierTypes ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:5: allIdentifierTypes
            {
            pushFollow(FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2108_static.FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2108);
            allIdentifierTypes436=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypes.add(allIdentifierTypes436.getTree());


            // AST REWRITE
            // elements: allIdentifierTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:24: -> ^( REFERENCETOCOMPOUND allIdentifierTypes )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:27: ^( REFERENCETOCOMPOUND allIdentifierTypes )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_allIdentifierTypes.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node437 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node438 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:14: ( quantity1Node | quantity2Node )
            int alt147=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt147=1;
                }
                break;
            case 71:
            case 128:
            case 144:
                {
                alt147=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2128_static.FOLLOW_quantity1Node_in_quantity2128);
                    quantity1Node437=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node437.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2130_static.FOLLOW_quantity2Node_in_quantity2130);
                    quantity2Node438=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node438.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1439 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2139_static.FOLLOW_quantity1_in_quantity1Node2139);
            quantity1439=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1439.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb440 = null;

        ChemicalChunkerParser.measurements_return measurements441 = null;

        ChemicalChunkerParser.comma_return comma442 = null;

        ChemicalChunkerParser.measurements_return measurements443 = null;

        ChemicalChunkerParser.comma_return comma444 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase445 = null;

        ChemicalChunkerParser.stop_return stop446 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase447 = null;

        ChemicalChunkerParser.rrb_return rrb448 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12159_static.FOLLOW_lrb_in_quantity12159);
            lrb440=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb440.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12161_static.FOLLOW_measurements_in_quantity12161);
            measurements441=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements441.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:21: ( comma measurements )*
            loop148:
            do {
                int alt148=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 71:
                        case 128:
                        case 144:
                            {
                            alt148=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt148) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12164_static.FOLLOW_comma_in_quantity12164);
            	    comma442=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma442.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12167_static.FOLLOW_measurements_in_quantity12167);
            	    measurements443=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements443.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:44: ( comma preparationphrase )*
            loop149:
            do {
                int alt149=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    alt149=1;
                    }
                    break;

                }

                switch (alt149) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12172_static.FOLLOW_comma_in_quantity12172);
            	    comma444=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma444.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12174_static.FOLLOW_preparationphrase_in_quantity12174);
            	    preparationphrase445=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase445.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:71: ( stop preparationphrase )*
            loop150:
            do {
                int alt150=2;
                switch ( input.LA(1) ) {
                case 135:
                    {
                    alt150=1;
                    }
                    break;

                }

                switch (alt150) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12179_static.FOLLOW_stop_in_quantity12179);
            	    stop446=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop446.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12181_static.FOLLOW_preparationphrase_in_quantity12181);
            	    preparationphrase447=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase447.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12186_static.FOLLOW_rrb_in_quantity12186);
            rrb448=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb448.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2449 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2194_static.FOLLOW_quantity2_in_quantity2Node2194);
            quantity2449=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2449.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements450 = null;

        ChemicalChunkerParser.comma_return comma451 = null;

        ChemicalChunkerParser.measurements_return measurements452 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22215_static.FOLLOW_measurements_in_quantity22215);
            measurements450=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements450.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:18: ( comma measurements )*
            loop151:
            do {
                int alt151=2;
                alt151 = dfa151.predict(input);
                switch (alt151) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22218_static.FOLLOW_comma_in_quantity22218);
            	    comma451=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma451.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22221_static.FOLLOW_measurements_in_quantity22221);
            	    measurements452=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements452.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd453 = null;

        ChemicalChunkerParser.nn_return nn454 = null;

        ChemicalChunkerParser.multiple_return multiple455 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes456 = null;

        ChemicalChunkerParser.dt_return dt457 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:3: ( cd nn )?
            int alt152=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 154:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 71:
                                                case 128:
                                                case 144:
                                                    {
                                                    alt152=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt152) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2234_static.FOLLOW_cd_in_measurements2234);
                    cd453=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd453.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2236_static.FOLLOW_nn_in_measurements2236);
                    nn454=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn454.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:12: ( multiple | measurementtypes )
            int alt153=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 63:
                    case 64:
                    case 65:
                    case 67:
                    case 68:
                    case 136:
                    case 154:
                        {
                        alt153=2;
                        }
                        break;
                    case 42:
                        {
                        alt153=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 153, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 1, input);

                    throw nvae;
                }

                }
                break;
            case 71:
            case 128:
                {
                alt153=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2241_static.FOLLOW_multiple_in_measurements2241);
                    multiple455=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple455.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2243_static.FOLLOW_measurementtypes_in_measurements2243);
                    measurementtypes456=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes456.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:40: ( dt )?
            int alt154=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA154_3 = input.LA(3);

                            if ( (synpred367_ChemicalChunker()) ) {
                                alt154=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt154) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2246_static.FOLLOW_dt_in_measurements2246);
                    dt457=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt457.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd458 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode459 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes460 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2254_static.FOLLOW_cd_in_multiple2254);
            cd458=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd458.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2256_static.FOLLOW_cdunicode_in_multiple2256);
            cdunicode459=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode459.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:25: ( measurementtypes )?
            int alt155=2;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2258_static.FOLLOW_measurementtypes_in_multiple2258);
                    measurementtypes460=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes460.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, measurementtypes, cdunicode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar461 = null;

        ChemicalChunkerParser.amount_return amount462 = null;

        ChemicalChunkerParser.mass_return mass463 = null;

        ChemicalChunkerParser.volume_return volume464 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity465 = null;

        ChemicalChunkerParser.equivalent_return equivalent466 = null;

        ChemicalChunkerParser.yield_return yield467 = null;

        ChemicalChunkerParser.percent_return percent468 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt156=8;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2283_static.FOLLOW_molar_in_measurementtypes2283);
                    molar461=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar461.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2285_static.FOLLOW_amount_in_measurementtypes2285);
                    amount462=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount462.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2287_static.FOLLOW_mass_in_measurementtypes2287);
                    mass463=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass463.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2289_static.FOLLOW_volume_in_measurementtypes2289);
                    volume464=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume464.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2291_static.FOLLOW_logHydrogenActivity_in_measurementtypes2291);
                    logHydrogenActivity465=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity465.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2293_static.FOLLOW_equivalent_in_measurementtypes2293);
                    equivalent466=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent466.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2295_static.FOLLOW_yield_in_measurementtypes2295);
                    yield467=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield467.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2297_static.FOLLOW_percent_in_measurementtypes2297);
                    percent468=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent468.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:1: molar : cd nnmolar -> ^( MOLAR cd nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd469 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar470 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:7: ( cd nnmolar -> ^( MOLAR cd nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:9: cd nnmolar
            {
            pushFollow(FOLLOW_cd_in_molar2305_static.FOLLOW_cd_in_molar2305);
            cd469=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd469.getTree());
            pushFollow(FOLLOW_nnmolar_in_molar2307_static.FOLLOW_nnmolar_in_molar2307);
            nnmolar470=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar470.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:20: -> ^( MOLAR cd nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:23: ^( MOLAR cd nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:1: amount : cd nnamount -> ^( AMOUNT cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd471 = null;

        ChemicalChunkerParser.nnamount_return nnamount472 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:8: ( cd nnamount -> ^( AMOUNT cd nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount2327_static.FOLLOW_cd_in_amount2327);
            cd471=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd471.getTree());
            pushFollow(FOLLOW_nnamount_in_amount2329_static.FOLLOW_nnamount_in_amount2329);
            nnamount472=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount472.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:22: -> ^( AMOUNT cd nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:25: ^( AMOUNT cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:1: mass : cd nnmass -> ^( MASS cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd473 = null;

        ChemicalChunkerParser.nnmass_return nnmass474 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:6: ( cd nnmass -> ^( MASS cd nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass2349_static.FOLLOW_cd_in_mass2349);
            cd473=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd473.getTree());
            pushFollow(FOLLOW_nnmass_in_mass2351_static.FOLLOW_nnmass_in_mass2351);
            nnmass474=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass474.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:17: -> ^( MASS cd nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:20: ^( MASS cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: volume : cd nnvol -> ^( VOLUME cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd475 = null;

        ChemicalChunkerParser.nnvol_return nnvol476 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:8: ( cd nnvol -> ^( VOLUME cd nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume2370_static.FOLLOW_cd_in_volume2370);
            cd475=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd475.getTree());
            pushFollow(FOLLOW_nnvol_in_volume2372_static.FOLLOW_nnvol_in_volume2372);
            nnvol476=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol476.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:19: -> ^( VOLUME cd nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:22: ^( VOLUME cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph477 = null;

        ChemicalChunkerParser.sym_return sym478 = null;

        ChemicalChunkerParser.cd_return cd479 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2392_static.FOLLOW_nnph_in_logHydrogenActivity2392);
            nnph477=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph477.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:28: ( sym )?
            int alt157=2;
            switch ( input.LA(1) ) {
                case 166:
                    {
                    alt157=1;
                    }
                    break;
            }

            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2394_static.FOLLOW_sym_in_logHydrogenActivity2394);
                    sym478=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym478.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2397_static.FOLLOW_cd_in_logHydrogenActivity2397);
            cd479=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd479.getTree());


            // AST REWRITE
            // elements: cd, sym, nnph
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:1: equivalent : cd nneq -> ^( EQUIVALENT cd nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd480 = null;

        ChemicalChunkerParser.nneq_return nneq481 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:11: ( cd nneq -> ^( EQUIVALENT cd nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:13: cd nneq
            {
            pushFollow(FOLLOW_cd_in_equivalent2417_static.FOLLOW_cd_in_equivalent2417);
            cd480=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd480.getTree());
            pushFollow(FOLLOW_nneq_in_equivalent2419_static.FOLLOW_nneq_in_equivalent2419);
            nneq481=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq481.getTree());


            // AST REWRITE
            // elements: nneq, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:21: -> ^( EQUIVALENT cd nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:24: ^( EQUIVALENT cd nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: yield : ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) );
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.yield1_return yield1482 = null;

        ChemicalChunkerParser.yield2_return yield2483 = null;


        RewriteRuleSubtreeStream stream_yield2=new RewriteRuleSubtreeStream(adaptor,"rule yield2");
        RewriteRuleSubtreeStream stream_yield1=new RewriteRuleSubtreeStream(adaptor,"rule yield1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:6: ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) )
            int alt158=2;
            switch ( input.LA(1) ) {
            case 128:
                {
                alt158=1;
                }
                break;
            case 144:
                {
                alt158=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:8: yield1
                    {
                    pushFollow(FOLLOW_yield1_in_yield2436_static.FOLLOW_yield1_in_yield2436);
                    yield1482=yield1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield1.add(yield1482.getTree());


                    // AST REWRITE
                    // elements: yield1
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 363:15: -> ^( YIELD yield1 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:18: ^( YIELD yield1 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:35: yield2
                    {
                    pushFollow(FOLLOW_yield2_in_yield2447_static.FOLLOW_yield2_in_yield2447);
                    yield2483=yield2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield2.add(yield2483.getTree());


                    // AST REWRITE
                    // elements: yield2
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 363:42: -> ^( YIELD yield2 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:45: ^( YIELD yield2 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class yield1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: yield1 : nnyield ( inof | colon ) percent ;
    public final ChemicalChunkerParser.yield1_return yield1() throws RecognitionException {
        ChemicalChunkerParser.yield1_return retval = new ChemicalChunkerParser.yield1_return();
        retval.start = input.LT(1);
        int yield1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnyield_return nnyield484 = null;

        ChemicalChunkerParser.inof_return inof485 = null;

        ChemicalChunkerParser.colon_return colon486 = null;

        ChemicalChunkerParser.percent_return percent487 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:7: ( nnyield ( inof | colon ) percent )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:9: nnyield ( inof | colon ) percent
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnyield_in_yield12461_static.FOLLOW_nnyield_in_yield12461);
            nnyield484=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield484.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:17: ( inof | colon )
            int alt159=2;
            switch ( input.LA(1) ) {
            case 54:
                {
                alt159=1;
                }
                break;
            case 130:
                {
                alt159=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:18: inof
                    {
                    pushFollow(FOLLOW_inof_in_yield12464_static.FOLLOW_inof_in_yield12464);
                    inof485=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof485.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:23: colon
                    {
                    pushFollow(FOLLOW_colon_in_yield12466_static.FOLLOW_colon_in_yield12466);
                    colon486=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon486.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percent_in_yield12469_static.FOLLOW_percent_in_yield12469);
            percent487=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent487.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, yield1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield1"

    public static class yield2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: yield2 : percent nnyield ;
    public final ChemicalChunkerParser.yield2_return yield2() throws RecognitionException {
        ChemicalChunkerParser.yield2_return retval = new ChemicalChunkerParser.yield2_return();
        retval.start = input.LT(1);
        int yield2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent488 = null;

        ChemicalChunkerParser.nnyield_return nnyield489 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:7: ( percent nnyield )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:9: percent nnyield
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_percent_in_yield22475_static.FOLLOW_percent_in_yield22475);
            percent488=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent488.getTree());
            pushFollow(FOLLOW_nnyield_in_yield22477_static.FOLLOW_nnyield_in_yield22477);
            nnyield489=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield489.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, yield2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield2"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: percent : cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd490 = null;

        ChemicalChunkerParser.nn_return nn491 = null;

        ChemicalChunkerParser.percentsign_return percentsign492 = null;

        ChemicalChunkerParser.dash_return dash493 = null;

        ChemicalChunkerParser.cd_return cd494 = null;

        ChemicalChunkerParser.percentsign_return percentsign495 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_percentsign=new RewriteRuleSubtreeStream(adaptor,"rule percentsign");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:9: ( cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:11: cd ( nn )? percentsign ( dash cd percentsign )?
            {
            pushFollow(FOLLOW_cd_in_percent2485_static.FOLLOW_cd_in_percent2485);
            cd490=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd490.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:14: ( nn )?
            int alt160=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt160=1;
                    }
                    break;
            }

            switch (alt160) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2487_static.FOLLOW_nn_in_percent2487);
                    nn491=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn491.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percentsign_in_percent2490_static.FOLLOW_percentsign_in_percent2490);
            percentsign492=percentsign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percentsign.add(percentsign492.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:30: ( dash cd percentsign )?
            int alt161=2;
            switch ( input.LA(1) ) {
                case 134:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 144:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 136:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA161_7 = input.LA(7);

                                                            if ( (synpred380_ChemicalChunker()) ) {
                                                                alt161=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt161) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:32: dash cd percentsign
                    {
                    pushFollow(FOLLOW_dash_in_percent2494_static.FOLLOW_dash_in_percent2494);
                    dash493=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash493.getTree());
                    pushFollow(FOLLOW_cd_in_percent2496_static.FOLLOW_cd_in_percent2496);
                    cd494=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd494.getTree());
                    pushFollow(FOLLOW_percentsign_in_percent2498_static.FOLLOW_percentsign_in_percent2498);
                    percentsign495=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_percentsign.add(percentsign495.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nn, percentsign, cd, percentsign, cd, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:54: -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:57: ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:72: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_percentsign.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:88: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:94: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:98: ( percentsign )?
                if ( stream_percentsign.hasNext() ) {
                    adaptor.addChild(root_1, stream_percentsign.nextTree());

                }
                stream_percentsign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class bracketedContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:1: bracketedContent : ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 ) -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? ) ;
    public final ChemicalChunkerParser.bracketedContent_return bracketedContent() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent_return retval = new ChemicalChunkerParser.bracketedContent_return();
        retval.start = input.LT(1);
        int bracketedContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio496 = null;

        ChemicalChunkerParser.bracketedContent1_return bracketedContent1497 = null;

        ChemicalChunkerParser.bracketedContent2_return bracketedContent2498 = null;

        ChemicalChunkerParser.bracketedContent3_return bracketedContent3499 = null;


        RewriteRuleSubtreeStream stream_bracketedContent3=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent3");
        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_bracketedContent2=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent2");
        RewriteRuleSubtreeStream stream_bracketedContent1=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:17: ( ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 ) -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:19: ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:19: ( ratio )?
            int alt162=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt162=1;
                    }
                    break;
            }

            switch (alt162) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContent2532_static.FOLLOW_ratio_in_bracketedContent2532);
                    ratio496=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio496.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:27: ( bracketedContent1 | bracketedContent2 | bracketedContent3 )
            int alt163=3;
            switch ( input.LA(1) ) {
            case 131:
                {
                alt163=1;
                }
                break;
            case 141:
                {
                alt163=2;
                }
                break;
            case 137:
                {
                alt163=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:28: bracketedContent1
                    {
                    pushFollow(FOLLOW_bracketedContent1_in_bracketedContent2537_static.FOLLOW_bracketedContent1_in_bracketedContent2537);
                    bracketedContent1497=bracketedContent1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent1.add(bracketedContent1497.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:46: bracketedContent2
                    {
                    pushFollow(FOLLOW_bracketedContent2_in_bracketedContent2539_static.FOLLOW_bracketedContent2_in_bracketedContent2539);
                    bracketedContent2498=bracketedContent2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent2.add(bracketedContent2498.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:64: bracketedContent3
                    {
                    pushFollow(FOLLOW_bracketedContent3_in_bracketedContent2541_static.FOLLOW_bracketedContent3_in_bracketedContent2541);
                    bracketedContent3499=bracketedContent3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent3.add(bracketedContent3499.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedContent3, bracketedContent2, bracketedContent1, ratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:83: -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:86: ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:96: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:103: ( bracketedContent1 )?
                if ( stream_bracketedContent1.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent1.nextTree());

                }
                stream_bracketedContent1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:122: ( bracketedContent2 )?
                if ( stream_bracketedContent2.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent2.nextTree());

                }
                stream_bracketedContent2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:141: ( bracketedContent3 )?
                if ( stream_bracketedContent3.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent3.nextTree());

                }
                stream_bracketedContent3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, bracketedContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent"

    public static class bracketedContent1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:1: bracketedContent1 : comma lrb bracketedContentContents rrb comma ;
    public final ChemicalChunkerParser.bracketedContent1_return bracketedContent1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent1_return retval = new ChemicalChunkerParser.bracketedContent1_return();
        retval.start = input.LT(1);
        int bracketedContent1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma500 = null;

        ChemicalChunkerParser.lrb_return lrb501 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents502 = null;

        ChemicalChunkerParser.rrb_return rrb503 = null;

        ChemicalChunkerParser.comma_return comma504 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:18: ( comma lrb bracketedContentContents rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:20: comma lrb bracketedContentContents rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_bracketedContent12566_static.FOLLOW_comma_in_bracketedContent12566);
            comma500=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma500.getTree());
            pushFollow(FOLLOW_lrb_in_bracketedContent12568_static.FOLLOW_lrb_in_bracketedContent12568);
            lrb501=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb501.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent12570_static.FOLLOW_bracketedContentContents_in_bracketedContent12570);
            bracketedContentContents502=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents502.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContent12572_static.FOLLOW_rrb_in_bracketedContent12572);
            rrb503=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb503.getTree());
            pushFollow(FOLLOW_comma_in_bracketedContent12574_static.FOLLOW_comma_in_bracketedContent12574);
            comma504=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma504.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, bracketedContent1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent1"

    public static class bracketedContent2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: bracketedContent2 : lrb bracketedContentContents rrb ;
    public final ChemicalChunkerParser.bracketedContent2_return bracketedContent2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent2_return retval = new ChemicalChunkerParser.bracketedContent2_return();
        retval.start = input.LT(1);
        int bracketedContent2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb505 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents506 = null;

        ChemicalChunkerParser.rrb_return rrb507 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:18: ( lrb bracketedContentContents rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:20: lrb bracketedContentContents rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedContent22580_static.FOLLOW_lrb_in_bracketedContent22580);
            lrb505=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb505.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent22582_static.FOLLOW_bracketedContentContents_in_bracketedContent22582);
            bracketedContentContents506=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents506.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContent22584_static.FOLLOW_rrb_in_bracketedContent22584);
            rrb507=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb507.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, bracketedContent2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent2"

    public static class bracketedContent3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: bracketedContent3 : lsqb bracketedContentContents rsqb ;
    public final ChemicalChunkerParser.bracketedContent3_return bracketedContent3() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent3_return retval = new ChemicalChunkerParser.bracketedContent3_return();
        retval.start = input.LT(1);
        int bracketedContent3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb508 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents509 = null;

        ChemicalChunkerParser.rsqb_return rsqb510 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:18: ( lsqb bracketedContentContents rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:20: lsqb bracketedContentContents rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_bracketedContent32590_static.FOLLOW_lsqb_in_bracketedContent32590);
            lsqb508=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb508.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent32592_static.FOLLOW_bracketedContentContents_in_bracketedContent32592);
            bracketedContentContents509=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents509.getTree());
            pushFollow(FOLLOW_rsqb_in_bracketedContent32594_static.FOLLOW_rsqb_in_bracketedContent32594);
            rsqb510=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb510.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, bracketedContent3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent3"

    public static class bracketedContentContents_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentContents"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:1: bracketedContentContents : ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+ ;
    public final ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentContents_return retval = new ChemicalChunkerParser.bracketedContentContents_return();
        retval.start = input.LT(1);
        int bracketedContentContents_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb511 = null;

        ChemicalChunkerParser.noun_return noun512 = null;

        ChemicalChunkerParser.bracketedContent_return bracketedContent513 = null;

        ChemicalChunkerParser.md_return md514 = null;

        ChemicalChunkerParser.percentsign_return percentsign515 = null;

        ChemicalChunkerParser.dash_return dash516 = null;

        ChemicalChunkerParser.inAll_return inAll517 = null;

        ChemicalChunkerParser.ratio_return ratio518 = null;

        ChemicalChunkerParser.conjunction_return conjunction519 = null;

        ChemicalChunkerParser.adj_return adj520 = null;

        ChemicalChunkerParser.colon_return colon521 = null;

        ChemicalChunkerParser.stop_return stop522 = null;

        ChemicalChunkerParser.numeric_return numeric523 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:25: ( ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+
            int cnt164=0;
            loop164:
            do {
                int alt164=14;
                alt164 = dfa164.predict(input);
                switch (alt164) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:28: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_bracketedContentContents2601_static.FOLLOW_verb_in_bracketedContentContents2601);
            	    verb511=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb511.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:33: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_bracketedContentContents2603_static.FOLLOW_noun_in_bracketedContentContents2603);
            	    noun512=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun512.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:38: bracketedContent
            	    {
            	    pushFollow(FOLLOW_bracketedContent_in_bracketedContentContents2605_static.FOLLOW_bracketedContent_in_bracketedContentContents2605);
            	    bracketedContent513=bracketedContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContent513.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:55: md
            	    {
            	    pushFollow(FOLLOW_md_in_bracketedContentContents2607_static.FOLLOW_md_in_bracketedContentContents2607);
            	    md514=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md514.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:58: percentsign
            	    {
            	    pushFollow(FOLLOW_percentsign_in_bracketedContentContents2609_static.FOLLOW_percentsign_in_bracketedContentContents2609);
            	    percentsign515=percentsign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign515.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:70: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_bracketedContentContents2611_static.FOLLOW_dash_in_bracketedContentContents2611);
            	    dash516=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash516.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:75: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_bracketedContentContents2613_static.FOLLOW_inAll_in_bracketedContentContents2613);
            	    inAll517=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll517.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:81: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_bracketedContentContents2615_static.FOLLOW_ratio_in_bracketedContentContents2615);
            	    ratio518=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio518.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:87: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_bracketedContentContents2617_static.FOLLOW_conjunction_in_bracketedContentContents2617);
            	    conjunction519=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction519.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:99: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_bracketedContentContents2619_static.FOLLOW_adj_in_bracketedContentContents2619);
            	    adj520=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj520.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:103: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_bracketedContentContents2621_static.FOLLOW_colon_in_bracketedContentContents2621);
            	    colon521=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon521.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:109: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_bracketedContentContents2623_static.FOLLOW_stop_in_bracketedContentContents2623);
            	    stop522=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop522.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:114: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_bracketedContentContents2625_static.FOLLOW_numeric_in_bracketedContentContents2625);
            	    numeric523=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric523.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt164 >= 1 ) break loop164;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(164, input);
                        throw eee;
                }
                cnt164++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, bracketedContentContents_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentContents"

    public static class bracketedContentInMol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: bracketedContentInMol : ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 ) -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? ) ;
    public final ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMol_return retval = new ChemicalChunkerParser.bracketedContentInMol_return();
        retval.start = input.LT(1);
        int bracketedContentInMol_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio524 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure1_return bracketedContentInMolStructure1525 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2526 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure3_return bracketedContentInMolStructure3527 = null;


        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure1=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure1");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure2=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure2");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure3=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:22: ( ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 ) -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:24: ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:24: ( ratio )?
            int alt165=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt165=1;
                    }
                    break;
            }

            switch (alt165) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContentInMol2634_static.FOLLOW_ratio_in_bracketedContentInMol2634);
                    ratio524=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio524.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:32: ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 )
            int alt166=3;
            switch ( input.LA(1) ) {
            case 131:
                {
                alt166=1;
                }
                break;
            case 141:
                {
                alt166=2;
                }
                break;
            case 137:
                {
                alt166=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:33: bracketedContentInMolStructure1
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2639_static.FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2639);
                    bracketedContentInMolStructure1525=bracketedContentInMolStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure1.add(bracketedContentInMolStructure1525.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:65: bracketedContentInMolStructure2
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2641_static.FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2641);
                    bracketedContentInMolStructure2526=bracketedContentInMolStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure2.add(bracketedContentInMolStructure2526.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:97: bracketedContentInMolStructure3
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2643_static.FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2643);
                    bracketedContentInMolStructure3527=bracketedContentInMolStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure3.add(bracketedContentInMolStructure3527.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedContentInMolStructure1, bracketedContentInMolStructure2, ratio, bracketedContentInMolStructure3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:130: -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:133: ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:143: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:150: ( bracketedContentInMolStructure1 )?
                if ( stream_bracketedContentInMolStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure1.nextTree());

                }
                stream_bracketedContentInMolStructure1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:183: ( bracketedContentInMolStructure2 )?
                if ( stream_bracketedContentInMolStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure2.nextTree());

                }
                stream_bracketedContentInMolStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:216: ( bracketedContentInMolStructure3 )?
                if ( stream_bracketedContentInMolStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure3.nextTree());

                }
                stream_bracketedContentInMolStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, bracketedContentInMol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMol"

    public static class bracketedContentInMolStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:1: bracketedContentInMolStructure1 : comma lrb bracketedContentInMolContents rrb comma ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure1_return bracketedContentInMolStructure1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure1_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure1_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma528 = null;

        ChemicalChunkerParser.lrb_return lrb529 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents530 = null;

        ChemicalChunkerParser.rrb_return rrb531 = null;

        ChemicalChunkerParser.comma_return comma532 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:32: ( comma lrb bracketedContentInMolContents rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:34: comma lrb bracketedContentInMolContents rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_bracketedContentInMolStructure12668_static.FOLLOW_comma_in_bracketedContentInMolStructure12668);
            comma528=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma528.getTree());
            pushFollow(FOLLOW_lrb_in_bracketedContentInMolStructure12670_static.FOLLOW_lrb_in_bracketedContentInMolStructure12670);
            lrb529=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb529.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12672_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12672);
            bracketedContentInMolContents530=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents530.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContentInMolStructure12674_static.FOLLOW_rrb_in_bracketedContentInMolStructure12674);
            rrb531=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb531.getTree());
            pushFollow(FOLLOW_comma_in_bracketedContentInMolStructure12676_static.FOLLOW_comma_in_bracketedContentInMolStructure12676);
            comma532=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma532.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, bracketedContentInMolStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure1"

    public static class bracketedContentInMolStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:1: bracketedContentInMolStructure2 : lrb bracketedContentInMolContents rrb ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure2_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure2_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb533 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents534 = null;

        ChemicalChunkerParser.rrb_return rrb535 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:32: ( lrb bracketedContentInMolContents rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:34: lrb bracketedContentInMolContents rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedContentInMolStructure22682_static.FOLLOW_lrb_in_bracketedContentInMolStructure22682);
            lrb533=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb533.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22684_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22684);
            bracketedContentInMolContents534=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents534.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContentInMolStructure22686_static.FOLLOW_rrb_in_bracketedContentInMolStructure22686);
            rrb535=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb535.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, bracketedContentInMolStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure2"

    public static class bracketedContentInMolStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: bracketedContentInMolStructure3 : lsqb bracketedContentInMolContents rsqb ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure3_return bracketedContentInMolStructure3() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure3_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure3_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb536 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents537 = null;

        ChemicalChunkerParser.rsqb_return rsqb538 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:32: ( lsqb bracketedContentInMolContents rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:34: lsqb bracketedContentInMolContents rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_bracketedContentInMolStructure32692_static.FOLLOW_lsqb_in_bracketedContentInMolStructure32692);
            lsqb536=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb536.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32694_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32694);
            bracketedContentInMolContents537=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents537.getTree());
            pushFollow(FOLLOW_rsqb_in_bracketedContentInMolStructure32696_static.FOLLOW_rsqb_in_bracketedContentInMolStructure32696);
            rsqb538=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb538.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, bracketedContentInMolStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure3"

    public static class bracketedContentInMolContents_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolContents"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: bracketedContentInMolContents : ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )* ;
    public final ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolContents_return retval = new ChemicalChunkerParser.bracketedContentInMolContents_return();
        retval.start = input.LT(1);
        int bracketedContentInMolContents_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb539 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node540 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound541 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference542 = null;

        ChemicalChunkerParser.ratio_return ratio543 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference544 = null;

        ChemicalChunkerParser.comma_return comma545 = null;

        ChemicalChunkerParser.colon_return colon546 = null;

        ChemicalChunkerParser.stop_return stop547 = null;

        ChemicalChunkerParser.cd_return cd548 = null;

        ChemicalChunkerParser.md_return md549 = null;

        ChemicalChunkerParser.percentsign_return percentsign550 = null;

        ChemicalChunkerParser.dash_return dash551 = null;

        ChemicalChunkerParser.inAll_return inAll552 = null;

        ChemicalChunkerParser.comma_return comma553 = null;

        ChemicalChunkerParser.adj_return adj554 = null;

        ChemicalChunkerParser.colon_return colon555 = null;

        ChemicalChunkerParser.stop_return stop556 = null;

        ChemicalChunkerParser.noun_return noun557 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol558 = null;

        ChemicalChunkerParser.verb_return verb559 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node560 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound561 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference562 = null;

        ChemicalChunkerParser.ratio_return ratio563 = null;

        ChemicalChunkerParser.cd_return cd564 = null;

        ChemicalChunkerParser.md_return md565 = null;

        ChemicalChunkerParser.percentsign_return percentsign566 = null;

        ChemicalChunkerParser.dash_return dash567 = null;

        ChemicalChunkerParser.inAll_return inAll568 = null;

        ChemicalChunkerParser.conjunction_return conjunction569 = null;

        ChemicalChunkerParser.adj_return adj570 = null;

        ChemicalChunkerParser.colon_return colon571 = null;

        ChemicalChunkerParser.stop_return stop572 = null;

        ChemicalChunkerParser.noun_return noun573 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol574 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:30: ( ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol )
            int alt168=17;
            alt168 = dfa168.predict(input);
            switch (alt168) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:33: verb
                    {
                    pushFollow(FOLLOW_verb_in_bracketedContentInMolContents2703_static.FOLLOW_verb_in_bracketedContentInMolContents2703);
                    verb539=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb539.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:38: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_bracketedContentInMolContents2705_static.FOLLOW_quantity2Node_in_bracketedContentInMolContents2705);
                    quantity2Node540=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node540.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:52: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_bracketedContentInMolContents2707_static.FOLLOW_oscarCompound_in_bracketedContentInMolContents2707);
                    oscarCompound541=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound541.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:66: alphanumericOrIdentifierCompoundReference
                    {
                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2709_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2709);
                    alphanumericOrIdentifierCompoundReference542=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference542.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:108: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContentInMolContents2711_static.FOLLOW_ratio_in_bracketedContentInMolContents2711);
                    ratio543=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio543.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:114: numberCompoundReference ( comma | colon | {...}? stop )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2713_static.FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2713);
                    numberCompoundReference544=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference544.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:138: ( comma | colon | {...}? stop )
                    int alt167=3;
                    switch ( input.LA(1) ) {
                    case 131:
                        {
                        alt167=1;
                        }
                        break;
                    case 130:
                        {
                        alt167=2;
                        }
                        break;
                    case 135:
                        {
                        alt167=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 167, 0, input);

                        throw nvae;
                    }

                    switch (alt167) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:139: comma
                            {
                            pushFollow(FOLLOW_comma_in_bracketedContentInMolContents2716_static.FOLLOW_comma_in_bracketedContentInMolContents2716);
                            comma545=comma();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma545.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:147: colon
                            {
                            pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2720_static.FOLLOW_colon_in_bracketedContentInMolContents2720);
                            colon546=colon();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon546.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:155: {...}? stop
                            {
                            if ( !((nextIsSemiColon(input))) ) {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                throw new FailedPredicateException(input, "bracketedContentInMolContents", "nextIsSemiColon(input)");
                            }
                            pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2726_static.FOLLOW_stop_in_bracketedContentInMolContents2726);
                            stop547=stop();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, stop547.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:187: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedContentInMolContents2729_static.FOLLOW_cd_in_bracketedContentInMolContents2729);
                    cd548=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd548.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:190: md
                    {
                    pushFollow(FOLLOW_md_in_bracketedContentInMolContents2731_static.FOLLOW_md_in_bracketedContentInMolContents2731);
                    md549=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md549.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:193: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_bracketedContentInMolContents2733_static.FOLLOW_percentsign_in_bracketedContentInMolContents2733);
                    percentsign550=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign550.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:205: dash
                    {
                    pushFollow(FOLLOW_dash_in_bracketedContentInMolContents2735_static.FOLLOW_dash_in_bracketedContentInMolContents2735);
                    dash551=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash551.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:210: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_bracketedContentInMolContents2737_static.FOLLOW_inAll_in_bracketedContentInMolContents2737);
                    inAll552=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll552.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:216: comma
                    {
                    pushFollow(FOLLOW_comma_in_bracketedContentInMolContents2739_static.FOLLOW_comma_in_bracketedContentInMolContents2739);
                    comma553=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma553.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:222: adj
                    {
                    pushFollow(FOLLOW_adj_in_bracketedContentInMolContents2741_static.FOLLOW_adj_in_bracketedContentInMolContents2741);
                    adj554=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj554.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:226: colon
                    {
                    pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2743_static.FOLLOW_colon_in_bracketedContentInMolContents2743);
                    colon555=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon555.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:232: stop
                    {
                    pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2745_static.FOLLOW_stop_in_bracketedContentInMolContents2745);
                    stop556=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop556.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:237: noun
                    {
                    pushFollow(FOLLOW_noun_in_bracketedContentInMolContents2747_static.FOLLOW_noun_in_bracketedContentInMolContents2747);
                    noun557=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun557.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:242: bracketedContentInMol
                    {
                    pushFollow(FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2749_static.FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2749);
                    bracketedContentInMol558=bracketedContentInMol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol558.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:265: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*
            loop169:
            do {
                int alt169=17;
                alt169 = dfa169.predict(input);
                switch (alt169) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:266: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_bracketedContentInMolContents2753_static.FOLLOW_verb_in_bracketedContentInMolContents2753);
            	    verb559=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb559.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:271: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_bracketedContentInMolContents2755_static.FOLLOW_quantity2Node_in_bracketedContentInMolContents2755);
            	    quantity2Node560=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node560.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:285: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_bracketedContentInMolContents2757_static.FOLLOW_oscarCompound_in_bracketedContentInMolContents2757);
            	    oscarCompound561=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound561.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:299: alphanumericOrIdentifierCompoundReference
            	    {
            	    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2759_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2759);
            	    alphanumericOrIdentifierCompoundReference562=alphanumericOrIdentifierCompoundReference();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference562.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:341: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_bracketedContentInMolContents2761_static.FOLLOW_ratio_in_bracketedContentInMolContents2761);
            	    ratio563=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio563.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:347: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_bracketedContentInMolContents2763_static.FOLLOW_cd_in_bracketedContentInMolContents2763);
            	    cd564=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd564.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:350: md
            	    {
            	    pushFollow(FOLLOW_md_in_bracketedContentInMolContents2765_static.FOLLOW_md_in_bracketedContentInMolContents2765);
            	    md565=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md565.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:353: percentsign
            	    {
            	    pushFollow(FOLLOW_percentsign_in_bracketedContentInMolContents2767_static.FOLLOW_percentsign_in_bracketedContentInMolContents2767);
            	    percentsign566=percentsign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign566.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:365: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_bracketedContentInMolContents2769_static.FOLLOW_dash_in_bracketedContentInMolContents2769);
            	    dash567=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash567.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:370: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_bracketedContentInMolContents2771_static.FOLLOW_inAll_in_bracketedContentInMolContents2771);
            	    inAll568=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll568.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:376: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_bracketedContentInMolContents2773_static.FOLLOW_conjunction_in_bracketedContentInMolContents2773);
            	    conjunction569=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction569.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:388: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_bracketedContentInMolContents2775_static.FOLLOW_adj_in_bracketedContentInMolContents2775);
            	    adj570=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj570.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:392: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2777_static.FOLLOW_colon_in_bracketedContentInMolContents2777);
            	    colon571=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon571.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:398: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2779_static.FOLLOW_stop_in_bracketedContentInMolContents2779);
            	    stop572=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop572.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:403: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_bracketedContentInMolContents2781_static.FOLLOW_noun_in_bracketedContentInMolContents2781);
            	    noun573=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun573.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:408: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2783_static.FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2783);
            	    bracketedContentInMol574=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol574.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, bracketedContentInMolContents_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolContents"

    public static class fromProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:1: fromProcedure : ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode ;
    public final ChemicalChunkerParser.fromProcedure_return fromProcedure() throws RecognitionException {
        ChemicalChunkerParser.fromProcedure_return retval = new ChemicalChunkerParser.fromProcedure_return();
        retval.start = input.LT(1);
        int fromProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.infrom_return infrom575 = null;

        ChemicalChunkerParser.inof_return inof576 = null;

        ChemicalChunkerParser.vbyield_return vbyield577 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize578 = null;

        ChemicalChunkerParser.inin_return inin579 = null;

        ChemicalChunkerParser.inby_return inby580 = null;

        ChemicalChunkerParser.infrom_return infrom581 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode582 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:14: ( ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) )
            int alt172=3;
            switch ( input.LA(1) ) {
            case 57:
                {
                alt172=1;
                }
                break;
            case 54:
                {
                alt172=2;
                }
                break;
            case 123:
            case 127:
                {
                alt172=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }

            switch (alt172) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:17: infrom
                    {
                    pushFollow(FOLLOW_infrom_in_fromProcedure2794_static.FOLLOW_infrom_in_fromProcedure2794);
                    infrom575=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom575.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:26: {...}? inof
                    {
                    if ( !((precededByProduct(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "precededByProduct(input)");
                    }
                    pushFollow(FOLLOW_inof_in_fromProcedure2800_static.FOLLOW_inof_in_fromProcedure2800);
                    inof576=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof576.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:61: {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom )
                    {
                    if ( !((suitableVbYieldOrSynthesizeForReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "suitableVbYieldOrSynthesizeForReference(input)");
                    }
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:111: ( vbyield | vbsynthesize )
                    int alt170=2;
                    switch ( input.LA(1) ) {
                    case 127:
                        {
                        alt170=1;
                        }
                        break;
                    case 123:
                        {
                        alt170=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 0, input);

                        throw nvae;
                    }

                    switch (alt170) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:112: vbyield
                            {
                            pushFollow(FOLLOW_vbyield_in_fromProcedure2807_static.FOLLOW_vbyield_in_fromProcedure2807);
                            vbyield577=vbyield();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield577.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:120: vbsynthesize
                            {
                            pushFollow(FOLLOW_vbsynthesize_in_fromProcedure2809_static.FOLLOW_vbsynthesize_in_fromProcedure2809);
                            vbsynthesize578=vbsynthesize();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize578.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:134: ( inin | inby | infrom )
                    int alt171=3;
                    switch ( input.LA(1) ) {
                    case 48:
                        {
                        alt171=1;
                        }
                        break;
                    case 52:
                        {
                        alt171=2;
                        }
                        break;
                    case 57:
                        {
                        alt171=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 171, 0, input);

                        throw nvae;
                    }

                    switch (alt171) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:135: inin
                            {
                            pushFollow(FOLLOW_inin_in_fromProcedure2813_static.FOLLOW_inin_in_fromProcedure2813);
                            inin579=inin();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin579.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:140: inby
                            {
                            pushFollow(FOLLOW_inby_in_fromProcedure2815_static.FOLLOW_inby_in_fromProcedure2815);
                            inby580=inby();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inby580.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:145: infrom
                            {
                            pushFollow(FOLLOW_infrom_in_fromProcedure2817_static.FOLLOW_infrom_in_fromProcedure2817);
                            infrom581=infrom();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom581.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_procedureNode_in_fromProcedure2821_static.FOLLOW_procedureNode_in_fromProcedure2821);
            procedureNode582=procedureNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode582.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, fromProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fromProcedure"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method583 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2828_static.FOLLOW_method_in_procedureNode2828);
            method583=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method583.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:1: method : ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral584 = null;

        ChemicalChunkerParser.nn_return nn585 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod586 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes587 = null;

        ChemicalChunkerParser.nnexample_return nnexample588 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes589 = null;

        ChemicalChunkerParser.comma_return comma590 = null;

        ChemicalChunkerParser.colon_return colon591 = null;

        ChemicalChunkerParser.inof_return inof592 = null;

        ChemicalChunkerParser.infrom_return infrom593 = null;

        ChemicalChunkerParser.submethod_return submethod594 = null;

        ChemicalChunkerParser.lrb_return lrb595 = null;

        ChemicalChunkerParser.submethod_return submethod596 = null;

        ChemicalChunkerParser.rrb_return rrb597 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:7: ( ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:5: ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:5: ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes )
            int alt175=2;
            switch ( input.LA(1) ) {
            case 73:
            case 74:
            case 154:
                {
                alt175=1;
                }
                break;
            case 81:
                {
                alt175=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }

            switch (alt175) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:6: ( nngeneral | nn )? nnmethod ( allIdentifierTypes )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:6: ( nngeneral | nn )?
                    int alt173=3;
                    switch ( input.LA(1) ) {
                        case 73:
                            {
                            alt173=1;
                            }
                            break;
                        case 154:
                            {
                            alt173=2;
                            }
                            break;
                    }

                    switch (alt173) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:7: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2849_static.FOLLOW_nngeneral_in_method2849);
                            nngeneral584=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral584.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:17: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2851_static.FOLLOW_nn_in_method2851);
                            nn585=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn585.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2855_static.FOLLOW_nnmethod_in_method2855);
                    nnmethod586=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod586.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:31: ( allIdentifierTypes )?
                    int alt174=2;
                    alt174 = dfa174.predict(input);
                    switch (alt174) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: allIdentifierTypes
                            {
                            pushFollow(FOLLOW_allIdentifierTypes_in_method2857_static.FOLLOW_allIdentifierTypes_in_method2857);
                            allIdentifierTypes587=allIdentifierTypes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes587.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:53: nnexample allIdentifierTypes
                    {
                    pushFollow(FOLLOW_nnexample_in_method2862_static.FOLLOW_nnexample_in_method2862);
                    nnexample588=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample588.getTree());
                    pushFollow(FOLLOW_allIdentifierTypes_in_method2864_static.FOLLOW_allIdentifierTypes_in_method2864);
                    allIdentifierTypes589=allIdentifierTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes589.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:83: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            loop177:
            do {
                int alt177=3;
                alt177 = dfa177.predict(input);
                switch (alt177) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:85: ( comma | colon | inof | infrom )? submethod
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:85: ( comma | colon | inof | infrom )?
            	    int alt176=5;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt176=1;
            	            }
            	            break;
            	        case 130:
            	            {
            	            alt176=2;
            	            }
            	            break;
            	        case 54:
            	            {
            	            alt176=3;
            	            }
            	            break;
            	        case 57:
            	            {
            	            alt176=4;
            	            }
            	            break;
            	    }

            	    switch (alt176) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:86: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_method2870_static.FOLLOW_comma_in_method2870);
            	            comma590=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma590.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:93: colon
            	            {
            	            pushFollow(FOLLOW_colon_in_method2873_static.FOLLOW_colon_in_method2873);
            	            colon591=colon();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon591.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:100: inof
            	            {
            	            pushFollow(FOLLOW_inof_in_method2876_static.FOLLOW_inof_in_method2876);
            	            inof592=inof();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof592.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:107: infrom
            	            {
            	            pushFollow(FOLLOW_infrom_in_method2880_static.FOLLOW_infrom_in_method2880);
            	            infrom593=infrom();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom593.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_submethod_in_method2884_static.FOLLOW_submethod_in_method2884);
            	    submethod594=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod594.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:128: lrb submethod rrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_method2888_static.FOLLOW_lrb_in_method2888);
            	    lrb595=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb595.getTree());
            	    pushFollow(FOLLOW_submethod_in_method2890_static.FOLLOW_submethod_in_method2890);
            	    submethod596=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod596.getTree());
            	    pushFollow(FOLLOW_rrb_in_method2892_static.FOLLOW_rrb_in_method2892);
            	    rrb597=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb597.getTree());

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class submethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "submethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: submethod : ( nnmethod | nnexample ) allIdentifierTypes ;
    public final ChemicalChunkerParser.submethod_return submethod() throws RecognitionException {
        ChemicalChunkerParser.submethod_return retval = new ChemicalChunkerParser.submethod_return();
        retval.start = input.LT(1);
        int submethod_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod598 = null;

        ChemicalChunkerParser.nnexample_return nnexample599 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes600 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:11: ( ( nnmethod | nnexample ) allIdentifierTypes )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:13: ( nnmethod | nnexample ) allIdentifierTypes
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:13: ( nnmethod | nnexample )
            int alt178=2;
            switch ( input.LA(1) ) {
            case 74:
                {
                alt178=1;
                }
                break;
            case 81:
                {
                alt178=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:14: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_submethod2903_static.FOLLOW_nnmethod_in_submethod2903);
                    nnmethod598=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod598.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:23: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_submethod2905_static.FOLLOW_nnexample_in_submethod2905);
                    nnexample599=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample599.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_allIdentifierTypes_in_submethod2908_static.FOLLOW_allIdentifierTypes_in_submethod2908);
            allIdentifierTypes600=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes600.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, submethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "submethod"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:1: referenceToExampleCompound : nnexample allIdentifierTypes -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample601 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes602 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypes=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypes");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:28: ( nnexample allIdentifierTypes -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:2: nnexample allIdentifierTypes
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound2917_static.FOLLOW_nnexample_in_referenceToExampleCompound2917);
            nnexample601=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample601.getTree());
            pushFollow(FOLLOW_allIdentifierTypes_in_referenceToExampleCompound2919_static.FOLLOW_allIdentifierTypes_in_referenceToExampleCompound2919);
            allIdentifierTypes602=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypes.add(allIdentifierTypes602.getTree());


            // AST REWRITE
            // elements: allIdentifierTypes, nnexample
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:31: -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:34: ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                adaptor.addChild(root_1, stream_allIdentifierTypes.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv603 = null;

        ChemicalChunkerParser.adj_return adj604 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:2: ( adv | adj )
            int alt179=2;
            switch ( input.LA(1) ) {
            case 162:
            case 163:
            case 164:
            case 165:
                {
                alt179=1;
                }
                break;
            case 38:
            case 39:
            case 43:
            case 149:
            case 150:
            case 151:
                {
                alt179=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2937_static.FOLLOW_adv_in_advAdj2937);
                    adv603=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv603.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2939_static.FOLLOW_adj_in_advAdj2939);
                    adj604=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj604.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric605 = null;

        ChemicalChunkerParser.dash_return dash606 = null;

        ChemicalChunkerParser.numeric_return numeric607 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range2946_static.FOLLOW_numeric_in_range2946);
            numeric605=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric605.getTree());
            pushFollow(FOLLOW_dash_in_range2948_static.FOLLOW_dash_in_range2948);
            dash606=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash606.getTree());
            pushFollow(FOLLOW_numeric_in_range2950_static.FOLLOW_numeric_in_range2950);
            numeric607=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric607.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure608 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2957_static.FOLLOW_cycleStructure_in_cycles2957);
            cycleStructure608=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure608.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd609 = null;

        ChemicalChunkerParser.dashNN_return dashNN610 = null;

        ChemicalChunkerParser.nncycle_return nncycle611 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure2974_static.FOLLOW_cd_in_cycleStructure2974);
            cd609=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd609.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:21: ( dashNN )?
            int alt180=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 144:
                case 149:
                case 150:
                case 151:
                case 154:
                    {
                    alt180=1;
                    }
                    break;
            }

            switch (alt180) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure2976_static.FOLLOW_dashNN_in_cycleStructure2976);
                    dashNN610=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN610.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure2979_static.FOLLOW_nncycle_in_cycleStructure2979);
            nncycle611=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle611.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj612 = null;

        ChemicalChunkerParser.nn_return nn613 = null;

        ChemicalChunkerParser.cd_return cd614 = null;

        ChemicalChunkerParser.dash_return dash615 = null;

        ChemicalChunkerParser.adj_return adj616 = null;

        ChemicalChunkerParser.nn_return nn617 = null;

        ChemicalChunkerParser.cd_return cd618 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:10: ( adj | nn | cd )
            int alt181=3;
            switch ( input.LA(1) ) {
            case 38:
            case 39:
            case 43:
            case 149:
            case 150:
            case 151:
                {
                alt181=1;
                }
                break;
            case 154:
                {
                alt181=2;
                }
                break;
            case 144:
                {
                alt181=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN2987_static.FOLLOW_adj_in_dashNN2987);
                    adj612=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj612.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN2989_static.FOLLOW_nn_in_dashNN2989);
                    nn613=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn613.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN2991_static.FOLLOW_cd_in_dashNN2991);
                    cd614=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd614.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:22: ( dash ( adj | nn | cd ) )*
            loop183:
            do {
                int alt183=2;
                switch ( input.LA(1) ) {
                case 134:
                    {
                    alt183=1;
                    }
                    break;

                }

                switch (alt183) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN2995_static.FOLLOW_dash_in_dashNN2995);
            	    dash615=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash615.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:28: ( adj | nn | cd )
            	    int alt182=3;
            	    switch ( input.LA(1) ) {
            	    case 38:
            	    case 39:
            	    case 43:
            	    case 149:
            	    case 150:
            	    case 151:
            	        {
            	        alt182=1;
            	        }
            	        break;
            	    case 154:
            	        {
            	        alt182=2;
            	        }
            	        break;
            	    case 144:
            	        {
            	        alt182=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 182, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt182) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN2998_static.FOLLOW_adj_in_dashNN2998);
            	            adj616=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj616.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN3000_static.FOLLOW_nn_in_dashNN3000);
            	            nn617=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn617.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN3002_static.FOLLOW_cd_in_dashNN3002);
            	            cd618=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd618.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratioOrBracketedRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratioOrBracketedRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: ratioOrBracketedRatio : ( lrb ratio rrb | ratio );
    public final ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio() throws RecognitionException {
        ChemicalChunkerParser.ratioOrBracketedRatio_return retval = new ChemicalChunkerParser.ratioOrBracketedRatio_return();
        retval.start = input.LT(1);
        int ratioOrBracketedRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb619 = null;

        ChemicalChunkerParser.ratio_return ratio620 = null;

        ChemicalChunkerParser.rrb_return rrb621 = null;

        ChemicalChunkerParser.ratio_return ratio622 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:23: ( lrb ratio rrb | ratio )
            int alt184=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt184=1;
                }
                break;
            case 144:
                {
                alt184=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:25: lrb ratio rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lrb_in_ratioOrBracketedRatio3013_static.FOLLOW_lrb_in_ratioOrBracketedRatio3013);
                    lrb619=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb619.getTree());
                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3015_static.FOLLOW_ratio_in_ratioOrBracketedRatio3015);
                    ratio620=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio620.getTree());
                    pushFollow(FOLLOW_rrb_in_ratioOrBracketedRatio3017_static.FOLLOW_rrb_in_ratioOrBracketedRatio3017);
                    rrb621=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb621.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:41: ratio
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3021_static.FOLLOW_ratio_in_ratioOrBracketedRatio3021);
                    ratio622=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio622.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, ratioOrBracketedRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratioOrBracketedRatio"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:1: ratio : cdRatio -> ^( RATIO cdRatio ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatio_return cdRatio623 = null;


        RewriteRuleSubtreeStream stream_cdRatio=new RewriteRuleSubtreeStream(adaptor,"rule cdRatio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:7: ( cdRatio -> ^( RATIO cdRatio ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:9: cdRatio
            {
            pushFollow(FOLLOW_cdRatio_in_ratio3028_static.FOLLOW_cdRatio_in_ratio3028);
            cdRatio623=cdRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdRatio.add(cdRatio623.getTree());


            // AST REWRITE
            // elements: cdRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 402:17: -> ^( RATIO cdRatio )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:20: ^( RATIO cdRatio )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                adaptor.addChild(root_1, stream_cdRatio.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class cdRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:1: cdRatio : cd ( colon cd {...}?)+ ;
    public final ChemicalChunkerParser.cdRatio_return cdRatio() throws RecognitionException {
        ChemicalChunkerParser.cdRatio_return retval = new ChemicalChunkerParser.cdRatio_return();
        retval.start = input.LT(1);
        int cdRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd624 = null;

        ChemicalChunkerParser.colon_return colon625 = null;

        ChemicalChunkerParser.cd_return cd626 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:9: ( cd ( colon cd {...}?)+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:11: cd ( colon cd {...}?)+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cdRatio3043_static.FOLLOW_cd_in_cdRatio3043);
            cd624=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd624.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:14: ( colon cd {...}?)+
            int cnt185=0;
            loop185:
            do {
                int alt185=2;
                switch ( input.LA(1) ) {
                case 130:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 144:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA185_5 = input.LA(5);

                                if ( (synpred458_ChemicalChunker()) ) {
                                    alt185=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt185) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:15: colon cd {...}?
            	    {
            	    pushFollow(FOLLOW_colon_in_cdRatio3046_static.FOLLOW_colon_in_cdRatio3046);
            	    colon625=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon625.getTree());
            	    pushFollow(FOLLOW_cd_in_cdRatio3048_static.FOLLOW_cd_in_cdRatio3048);
            	    cd626=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd626.getTree());
            	    if ( !((!followedByQuantityUnits(input))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "cdRatio", "!followedByQuantityUnits(input)");
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt185 >= 1 ) break loop185;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(185, input);
                        throw eee;
                }
                cnt185++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, cdRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdRatio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure627 = null;

        ChemicalChunkerParser.comma_return comma628 = null;

        ChemicalChunkerParser.citationContent_return citationContent629 = null;

        ChemicalChunkerParser.comma_return comma630 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:9: ( citationStructure | comma citationContent comma )
            int alt186=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt186=1;
                }
                break;
            case 131:
                {
                alt186=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation3060_static.FOLLOW_citationStructure_in_citation3060);
                    citationStructure627=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure627.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation3062_static.FOLLOW_comma_in_citation3062);
                    comma628=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma628.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation3064_static.FOLLOW_citationContent_in_citation3064);
                    citationContent629=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent629.getTree());
                    pushFollow(FOLLOW_comma_in_citation3066_static.FOLLOW_comma_in_citation3066);
                    comma630=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma630.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent631 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure3074_static.FOLLOW_citationContent_in_citationStructure3074);
            citationContent631=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent631.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb632 = null;

        ChemicalChunkerParser.nnp_return nnp633 = null;

        ChemicalChunkerParser.fw_return fw634 = null;

        ChemicalChunkerParser.cd_return cd635 = null;

        ChemicalChunkerParser.conjunction_return conjunction636 = null;

        ChemicalChunkerParser.nnp_return nnp637 = null;

        ChemicalChunkerParser.fw_return fw638 = null;

        ChemicalChunkerParser.cd_return cd639 = null;

        ChemicalChunkerParser.conjunction_return conjunction640 = null;

        ChemicalChunkerParser.rrb_return rrb641 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent3090_static.FOLLOW_lrb_in_citationContent3090);
            lrb632=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb632.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:24: ( nnp | fw | cd | conjunction )
            int alt187=4;
            switch ( input.LA(1) ) {
            case 156:
                {
                alt187=1;
                }
                break;
            case 147:
                {
                alt187=2;
                }
                break;
            case 144:
                {
                alt187=3;
                }
                break;
            case 131:
            case 143:
                {
                alt187=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent3093_static.FOLLOW_nnp_in_citationContent3093);
                    nnp633=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp633.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent3095_static.FOLLOW_fw_in_citationContent3095);
                    fw634=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw634.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent3097_static.FOLLOW_cd_in_citationContent3097);
                    cd635=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd635.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent3099_static.FOLLOW_conjunction_in_citationContent3099);
                    conjunction636=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction636.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:48: ( nnp | fw | cd | conjunction )+
            int cnt188=0;
            loop188:
            do {
                int alt188=5;
                switch ( input.LA(1) ) {
                case 156:
                    {
                    alt188=1;
                    }
                    break;
                case 147:
                    {
                    alt188=2;
                    }
                    break;
                case 144:
                    {
                    alt188=3;
                    }
                    break;
                case 131:
                case 143:
                    {
                    alt188=4;
                    }
                    break;

                }

                switch (alt188) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent3103_static.FOLLOW_nnp_in_citationContent3103);
            	    nnp637=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp637.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent3105_static.FOLLOW_fw_in_citationContent3105);
            	    fw638=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw638.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent3107_static.FOLLOW_cd_in_citationContent3107);
            	    cd639=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd639.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent3109_static.FOLLOW_conjunction_in_citationContent3109);
            	    conjunction640=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction640.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt188 >= 1 ) break loop188;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(188, input);
                        throw eee;
                }
                cnt188++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent3113_static.FOLLOW_rrb_in_citationContent3113);
            rrb641=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb641.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class allIdentifierTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allIdentifierTypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:1: allIdentifierTypes : ( allIdentifierTypesOtherThanCD | cd {...}?);
    public final ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes() throws RecognitionException {
        ChemicalChunkerParser.allIdentifierTypes_return retval = new ChemicalChunkerParser.allIdentifierTypes_return();
        retval.start = input.LT(1);
        int allIdentifierTypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD642 = null;

        ChemicalChunkerParser.cd_return cd643 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:20: ( allIdentifierTypesOtherThanCD | cd {...}?)
            int alt189=2;
            switch ( input.LA(1) ) {
            case 37:
            case 137:
            case 139:
            case 141:
                {
                alt189=1;
                }
                break;
            case 144:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    int LA189_3 = input.LA(3);

                    if ( (synpred467_ChemicalChunker()) ) {
                        alt189=1;
                    }
                    else if ( (true) ) {
                        alt189=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 189, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:22: allIdentifierTypesOtherThanCD
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3123_static.FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3123);
                    allIdentifierTypesOtherThanCD642=allIdentifierTypesOtherThanCD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypesOtherThanCD642.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:54: cd {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_allIdentifierTypes3127_static.FOLLOW_cd_in_allIdentifierTypes3127);
                    cd643=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd643.getTree());
                    if ( !((!cdHasRoleOtherThanIdentifier(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "allIdentifierTypes", "!cdHasRoleOtherThanIdentifier(input)");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, allIdentifierTypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allIdentifierTypes"

    public static class allIdentifierTypesOtherThanCD_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allIdentifierTypesOtherThanCD"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:1: allIdentifierTypesOtherThanCD : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | {...}? bracketedNumeric );
    public final ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD() throws RecognitionException {
        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return retval = new ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return();
        retval.start = input.LT(1);
        int allIdentifierTypesOtherThanCD_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference644 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier645 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum646 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric647 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:31: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | {...}? bracketedNumeric )
            int alt190=4;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt190=1;
                }
                break;
            case 139:
            case 144:
                {
                alt190=2;
                }
                break;
            case 141:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 144:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 142:
                                {
                                alt190=4;
                                }
                                break;
                            case 139:
                                {
                                alt190=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 190, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 190, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 139:
                        {
                        alt190=2;
                        }
                        break;
                    case 37:
                        {
                        alt190=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 190, 3, input);

                    throw nvae;
                }

                }
                break;
            case 37:
                {
                alt190=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:33: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3136_static.FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3136);
                    squareBracketedReference644=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference644.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:58: identifierOrBracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3138_static.FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3138);
                    identifierOrBracketedIdentifier645=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier645.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:90: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3140_static.FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3140);
                    cdAlphanum646=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum646.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:101: {...}? bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((notFollowedByBracketedYear(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "allIdentifierTypesOtherThanCD", "notFollowedByBracketedYear(input)");
                    }
                    pushFollow(FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3143_static.FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3143);
                    bracketedNumeric647=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric647.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, allIdentifierTypesOtherThanCD_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allIdentifierTypesOtherThanCD"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric648 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric649 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:27: ( numeric | bracketedNumeric )
            int alt191=2;
            switch ( input.LA(1) ) {
            case 37:
            case 144:
                {
                alt191=1;
                }
                break;
            case 141:
                {
                alt191=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric3151_static.FOLLOW_numeric_in_numericOrBracketedNumeric3151);
                    numeric648=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric648.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3155_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3155);
                    bracketedNumeric649=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric649.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb650 = null;

        ChemicalChunkerParser.numeric_return numeric651 = null;

        ChemicalChunkerParser.rrb_return rrb652 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric3163_static.FOLLOW_lrb_in_bracketedNumeric3163);
            lrb650=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb650.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric3165_static.FOLLOW_numeric_in_bracketedNumeric3165);
            numeric651=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric651.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric3167_static.FOLLOW_rrb_in_bracketedNumeric3167);
            rrb652=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb652.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb653 = null;

        ChemicalChunkerParser.numeric_return numeric654 = null;

        ChemicalChunkerParser.rsqb_return rsqb655 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:26: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:28: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference3174_static.FOLLOW_lsqb_in_squareBracketedReference3174);
            lsqb653=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb653.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference3176_static.FOLLOW_numeric_in_squareBracketedReference3176);
            numeric654=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric654.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference3178_static.FOLLOW_rsqb_in_squareBracketedReference3178);
            rsqb655=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb655.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd656 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier657 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier658 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt193=2;
            switch ( input.LA(1) ) {
            case 139:
            case 144:
                {
                alt193=1;
                }
                break;
            case 141:
                {
                alt193=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:35: ( cd )?
                    int alt192=2;
                    switch ( input.LA(1) ) {
                        case 144:
                            {
                            alt192=1;
                            }
                            break;
                    }

                    switch (alt192) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier3185_static.FOLLOW_cd_in_identifierOrBracketedIdentifier3185);
                            cd656=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd656.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3188_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3188);
                    nnidentifier657=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier657.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3192_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3192);
                    bracketedIdentifier658=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier658.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb659 = null;

        ChemicalChunkerParser.cd_return cd660 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier661 = null;

        ChemicalChunkerParser.rrb_return rrb662 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:21: ( lrb ( cd )? nnidentifier rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier3200_static.FOLLOW_lrb_in_bracketedIdentifier3200);
            lrb659=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb659.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:28: ( cd )?
            int alt194=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt194=1;
                    }
                    break;
            }

            switch (alt194) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier3202_static.FOLLOW_cd_in_bracketedIdentifier3202);
                    cd660=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd660.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier3205_static.FOLLOW_nnidentifier_in_bracketedIdentifier3205);
            nnidentifier661=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier661.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier3207_static.FOLLOW_rrb_in_bracketedIdentifier3207);
            rrb662=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb662.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:1: adj : ( jj | jjr | jjs | jjchem | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj663 = null;

        ChemicalChunkerParser.jjr_return jjr664 = null;

        ChemicalChunkerParser.jjs_return jjs665 = null;

        ChemicalChunkerParser.jjchem_return jjchem666 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj667 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn668 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:5: ( jj | jjr | jjs | jjchem | oscarcj | oscarrn )
            int alt195=6;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt195=1;
                }
                break;
            case 150:
                {
                alt195=2;
                }
                break;
            case 151:
                {
                alt195=3;
                }
                break;
            case 43:
                {
                alt195=4;
                }
                break;
            case 38:
                {
                alt195=5;
                }
                break;
            case 39:
                {
                alt195=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj3215_static.FOLLOW_jj_in_adj3215);
                    jj663=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj663.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj3217_static.FOLLOW_jjr_in_adj3217);
                    jjr664=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr664.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj3219_static.FOLLOW_jjs_in_adj3219);
                    jjs665=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs665.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:18: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj3221_static.FOLLOW_jjchem_in_adj3221);
                    jjchem666=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem666.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:25: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj3223_static.FOLLOW_oscarcj_in_adj3223);
                    oscarcj667=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj667.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj3225_static.FOLLOW_oscarrn_in_adj3225);
                    oscarrn668=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn668.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb669 = null;

        ChemicalChunkerParser.rbr_return rbr670 = null;

        ChemicalChunkerParser.rp_return rp671 = null;

        ChemicalChunkerParser.rbs_return rbs672 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:5: ( rb | rbr | rp | rbs )
            int alt196=4;
            switch ( input.LA(1) ) {
            case 162:
                {
                alt196=1;
                }
                break;
            case 163:
                {
                alt196=2;
                }
                break;
            case 165:
                {
                alt196=3;
                }
                break;
            case 164:
                {
                alt196=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }

            switch (alt196) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv3232_static.FOLLOW_rb_in_adv3232);
                    rb669=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb669.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv3234_static.FOLLOW_rbr_in_adv3234);
                    rbr670=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr670.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv3236_static.FOLLOW_rp_in_adv3236);
                    rp671=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp671.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv3238_static.FOLLOW_rbs_in_adv3238);
                    rbs672=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs672.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt673 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss674 = null;

        ChemicalChunkerParser.wrb_return wrb675 = null;

        ChemicalChunkerParser.ex_return ex676 = null;

        ChemicalChunkerParser.pdt_return pdt677 = null;

        ChemicalChunkerParser.wp_return wp678 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt197=6;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt197=1;
                }
                break;
            case 177:
                {
                alt197=2;
                }
                break;
            case 178:
                {
                alt197=3;
                }
                break;
            case 146:
                {
                alt197=4;
                }
                break;
            case 158:
                {
                alt197=5;
                }
                break;
            case 176:
                {
                alt197=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause3245_static.FOLLOW_wdt_in_clause3245);
                    wdt673=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt673.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause3247_static.FOLLOW_wp_poss_in_clause3247);
                    wp_poss674=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss674.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause3249_static.FOLLOW_wrb_in_clause3249);
                    wrb675=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb675.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause3251_static.FOLLOW_ex_in_clause3251);
                    ex676=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex676.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause3253_static.FOLLOW_pdt_in_clause3253);
                    pdt677=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt677.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause3255_static.FOLLOW_wp_in_clause3255);
                    wp678=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp678.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc679 = null;

        ChemicalChunkerParser.comma_return comma680 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:13: ( cc | comma )
            int alt198=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt198=1;
                }
                break;
            case 131:
                {
                alt198=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }

            switch (alt198) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction3262_static.FOLLOW_cc_in_conjunction3262);
                    cc679=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc679.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction3264_static.FOLLOW_comma_in_conjunction3264);
                    comma680=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma680.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in681 = null;

        ChemicalChunkerParser.inafter_return inafter682 = null;

        ChemicalChunkerParser.inas_return inas683 = null;

        ChemicalChunkerParser.inbefore_return inbefore684 = null;

        ChemicalChunkerParser.inby_return inby685 = null;

        ChemicalChunkerParser.infor_return infor686 = null;

        ChemicalChunkerParser.infrom_return infrom687 = null;

        ChemicalChunkerParser.inin_return inin688 = null;

        ChemicalChunkerParser.ininto_return ininto689 = null;

        ChemicalChunkerParser.inof_return inof690 = null;

        ChemicalChunkerParser.inoff_return inoff691 = null;

        ChemicalChunkerParser.inon_return inon692 = null;

        ChemicalChunkerParser.inover_return inover693 = null;

        ChemicalChunkerParser.inunder_return inunder694 = null;

        ChemicalChunkerParser.invia_return invia695 = null;

        ChemicalChunkerParser.inwith_return inwith696 = null;

        ChemicalChunkerParser.inwithout_return inwithout697 = null;

        ChemicalChunkerParser.to_return to698 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt199=18;
            switch ( input.LA(1) ) {
            case 148:
                {
                alt199=1;
                }
                break;
            case 47:
                {
                alt199=2;
                }
                break;
            case 45:
                {
                alt199=3;
                }
                break;
            case 46:
                {
                alt199=4;
                }
                break;
            case 52:
                {
                alt199=5;
                }
                break;
            case 56:
                {
                alt199=6;
                }
                break;
            case 57:
                {
                alt199=7;
                }
                break;
            case 48:
                {
                alt199=8;
                }
                break;
            case 49:
                {
                alt199=9;
                }
                break;
            case 54:
                {
                alt199=10;
                }
                break;
            case 60:
                {
                alt199=11;
                }
                break;
            case 55:
                {
                alt199=12;
                }
                break;
            case 59:
                {
                alt199=13;
                }
                break;
            case 58:
                {
                alt199=14;
                }
                break;
            case 53:
                {
                alt199=15;
                }
                break;
            case 50:
                {
                alt199=16;
                }
                break;
            case 51:
                {
                alt199=17;
                }
                break;
            case 167:
                {
                alt199=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }

            switch (alt199) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll3271_static.FOLLOW_in_in_inAll3271);
                    in681=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in681.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll3273_static.FOLLOW_inafter_in_inAll3273);
                    inafter682=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter682.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll3275_static.FOLLOW_inas_in_inAll3275);
                    inas683=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas683.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll3277_static.FOLLOW_inbefore_in_inAll3277);
                    inbefore684=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore684.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll3279_static.FOLLOW_inby_in_inAll3279);
                    inby685=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby685.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll3281_static.FOLLOW_infor_in_inAll3281);
                    infor686=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor686.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll3283_static.FOLLOW_infrom_in_inAll3283);
                    infrom687=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom687.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll3285_static.FOLLOW_inin_in_inAll3285);
                    inin688=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin688.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll3287_static.FOLLOW_ininto_in_inAll3287);
                    ininto689=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto689.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll3289_static.FOLLOW_inof_in_inAll3289);
                    inof690=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof690.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll3291_static.FOLLOW_inoff_in_inAll3291);
                    inoff691=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff691.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll3293_static.FOLLOW_inon_in_inAll3293);
                    inon692=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon692.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll3295_static.FOLLOW_inover_in_inAll3295);
                    inover693=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover693.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll3297_static.FOLLOW_inunder_in_inAll3297);
                    inunder694=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder694.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll3299_static.FOLLOW_invia_in_inAll3299);
                    invia695=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia695.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll3301_static.FOLLOW_inwith_in_inAll3301);
                    inwith696=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith696.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll3303_static.FOLLOW_inwithout_in_inAll3303);
                    inwithout697=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout697.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll3305_static.FOLLOW_to_in_inAll3305);
                    to698=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to698.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in699 = null;

        ChemicalChunkerParser.inas_return inas700 = null;

        ChemicalChunkerParser.inbefore_return inbefore701 = null;

        ChemicalChunkerParser.inby_return inby702 = null;

        ChemicalChunkerParser.infor_return infor703 = null;

        ChemicalChunkerParser.infrom_return infrom704 = null;

        ChemicalChunkerParser.inin_return inin705 = null;

        ChemicalChunkerParser.ininto_return ininto706 = null;

        ChemicalChunkerParser.inof_return inof707 = null;

        ChemicalChunkerParser.inoff_return inoff708 = null;

        ChemicalChunkerParser.inon_return inon709 = null;

        ChemicalChunkerParser.inover_return inover710 = null;

        ChemicalChunkerParser.inunder_return inunder711 = null;

        ChemicalChunkerParser.invia_return invia712 = null;

        ChemicalChunkerParser.inwith_return inwith713 = null;

        ChemicalChunkerParser.inwithout_return inwithout714 = null;

        ChemicalChunkerParser.to_return to715 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt200=17;
            switch ( input.LA(1) ) {
            case 148:
                {
                alt200=1;
                }
                break;
            case 45:
                {
                alt200=2;
                }
                break;
            case 46:
                {
                alt200=3;
                }
                break;
            case 52:
                {
                alt200=4;
                }
                break;
            case 56:
                {
                alt200=5;
                }
                break;
            case 57:
                {
                alt200=6;
                }
                break;
            case 48:
                {
                alt200=7;
                }
                break;
            case 49:
                {
                alt200=8;
                }
                break;
            case 54:
                {
                alt200=9;
                }
                break;
            case 60:
                {
                alt200=10;
                }
                break;
            case 55:
                {
                alt200=11;
                }
                break;
            case 59:
                {
                alt200=12;
                }
                break;
            case 58:
                {
                alt200=13;
                }
                break;
            case 53:
                {
                alt200=14;
                }
                break;
            case 50:
                {
                alt200=15;
                }
                break;
            case 51:
                {
                alt200=16;
                }
                break;
            case 167:
                {
                alt200=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }

            switch (alt200) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3312_static.FOLLOW_in_in_inMost3312);
                    in699=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in699.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3314_static.FOLLOW_inas_in_inMost3314);
                    inas700=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas700.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3316_static.FOLLOW_inbefore_in_inMost3316);
                    inbefore701=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore701.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3318_static.FOLLOW_inby_in_inMost3318);
                    inby702=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby702.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3320_static.FOLLOW_infor_in_inMost3320);
                    infor703=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor703.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3322_static.FOLLOW_infrom_in_inMost3322);
                    infrom704=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom704.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3324_static.FOLLOW_inin_in_inMost3324);
                    inin705=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin705.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3326_static.FOLLOW_ininto_in_inMost3326);
                    ininto706=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto706.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3328_static.FOLLOW_inof_in_inMost3328);
                    inof707=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof707.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3330_static.FOLLOW_inoff_in_inMost3330);
                    inoff708=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff708.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3332_static.FOLLOW_inon_in_inMost3332);
                    inon709=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon709.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3334_static.FOLLOW_inover_in_inMost3334);
                    inover710=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover710.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3336_static.FOLLOW_inunder_in_inMost3336);
                    inunder711=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder711.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3338_static.FOLLOW_invia_in_inMost3338);
                    invia712=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia712.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3340_static.FOLLOW_inwith_in_inMost3340);
                    inwith713=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith713.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3342_static.FOLLOW_inwithout_in_inMost3342);
                    inwithout714=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout714.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3344_static.FOLLOW_to_in_inMost3344);
                    to715=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to715.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd716 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum717 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:9: ( cd | cdAlphanum )
            int alt201=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt201=1;
                }
                break;
            case 37:
                {
                alt201=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3351_static.FOLLOW_cd_in_numeric3351);
                    cd716=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd716.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3353_static.FOLLOW_cdAlphanum_in_numeric3353);
                    cdAlphanum717=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum717.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal718=(Token)match(input,37,FOLLOW_37_in_cdAlphanum3361_static.FOLLOW_37_in_cdAlphanum3361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_37.add(string_literal718);

            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3363_static.FOLLOW_TOKEN_in_cdAlphanum3363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN719);



            // AST REWRITE
            // elements: TOKEN, 37
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_37.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:9: 'OSCAR-CJ' TOKEN
            {
            string_literal720=(Token)match(input,38,FOLLOW_38_in_oscarcj3376_static.FOLLOW_38_in_oscarcj3376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal720);

            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3378_static.FOLLOW_TOKEN_in_oscarcj3378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN721);



            // AST REWRITE
            // elements: 38, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:9: 'OSCAR-RN' TOKEN
            {
            string_literal722=(Token)match(input,39,FOLLOW_39_in_oscarrn3391_static.FOLLOW_39_in_oscarrn3391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal722);

            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3393_static.FOLLOW_TOKEN_in_oscarrn3393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN723);



            // AST REWRITE
            // elements: 39, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:10: 'OSCAR-ASE' TOKEN
            {
            string_literal724=(Token)match(input,40,FOLLOW_40_in_oscarase3406_static.FOLLOW_40_in_oscarase3406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal724);

            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3408_static.FOLLOW_TOKEN_in_oscarase3408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN725);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:11: 'TM-UNICODE' TOKEN
            {
            string_literal726=(Token)match(input,41,FOLLOW_41_in_tmunicode3421_static.FOLLOW_41_in_tmunicode3421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal726);

            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3423_static.FOLLOW_TOKEN_in_tmunicode3423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN727);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:11: 'CD-UNICODE' TOKEN
            {
            string_literal728=(Token)match(input,42,FOLLOW_42_in_cdunicode3436_static.FOLLOW_42_in_cdunicode3436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal728);

            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3438_static.FOLLOW_TOKEN_in_cdunicode3438); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN729);



            // AST REWRITE
            // elements: 42, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 434:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:8: 'JJ-CHEM' TOKEN
            {
            string_literal730=(Token)match(input,43,FOLLOW_43_in_jjchem3451_static.FOLLOW_43_in_jjchem3451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal730);

            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3453_static.FOLLOW_TOKEN_in_jjchem3453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN731);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal732=(Token)match(input,44,FOLLOW_44_in_jjcomp3466_static.FOLLOW_44_in_jjcomp3466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal732);

            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3468_static.FOLLOW_TOKEN_in_jjcomp3468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN733);



            // AST REWRITE
            // elements: TOKEN, 44
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:6: 'IN-AS' TOKEN
            {
            string_literal734=(Token)match(input,45,FOLLOW_45_in_inas3482_static.FOLLOW_45_in_inas3482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal734);

            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3484_static.FOLLOW_TOKEN_in_inas3484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN735);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:10: 'IN-BEFORE' TOKEN
            {
            string_literal736=(Token)match(input,46,FOLLOW_46_in_inbefore3497_static.FOLLOW_46_in_inbefore3497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal736);

            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3499_static.FOLLOW_TOKEN_in_inbefore3499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN737);



            // AST REWRITE
            // elements: TOKEN, 46
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:9: 'IN-AFTER' TOKEN
            {
            string_literal738=(Token)match(input,47,FOLLOW_47_in_inafter3512_static.FOLLOW_47_in_inafter3512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal738);

            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3514_static.FOLLOW_TOKEN_in_inafter3514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN739);



            // AST REWRITE
            // elements: 47, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:6: 'IN-IN' TOKEN
            {
            string_literal740=(Token)match(input,48,FOLLOW_48_in_inin3527_static.FOLLOW_48_in_inin3527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal740);

            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3529_static.FOLLOW_TOKEN_in_inin3529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN741);



            // AST REWRITE
            // elements: 48, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 441:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:8: 'IN-INTO' TOKEN
            {
            string_literal742=(Token)match(input,49,FOLLOW_49_in_ininto3542_static.FOLLOW_49_in_ininto3542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal742);

            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3544_static.FOLLOW_TOKEN_in_ininto3544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN743);



            // AST REWRITE
            // elements: 49, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:8: 'IN-WITH' TOKEN
            {
            string_literal744=(Token)match(input,50,FOLLOW_50_in_inwith3557_static.FOLLOW_50_in_inwith3557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal744);

            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3559_static.FOLLOW_TOKEN_in_inwith3559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN745);



            // AST REWRITE
            // elements: TOKEN, 50
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:11: 'IN-WITHOUT' TOKEN
            {
            string_literal746=(Token)match(input,51,FOLLOW_51_in_inwithout3572_static.FOLLOW_51_in_inwithout3572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal746);

            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3574_static.FOLLOW_TOKEN_in_inwithout3574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN747);



            // AST REWRITE
            // elements: 51, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:6: 'IN-BY' TOKEN
            {
            string_literal748=(Token)match(input,52,FOLLOW_52_in_inby3587_static.FOLLOW_52_in_inby3587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal748);

            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3589_static.FOLLOW_TOKEN_in_inby3589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN749);



            // AST REWRITE
            // elements: 52, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:7: 'IN-VIA' TOKEN
            {
            string_literal750=(Token)match(input,53,FOLLOW_53_in_invia3602_static.FOLLOW_53_in_invia3602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal750);

            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3604_static.FOLLOW_TOKEN_in_invia3604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN751);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:6: 'IN-OF' TOKEN
            {
            string_literal752=(Token)match(input,54,FOLLOW_54_in_inof3617_static.FOLLOW_54_in_inof3617); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal752);

            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3619_static.FOLLOW_TOKEN_in_inof3619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN753);



            // AST REWRITE
            // elements: TOKEN, 54
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:6: 'IN-ON' TOKEN
            {
            string_literal754=(Token)match(input,55,FOLLOW_55_in_inon3632_static.FOLLOW_55_in_inon3632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal754);

            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3634_static.FOLLOW_TOKEN_in_inon3634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN755);



            // AST REWRITE
            // elements: 55, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:7: 'IN-FOR' TOKEN
            {
            string_literal756=(Token)match(input,56,FOLLOW_56_in_infor3647_static.FOLLOW_56_in_infor3647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal756);

            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3649_static.FOLLOW_TOKEN_in_infor3649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN757);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:8: 'IN-FROM' TOKEN
            {
            string_literal758=(Token)match(input,57,FOLLOW_57_in_infrom3662_static.FOLLOW_57_in_infrom3662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal758);

            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3664_static.FOLLOW_TOKEN_in_infrom3664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN759);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:9: 'IN-UNDER' TOKEN
            {
            string_literal760=(Token)match(input,58,FOLLOW_58_in_inunder3677_static.FOLLOW_58_in_inunder3677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal760);

            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3679_static.FOLLOW_TOKEN_in_inunder3679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN761);



            // AST REWRITE
            // elements: 58, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:8: 'IN-OVER' TOKEN
            {
            string_literal762=(Token)match(input,59,FOLLOW_59_in_inover3692_static.FOLLOW_59_in_inover3692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal762);

            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3694_static.FOLLOW_TOKEN_in_inover3694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN763);



            // AST REWRITE
            // elements: TOKEN, 59
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 452:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:7: 'IN-OFF' TOKEN
            {
            string_literal764=(Token)match(input,60,FOLLOW_60_in_inoff3707_static.FOLLOW_60_in_inoff3707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal764);

            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3709_static.FOLLOW_TOKEN_in_inoff3709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN765);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:9: 'NN-STATE' TOKEN
            {
            string_literal766=(Token)match(input,61,FOLLOW_61_in_nnstate3724_static.FOLLOW_61_in_nnstate3724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal766);

            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3726_static.FOLLOW_TOKEN_in_nnstate3726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN767);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 456:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:8: 'NN-TIME' TOKEN
            {
            string_literal768=(Token)match(input,62,FOLLOW_62_in_nntime3739_static.FOLLOW_62_in_nntime3739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal768);

            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3741_static.FOLLOW_TOKEN_in_nntime3741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN769);



            // AST REWRITE
            // elements: 62, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:8: 'NN-MASS' TOKEN
            {
            string_literal770=(Token)match(input,63,FOLLOW_63_in_nnmass3754_static.FOLLOW_63_in_nnmass3754); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal770);

            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3756_static.FOLLOW_TOKEN_in_nnmass3756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN771);



            // AST REWRITE
            // elements: 63, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 458:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:10: 'NN-AMOUNT' TOKEN
            {
            string_literal772=(Token)match(input,64,FOLLOW_64_in_nnamount3769_static.FOLLOW_64_in_nnamount3769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal772);

            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3771_static.FOLLOW_TOKEN_in_nnamount3771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN773);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 459:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:9: 'NN-MOLAR' TOKEN
            {
            string_literal774=(Token)match(input,65,FOLLOW_65_in_nnmolar3784_static.FOLLOW_65_in_nnmolar3784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal774);

            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3786_static.FOLLOW_TOKEN_in_nnmolar3786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN775);



            // AST REWRITE
            // elements: 65, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal776=(Token)match(input,66,FOLLOW_66_in_nnatmosphere3799_static.FOLLOW_66_in_nnatmosphere3799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal776);

            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3801_static.FOLLOW_TOKEN_in_nnatmosphere3801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN777);



            // AST REWRITE
            // elements: TOKEN, 66
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:6: 'NN-EQ' TOKEN
            {
            string_literal778=(Token)match(input,67,FOLLOW_67_in_nneq3814_static.FOLLOW_67_in_nneq3814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal778);

            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3816_static.FOLLOW_TOKEN_in_nneq3816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN779);



            // AST REWRITE
            // elements: 67, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:7: 'NN-VOL' TOKEN
            {
            string_literal780=(Token)match(input,68,FOLLOW_68_in_nnvol3829_static.FOLLOW_68_in_nnvol3829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal780);

            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3831_static.FOLLOW_TOKEN_in_nnvol3831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN781);



            // AST REWRITE
            // elements: 68, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal782=(Token)match(input,69,FOLLOW_69_in_nnchementity3844_static.FOLLOW_69_in_nnchementity3844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal782);

            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3846_static.FOLLOW_TOKEN_in_nnchementity3846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN783);



            // AST REWRITE
            // elements: TOKEN, 69
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:8: 'NN-TEMP' TOKEN
            {
            string_literal784=(Token)match(input,70,FOLLOW_70_in_nntemp3859_static.FOLLOW_70_in_nntemp3859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal784);

            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3861_static.FOLLOW_TOKEN_in_nntemp3861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN785);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:6: 'NN-PH' TOKEN
            {
            string_literal786=(Token)match(input,71,FOLLOW_71_in_nnph3874_static.FOLLOW_71_in_nnph3874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal786);

            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3876_static.FOLLOW_TOKEN_in_nnph3876); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN787);



            // AST REWRITE
            // elements: 71, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:9: 'NN-FLASH' TOKEN
            {
            string_literal788=(Token)match(input,72,FOLLOW_72_in_nnflash3889_static.FOLLOW_72_in_nnflash3889); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal788);

            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3891_static.FOLLOW_TOKEN_in_nnflash3891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN789);



            // AST REWRITE
            // elements: TOKEN, 72
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:11: 'NN-GENERAL' TOKEN
            {
            string_literal790=(Token)match(input,73,FOLLOW_73_in_nngeneral3904_static.FOLLOW_73_in_nngeneral3904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal790);

            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3906_static.FOLLOW_TOKEN_in_nngeneral3906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN791);



            // AST REWRITE
            // elements: TOKEN, 73
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:10: 'NN-METHOD' TOKEN
            {
            string_literal792=(Token)match(input,74,FOLLOW_74_in_nnmethod3919_static.FOLLOW_74_in_nnmethod3919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal792);

            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3921_static.FOLLOW_TOKEN_in_nnmethod3921); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN793);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:12: 'NN-PRESSURE' TOKEN
            {
            string_literal794=(Token)match(input,75,FOLLOW_75_in_nnpressure3934_static.FOLLOW_75_in_nnpressure3934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal794);

            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3936_static.FOLLOW_TOKEN_in_nnpressure3936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN795);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 470:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:10: 'NN-COLUMN' TOKEN
            {
            string_literal796=(Token)match(input,76,FOLLOW_76_in_nncolumn3949_static.FOLLOW_76_in_nncolumn3949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal796);

            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3951_static.FOLLOW_TOKEN_in_nncolumn3951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN797);



            // AST REWRITE
            // elements: 76, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal798=(Token)match(input,77,FOLLOW_77_in_nnchromatography3964_static.FOLLOW_77_in_nnchromatography3964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal798);

            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3966_static.FOLLOW_TOKEN_in_nnchromatography3966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN799);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:10: 'NN-VACUUM' TOKEN
            {
            string_literal800=(Token)match(input,78,FOLLOW_78_in_nnvacuum3979_static.FOLLOW_78_in_nnvacuum3979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal800);

            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3981_static.FOLLOW_TOKEN_in_nnvacuum3981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN801);



            // AST REWRITE
            // elements: TOKEN, 78
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:9: 'NN-CYCLE' TOKEN
            {
            string_literal802=(Token)match(input,79,FOLLOW_79_in_nncycle3994_static.FOLLOW_79_in_nncycle3994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal802);

            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3996_static.FOLLOW_TOKEN_in_nncycle3996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN803);



            // AST REWRITE
            // elements: 79, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 474:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:9: 'NN-TIMES' TOKEN
            {
            string_literal804=(Token)match(input,80,FOLLOW_80_in_nntimes4009_static.FOLLOW_80_in_nntimes4009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal804);

            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes4011_static.FOLLOW_TOKEN_in_nntimes4011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN805);



            // AST REWRITE
            // elements: TOKEN, 80
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal806=(Token)match(input,81,FOLLOW_81_in_nnexample4024_static.FOLLOW_81_in_nnexample4024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal806);

            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample4026_static.FOLLOW_TOKEN_in_nnexample4026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN807);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:9: 'OSCAR-CM' TOKEN
            {
            string_literal808=(Token)match(input,82,FOLLOW_82_in_oscarcm4041_static.FOLLOW_82_in_oscarcm4041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal808);

            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm4043_static.FOLLOW_TOKEN_in_oscarcm4043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN809);



            // AST REWRITE
            // elements: 82, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:7: 'VB-USE' TOKEN
            {
            string_literal810=(Token)match(input,83,FOLLOW_83_in_vbuse4058_static.FOLLOW_83_in_vbuse4058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal810);

            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse4060_static.FOLLOW_TOKEN_in_vbuse4060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN811);



            // AST REWRITE
            // elements: TOKEN, 83
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:10: 'VB-CHANGE' TOKEN
            {
            string_literal812=(Token)match(input,84,FOLLOW_84_in_vbchange4073_static.FOLLOW_84_in_vbchange4073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal812);

            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange4075_static.FOLLOW_TOKEN_in_vbchange4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN813);



            // AST REWRITE
            // elements: 84, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal814=(Token)match(input,85,FOLLOW_85_in_vbsubmerge4088_static.FOLLOW_85_in_vbsubmerge4088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal814);

            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge4090_static.FOLLOW_TOKEN_in_vbsubmerge4090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN815);



            // AST REWRITE
            // elements: 85, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:11: 'VB-SUBJECT' TOKEN
            {
            string_literal816=(Token)match(input,86,FOLLOW_86_in_vbsubject4103_static.FOLLOW_86_in_vbsubject4103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal816);

            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject4105_static.FOLLOW_TOKEN_in_vbsubject4105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN817);



            // AST REWRITE
            // elements: TOKEN, 86
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 485:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:7: 'NN-ADD' TOKEN
            {
            string_literal818=(Token)match(input,87,FOLLOW_87_in_nnadd4120_static.FOLLOW_87_in_nnadd4120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal818);

            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd4122_static.FOLLOW_TOKEN_in_nnadd4122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN819);



            // AST REWRITE
            // elements: TOKEN, 87
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 488:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:11: 'NN-MIXTURE' TOKEN
            {
            string_literal820=(Token)match(input,88,FOLLOW_88_in_nnmixture4135_static.FOLLOW_88_in_nnmixture4135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal820);

            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture4137_static.FOLLOW_TOKEN_in_nnmixture4137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN821);



            // AST REWRITE
            // elements: 88, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:10: 'VB-DILUTE' TOKEN
            {
            string_literal822=(Token)match(input,89,FOLLOW_89_in_vbdilute4150_static.FOLLOW_89_in_vbdilute4150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal822);

            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute4152_static.FOLLOW_TOKEN_in_vbdilute4152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN823);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:7: 'VB-ADD' TOKEN
            {
            string_literal824=(Token)match(input,90,FOLLOW_90_in_vbadd4165_static.FOLLOW_90_in_vbadd4165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal824);

            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd4167_static.FOLLOW_TOKEN_in_vbadd4167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN825);



            // AST REWRITE
            // elements: TOKEN, 90
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:10: 'VB-CHARGE' TOKEN
            {
            string_literal826=(Token)match(input,91,FOLLOW_91_in_vbcharge4180_static.FOLLOW_91_in_vbcharge4180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal826);

            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge4182_static.FOLLOW_TOKEN_in_vbcharge4182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN827);



            // AST REWRITE
            // elements: TOKEN, 91
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 492:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:11: 'VB-CONTAIN' TOKEN
            {
            string_literal828=(Token)match(input,92,FOLLOW_92_in_vbcontain4195_static.FOLLOW_92_in_vbcontain4195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal828);

            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain4197_static.FOLLOW_TOKEN_in_vbcontain4197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN829);



            // AST REWRITE
            // elements: TOKEN, 92
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:8: 'VB-DROP' TOKEN
            {
            string_literal830=(Token)match(input,93,FOLLOW_93_in_vbdrop4210_static.FOLLOW_93_in_vbdrop4210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal830);

            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop4212_static.FOLLOW_TOKEN_in_vbdrop4212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN831);



            // AST REWRITE
            // elements: 93, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:8: 'VB-FILL' TOKEN
            {
            string_literal832=(Token)match(input,94,FOLLOW_94_in_vbfill4225_static.FOLLOW_94_in_vbfill4225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal832);

            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill4227_static.FOLLOW_TOKEN_in_vbfill4227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN833);



            // AST REWRITE
            // elements: TOKEN, 94
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:11: 'VB-SUSPEND' TOKEN
            {
            string_literal834=(Token)match(input,95,FOLLOW_95_in_vbsuspend4240_static.FOLLOW_95_in_vbsuspend4240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal834);

            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend4242_static.FOLLOW_TOKEN_in_vbsuspend4242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN835);



            // AST REWRITE
            // elements: 95, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:9: 'VB-TREAT' TOKEN
            {
            string_literal836=(Token)match(input,96,FOLLOW_96_in_vbtreat4255_static.FOLLOW_96_in_vbtreat4255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal836);

            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat4257_static.FOLLOW_TOKEN_in_vbtreat4257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN837);



            // AST REWRITE
            // elements: TOKEN, 96
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 497:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:13: 'VB-APPARATUS' TOKEN
            {
            string_literal838=(Token)match(input,97,FOLLOW_97_in_vbapparatus4272_static.FOLLOW_97_in_vbapparatus4272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal838);

            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus4274_static.FOLLOW_TOKEN_in_vbapparatus4274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN839);



            // AST REWRITE
            // elements: 97, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:13: 'NN-APPARATUS' TOKEN
            {
            string_literal840=(Token)match(input,98,FOLLOW_98_in_nnapparatus4287_static.FOLLOW_98_in_nnapparatus4287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal840);

            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4289_static.FOLLOW_TOKEN_in_nnapparatus4289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN841);



            // AST REWRITE
            // elements: 98, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal842=(Token)match(input,99,FOLLOW_99_in_vbconcentrate4304_static.FOLLOW_99_in_vbconcentrate4304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal842);

            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4306_static.FOLLOW_TOKEN_in_vbconcentrate4306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN843);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal844=(Token)match(input,100,FOLLOW_100_in_nnconcentrate4319_static.FOLLOW_100_in_nnconcentrate4319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal844);

            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4321_static.FOLLOW_TOKEN_in_nnconcentrate4321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN845);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 505:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:8: 'VB-COOL' TOKEN
            {
            string_literal846=(Token)match(input,101,FOLLOW_101_in_vbcool4336_static.FOLLOW_101_in_vbcool4336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal846);

            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4338_static.FOLLOW_TOKEN_in_vbcool4338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN847);



            // AST REWRITE
            // elements: 101, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:10: 'VB-DEGASS' TOKEN
            {
            string_literal848=(Token)match(input,102,FOLLOW_102_in_vbdegass4353_static.FOLLOW_102_in_vbdegass4353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal848);

            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4355_static.FOLLOW_TOKEN_in_vbdegass4355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN849);



            // AST REWRITE
            // elements: 102, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal850=(Token)match(input,103,FOLLOW_103_in_vbdissolve4370_static.FOLLOW_103_in_vbdissolve4370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal850);

            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4372_static.FOLLOW_TOKEN_in_vbdissolve4372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN851);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:7: 'VB-DRY' TOKEN
            {
            string_literal852=(Token)match(input,104,FOLLOW_104_in_vbdry4387_static.FOLLOW_104_in_vbdry4387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal852);

            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4389_static.FOLLOW_TOKEN_in_vbdry4389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN853);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:7: 'NN-DRY' TOKEN
            {
            string_literal854=(Token)match(input,105,FOLLOW_105_in_nndry4402_static.FOLLOW_105_in_nndry4402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal854);

            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4404_static.FOLLOW_TOKEN_in_nndry4404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN855);



            // AST REWRITE
            // elements: 105, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 518:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:11: 'VB-EXTRACT' TOKEN
            {
            string_literal856=(Token)match(input,106,FOLLOW_106_in_vbextract4419_static.FOLLOW_106_in_vbextract4419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal856);

            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4421_static.FOLLOW_TOKEN_in_vbextract4421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN857);



            // AST REWRITE
            // elements: 106, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 521:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:11: 'NN-EXTRACT' TOKEN
            {
            string_literal858=(Token)match(input,107,FOLLOW_107_in_nnextract4434_static.FOLLOW_107_in_nnextract4434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal858);

            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4436_static.FOLLOW_TOKEN_in_nnextract4436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN859);



            // AST REWRITE
            // elements: 107, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 522:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:10: 'VB-FILTER' TOKEN
            {
            string_literal860=(Token)match(input,108,FOLLOW_108_in_vbfilter4451_static.FOLLOW_108_in_vbfilter4451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal860);

            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4453_static.FOLLOW_TOKEN_in_vbfilter4453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN861);



            // AST REWRITE
            // elements: 108, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:10: 'NN-FILTER' TOKEN
            {
            string_literal862=(Token)match(input,109,FOLLOW_109_in_nnfilter4466_static.FOLLOW_109_in_nnfilter4466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal862);

            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4468_static.FOLLOW_TOKEN_in_nnfilter4468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN863);



            // AST REWRITE
            // elements: TOKEN, 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:8: 'VB-HEAT' TOKEN
            {
            string_literal864=(Token)match(input,110,FOLLOW_110_in_vbheat4483_static.FOLLOW_110_in_vbheat4483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal864);

            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4485_static.FOLLOW_TOKEN_in_vbheat4485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN865);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:12: 'VB-INCREASE' TOKEN
            {
            string_literal866=(Token)match(input,111,FOLLOW_111_in_vbincrease4498_static.FOLLOW_111_in_vbincrease4498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal866);

            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4500_static.FOLLOW_TOKEN_in_vbincrease4500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN867);



            // AST REWRITE
            // elements: 111, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:11: 'VB-IMMERSE' TOKEN
            {
            string_literal868=(Token)match(input,112,FOLLOW_112_in_vbimmerse4515_static.FOLLOW_112_in_vbimmerse4515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal868);

            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4517_static.FOLLOW_TOKEN_in_vbimmerse4517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN869);



            // AST REWRITE
            // elements: TOKEN, 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:13: 'VB-PARTITION' TOKEN
            {
            string_literal870=(Token)match(input,113,FOLLOW_113_in_vbpartition4532_static.FOLLOW_113_in_vbpartition4532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal870);

            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4534_static.FOLLOW_TOKEN_in_vbpartition4534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN871);



            // AST REWRITE
            // elements: 113, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal872=(Token)match(input,114,FOLLOW_114_in_vbprecipitate4549_static.FOLLOW_114_in_vbprecipitate4549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal872);

            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4551_static.FOLLOW_TOKEN_in_vbprecipitate4551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN873);



            // AST REWRITE
            // elements: TOKEN, 114
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 539:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal874=(Token)match(input,115,FOLLOW_115_in_nnprecipitate4564_static.FOLLOW_115_in_nnprecipitate4564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal874);

            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4566_static.FOLLOW_TOKEN_in_nnprecipitate4566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN875);



            // AST REWRITE
            // elements: TOKEN, 115
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:10: 'VB-PURIFY' TOKEN
            {
            string_literal876=(Token)match(input,116,FOLLOW_116_in_vbpurify4581_static.FOLLOW_116_in_vbpurify4581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal876);

            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4583_static.FOLLOW_TOKEN_in_vbpurify4583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN877);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:10: 'NN-PURIFY' TOKEN
            {
            string_literal878=(Token)match(input,117,FOLLOW_117_in_nnpurify4596_static.FOLLOW_117_in_nnpurify4596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal878);

            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4598_static.FOLLOW_TOKEN_in_nnpurify4598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN879);



            // AST REWRITE
            // elements: 117, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:10: 'VB-QUENCH' TOKEN
            {
            string_literal880=(Token)match(input,118,FOLLOW_118_in_vbquench4613_static.FOLLOW_118_in_vbquench4613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal880);

            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4615_static.FOLLOW_TOKEN_in_vbquench4615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN881);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:11: 'VB-RECOVER' TOKEN
            {
            string_literal882=(Token)match(input,119,FOLLOW_119_in_vbrecover4630_static.FOLLOW_119_in_vbrecover4630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal882);

            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4632_static.FOLLOW_TOKEN_in_vbrecover4632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN883);



            // AST REWRITE
            // elements: 119, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 550:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:553:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:553:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:553:10: 'VB-REMOVE' TOKEN
            {
            string_literal884=(Token)match(input,120,FOLLOW_120_in_vbremove4647_static.FOLLOW_120_in_vbremove4647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal884);

            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4649_static.FOLLOW_TOKEN_in_vbremove4649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN885);



            // AST REWRITE
            // elements: 120, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 553:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:553:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:10: 'NN-REMOVE' TOKEN
            {
            string_literal886=(Token)match(input,121,FOLLOW_121_in_nnremove4662_static.FOLLOW_121_in_nnremove4662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal886);

            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4664_static.FOLLOW_TOKEN_in_nnremove4664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN887);



            // AST REWRITE
            // elements: TOKEN, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:8: 'VB-STIR' TOKEN
            {
            string_literal888=(Token)match(input,122,FOLLOW_122_in_vbstir4679_static.FOLLOW_122_in_vbstir4679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal888);

            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4681_static.FOLLOW_TOKEN_in_vbstir4681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN889);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 557:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal890=(Token)match(input,123,FOLLOW_123_in_vbsynthesize4696_static.FOLLOW_123_in_vbsynthesize4696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal890);

            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4698_static.FOLLOW_TOKEN_in_vbsynthesize4698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN891);



            // AST REWRITE
            // elements: TOKEN, 123
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal892=(Token)match(input,124,FOLLOW_124_in_nnsynthesize4711_static.FOLLOW_124_in_nnsynthesize4711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal892);

            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4713_static.FOLLOW_TOKEN_in_nnsynthesize4713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN893);



            // AST REWRITE
            // elements: TOKEN, 124
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:8: 'VB-WAIT' TOKEN
            {
            string_literal894=(Token)match(input,125,FOLLOW_125_in_vbwait4728_static.FOLLOW_125_in_vbwait4728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal894);

            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4730_static.FOLLOW_TOKEN_in_vbwait4730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN895);



            // AST REWRITE
            // elements: TOKEN, 125
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:8: 'VB-WASH' TOKEN
            {
            string_literal896=(Token)match(input,126,FOLLOW_126_in_vbwash4745_static.FOLLOW_126_in_vbwash4745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal896);

            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4747_static.FOLLOW_TOKEN_in_vbwash4747); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN897);



            // AST REWRITE
            // elements: TOKEN, 126
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 567:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:9: 'VB-YIELD' TOKEN
            {
            string_literal898=(Token)match(input,127,FOLLOW_127_in_vbyield4762_static.FOLLOW_127_in_vbyield4762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal898);

            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4764_static.FOLLOW_TOKEN_in_vbyield4764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN899);



            // AST REWRITE
            // elements: TOKEN, 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 570:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:9: 'NN-YIELD' TOKEN
            {
            string_literal900=(Token)match(input,128,FOLLOW_128_in_nnyield4779_static.FOLLOW_128_in_nnyield4779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal900);

            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4781_static.FOLLOW_TOKEN_in_nnyield4781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN901);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:8: 'RB-CONJ' TOKEN
            {
            string_literal902=(Token)match(input,129,FOLLOW_129_in_rbconj4797_static.FOLLOW_129_in_rbconj4797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal902);

            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4799_static.FOLLOW_TOKEN_in_rbconj4799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN903);



            // AST REWRITE
            // elements: TOKEN, 129
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 577:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:7: 'COLON' TOKEN
            {
            string_literal904=(Token)match(input,130,FOLLOW_130_in_colon4812_static.FOLLOW_130_in_colon4812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal904);

            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4814_static.FOLLOW_TOKEN_in_colon4814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN905);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 578:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal906=null;
        Token TOKEN907=null;

        Object string_literal906_tree=null;
        Object TOKEN907_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:7: 'COMMA' TOKEN
            {
            string_literal906=(Token)match(input,131,FOLLOW_131_in_comma4827_static.FOLLOW_131_in_comma4827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal906);

            TOKEN907=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4829_static.FOLLOW_TOKEN_in_comma4829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN907);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:580:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal908=null;
        Token TOKEN909=null;

        Object string_literal908_tree=null;
        Object TOKEN909_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:580:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:580:7: 'APOST' TOKEN
            {
            string_literal908=(Token)match(input,132,FOLLOW_132_in_apost4842_static.FOLLOW_132_in_apost4842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal908);

            TOKEN909=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4844_static.FOLLOW_TOKEN_in_apost4844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN909);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 580:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:580:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal910=null;
        Token TOKEN911=null;

        Object string_literal910_tree=null;
        Object TOKEN911_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:5: 'NEG' TOKEN
            {
            string_literal910=(Token)match(input,133,FOLLOW_133_in_neg4857_static.FOLLOW_133_in_neg4857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal910);

            TOKEN911=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4859_static.FOLLOW_TOKEN_in_neg4859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN911);



            // AST REWRITE
            // elements: TOKEN, 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 581:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal912=null;
        Token TOKEN913=null;

        Object string_literal912_tree=null;
        Object TOKEN913_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:6: 'DASH' TOKEN
            {
            string_literal912=(Token)match(input,134,FOLLOW_134_in_dash4872_static.FOLLOW_134_in_dash4872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal912);

            TOKEN913=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4874_static.FOLLOW_TOKEN_in_dash4874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN913);



            // AST REWRITE
            // elements: 134, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 582:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:583:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal914=null;
        Token TOKEN915=null;

        Object string_literal914_tree=null;
        Object TOKEN915_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:583:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:583:6: 'STOP' TOKEN
            {
            string_literal914=(Token)match(input,135,FOLLOW_135_in_stop4887_static.FOLLOW_135_in_stop4887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal914);

            TOKEN915=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4889_static.FOLLOW_TOKEN_in_stop4889); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN915);



            // AST REWRITE
            // elements: 135, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 583:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:583:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class percentsign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percentsign"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:1: percentsign : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.percentsign_return percentsign() throws RecognitionException {
        ChemicalChunkerParser.percentsign_return retval = new ChemicalChunkerParser.percentsign_return();
        retval.start = input.LT(1);
        int percentsign_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal916=null;
        Token TOKEN917=null;

        Object string_literal916_tree=null;
        Object TOKEN917_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:12: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:13: 'NN-PERCENT' TOKEN
            {
            string_literal916=(Token)match(input,136,FOLLOW_136_in_percentsign4902_static.FOLLOW_136_in_percentsign4902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal916);

            TOKEN917=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_percentsign4904_static.FOLLOW_TOKEN_in_percentsign4904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN917);



            // AST REWRITE
            // elements: 136, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 584:32: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:35: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, percentsign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percentsign"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal918=null;
        Token TOKEN919=null;

        Object string_literal918_tree=null;
        Object TOKEN919_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:6: 'LSQB' TOKEN
            {
            string_literal918=(Token)match(input,137,FOLLOW_137_in_lsqb4917_static.FOLLOW_137_in_lsqb4917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal918);

            TOKEN919=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4919_static.FOLLOW_TOKEN_in_lsqb4919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN919);



            // AST REWRITE
            // elements: TOKEN, 137
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal920=null;
        Token TOKEN921=null;

        Object string_literal920_tree=null;
        Object TOKEN921_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:6: 'RSQB' TOKEN
            {
            string_literal920=(Token)match(input,138,FOLLOW_138_in_rsqb4932_static.FOLLOW_138_in_rsqb4932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal920);

            TOKEN921=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4934_static.FOLLOW_TOKEN_in_rsqb4934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN921);



            // AST REWRITE
            // elements: 138, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 586:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal922=null;
        Token TOKEN923=null;

        Object string_literal922_tree=null;
        Object TOKEN923_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal922=(Token)match(input,139,FOLLOW_139_in_nnidentifier4948_static.FOLLOW_139_in_nnidentifier4948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal922);

            TOKEN923=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier4950_static.FOLLOW_TOKEN_in_nnidentifier4950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN923);



            // AST REWRITE
            // elements: 139, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal924=null;
        Token TOKEN925=null;

        Object string_literal924_tree=null;
        Object TOKEN925_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:7: 'DT-THE' TOKEN
            {
            string_literal924=(Token)match(input,140,FOLLOW_140_in_dtTHE4965_static.FOLLOW_140_in_dtTHE4965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal924);

            TOKEN925=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4967_static.FOLLOW_TOKEN_in_dtTHE4967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN925);



            // AST REWRITE
            // elements: TOKEN, 140
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal926=null;
        Token TOKEN927=null;

        Object string_literal926_tree=null;
        Object TOKEN927_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:5: '-LRB-' TOKEN
            {
            string_literal926=(Token)match(input,141,FOLLOW_141_in_lrb4981_static.FOLLOW_141_in_lrb4981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal926);

            TOKEN927=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4983_static.FOLLOW_TOKEN_in_lrb4983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN927);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal928=null;
        Token TOKEN929=null;

        Object string_literal928_tree=null;
        Object TOKEN929_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:5: '-RRB-' TOKEN
            {
            string_literal928=(Token)match(input,142,FOLLOW_142_in_rrb4996_static.FOLLOW_142_in_rrb4996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal928);

            TOKEN929=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4998_static.FOLLOW_TOKEN_in_rrb4998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN929);



            // AST REWRITE
            // elements: TOKEN, 142
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 594:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:599:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal930=null;
        Token TOKEN931=null;

        Object string_literal930_tree=null;
        Object TOKEN931_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:599:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:599:4: 'CC' TOKEN
            {
            string_literal930=(Token)match(input,143,FOLLOW_143_in_cc5015_static.FOLLOW_143_in_cc5015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal930);

            TOKEN931=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc5017_static.FOLLOW_TOKEN_in_cc5017); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN931);



            // AST REWRITE
            // elements: 143, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 599:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:599:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:602:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal932=null;
        Token TOKEN933=null;

        Object string_literal932_tree=null;
        Object TOKEN933_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:602:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:602:4: 'CD' TOKEN
            {
            string_literal932=(Token)match(input,144,FOLLOW_144_in_cd5032_static.FOLLOW_144_in_cd5032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal932);

            TOKEN933=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd5034_static.FOLLOW_TOKEN_in_cd5034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN933);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 602:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:602:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal934=null;
        Token TOKEN935=null;

        Object string_literal934_tree=null;
        Object TOKEN935_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:4: 'DT' TOKEN
            {
            string_literal934=(Token)match(input,145,FOLLOW_145_in_dt5049_static.FOLLOW_145_in_dt5049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal934);

            TOKEN935=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt5051_static.FOLLOW_TOKEN_in_dt5051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN935);



            // AST REWRITE
            // elements: TOKEN, 145
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal936=null;
        Token TOKEN937=null;

        Object string_literal936_tree=null;
        Object TOKEN937_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:4: 'EX' TOKEN
            {
            string_literal936=(Token)match(input,146,FOLLOW_146_in_ex5066_static.FOLLOW_146_in_ex5066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal936);

            TOKEN937=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex5068_static.FOLLOW_TOKEN_in_ex5068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN937);



            // AST REWRITE
            // elements: TOKEN, 146
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:611:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal938=null;
        Token TOKEN939=null;

        Object string_literal938_tree=null;
        Object TOKEN939_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:611:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:611:4: 'FW' TOKEN
            {
            string_literal938=(Token)match(input,147,FOLLOW_147_in_fw5083_static.FOLLOW_147_in_fw5083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal938);

            TOKEN939=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw5085_static.FOLLOW_TOKEN_in_fw5085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN939);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 611:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:611:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:614:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal940=null;
        Token TOKEN941=null;

        Object string_literal940_tree=null;
        Object TOKEN941_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:614:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:614:4: 'IN' TOKEN
            {
            string_literal940=(Token)match(input,148,FOLLOW_148_in_in5100_static.FOLLOW_148_in_in5100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal940);

            TOKEN941=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in5102_static.FOLLOW_TOKEN_in_in5102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN941);



            // AST REWRITE
            // elements: TOKEN, 148
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 614:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:614:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:617:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal942=null;
        Token TOKEN943=null;

        Object string_literal942_tree=null;
        Object TOKEN943_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:617:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:617:4: 'JJ' TOKEN
            {
            string_literal942=(Token)match(input,149,FOLLOW_149_in_jj5117_static.FOLLOW_149_in_jj5117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal942);

            TOKEN943=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj5119_static.FOLLOW_TOKEN_in_jj5119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN943);



            // AST REWRITE
            // elements: TOKEN, 149
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 617:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:617:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:620:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal944=null;
        Token TOKEN945=null;

        Object string_literal944_tree=null;
        Object TOKEN945_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:620:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:620:5: 'JJR' TOKEN
            {
            string_literal944=(Token)match(input,150,FOLLOW_150_in_jjr5134_static.FOLLOW_150_in_jjr5134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal944);

            TOKEN945=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr5136_static.FOLLOW_TOKEN_in_jjr5136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN945);



            // AST REWRITE
            // elements: TOKEN, 150
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:620:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:623:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal946=null;
        Token TOKEN947=null;

        Object string_literal946_tree=null;
        Object TOKEN947_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:623:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:623:5: 'JJS' TOKEN
            {
            string_literal946=(Token)match(input,151,FOLLOW_151_in_jjs5151_static.FOLLOW_151_in_jjs5151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal946);

            TOKEN947=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs5153_static.FOLLOW_TOKEN_in_jjs5153); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN947);



            // AST REWRITE
            // elements: TOKEN, 151
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 623:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:623:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:626:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal948=null;
        Token TOKEN949=null;

        Object string_literal948_tree=null;
        Object TOKEN949_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:626:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:626:4: 'LS' TOKEN
            {
            string_literal948=(Token)match(input,152,FOLLOW_152_in_ls5168_static.FOLLOW_152_in_ls5168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal948);

            TOKEN949=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls5170_static.FOLLOW_TOKEN_in_ls5170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN949);



            // AST REWRITE
            // elements: TOKEN, 152
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 626:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:626:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:629:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal950=null;
        Token TOKEN951=null;

        Object string_literal950_tree=null;
        Object TOKEN951_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:629:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:629:4: 'MD' TOKEN
            {
            string_literal950=(Token)match(input,153,FOLLOW_153_in_md5185_static.FOLLOW_153_in_md5185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal950);

            TOKEN951=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5187_static.FOLLOW_TOKEN_in_md5187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN951);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 629:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:629:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:632:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal952=null;
        Token TOKEN953=null;

        Object string_literal952_tree=null;
        Object TOKEN953_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:632:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:632:4: 'NN' TOKEN
            {
            string_literal952=(Token)match(input,154,FOLLOW_154_in_nn5202_static.FOLLOW_154_in_nn5202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal952);

            TOKEN953=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5204_static.FOLLOW_TOKEN_in_nn5204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN953);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 632:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:632:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:635:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal954=null;
        Token TOKEN955=null;

        Object string_literal954_tree=null;
        Object TOKEN955_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:635:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:635:5: 'NNS' TOKEN
            {
            string_literal954=(Token)match(input,155,FOLLOW_155_in_nns5219_static.FOLLOW_155_in_nns5219); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal954);

            TOKEN955=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5221_static.FOLLOW_TOKEN_in_nns5221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN955);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 635:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:635:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:638:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal956=null;
        Token TOKEN957=null;

        Object string_literal956_tree=null;
        Object TOKEN957_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:638:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:638:5: 'NNP' TOKEN
            {
            string_literal956=(Token)match(input,156,FOLLOW_156_in_nnp5236_static.FOLLOW_156_in_nnp5236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal956);

            TOKEN957=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5238_static.FOLLOW_TOKEN_in_nnp5238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN957);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 638:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:638:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:641:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal958=null;
        Token TOKEN959=null;

        Object string_literal958_tree=null;
        Object TOKEN959_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:641:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:641:6: 'NNPS' TOKEN
            {
            string_literal958=(Token)match(input,157,FOLLOW_157_in_nnps5253_static.FOLLOW_157_in_nnps5253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal958);

            TOKEN959=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps5255_static.FOLLOW_TOKEN_in_nnps5255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN959);



            // AST REWRITE
            // elements: TOKEN, 157
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 641:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:641:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:644:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal960=null;
        Token TOKEN961=null;

        Object string_literal960_tree=null;
        Object TOKEN961_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:644:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:644:5: 'PDT' TOKEN
            {
            string_literal960=(Token)match(input,158,FOLLOW_158_in_pdt5270_static.FOLLOW_158_in_pdt5270); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal960);

            TOKEN961=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt5272_static.FOLLOW_TOKEN_in_pdt5272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN961);



            // AST REWRITE
            // elements: TOKEN, 158
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 644:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:644:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:647:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal962=null;
        Token TOKEN963=null;

        Object string_literal962_tree=null;
        Object TOKEN963_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:647:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:647:5: 'POS' TOKEN
            {
            string_literal962=(Token)match(input,159,FOLLOW_159_in_pos5287_static.FOLLOW_159_in_pos5287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal962);

            TOKEN963=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos5289_static.FOLLOW_TOKEN_in_pos5289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN963);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 647:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:647:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:650:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal964=null;
        Token TOKEN965=null;

        Object string_literal964_tree=null;
        Object TOKEN965_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:650:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:650:5: 'PRP' TOKEN
            {
            string_literal964=(Token)match(input,160,FOLLOW_160_in_prp5304_static.FOLLOW_160_in_prp5304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal964);

            TOKEN965=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5306_static.FOLLOW_TOKEN_in_prp5306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN965);



            // AST REWRITE
            // elements: 160, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 650:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:650:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:653:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal966=null;
        Token TOKEN967=null;

        Object string_literal966_tree=null;
        Object TOKEN967_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:653:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:653:10: 'PRP$' TOKEN
            {
            string_literal966=(Token)match(input,161,FOLLOW_161_in_prp_poss5321_static.FOLLOW_161_in_prp_poss5321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal966);

            TOKEN967=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5323_static.FOLLOW_TOKEN_in_prp_poss5323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN967);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 653:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:653:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:656:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal968=null;
        Token TOKEN969=null;

        Object string_literal968_tree=null;
        Object TOKEN969_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:656:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:656:4: 'RB' TOKEN
            {
            string_literal968=(Token)match(input,162,FOLLOW_162_in_rb5338_static.FOLLOW_162_in_rb5338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal968);

            TOKEN969=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5340_static.FOLLOW_TOKEN_in_rb5340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN969);



            // AST REWRITE
            // elements: TOKEN, 162
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:656:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:659:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal970=null;
        Token TOKEN971=null;

        Object string_literal970_tree=null;
        Object TOKEN971_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:659:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:659:5: 'RBR' TOKEN
            {
            string_literal970=(Token)match(input,163,FOLLOW_163_in_rbr5355_static.FOLLOW_163_in_rbr5355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal970);

            TOKEN971=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5357_static.FOLLOW_TOKEN_in_rbr5357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN971);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 659:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:659:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:662:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal972=null;
        Token TOKEN973=null;

        Object string_literal972_tree=null;
        Object TOKEN973_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:662:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:662:5: 'RBS' TOKEN
            {
            string_literal972=(Token)match(input,164,FOLLOW_164_in_rbs5372_static.FOLLOW_164_in_rbs5372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal972);

            TOKEN973=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5374_static.FOLLOW_TOKEN_in_rbs5374); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN973);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 662:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:662:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:665:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal974=null;
        Token TOKEN975=null;

        Object string_literal974_tree=null;
        Object TOKEN975_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:665:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:665:4: 'RP' TOKEN
            {
            string_literal974=(Token)match(input,165,FOLLOW_165_in_rp5389_static.FOLLOW_165_in_rp5389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal974);

            TOKEN975=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5391_static.FOLLOW_TOKEN_in_rp5391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN975);



            // AST REWRITE
            // elements: TOKEN, 165
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 665:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:665:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:668:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal976=null;
        Token TOKEN977=null;

        Object string_literal976_tree=null;
        Object TOKEN977_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:668:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:668:5: 'SYM' TOKEN
            {
            string_literal976=(Token)match(input,166,FOLLOW_166_in_sym5406_static.FOLLOW_166_in_sym5406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal976);

            TOKEN977=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5408_static.FOLLOW_TOKEN_in_sym5408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN977);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 668:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:668:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:671:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal978=null;
        Token TOKEN979=null;

        Object string_literal978_tree=null;
        Object TOKEN979_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:671:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:671:4: 'TO' TOKEN
            {
            string_literal978=(Token)match(input,167,FOLLOW_167_in_to5423_static.FOLLOW_167_in_to5423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal978);

            TOKEN979=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5425_static.FOLLOW_TOKEN_in_to5425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN979);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:671:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:674:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal980=null;
        Token TOKEN981=null;

        Object string_literal980_tree=null;
        Object TOKEN981_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:674:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:674:4: 'UH' TOKEN
            {
            string_literal980=(Token)match(input,168,FOLLOW_168_in_uh5440_static.FOLLOW_168_in_uh5440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal980);

            TOKEN981=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5442_static.FOLLOW_TOKEN_in_uh5442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN981);



            // AST REWRITE
            // elements: TOKEN, 168
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 674:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:674:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:677:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal982=null;
        Token TOKEN983=null;

        Object string_literal982_tree=null;
        Object TOKEN983_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:677:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:677:4: 'VB' TOKEN
            {
            string_literal982=(Token)match(input,169,FOLLOW_169_in_vb5457_static.FOLLOW_169_in_vb5457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal982);

            TOKEN983=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5459_static.FOLLOW_TOKEN_in_vb5459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN983);



            // AST REWRITE
            // elements: TOKEN, 169
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 677:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:677:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:680:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal984=null;
        Token TOKEN985=null;

        Object string_literal984_tree=null;
        Object TOKEN985_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:680:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:680:5: 'VBD' TOKEN
            {
            string_literal984=(Token)match(input,170,FOLLOW_170_in_vbd5474_static.FOLLOW_170_in_vbd5474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal984);

            TOKEN985=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5476_static.FOLLOW_TOKEN_in_vbd5476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN985);



            // AST REWRITE
            // elements: 170, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 680:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:680:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:683:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal986=null;
        Token TOKEN987=null;

        Object string_literal986_tree=null;
        Object TOKEN987_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:683:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:683:5: 'VBG' TOKEN
            {
            string_literal986=(Token)match(input,171,FOLLOW_171_in_vbg5491_static.FOLLOW_171_in_vbg5491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal986);

            TOKEN987=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5493_static.FOLLOW_TOKEN_in_vbg5493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN987);



            // AST REWRITE
            // elements: 171, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 683:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:683:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:686:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal988=null;
        Token TOKEN989=null;

        Object string_literal988_tree=null;
        Object TOKEN989_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:686:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:686:5: 'VBN' TOKEN
            {
            string_literal988=(Token)match(input,172,FOLLOW_172_in_vbn5508_static.FOLLOW_172_in_vbn5508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal988);

            TOKEN989=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5510_static.FOLLOW_TOKEN_in_vbn5510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN989);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 686:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:686:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:689:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal990=null;
        Token TOKEN991=null;

        Object string_literal990_tree=null;
        Object TOKEN991_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:689:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:689:5: 'VBP' TOKEN
            {
            string_literal990=(Token)match(input,173,FOLLOW_173_in_vbp5525_static.FOLLOW_173_in_vbp5525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal990);

            TOKEN991=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5527_static.FOLLOW_TOKEN_in_vbp5527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN991);



            // AST REWRITE
            // elements: 173, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 689:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:689:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:692:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal992=null;
        Token TOKEN993=null;

        Object string_literal992_tree=null;
        Object TOKEN993_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:692:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:692:5: 'VBZ' TOKEN
            {
            string_literal992=(Token)match(input,174,FOLLOW_174_in_vbz5542_static.FOLLOW_174_in_vbz5542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal992);

            TOKEN993=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5544_static.FOLLOW_TOKEN_in_vbz5544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN993);



            // AST REWRITE
            // elements: 174, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 692:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:692:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:695:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal994=null;
        Token TOKEN995=null;

        Object string_literal994_tree=null;
        Object TOKEN995_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:695:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:695:5: 'WDT' TOKEN
            {
            string_literal994=(Token)match(input,175,FOLLOW_175_in_wdt5559_static.FOLLOW_175_in_wdt5559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal994);

            TOKEN995=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5561_static.FOLLOW_TOKEN_in_wdt5561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN995);



            // AST REWRITE
            // elements: 175, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 695:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:695:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:698:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal996=null;
        Token TOKEN997=null;

        Object string_literal996_tree=null;
        Object TOKEN997_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:698:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:698:4: 'WP' TOKEN
            {
            string_literal996=(Token)match(input,176,FOLLOW_176_in_wp5576_static.FOLLOW_176_in_wp5576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal996);

            TOKEN997=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5578_static.FOLLOW_TOKEN_in_wp5578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN997);



            // AST REWRITE
            // elements: 176, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 698:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:698:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:701:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal998=null;
        Token TOKEN999=null;

        Object string_literal998_tree=null;
        Object TOKEN999_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:701:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:701:9: 'WP$' TOKEN
            {
            string_literal998=(Token)match(input,177,FOLLOW_177_in_wp_poss5593_static.FOLLOW_177_in_wp_poss5593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal998);

            TOKEN999=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5595_static.FOLLOW_TOKEN_in_wp_poss5595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN999);



            // AST REWRITE
            // elements: 177, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 701:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:701:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:704:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1000=null;
        Token TOKEN1001=null;

        Object string_literal1000_tree=null;
        Object TOKEN1001_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:704:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:704:5: 'WRB' TOKEN
            {
            string_literal1000=(Token)match(input,178,FOLLOW_178_in_wrb5610_static.FOLLOW_178_in_wrb5610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal1000);

            TOKEN1001=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5612_static.FOLLOW_TOKEN_in_wrb5612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1001);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 704:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:704:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:12: ( procedureNounPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:12: procedureNounPhrase
        {
        pushFollow(FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker219_static.FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker219);
        procedureNounPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:35: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:35: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker224_static.FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker224);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:53: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:53: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker226_static.FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker226);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker241_static.FOLLOW_nounphrase_in_synpred6_ChemicalChunker241);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker243_static.FOLLOW_verbphrase_in_synpred7_ChemicalChunker243);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker245_static.FOLLOW_prepphrase_in_synpred8_ChemicalChunker245);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker247_static.FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker247);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred10_ChemicalChunker252_static.FOLLOW_advAdj_in_synpred10_ChemicalChunker252);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred11_ChemicalChunker254_static.FOLLOW_colon_in_synpred11_ChemicalChunker254);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred12_ChemicalChunker259_static.FOLLOW_conjunction_in_synpred12_ChemicalChunker259);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred13_ChemicalChunker261_static.FOLLOW_rbconj_in_synpred13_ChemicalChunker261);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred14_ChemicalChunker263_static.FOLLOW_comma_in_synpred14_ChemicalChunker263);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred85_ChemicalChunker
    public final void synpred85_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:96: ( headingProcedureTerminators )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:96: headingProcedureTerminators
        {
        pushFollow(FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker478_static.FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker478);
        headingProcedureTerminators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker579_static.FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker579);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred93_ChemicalChunker610_static.FOLLOW_dt_in_synpred93_ChemicalChunker610);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred94_ChemicalChunker617_static.FOLLOW_conjunction_in_synpred94_ChemicalChunker617);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( ( conjunction )* nounphraseContent {...}?)
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )* nounphraseContent {...}?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )*
        loop202:
        do {
            int alt202=2;
            alt202 = dfa202.predict(input);
            switch (alt202) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred95_ChemicalChunker617_static.FOLLOW_conjunction_in_synpred95_ChemicalChunker617);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop202;
            }
        } while (true);

        pushFollow(FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker620_static.FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker620);
        nounphraseContent();

        state._fsp--;
        if (state.failed) return ;
        if ( !((!followedByVBDorVBZthenVBYIELDed(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred95_ChemicalChunker", "!followedByVBDorVBZthenVBYIELDed(input)");
        }

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:112: ( prepphraseOf )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:112: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker627_static.FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker627);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:126: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:126: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker630_static.FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker630);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred98_ChemicalChunker642_static.FOLLOW_advAdj_in_synpred98_ChemicalChunker642);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:14: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:14: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker647_static.FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker647);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:29: ( ratioOrBracketedRatio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:29: ratioOrBracketedRatio
        {
        pushFollow(FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker649_static.FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker649);
        ratioOrBracketedRatio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:51: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:51: noun
        {
        pushFollow(FOLLOW_noun_in_synpred101_ChemicalChunker651_static.FOLLOW_noun_in_synpred101_ChemicalChunker651);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:56: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:56: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred102_ChemicalChunker653_static.FOLLOW_numeric_in_synpred102_ChemicalChunker653);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:64: ( bracketedContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:64: bracketedContent
        {
        pushFollow(FOLLOW_bracketedContent_in_synpred103_ChemicalChunker655_static.FOLLOW_bracketedContent_in_synpred103_ChemicalChunker655);
        bracketedContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker667_static.FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker667);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred105_ChemicalChunker698_static.FOLLOW_adj_in_synpred105_ChemicalChunker698);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred108_ChemicalChunker710_static.FOLLOW_molecule_in_synpred108_ChemicalChunker710);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:72: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:72: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred109_ChemicalChunker719_static.FOLLOW_conjunction_in_synpred109_ChemicalChunker719);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker721_static.FOLLOW_molecule_in_synpred109_ChemicalChunker721);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred111_ChemicalChunker
    public final void synpred111_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:16: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:16: adj
        {
        pushFollow(FOLLOW_adj_in_synpred111_ChemicalChunker738_static.FOLLOW_adj_in_synpred111_ChemicalChunker738);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:27: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:27: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred113_ChemicalChunker745_static.FOLLOW_molecule_in_synpred113_ChemicalChunker745);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:28: to
        {
        pushFollow(FOLLOW_to_in_synpred115_ChemicalChunker778_static.FOLLOW_to_in_synpred115_ChemicalChunker778);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred116_ChemicalChunker781_static.FOLLOW_inAll_in_synpred116_ChemicalChunker781);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred122_ChemicalChunker800_static.FOLLOW_verb_in_synpred122_ChemicalChunker800);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:77: md
        {
        pushFollow(FOLLOW_md_in_synpred123_ChemicalChunker803_static.FOLLOW_md_in_synpred123_ChemicalChunker803);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred124_ChemicalChunker806_static.FOLLOW_adv_in_synpred124_ChemicalChunker806);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred125_ChemicalChunker809_static.FOLLOW_adj_in_synpred125_ChemicalChunker809);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred126_ChemicalChunker812_static.FOLLOW_neg_in_synpred126_ChemicalChunker812);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:49: ( md )*
        loop203:
        do {
            int alt203=2;
            switch ( input.LA(1) ) {
            case 153:
                {
                alt203=1;
                }
                break;

            }

            switch (alt203) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred127_ChemicalChunker788_static.FOLLOW_md_in_synpred127_ChemicalChunker788);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop203;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:53: ( rbconj )?
        int alt204=2;
        switch ( input.LA(1) ) {
            case 129:
                {
                alt204=1;
                }
                break;
        }

        switch (alt204) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred127_ChemicalChunker791_static.FOLLOW_rbconj_in_synpred127_ChemicalChunker791);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:61: ( adv )*
        loop205:
        do {
            int alt205=2;
            switch ( input.LA(1) ) {
            case 162:
            case 163:
            case 164:
            case 165:
                {
                alt205=1;
                }
                break;

            }

            switch (alt205) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred127_ChemicalChunker794_static.FOLLOW_adv_in_synpred127_ChemicalChunker794);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop205;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:66: ( adj )?
        int alt206=2;
        switch ( input.LA(1) ) {
            case 38:
            case 39:
            case 43:
            case 149:
            case 150:
            case 151:
                {
                alt206=1;
                }
                break;
        }

        switch (alt206) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred127_ChemicalChunker797_static.FOLLOW_adj_in_synpred127_ChemicalChunker797);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:71: ( verb )+
        int cnt207=0;
        loop207:
        do {
            int alt207=2;
            switch ( input.LA(1) ) {
            case 83:
            case 84:
            case 85:
            case 86:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 99:
            case 101:
            case 102:
            case 103:
            case 104:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 116:
            case 118:
            case 119:
            case 120:
            case 122:
            case 123:
            case 125:
            case 126:
            case 127:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt207=1;
                }
                break;

            }

            switch (alt207) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred127_ChemicalChunker800_static.FOLLOW_verb_in_synpred127_ChemicalChunker800);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt207 >= 1 ) break loop207;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(207, input);
                    throw eee;
            }
            cnt207++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:77: ( md )*
        loop208:
        do {
            int alt208=2;
            switch ( input.LA(1) ) {
            case 153:
                {
                alt208=1;
                }
                break;

            }

            switch (alt208) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred127_ChemicalChunker803_static.FOLLOW_md_in_synpred127_ChemicalChunker803);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop208;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:81: ( adv )*
        loop209:
        do {
            int alt209=2;
            switch ( input.LA(1) ) {
            case 162:
            case 163:
            case 164:
            case 165:
                {
                alt209=1;
                }
                break;

            }

            switch (alt209) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred127_ChemicalChunker806_static.FOLLOW_adv_in_synpred127_ChemicalChunker806);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop209;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:86: ( adj )?
        int alt210=2;
        switch ( input.LA(1) ) {
            case 38:
            case 39:
            case 43:
            case 149:
            case 150:
            case 151:
                {
                alt210=1;
                }
                break;
        }

        switch (alt210) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred127_ChemicalChunker809_static.FOLLOW_adj_in_synpred127_ChemicalChunker809);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:91: ( neg )?
        int alt211=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt211=1;
                }
                break;
        }

        switch (alt211) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred127_ChemicalChunker812_static.FOLLOW_neg_in_synpred127_ChemicalChunker812);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred128_ChemicalChunker818_static.FOLLOW_inoff_in_synpred128_ChemicalChunker818);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred131_ChemicalChunker
    public final void synpred131_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:107: ( cc )?
        int alt212=2;
        switch ( input.LA(1) ) {
            case 143:
                {
                alt212=1;
                }
                break;
        }

        switch (alt212) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred131_ChemicalChunker822_static.FOLLOW_cc_in_synpred131_ChemicalChunker822);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:111: ( comma )?
        int alt213=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt213=1;
                }
                break;
        }

        switch (alt213) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred131_ChemicalChunker825_static.FOLLOW_comma_in_synpred131_ChemicalChunker825);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred131_ChemicalChunker828_static.FOLLOW_prepphrase_in_synpred131_ChemicalChunker828);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_ChemicalChunker

    // $ANTLR start synpred141_ChemicalChunker
    public final void synpred141_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred141_ChemicalChunker858_static.FOLLOW_degassMultiVerb_in_synpred141_ChemicalChunker858);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_ChemicalChunker

    // $ANTLR start synpred154_ChemicalChunker
    public final void synpred154_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred154_ChemicalChunker884_static.FOLLOW_vbdegass_in_synpred154_ChemicalChunker884);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred172_ChemicalChunker946_static.FOLLOW_dash_in_synpred172_ChemicalChunker946);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred172_ChemicalChunker948_static.FOLLOW_nounStructure_in_synpred172_ChemicalChunker948);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred175_ChemicalChunker963_static.FOLLOW_citation_in_synpred175_ChemicalChunker963);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred176_ChemicalChunker965_static.FOLLOW_cycles_in_synpred176_ChemicalChunker965);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred177_ChemicalChunker967_static.FOLLOW_molecule_in_synpred177_ChemicalChunker967);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred178_ChemicalChunker969_static.FOLLOW_apparatus_in_synpred178_ChemicalChunker969);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:66: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:66: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred179_ChemicalChunker971_static.FOLLOW_unnamedmolecule_in_synpred179_ChemicalChunker971);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:82: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:82: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred180_ChemicalChunker973_static.FOLLOW_nnstate_in_synpred180_ChemicalChunker973);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:90: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:90: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred181_ChemicalChunker975_static.FOLLOW_procedureNode_in_synpred181_ChemicalChunker975);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:104: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:104: nn
        {
        pushFollow(FOLLOW_nn_in_synpred182_ChemicalChunker977_static.FOLLOW_nn_in_synpred182_ChemicalChunker977);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred185_ChemicalChunker
    public final void synpred185_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:115: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:115: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred185_ChemicalChunker983_static.FOLLOW_nnadd_in_synpred185_ChemicalChunker983);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:139: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:139: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred187_ChemicalChunker987_static.FOLLOW_nnexample_in_synpred187_ChemicalChunker987);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:149: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:149: range
        {
        pushFollow(FOLLOW_range_in_synpred188_ChemicalChunker989_static.FOLLOW_range_in_synpred188_ChemicalChunker989);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:162: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:162: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred190_ChemicalChunker993_static.FOLLOW_nnatmosphere_in_synpred190_ChemicalChunker993);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:185: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:185: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred192_ChemicalChunker997_static.FOLLOW_quantity_in_synpred192_ChemicalChunker997);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:194: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:194: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred193_ChemicalChunker999_static.FOLLOW_nnchementity_in_synpred193_ChemicalChunker999);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:214: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:214: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred195_ChemicalChunker1003_static.FOLLOW_nnph_in_synpred195_ChemicalChunker1003);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:227: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:227: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred197_ChemicalChunker1007_static.FOLLOW_nngeneral_in_synpred197_ChemicalChunker1007);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:251: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:251: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred200_ChemicalChunker1013_static.FOLLOW_nnpressure_in_synpred200_ChemicalChunker1013);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred210_ChemicalChunker
    public final void synpred210_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:355: ( nnmixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:355: nnmixture
        {
        pushFollow(FOLLOW_nnmixture_in_synpred210_ChemicalChunker1033_static.FOLLOW_nnmixture_in_synpred210_ChemicalChunker1033);
        nnmixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_ChemicalChunker

    // $ANTLR start synpred211_ChemicalChunker
    public final void synpred211_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:365: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:365: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred211_ChemicalChunker1035_static.FOLLOW_squareBracketedReference_in_synpred211_ChemicalChunker1035);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_ChemicalChunker

    // $ANTLR start synpred217_ChemicalChunker
    public final void synpred217_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:438: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:438: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred217_ChemicalChunker1047_static.FOLLOW_nnyield_in_synpred217_ChemicalChunker1047);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_ChemicalChunker

    // $ANTLR start synpred225_ChemicalChunker
    public final void synpred225_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred225_ChemicalChunker1077_static.FOLLOW_prepphraseAtmosphere_in_synpred225_ChemicalChunker1077);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_ChemicalChunker

    // $ANTLR start synpred226_ChemicalChunker
    public final void synpred226_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred226_ChemicalChunker1079_static.FOLLOW_prepphraseTime_in_synpred226_ChemicalChunker1079);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred227_ChemicalChunker1081_static.FOLLOW_prepphraseTemp_in_synpred227_ChemicalChunker1081);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred228_ChemicalChunker1083_static.FOLLOW_prepphraseIN_in_synpred228_ChemicalChunker1083);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred229_ChemicalChunker1085_static.FOLLOW_prepphraseRole_in_synpred229_ChemicalChunker1085);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred231_ChemicalChunker1125_static.FOLLOW_advAdj_in_synpred231_ChemicalChunker1125);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred232_ChemicalChunker1130_static.FOLLOW_nnatmosphere_in_synpred232_ChemicalChunker1130);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred233_ChemicalChunker1158_static.FOLLOW_advAdj_in_synpred233_ChemicalChunker1158);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred238_ChemicalChunker
    public final void synpred238_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred238_ChemicalChunker1174_static.FOLLOW_nntime_in_synpred238_ChemicalChunker1174);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred239_ChemicalChunker1205_static.FOLLOW_advAdj_in_synpred239_ChemicalChunker1205);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred244_ChemicalChunker1220_static.FOLLOW_nntemp_in_synpred244_ChemicalChunker1220);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred250_ChemicalChunker1393_static.FOLLOW_conjunction_in_synpred250_ChemicalChunker1393);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:15: ( conjunction )*
        loop214:
        do {
            int alt214=2;
            alt214 = dfa214.predict(input);
            switch (alt214) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred251_ChemicalChunker1393_static.FOLLOW_conjunction_in_synpred251_ChemicalChunker1393);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop214;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred251_ChemicalChunker1396_static.FOLLOW_apparatus_in_synpred251_ChemicalChunker1396);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred254_ChemicalChunker1413_static.FOLLOW_nnApp_in_synpred254_ChemicalChunker1413);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1440_static.FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1440);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred256_ChemicalChunker1444_static.FOLLOW_dash_in_synpred256_ChemicalChunker1444);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1446_static.FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1446);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred257_ChemicalChunker1460_static.FOLLOW_quantity_in_synpred257_ChemicalChunker1460);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred258_ChemicalChunker1462_static.FOLLOW_adj_in_synpred258_ChemicalChunker1462);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred259_ChemicalChunker1464_static.FOLLOW_nnpressure_in_synpred259_ChemicalChunker1464);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred260_ChemicalChunker1466_static.FOLLOW_nnadd_in_synpred260_ChemicalChunker1466);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred261_ChemicalChunker1468_static.FOLLOW_molecule_in_synpred261_ChemicalChunker1468);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred262_ChemicalChunker1470_static.FOLLOW_nnchementity_in_synpred262_ChemicalChunker1470);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred263_ChemicalChunker1472_static.FOLLOW_nnstate_in_synpred263_ChemicalChunker1472);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred264_ChemicalChunker1474_static.FOLLOW_nn_in_synpred264_ChemicalChunker1474);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:55: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:55: adj
        {
        pushFollow(FOLLOW_adj_in_synpred267_ChemicalChunker1495_static.FOLLOW_adj_in_synpred267_ChemicalChunker1495);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred268_ChemicalChunker1498_static.FOLLOW_nnstate_in_synpred268_ChemicalChunker1498);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:70: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:70: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred269_ChemicalChunker1502_static.FOLLOW_numericReferenceOrQuantity_in_synpred269_ChemicalChunker1502);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:99: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:99: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred270_ChemicalChunker1506_static.FOLLOW_nnchementity_in_synpred270_ChemicalChunker1506);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:115: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:115: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred271_ChemicalChunker1511_static.FOLLOW_quantity_in_synpred271_ChemicalChunker1511);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:125: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:125: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred272_ChemicalChunker1514_static.FOLLOW_fromProcedure_in_synpred272_ChemicalChunker1514);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:26: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred273_ChemicalChunker1523_static.FOLLOW_oscarcm_in_synpred273_ChemicalChunker1523);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:35: ( afterOscarCompoundStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:35: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred274_ChemicalChunker1526_static.FOLLOW_afterOscarCompoundStructure_in_synpred274_ChemicalChunker1526);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:36: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:36: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred276_ChemicalChunker1556_static.FOLLOW_oscarcm_in_synpred276_ChemicalChunker1556);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:31: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:31: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred277_ChemicalChunker1554_static.FOLLOW_dash_in_synpred277_ChemicalChunker1554);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:36: ( oscarcm )+
        int cnt217=0;
        loop217:
        do {
            int alt217=2;
            switch ( input.LA(1) ) {
            case 82:
                {
                alt217=1;
                }
                break;

            }

            switch (alt217) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred277_ChemicalChunker1556_static.FOLLOW_oscarcm_in_synpred277_ChemicalChunker1556);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt217 >= 1 ) break loop217;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(217, input);
                    throw eee;
            }
            cnt217++;
        } while (true);


        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:47: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:47: dash
        {
        pushFollow(FOLLOW_dash_in_synpred278_ChemicalChunker1561_static.FOLLOW_dash_in_synpred278_ChemicalChunker1561);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:30: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:30: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:30: ( dash ( oscarcm )+ )+
        int cnt219=0;
        loop219:
        do {
            int alt219=2;
            switch ( input.LA(1) ) {
            case 134:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 82:
                        {
                        alt219=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt219) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:31: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred279_ChemicalChunker1554_static.FOLLOW_dash_in_synpred279_ChemicalChunker1554);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:36: ( oscarcm )+
        	    int cnt218=0;
        	    loop218:
        	    do {
        	        int alt218=2;
        	        switch ( input.LA(1) ) {
        	        case 82:
        	            {
        	            alt218=1;
        	            }
        	            break;

        	        }

        	        switch (alt218) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred279_ChemicalChunker1556_static.FOLLOW_oscarcm_in_synpred279_ChemicalChunker1556);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt218 >= 1 ) break loop218;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(218, input);
        	                throw eee;
        	        }
        	        cnt218++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt219 >= 1 ) break loop219;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(219, input);
                    throw eee;
            }
            cnt219++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:47: ( dash )?
        int alt220=2;
        switch ( input.LA(1) ) {
            case 134:
                {
                alt220=1;
                }
                break;
        }

        switch (alt220) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred279_ChemicalChunker1561_static.FOLLOW_dash_in_synpred279_ChemicalChunker1561);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:53: ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:54: ( colon ( oscarcm )+ )+ ( lrb )? ratio
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:54: ( colon ( oscarcm )+ )+
        int cnt223=0;
        loop223:
        do {
            int alt223=2;
            switch ( input.LA(1) ) {
            case 130:
                {
                alt223=1;
                }
                break;

            }

            switch (alt223) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:55: colon ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_colon_in_synpred283_ChemicalChunker1566_static.FOLLOW_colon_in_synpred283_ChemicalChunker1566);
        	    colon();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:61: ( oscarcm )+
        	    int cnt222=0;
        	    loop222:
        	    do {
        	        int alt222=2;
        	        switch ( input.LA(1) ) {
        	        case 82:
        	            {
        	            alt222=1;
        	            }
        	            break;

        	        }

        	        switch (alt222) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred283_ChemicalChunker1568_static.FOLLOW_oscarcm_in_synpred283_ChemicalChunker1568);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt222 >= 1 ) break loop222;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(222, input);
        	                throw eee;
        	        }
        	        cnt222++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt223 >= 1 ) break loop223;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(223, input);
                    throw eee;
            }
            cnt223++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:72: ( lrb )?
        int alt224=2;
        switch ( input.LA(1) ) {
            case 141:
                {
                alt224=1;
                }
                break;
        }

        switch (alt224) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: lrb
                {
                pushFollow(FOLLOW_lrb_in_synpred283_ChemicalChunker1573_static.FOLLOW_lrb_in_synpred283_ChemicalChunker1573);
                lrb();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_ratio_in_synpred283_ChemicalChunker1576_static.FOLLOW_ratio_in_synpred283_ChemicalChunker1576);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:92: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:92: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred284_ChemicalChunker1582_static.FOLLOW_oscarcm_in_synpred284_ChemicalChunker1582);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:86: ( colon ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:86: colon ( oscarcm )+
        {
        pushFollow(FOLLOW_colon_in_synpred285_ChemicalChunker1580_static.FOLLOW_colon_in_synpred285_ChemicalChunker1580);
        colon();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:92: ( oscarcm )+
        int cnt225=0;
        loop225:
        do {
            int alt225=2;
            switch ( input.LA(1) ) {
            case 82:
                {
                alt225=1;
                }
                break;

            }

            switch (alt225) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred285_ChemicalChunker1582_static.FOLLOW_oscarcm_in_synpred285_ChemicalChunker1582);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt225 >= 1 ) break loop225;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(225, input);
                    throw eee;
            }
            cnt225++;
        } while (true);


        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:104: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:104: dash
        {
        pushFollow(FOLLOW_dash_in_synpred286_ChemicalChunker1588_static.FOLLOW_dash_in_synpred286_ChemicalChunker1588);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:109: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:109: apost
        {
        pushFollow(FOLLOW_apost_in_synpred287_ChemicalChunker1590_static.FOLLOW_apost_in_synpred287_ChemicalChunker1590);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:19: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred289_ChemicalChunker1633_static.FOLLOW_moleculeamount3_in_synpred289_ChemicalChunker1633);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:36: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred290_ChemicalChunker1636_static.FOLLOW_moleculeamount1_in_synpred290_ChemicalChunker1636);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:71: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred291_ChemicalChunker1643_static.FOLLOW_asAstate_in_synpred291_ChemicalChunker1643);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred292_ChemicalChunker1654_static.FOLLOW_quantity_in_synpred292_ChemicalChunker1654);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:13: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:13: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred293_ChemicalChunker1656_static.FOLLOW_bracketedContentInMol_in_synpred293_ChemicalChunker1656);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:78: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:78: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred296_ChemicalChunker1673_static.FOLLOW_bracketedContentInMol_in_synpred296_ChemicalChunker1673);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:30: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:30: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred299_ChemicalChunker1695_static.FOLLOW_quantity_in_synpred299_ChemicalChunker1695);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:39: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:39: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred300_ChemicalChunker1697_static.FOLLOW_bracketedContentInMol_in_synpred300_ChemicalChunker1697);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:100: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:100: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred305_ChemicalChunker1720_static.FOLLOW_oscarCompound_in_synpred305_ChemicalChunker1720);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred306_ChemicalChunker1732_static.FOLLOW_quantity_in_synpred306_ChemicalChunker1732);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:13: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:13: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred307_ChemicalChunker1734_static.FOLLOW_bracketedContentInMol_in_synpred307_ChemicalChunker1734);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:37: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:37: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1738_static.FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1738);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:35: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred309_ChemicalChunker1749_static.FOLLOW_citation_in_synpred309_ChemicalChunker1749);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred310_ChemicalChunker1751_static.FOLLOW_quantity_in_synpred310_ChemicalChunker1751);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:53: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred312_ChemicalChunker1753_static.FOLLOW_comma_in_synpred312_ChemicalChunker1753);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:59: ( quantity1Node | citationStructure )
        int alt227=2;
        switch ( input.LA(1) ) {
        case 141:
            {
            switch ( input.LA(2) ) {
            case TOKEN:
                {
                switch ( input.LA(3) ) {
                case 144:
                    {
                    switch ( input.LA(4) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(5) ) {
                        case 42:
                        case 63:
                        case 64:
                        case 65:
                        case 67:
                        case 68:
                        case 136:
                        case 154:
                            {
                            alt227=1;
                            }
                            break;
                        case 131:
                        case 143:
                        case 144:
                        case 147:
                        case 156:
                            {
                            alt227=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 227, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 227, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                case 71:
                case 128:
                    {
                    alt227=1;
                    }
                    break;
                case 131:
                case 143:
                case 147:
                case 156:
                    {
                    alt227=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 227, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 1, input);

                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 227, 0, input);

            throw nvae;
        }

        switch (alt227) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred312_ChemicalChunker1756_static.FOLLOW_quantity1Node_in_synpred312_ChemicalChunker1756);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred312_ChemicalChunker1758_static.FOLLOW_citationStructure_in_synpred312_ChemicalChunker1758);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:93: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:93: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred313_ChemicalChunker1761_static.FOLLOW_bracketedContentInMol_in_synpred313_ChemicalChunker1761);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred314_ChemicalChunker
    public final void synpred314_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:68: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:68: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred314_ChemicalChunker1793_static.FOLLOW_asAstate_in_synpred314_ChemicalChunker1793);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:16: ( potentialUnnamedMoleculeAmount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:16: potentialUnnamedMoleculeAmount1
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred315_ChemicalChunker1806_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred315_ChemicalChunker1806);
        potentialUnnamedMoleculeAmount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:50: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:50: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred316_ChemicalChunker1810_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred316_ChemicalChunker1810);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred318_ChemicalChunker
    public final void synpred318_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:112: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:112: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred318_ChemicalChunker1820_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred318_ChemicalChunker1820);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred318_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred319_ChemicalChunker1833_static.FOLLOW_quantity_in_synpred319_ChemicalChunker1833);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred323_ChemicalChunker
    public final void synpred323_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:29: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:29: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred323_ChemicalChunker1857_static.FOLLOW_quantity_in_synpred323_ChemicalChunker1857);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred323_ChemicalChunker

    // $ANTLR start synpred324_ChemicalChunker
    public final void synpred324_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:39: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:39: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred324_ChemicalChunker1860_static.FOLLOW_asAstate_in_synpred324_ChemicalChunker1860);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_ChemicalChunker

    // $ANTLR start synpred325_ChemicalChunker
    public final void synpred325_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:49: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:49: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred325_ChemicalChunker1863_static.FOLLOW_fromProcedure_in_synpred325_ChemicalChunker1863);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_ChemicalChunker

    // $ANTLR start synpred330_ChemicalChunker
    public final void synpred330_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:148: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:148: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred330_ChemicalChunker1903_static.FOLLOW_quantity_in_synpred330_ChemicalChunker1903);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_ChemicalChunker

    // $ANTLR start synpred331_ChemicalChunker
    public final void synpred331_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:158: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:158: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred331_ChemicalChunker1906_static.FOLLOW_asAstate_in_synpred331_ChemicalChunker1906);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_ChemicalChunker

    // $ANTLR start synpred332_ChemicalChunker
    public final void synpred332_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:168: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:168: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred332_ChemicalChunker1909_static.FOLLOW_fromProcedure_in_synpred332_ChemicalChunker1909);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:37: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:37: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred333_ChemicalChunker1921_static.FOLLOW_quantity_in_synpred333_ChemicalChunker1921);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:47: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:47: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred334_ChemicalChunker1924_static.FOLLOW_asAstate_in_synpred334_ChemicalChunker1924);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:57: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:57: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1927_static.FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1927);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:82: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:82: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred338_ChemicalChunker1951_static.FOLLOW_numericReferenceOrQuantity_in_synpred338_ChemicalChunker1951);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:66: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:66: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred341_ChemicalChunker1972_static.FOLLOW_numericReferenceOrQuantity_in_synpred341_ChemicalChunker1972);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred354_ChemicalChunker
    public final void synpred354_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred354_ChemicalChunker2028_static.FOLLOW_quantity_in_synpred354_ChemicalChunker2028);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_ChemicalChunker

    // $ANTLR start synpred359_ChemicalChunker
    public final void synpred359_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:42: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:42: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred359_ChemicalChunker2057_static.FOLLOW_quantity_in_synpred359_ChemicalChunker2057);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred359_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred364_ChemicalChunker2218_static.FOLLOW_comma_in_synpred364_ChemicalChunker2218);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred364_ChemicalChunker2221_static.FOLLOW_measurements_in_synpred364_ChemicalChunker2221);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred367_ChemicalChunker
    public final void synpred367_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:40: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred367_ChemicalChunker2246_static.FOLLOW_dt_in_synpred367_ChemicalChunker2246);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred367_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred368_ChemicalChunker2258_static.FOLLOW_measurementtypes_in_synpred368_ChemicalChunker2258);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred375_ChemicalChunker2295_static.FOLLOW_yield_in_synpred375_ChemicalChunker2295);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred380_ChemicalChunker
    public final void synpred380_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:32: ( dash cd percentsign )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:32: dash cd percentsign
        {
        pushFollow(FOLLOW_dash_in_synpred380_ChemicalChunker2494_static.FOLLOW_dash_in_synpred380_ChemicalChunker2494);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred380_ChemicalChunker2496_static.FOLLOW_cd_in_synpred380_ChemicalChunker2496);
        cd();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_percentsign_in_synpred380_ChemicalChunker2498_static.FOLLOW_percentsign_in_synpred380_ChemicalChunker2498);
        percentsign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred380_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:28: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:28: verb
        {
        pushFollow(FOLLOW_verb_in_synpred384_ChemicalChunker2601_static.FOLLOW_verb_in_synpred384_ChemicalChunker2601);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:33: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:33: noun
        {
        pushFollow(FOLLOW_noun_in_synpred385_ChemicalChunker2603_static.FOLLOW_noun_in_synpred385_ChemicalChunker2603);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred386_ChemicalChunker
    public final void synpred386_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:38: ( bracketedContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:38: bracketedContent
        {
        pushFollow(FOLLOW_bracketedContent_in_synpred386_ChemicalChunker2605_static.FOLLOW_bracketedContent_in_synpred386_ChemicalChunker2605);
        bracketedContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_ChemicalChunker

    // $ANTLR start synpred391_ChemicalChunker
    public final void synpred391_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:81: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:81: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred391_ChemicalChunker2615_static.FOLLOW_ratio_in_synpred391_ChemicalChunker2615);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_ChemicalChunker

    // $ANTLR start synpred392_ChemicalChunker
    public final void synpred392_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:87: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:87: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred392_ChemicalChunker2617_static.FOLLOW_conjunction_in_synpred392_ChemicalChunker2617);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_ChemicalChunker

    // $ANTLR start synpred393_ChemicalChunker
    public final void synpred393_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:99: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:99: adj
        {
        pushFollow(FOLLOW_adj_in_synpred393_ChemicalChunker2619_static.FOLLOW_adj_in_synpred393_ChemicalChunker2619);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:114: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:114: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred396_ChemicalChunker2625_static.FOLLOW_numeric_in_synpred396_ChemicalChunker2625);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:33: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:33: verb
        {
        pushFollow(FOLLOW_verb_in_synpred400_ChemicalChunker2703_static.FOLLOW_verb_in_synpred400_ChemicalChunker2703);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred401_ChemicalChunker
    public final void synpred401_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:38: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:38: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred401_ChemicalChunker2705_static.FOLLOW_quantity2Node_in_synpred401_ChemicalChunker2705);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:52: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:52: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred402_ChemicalChunker2707_static.FOLLOW_oscarCompound_in_synpred402_ChemicalChunker2707);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred403_ChemicalChunker
    public final void synpred403_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:66: ( alphanumericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:66: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred403_ChemicalChunker2709_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred403_ChemicalChunker2709);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:108: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:108: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred404_ChemicalChunker2711_static.FOLLOW_ratio_in_synpred404_ChemicalChunker2711);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:114: ( numberCompoundReference ( comma | colon | {...}? stop ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:114: numberCompoundReference ( comma | colon | {...}? stop )
        {
        pushFollow(FOLLOW_numberCompoundReference_in_synpred407_ChemicalChunker2713_static.FOLLOW_numberCompoundReference_in_synpred407_ChemicalChunker2713);
        numberCompoundReference();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:138: ( comma | colon | {...}? stop )
        int alt235=3;
        switch ( input.LA(1) ) {
        case 131:
            {
            alt235=1;
            }
            break;
        case 130:
            {
            alt235=2;
            }
            break;
        case 135:
            {
            alt235=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 235, 0, input);

            throw nvae;
        }

        switch (alt235) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:139: comma
                {
                pushFollow(FOLLOW_comma_in_synpred407_ChemicalChunker2716_static.FOLLOW_comma_in_synpred407_ChemicalChunker2716);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:147: colon
                {
                pushFollow(FOLLOW_colon_in_synpred407_ChemicalChunker2720_static.FOLLOW_colon_in_synpred407_ChemicalChunker2720);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:155: {...}? stop
                {
                if ( !((nextIsSemiColon(input))) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred407_ChemicalChunker", "nextIsSemiColon(input)");
                }
                pushFollow(FOLLOW_stop_in_synpred407_ChemicalChunker2726_static.FOLLOW_stop_in_synpred407_ChemicalChunker2726);
                stop();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:187: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:187: cd
        {
        pushFollow(FOLLOW_cd_in_synpred408_ChemicalChunker2729_static.FOLLOW_cd_in_synpred408_ChemicalChunker2729);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred413_ChemicalChunker
    public final void synpred413_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:216: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:216: comma
        {
        pushFollow(FOLLOW_comma_in_synpred413_ChemicalChunker2739_static.FOLLOW_comma_in_synpred413_ChemicalChunker2739);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_ChemicalChunker

    // $ANTLR start synpred414_ChemicalChunker
    public final void synpred414_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:222: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:222: adj
        {
        pushFollow(FOLLOW_adj_in_synpred414_ChemicalChunker2741_static.FOLLOW_adj_in_synpred414_ChemicalChunker2741);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:237: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:237: noun
        {
        pushFollow(FOLLOW_noun_in_synpred417_ChemicalChunker2747_static.FOLLOW_noun_in_synpred417_ChemicalChunker2747);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred418_ChemicalChunker
    public final void synpred418_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:266: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:266: verb
        {
        pushFollow(FOLLOW_verb_in_synpred418_ChemicalChunker2753_static.FOLLOW_verb_in_synpred418_ChemicalChunker2753);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_ChemicalChunker

    // $ANTLR start synpred419_ChemicalChunker
    public final void synpred419_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:271: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:271: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred419_ChemicalChunker2755_static.FOLLOW_quantity2Node_in_synpred419_ChemicalChunker2755);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred419_ChemicalChunker

    // $ANTLR start synpred420_ChemicalChunker
    public final void synpred420_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:285: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:285: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred420_ChemicalChunker2757_static.FOLLOW_oscarCompound_in_synpred420_ChemicalChunker2757);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred420_ChemicalChunker

    // $ANTLR start synpred421_ChemicalChunker
    public final void synpred421_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:299: ( alphanumericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:299: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred421_ChemicalChunker2759_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred421_ChemicalChunker2759);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:341: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:341: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred422_ChemicalChunker2761_static.FOLLOW_ratio_in_synpred422_ChemicalChunker2761);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:347: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:347: cd
        {
        pushFollow(FOLLOW_cd_in_synpred423_ChemicalChunker2763_static.FOLLOW_cd_in_synpred423_ChemicalChunker2763);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred428_ChemicalChunker
    public final void synpred428_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:376: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:376: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred428_ChemicalChunker2773_static.FOLLOW_conjunction_in_synpred428_ChemicalChunker2773);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred428_ChemicalChunker

    // $ANTLR start synpred429_ChemicalChunker
    public final void synpred429_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:388: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:388: adj
        {
        pushFollow(FOLLOW_adj_in_synpred429_ChemicalChunker2775_static.FOLLOW_adj_in_synpred429_ChemicalChunker2775);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_ChemicalChunker

    // $ANTLR start synpred432_ChemicalChunker
    public final void synpred432_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:403: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:403: noun
        {
        pushFollow(FOLLOW_noun_in_synpred432_ChemicalChunker2781_static.FOLLOW_noun_in_synpred432_ChemicalChunker2781);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred432_ChemicalChunker

    // $ANTLR start synpred433_ChemicalChunker
    public final void synpred433_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:408: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:408: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred433_ChemicalChunker2783_static.FOLLOW_bracketedContentInMol_in_synpred433_ChemicalChunker2783);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred433_ChemicalChunker

    // $ANTLR start synpred441_ChemicalChunker
    public final void synpred441_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:31: ( allIdentifierTypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:31: allIdentifierTypes
        {
        pushFollow(FOLLOW_allIdentifierTypes_in_synpred441_ChemicalChunker2857_static.FOLLOW_allIdentifierTypes_in_synpred441_ChemicalChunker2857);
        allIdentifierTypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_ChemicalChunker

    // $ANTLR start synpred447_ChemicalChunker
    public final void synpred447_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:85: ( ( comma | colon | inof | infrom )? submethod )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:85: ( comma | colon | inof | infrom )? submethod
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:85: ( comma | colon | inof | infrom )?
        int alt238=5;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt238=1;
                }
                break;
            case 130:
                {
                alt238=2;
                }
                break;
            case 54:
                {
                alt238=3;
                }
                break;
            case 57:
                {
                alt238=4;
                }
                break;
        }

        switch (alt238) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:86: comma
                {
                pushFollow(FOLLOW_comma_in_synpred447_ChemicalChunker2870_static.FOLLOW_comma_in_synpred447_ChemicalChunker2870);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:93: colon
                {
                pushFollow(FOLLOW_colon_in_synpred447_ChemicalChunker2873_static.FOLLOW_colon_in_synpred447_ChemicalChunker2873);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:100: inof
                {
                pushFollow(FOLLOW_inof_in_synpred447_ChemicalChunker2876_static.FOLLOW_inof_in_synpred447_ChemicalChunker2876);
                inof();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:107: infrom
                {
                pushFollow(FOLLOW_infrom_in_synpred447_ChemicalChunker2880_static.FOLLOW_infrom_in_synpred447_ChemicalChunker2880);
                infrom();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_submethod_in_synpred447_ChemicalChunker2884_static.FOLLOW_submethod_in_synpred447_ChemicalChunker2884);
        submethod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred447_ChemicalChunker

    // $ANTLR start synpred448_ChemicalChunker
    public final void synpred448_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:128: ( lrb submethod rrb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:128: lrb submethod rrb
        {
        pushFollow(FOLLOW_lrb_in_synpred448_ChemicalChunker2888_static.FOLLOW_lrb_in_synpred448_ChemicalChunker2888);
        lrb();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_submethod_in_synpred448_ChemicalChunker2890_static.FOLLOW_submethod_in_synpred448_ChemicalChunker2890);
        submethod();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rrb_in_synpred448_ChemicalChunker2892_static.FOLLOW_rrb_in_synpred448_ChemicalChunker2892);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred448_ChemicalChunker

    // $ANTLR start synpred458_ChemicalChunker
    public final void synpred458_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:15: ( colon cd {...}?)
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:15: colon cd {...}?
        {
        pushFollow(FOLLOW_colon_in_synpred458_ChemicalChunker3046_static.FOLLOW_colon_in_synpred458_ChemicalChunker3046);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred458_ChemicalChunker3048_static.FOLLOW_cd_in_synpred458_ChemicalChunker3048);
        cd();

        state._fsp--;
        if (state.failed) return ;
        if ( !((!followedByQuantityUnits(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred458_ChemicalChunker", "!followedByQuantityUnits(input)");
        }

        }
    }
    // $ANTLR end synpred458_ChemicalChunker

    // $ANTLR start synpred467_ChemicalChunker
    public final void synpred467_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:22: ( allIdentifierTypesOtherThanCD )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:22: allIdentifierTypesOtherThanCD
        {
        pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_synpred467_ChemicalChunker3123_static.FOLLOW_allIdentifierTypesOtherThanCD_in_synpred467_ChemicalChunker3123);
        allIdentifierTypesOtherThanCD();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred467_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred420_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred420_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred433_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred433_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred428_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred428_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred447_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred447_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred467_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred467_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred458_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred458_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred448_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred448_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA202 dfa202 = new DFA202(this);
    protected DFA214 dfa214 = new DFA214(this);
    static class DFA3_static {
    static final String DFA3_eotS =
        "\47\uffff";
    static final String DFA3_eofS =
        "\7\uffff\5\6\15\uffff\5\6\5\uffff\1\6\3\uffff";
    static final String DFA3_minS =
        "\1\45\5\44\1\uffff\5\45\11\44\4\0\5\45\1\uffff\4\44\1\45\3\0";
    static final String DFA3_maxS =
        "\1\u00b2\5\44\1\uffff\5\u00b2\11\44\4\0\5\u00b2\1\uffff\4\44\1"+
        "\u00b2\3\0";
    static final String DFA3_acceptS =
        "\6\uffff\1\2\27\uffff\1\1\10\uffff";
    static final String DFA3_specialS =
        "\25\uffff\1\4\1\5\1\0\1\6\13\uffff\1\2\1\1\1\3}>";
    static final String[] DFA3_transitionS = {
            "\1\3\141\6\1\uffff\1\6\1\5\1\6\1\1\1\6\1\4\2\6\1\2\42\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "",
            "\135\6\1\16\4\6\1\15\6\6\1\14\44\6",
            "\135\6\1\17\4\6\1\15\6\6\1\14\44\6",
            "\135\6\1\16\4\6\1\15\6\6\1\14\44\6",
            "\1\22\145\6\1\21\4\6\1\20\42\6",
            "\1\24\152\6\1\23\42\6",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\146\6\1\37\2\6\1\40\44\6",
            "\151\6\1\41\44\6",
            "\151\6\1\40\44\6",
            "\145\6\1\42\50\6",
            "\145\6\1\42\50\6",
            "",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\151\6\1\41\44\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_static.DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_static.DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_static.DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_static.DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_static.DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_static.DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "159:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA3_23 = input.LA(1);

                         
                        int index3_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_23);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA3_37 = input.LA(1);

                         
                        int index3_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA3_36 = input.LA(1);

                         
                        int index3_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_36);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA3_38 = input.LA(1);

                         
                        int index3_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_38);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA3_21 = input.LA(1);

                         
                        int index3_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_21);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA3_22 = input.LA(1);

                         
                        int index3_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_22);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA3_24 = input.LA(1);

                         
                        int index3_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0091\uffff";
    static final String DFA2_eofS =
        "\1\1\u0090\uffff";
    static final String DFA2_minS =
        "\1\45\1\uffff\u008d\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b2\1\uffff\u008d\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008d\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\23\1\1\1\25\1\176\1\u0084\1\114\1\177\1\35\1\100\1\130"+
        "\1\133\1\2\1\72\1\17\1\40\1\174\1\102\1\123\1\116\1\135\1\64\1\56"+
        "\1\150\1\167\1\153\1\60\1\u0083\1\112\1\30\1\115\1\u0088\1\5\1\42"+
        "\1\u008c\1\u0081\1\u0085\1\71\1\13\1\127\1\24\1\11\1\47\1\66\1\113"+
        "\1\157\1\107\1\142\1\171\1\154\1\u0089\1\4\1\161\1\140\1\6\1\136"+
        "\1\74\1\44\1\146\1\50\1\175\1\106\1\141\1\125\1\104\1\166\1\163"+
        "\1\120\1\52\1\27\1\145\1\16\1\77\1\101\1\12\1\172\1\131\1\156\1"+
        "\126\1\134\1\61\1\67\1\20\1\36\1\75\1\33\1\124\1\10\1\u0086\1\62"+
        "\1\u0082\1\7\1\160\1\u0080\1\32\1\132\1\u008b\1\26\1\55\1\0\1\137"+
        "\1\70\1\143\1\122\1\155\1\165\1\173\1\105\1\73\1\63\1\46\1\21\1"+
        "\u008a\1\147\1\144\1\111\1\103\1\31\1\43\1\15\1\u0087\1\170\1\110"+
        "\1\121\1\57\1\76\1\34\1\162\1\152\1\41\1\51\1\14\1\65\1\54\1\151"+
        "\1\164\1\37\1\3\1\22\1\45\1\53\1\117\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\4\1\16\1\17\1\42\1\52\1\u0084\1\15\1\25\1\113\1\114\1\112"+
            "\1\120\1\121\1\130\1\131\1\115\1\127\1\122\1\124\1\116\1\117"+
            "\1\126\1\125\1\123\1\24\1\51\1\u0085\1\55\1\u0086\1\40\1\56"+
            "\1\65\1\23\1\53\1\10\1\54\1\45\1\46\1\20\1\57\1\60\1\61\1\62"+
            "\1\63\1\37\1\26\1\142\1\u0082\1\143\1\146\1\21\1\41\1\150\1"+
            "\147\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\30\1\160\1"+
            "\64\1\161\1\145\1\162\1\163\1\70\1\164\1\71\1\165\1\72\1\166"+
            "\1\167\1\144\1\170\1\171\1\73\1\172\1\66\1\173\1\174\1\175\1"+
            "\74\1\176\1\50\1\67\1\177\1\u0080\1\u0081\1\11\1\133\1\u0087"+
            "\1\22\1\u0088\1\u0083\1\u0089\1\1\1\u008a\1\6\1\u008b\1\2\1"+
            "\31\1\5\1\u008c\1\u008d\1\3\1\7\1\102\1\75\1\111\1\12\1\13\1"+
            "\14\1\105\1\132\1\27\1\47\1\36\1\106\1\103\1\107\1\43\1\44\1"+
            "\32\1\33\1\35\1\34\1\76\1\110\1\u008e\1\134\1\137\1\136\1\141"+
            "\1\135\1\140\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 159:34: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_ChemicalChunker()||(synpred3_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||(synpred3_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\u0088\uffff";
    static final String DFA5_eofS =
        "\1\13\u0087\uffff";
    static final String DFA5_minS =
        "\1\45\12\0\1\uffff\170\0\4\uffff";
    static final String DFA5_maxS =
        "\1\u00b2\12\0\1\uffff\170\0\4\uffff";
    static final String DFA5_acceptS =
        "\13\uffff\1\5\170\uffff\1\1\1\2\1\3\1\4";
    static final String DFA5_specialS =
        "\1\uffff\1\1\1\137\1\126\1\2\1\40\1\57\1\130\1\5\1\25\1\66\1\uffff"+
        "\1\101\1\163\1\33\1\136\1\74\1\116\1\166\1\155\1\63\1\45\1\100\1"+
        "\157\1\111\1\31\1\61\1\53\1\20\1\41\1\17\1\150\1\7\1\113\1\123\1"+
        "\112\1\21\1\u0081\1\167\1\165\1\70\1\22\1\52\1\161\1\103\1\11\1"+
        "\u0080\1\120\1\144\1\124\1\121\1\75\1\55\1\106\1\102\1\173\1\47"+
        "\1\140\1\176\1\24\1\132\1\16\1\50\1\42\1\135\1\71\1\110\1\76\1\27"+
        "\1\51\1\152\1\56\1\4\1\142\1\62\1\10\1\104\1\26\1\141\1\145\1\164"+
        "\1\72\1\175\1\37\1\35\1\107\1\67\1\73\1\177\1\3\1\43\1\143\1\6\1"+
        "\131\1\154\1\30\1\117\1\172\1\0\1\170\1\77\1\14\1\115\1\65\1\44"+
        "\1\12\1\15\1\36\1\160\1\174\1\171\1\114\1\54\1\64\1\32\1\134\1\125"+
        "\1\147\1\34\1\13\1\46\1\146\1\122\1\162\1\151\1\23\1\105\1\127\1"+
        "\133\1\153\1\156\1\60\4\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\20\1\11\1\12\1\43\1\53\1\13\1\10\1\32\1\114\1\115\1\113"+
            "\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117\1\120"+
            "\1\127\1\126\1\124\1\31\1\52\1\13\1\56\1\13\1\41\1\57\1\66\1"+
            "\30\1\54\1\24\1\55\1\46\1\47\1\26\1\60\1\61\1\62\1\63\1\64\1"+
            "\40\1\33\1\142\1\u0082\1\143\1\146\1\27\1\42\1\150\1\147\1\151"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\35\1\160\1\65\1\161\1"+
            "\145\1\162\1\163\1\71\1\164\1\72\1\165\1\73\1\166\1\167\1\144"+
            "\1\170\1\171\1\74\1\172\1\67\1\173\1\174\1\175\1\75\1\176\1"+
            "\51\1\70\1\177\1\u0080\1\u0081\1\25\1\15\1\13\1\14\1\13\1\u0083"+
            "\3\13\1\22\1\13\1\16\1\36\1\21\2\13\1\17\1\23\1\103\1\76\1\112"+
            "\1\5\1\6\1\7\1\106\1\133\1\34\1\50\1\37\1\107\1\104\1\110\1"+
            "\44\1\45\1\1\1\2\1\4\1\3\1\77\1\111\1\13\1\134\1\137\1\136\1"+
            "\141\1\135\1\140\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()+ loopback of 161:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_32 = input.LA(1);

                         
                        int index5_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_32);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_45 = input.LA(1);

                         
                        int index5_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_45);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_105 = input.LA(1);

                         
                        int index5_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_105);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA5_119 = input.LA(1);

                         
                        int index5_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_119);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA5_106 = input.LA(1);

                         
                        int index5_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_106);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA5_61 = input.LA(1);

                         
                        int index5_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_61);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA5_30 = input.LA(1);

                         
                        int index5_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_30);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA5_28 = input.LA(1);

                         
                        int index5_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_28);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA5_36 = input.LA(1);

                         
                        int index5_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_36);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA5_41 = input.LA(1);

                         
                        int index5_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_41);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA5_125 = input.LA(1);

                         
                        int index5_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_125);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA5_59 = input.LA(1);

                         
                        int index5_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_59);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA5_114 = input.LA(1);

                         
                        int index5_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_114);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA5_118 = input.LA(1);

                         
                        int index5_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_118);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA5_107 = input.LA(1);

                         
                        int index5_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_107);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA5_29 = input.LA(1);

                         
                        int index5_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_29);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA5_63 = input.LA(1);

                         
                        int index5_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_63);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA5_104 = input.LA(1);

                         
                        int index5_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_104);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA5_120 = input.LA(1);

                         
                        int index5_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_120);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA5_56 = input.LA(1);

                         
                        int index5_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_56);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA5_62 = input.LA(1);

                         
                        int index5_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_62);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA5_42 = input.LA(1);

                         
                        int index5_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_42);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA5_112 = input.LA(1);

                         
                        int index5_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_112);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA5_52 = input.LA(1);

                         
                        int index5_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_52);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA5_131 = input.LA(1);

                         
                        int index5_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_131);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA5_113 = input.LA(1);

                         
                        int index5_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_113);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA5_103 = input.LA(1);

                         
                        int index5_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_103);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA5_40 = input.LA(1);

                         
                        int index5_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_40);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA5_65 = input.LA(1);

                         
                        int index5_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_65);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_51);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA5_54 = input.LA(1);

                         
                        int index5_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_54);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA5_44 = input.LA(1);

                         
                        int index5_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_44);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA5_126 = input.LA(1);

                         
                        int index5_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_126);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA5_53 = input.LA(1);

                         
                        int index5_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_53);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA5_66 = input.LA(1);

                         
                        int index5_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_66);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA5_35 = input.LA(1);

                         
                        int index5_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_35);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA5_33 = input.LA(1);

                         
                        int index5_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_33);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA5_111 = input.LA(1);

                         
                        int index5_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_111);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA5_102 = input.LA(1);

                         
                        int index5_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_102);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred6_ChemicalChunker()||(synpred6_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA5_47 = input.LA(1);

                         
                        int index5_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_47);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA5_50 = input.LA(1);

                         
                        int index5_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_50);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA5_122 = input.LA(1);

                         
                        int index5_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_122);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA5_34 = input.LA(1);

                         
                        int index5_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_34);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA5_49 = input.LA(1);

                         
                        int index5_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_49);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA5_116 = input.LA(1);

                         
                        int index5_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_116);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA5_127 = input.LA(1);

                         
                        int index5_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_127);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA5_60 = input.LA(1);

                         
                        int index5_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_60);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA5_128 = input.LA(1);

                         
                        int index5_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_128);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA5_115 = input.LA(1);

                         
                        int index5_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_115);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA5_64 = input.LA(1);

                         
                        int index5_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_64);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA5_57 = input.LA(1);

                         
                        int index5_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_57);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA5_48 = input.LA(1);

                         
                        int index5_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_48);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA5_121 = input.LA(1);

                         
                        int index5_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_121);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA5_117 = input.LA(1);

                         
                        int index5_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_117);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA5_31 = input.LA(1);

                         
                        int index5_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_31);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA5_124 = input.LA(1);

                         
                        int index5_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_124);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA5_129 = input.LA(1);

                         
                        int index5_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_129);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA5_130 = input.LA(1);

                         
                        int index5_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_130);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA5_108 = input.LA(1);

                         
                        int index5_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_108);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA5_43 = input.LA(1);

                         
                        int index5_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_43);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA5_123 = input.LA(1);

                         
                        int index5_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_123);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA5_39 = input.LA(1);

                         
                        int index5_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_39);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA5_38 = input.LA(1);

                         
                        int index5_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_38);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA5_110 = input.LA(1);

                         
                        int index5_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_110);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA5_55 = input.LA(1);

                         
                        int index5_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_55);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA5_109 = input.LA(1);

                         
                        int index5_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_109);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA5_58 = input.LA(1);

                         
                        int index5_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_58);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA5_46 = input.LA(1);

                         
                        int index5_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_46);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA5_37 = input.LA(1);

                         
                        int index5_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\32\uffff";
    static final String DFA6_eofS =
        "\1\1\31\uffff";
    static final String DFA6_minS =
        "\1\45\1\uffff\13\44\13\0\2\uffff";
    static final String DFA6_maxS =
        "\1\u00b2\1\uffff\13\44\13\0\2\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA6_specialS =
        "\15\uffff\1\10\1\5\1\6\1\2\1\1\1\3\1\12\1\11\1\0\1\7\1\4\2\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\1\6\1\7\3\1\1\5\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 161:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_17 = input.LA(1);

                         
                        int index6_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_16 = input.LA(1);

                         
                        int index6_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA6_18 = input.LA(1);

                         
                        int index6_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA6_23 = input.LA(1);

                         
                        int index6_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_23);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA6_14 = input.LA(1);

                         
                        int index6_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_14);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA6_15 = input.LA(1);

                         
                        int index6_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_15);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA6_22 = input.LA(1);

                         
                        int index6_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_22);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA6_19 = input.LA(1);

                         
                        int index6_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA7_static {
    static final String DFA7_eotS =
        "\13\uffff";
    static final String DFA7_eofS =
        "\1\1\12\uffff";
    static final String DFA7_minS =
        "\1\45\1\uffff\3\44\3\0\3\uffff";
    static final String DFA7_maxS =
        "\1\u00b2\1\uffff\3\44\3\0\3\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA7_specialS =
        "\5\uffff\1\0\1\2\1\1\3\uffff}>";
    static final String[] DFA7_transitionS = {
            "\134\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_static.DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_static.DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_static.DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_static.DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_static.DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_static.DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 161:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\110\uffff";
    static final String DFA14_eofS =
        "\110\uffff";
    static final String DFA14_minS =
        "\1\45\25\0\62\uffff";
    static final String DFA14_maxS =
        "\1\u00b2\25\0\62\uffff";
    static final String DFA14_acceptS =
        "\26\uffff\1\2\60\uffff\1\1";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\62\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\26\1\12\1\13\2\26\1\uffff\1\11\1\22\20\uffff\1\21\1\26\1"+
            "\uffff\1\26\1\uffff\3\26\1\20\1\26\1\4\3\26\1\14\6\26\1\23\4"+
            "\uffff\1\15\1\26\11\uffff\1\25\1\uffff\1\26\4\uffff\1\26\1\uffff"+
            "\1\26\1\uffff\1\26\5\uffff\1\26\1\uffff\1\26\3\uffff\1\26\1"+
            "\uffff\2\26\3\uffff\1\5\2\uffff\1\16\5\uffff\1\17\1\uffff\2"+
            "\26\1\2\2\uffff\1\3\1\1\2\26\1\uffff\1\6\1\7\1\10\1\26\1\uffff"+
            "\1\24\14\26\10\uffff\4\26",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "190:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA14_17 = input.LA(1);

                         
                        int index14_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA14_18 = input.LA(1);

                         
                        int index14_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA14_19 = input.LA(1);

                         
                        int index14_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA14_20 = input.LA(1);

                         
                        int index14_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA14_21 = input.LA(1);

                         
                        int index14_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\111\uffff";
    static final String DFA18_eofS =
        "\1\1\110\uffff";
    static final String DFA18_minS =
        "\1\45\1\uffff\106\0\1\uffff";
    static final String DFA18_maxS =
        "\1\u00b2\1\uffff\106\0\1\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\106\uffff\1\1";
    static final String DFA18_specialS =
        "\2\uffff\1\105\1\71\1\56\1\31\1\7\1\42\1\104\1\32\1\100\1\26\1"+
        "\103\1\52\1\37\1\15\1\76\1\33\1\66\1\5\1\41\1\53\1\12\1\30\1\34"+
        "\1\74\1\70\1\61\1\55\1\63\1\57\1\102\1\14\1\20\1\35\1\25\1\1\1\45"+
        "\1\3\1\6\1\21\1\46\1\10\1\36\1\62\1\2\1\11\1\77\1\13\1\40\1\65\1"+
        "\101\1\44\1\16\1\27\1\43\1\73\1\23\1\60\1\72\1\4\1\24\1\54\1\0\1"+
        "\51\1\64\1\47\1\75\1\67\1\22\1\17\1\50\1\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\20\1\12\1\13\1\42\1\52\1\1\1\11\1\32\20\1\1\31\1\51\1\1"+
            "\1\55\1\1\1\40\1\56\1\65\1\30\1\53\1\24\1\54\1\45\1\46\1\26"+
            "\1\57\1\60\1\61\1\62\1\63\1\37\1\33\4\1\1\27\1\41\11\1\1\35"+
            "\1\1\1\64\4\1\1\70\1\1\1\71\1\1\1\72\5\1\1\73\1\1\1\66\3\1\1"+
            "\74\1\1\1\50\1\67\3\1\1\25\2\1\1\15\5\1\1\22\1\1\1\16\1\1\1"+
            "\21\1\1\1\14\1\17\1\23\1\102\1\75\1\1\1\6\1\7\1\10\1\105\1\1"+
            "\1\34\1\47\1\36\1\106\1\103\1\107\1\43\1\44\1\2\1\3\1\5\1\4"+
            "\1\76\10\1\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()* loopback of 195:34: ( ( conjunction )* nounphraseContent {...}?)*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_63 = input.LA(1);

                         
                        int index18_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_63);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_36);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_45 = input.LA(1);

                         
                        int index18_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_45);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_38 = input.LA(1);

                         
                        int index18_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_38);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_60 = input.LA(1);

                         
                        int index18_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_60);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_39 = input.LA(1);

                         
                        int index18_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_39);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_42 = input.LA(1);

                         
                        int index18_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_42);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_46 = input.LA(1);

                         
                        int index18_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_46);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_22);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_48 = input.LA(1);

                         
                        int index18_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_48);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_32 = input.LA(1);

                         
                        int index18_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_32);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_53 = input.LA(1);

                         
                        int index18_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_53);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_70 = input.LA(1);

                         
                        int index18_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_70);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_33 = input.LA(1);

                         
                        int index18_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_33);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_40);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA18_69 = input.LA(1);

                         
                        int index18_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_69);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA18_57 = input.LA(1);

                         
                        int index18_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_57);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_61);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA18_35 = input.LA(1);

                         
                        int index18_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_35);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA18_54 = input.LA(1);

                         
                        int index18_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_54);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_23);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred95_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_24);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA18_34 = input.LA(1);

                         
                        int index18_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_34);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA18_43 = input.LA(1);

                         
                        int index18_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_43);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA18_49 = input.LA(1);

                         
                        int index18_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_49);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_20);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA18_55 = input.LA(1);

                         
                        int index18_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_55);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA18_52 = input.LA(1);

                         
                        int index18_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_52);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_37);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_41);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_66);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA18_71 = input.LA(1);

                         
                        int index18_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_71);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA18_64 = input.LA(1);

                         
                        int index18_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_64);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_21);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA18_62 = input.LA(1);

                         
                        int index18_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_62);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_28);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_30);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA18_58 = input.LA(1);

                         
                        int index18_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_58);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_27);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA18_44 = input.LA(1);

                         
                        int index18_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_44);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_29);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA18_65 = input.LA(1);

                         
                        int index18_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_65);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA18_50 = input.LA(1);

                         
                        int index18_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_50);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_18);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA18_68 = input.LA(1);

                         
                        int index18_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_68);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_26);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA18_59 = input.LA(1);

                         
                        int index18_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_56);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_25);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA18_67 = input.LA(1);

                         
                        int index18_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_67);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA18_47 = input.LA(1);

                         
                        int index18_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_47);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA18_51 = input.LA(1);

                         
                        int index18_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_51);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_31);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA17_static {
    static final String DFA17_eotS =
        "\107\uffff";
    static final String DFA17_eofS =
        "\107\uffff";
    static final String DFA17_minS =
        "\1\45\17\uffff\1\0\66\uffff";
    static final String DFA17_maxS =
        "\1\u00b2\17\uffff\1\0\66\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA17_specialS =
        "\20\uffff\1\0\66\uffff}>";
    static final String[] DFA17_transitionS = {
            "\5\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\106\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_static.DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_static.DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_static.DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_static.DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_static.DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_static.DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()* loopback of 195:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA17_16 = input.LA(1);

                         
                        int index17_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\17\uffff";
    static final String DFA20_eofS =
        "\17\uffff";
    static final String DFA20_minS =
        "\1\45\6\44\2\uffff\6\0";
    static final String DFA20_maxS =
        "\1\u00b2\6\44\2\uffff\6\0";
    static final String DFA20_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA20_specialS =
        "\11\uffff\1\2\1\1\1\4\1\3\1\5\1\0}>";
    static final String[] DFA20_transitionS = {
            "\1\7\1\5\1\6\2\7\1\uffff\1\4\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "()* loopback of 198:4: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA20_10 = input.LA(1);

                         
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA20_11 = input.LA(1);

                         
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\110\uffff";
    static final String DFA21_eofS =
        "\1\1\107\uffff";
    static final String DFA21_minS =
        "\1\45\1\uffff\101\0\5\uffff";
    static final String DFA21_maxS =
        "\1\u00b2\1\uffff\101\0\5\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\6\101\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String DFA21_specialS =
        "\2\uffff\1\2\1\100\1\35\1\16\1\25\1\45\1\14\1\46\1\17\1\70\1\13"+
        "\1\22\1\1\1\26\1\0\1\67\1\6\1\4\1\64\1\44\1\75\1\43\1\74\1\21\1"+
        "\41\1\31\1\76\1\7\1\47\1\63\1\30\1\40\1\54\1\20\1\57\1\60\1\27\1"+
        "\11\1\42\1\37\1\32\1\51\1\65\1\5\1\71\1\10\1\52\1\72\1\73\1\23\1"+
        "\50\1\15\1\24\1\56\1\77\1\36\1\53\1\61\1\3\1\12\1\55\1\33\1\66\1"+
        "\62\1\34\5\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\30\1\7\1\10\1\26\1\45\1\1\1\6\1\21\20\1\1\20\1\44\1\1\1"+
            "\50\1\1\1\24\1\51\1\60\1\17\1\46\1\14\1\47\1\40\1\41\1\34\1"+
            "\52\1\53\1\54\1\55\1\56\1\23\1\22\4\1\1\35\1\25\11\1\1\37\1"+
            "\1\1\57\4\1\1\63\1\1\1\64\1\1\1\65\5\1\1\66\1\1\1\61\3\1\1\67"+
            "\1\1\1\43\1\62\3\1\1\15\2\1\1\2\5\1\1\16\1\1\1\27\1\1\1\12\2"+
            "\1\1\13\1\33\1\75\1\70\1\1\1\3\1\4\1\5\1\100\1\1\1\36\1\42\1"+
            "\11\1\101\1\76\1\102\1\31\1\32\4\1\1\71\10\1\1\72\1\77\1\73"+
            "\1\74",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "()+ loopback of 198:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_16 = input.LA(1);

                         
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_60 = input.LA(1);

                         
                        int index21_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_60);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_19 = input.LA(1);

                         
                        int index21_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_45 = input.LA(1);

                         
                        int index21_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA21_18 = input.LA(1);

                         
                        int index21_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA21_29 = input.LA(1);

                         
                        int index21_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_29);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA21_47 = input.LA(1);

                         
                        int index21_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_47);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA21_39 = input.LA(1);

                         
                        int index21_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_39);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA21_61 = input.LA(1);

                         
                        int index21_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_61);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA21_53 = input.LA(1);

                         
                        int index21_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_53);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred99_ChemicalChunker()||(synpred99_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 67;}

                        else if ( (synpred100_ChemicalChunker()) ) {s = 70;}

                        else if ( ((synpred101_ChemicalChunker()||(synpred101_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA21_35 = input.LA(1);

                         
                        int index21_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_35);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA21_25 = input.LA(1);

                         
                        int index21_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_25);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA21_51 = input.LA(1);

                         
                        int index21_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_51);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA21_54 = input.LA(1);

                         
                        int index21_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_54);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA21_6 = input.LA(1);

                         
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA21_38 = input.LA(1);

                         
                        int index21_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_38);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA21_32 = input.LA(1);

                         
                        int index21_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_32);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA21_27 = input.LA(1);

                         
                        int index21_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_27);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA21_42 = input.LA(1);

                         
                        int index21_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_42);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA21_63 = input.LA(1);

                         
                        int index21_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_63);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA21_66 = input.LA(1);

                         
                        int index21_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_66);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA21_4 = input.LA(1);

                         
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA21_57 = input.LA(1);

                         
                        int index21_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_57);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA21_41 = input.LA(1);

                         
                        int index21_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_41);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA21_33 = input.LA(1);

                         
                        int index21_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA21_26 = input.LA(1);

                         
                        int index21_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_26);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA21_40 = input.LA(1);

                         
                        int index21_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_40);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA21_23 = input.LA(1);

                         
                        int index21_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_23);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA21_21 = input.LA(1);

                         
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA21_7 = input.LA(1);

                         
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA21_30 = input.LA(1);

                         
                        int index21_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_30);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA21_52 = input.LA(1);

                         
                        int index21_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_52);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA21_43 = input.LA(1);

                         
                        int index21_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_43);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA21_48 = input.LA(1);

                         
                        int index21_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_48);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA21_58 = input.LA(1);

                         
                        int index21_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_58);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA21_34 = input.LA(1);

                         
                        int index21_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_34);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA21_62 = input.LA(1);

                         
                        int index21_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_62);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA21_55 = input.LA(1);

                         
                        int index21_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_55);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA21_36 = input.LA(1);

                         
                        int index21_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_36);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA21_37 = input.LA(1);

                         
                        int index21_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_37);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA21_59 = input.LA(1);

                         
                        int index21_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_59);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA21_65 = input.LA(1);

                         
                        int index21_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_65);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA21_31 = input.LA(1);

                         
                        int index21_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_31);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA21_20 = input.LA(1);

                         
                        int index21_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_20);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA21_44 = input.LA(1);

                         
                        int index21_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_44);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA21_64 = input.LA(1);

                         
                        int index21_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_64);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred100_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA21_46 = input.LA(1);

                         
                        int index21_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_46);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA21_49 = input.LA(1);

                         
                        int index21_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_49);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA21_50 = input.LA(1);

                         
                        int index21_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_50);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA21_24 = input.LA(1);

                         
                        int index21_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_24);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA21_22 = input.LA(1);

                         
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA21_28 = input.LA(1);

                         
                        int index21_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_28);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA21_56 = input.LA(1);

                         
                        int index21_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_56);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA21_3 = input.LA(1);

                         
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\31\uffff";
    static final String DFA22_eofS =
        "\31\uffff";
    static final String DFA22_minS =
        "\1\45\7\uffff\1\0\20\uffff";
    static final String DFA22_maxS =
        "\1\u009c\7\uffff\1\0\20\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\1\26\uffff\1\2";
    static final String DFA22_specialS =
        "\10\uffff\1\0\20\uffff}>";
    static final String[] DFA22_transitionS = {
            "\4\1\2\uffff\2\1\20\uffff\1\1\4\uffff\1\1\2\uffff\1\1\1\uffff"+
            "\1\1\11\uffff\2\1\5\uffff\1\1\47\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "201:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred104_ChemicalChunker()||(synpred104_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\17\uffff";
    static final String DFA23_eofS =
        "\17\uffff";
    static final String DFA23_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA23_maxS =
        "\1\u009c\6\44\1\uffff\6\0\1\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA23_specialS =
        "\10\uffff\1\3\1\1\1\2\1\0\1\4\1\5\1\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\7\1\5\1\6\1\7\2\uffff\1\4\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "204:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_8 = input.LA(1);

                         
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\27\uffff";
    static final String DFA25_eofS =
        "\27\uffff";
    static final String DFA25_minS =
        "\1\45\4\0\1\uffff\12\0\7\uffff";
    static final String DFA25_maxS =
        "\1\u0097\4\0\1\uffff\12\0\7\uffff";
    static final String DFA25_acceptS =
        "\5\uffff\1\1\13\uffff\1\2\5\uffff";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\7\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\21\1\16\1\17\1\21\2\uffff\1\15\1\11\20\uffff\1\10\4\uffff"+
            "\1\21\2\uffff\1\7\1\uffff\1\3\11\uffff\1\21\1\5\5\uffff\1\21"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\21\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\12\1\13\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "204:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA25_14 = input.LA(1);

                         
                        int index25_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA27_static {
    static final String DFA27_eotS =
        "\u0091\uffff";
    static final String DFA27_eofS =
        "\1\3\u0090\uffff";
    static final String DFA27_minS =
        "\1\45\2\0\u008e\uffff";
    static final String DFA27_maxS =
        "\1\u00b2\2\0\u008e\uffff";
    static final String DFA27_acceptS =
        "\3\uffff\1\2\u008c\uffff\1\1";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\u008e\uffff}>";
    static final String[] DFA27_transitionS = {
            "\136\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_static.DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_static.DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_static.DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_static.DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_static.DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_static.DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()* loopback of 204:71: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA29_static {
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\17\uffff";
    static final String DFA29_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u009c\6\44\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\0\1\1\1\2\1\5\1\3\1\4\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\5\1\6\1\7\2\uffff\1\4\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_static.DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_static.DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_static.DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_static.DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_static.DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_static.DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "207:16: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA31_static {
    static final String DFA31_eotS =
        "\27\uffff";
    static final String DFA31_eofS =
        "\27\uffff";
    static final String DFA31_minS =
        "\1\45\4\0\1\uffff\12\0\7\uffff";
    static final String DFA31_maxS =
        "\1\u0097\4\0\1\uffff\12\0\7\uffff";
    static final String DFA31_acceptS =
        "\5\uffff\1\1\13\uffff\1\2\5\uffff";
    static final String DFA31_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\7\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\21\1\16\1\17\1\21\2\uffff\1\15\1\11\20\uffff\1\10\4\uffff"+
            "\1\21\2\uffff\1\7\1\uffff\1\3\11\uffff\1\21\1\5\5\uffff\1\21"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\21\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\12\1\13\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_static.DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_static.DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_static.DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_static.DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_static.DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_static.DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "207:26: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA45_static {
    static final String DFA45_eotS =
        "\67\uffff";
    static final String DFA45_eofS =
        "\1\1\66\uffff";
    static final String DFA45_minS =
        "\1\45\1\uffff\64\0\1\uffff";
    static final String DFA45_maxS =
        "\1\u00b2\1\uffff\64\0\1\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA45_specialS =
        "\2\uffff\1\7\1\26\1\57\1\21\1\50\1\42\1\24\1\32\1\13\1\16\1\43"+
        "\1\62\1\40\1\34\1\44\1\12\1\52\1\31\1\27\1\22\1\54\1\36\1\25\1\4"+
        "\1\2\1\53\1\20\1\30\1\51\1\61\1\14\1\3\1\46\1\15\1\47\1\17\1\6\1"+
        "\41\1\5\1\63\1\45\1\56\1\1\1\37\1\10\1\23\1\35\1\0\1\55\1\60\1\11"+
        "\1\33\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\12\1\13\3\1\1\11\47\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\23\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_static.DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_static.DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_static.DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_static.DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_static.DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_static.DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()+ loopback of 211:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA45_49 = input.LA(1);

                         
                        int index45_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_49);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA45_44 = input.LA(1);

                         
                        int index45_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_44);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA45_26 = input.LA(1);

                         
                        int index45_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_26);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA45_33 = input.LA(1);

                         
                        int index45_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_33);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA45_25 = input.LA(1);

                         
                        int index45_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_25);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA45_40 = input.LA(1);

                         
                        int index45_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_40);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA45_38 = input.LA(1);

                         
                        int index45_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_38);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA45_2 = input.LA(1);

                         
                        int index45_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_2);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA45_46 = input.LA(1);

                         
                        int index45_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_46);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA45_52 = input.LA(1);

                         
                        int index45_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA45_17 = input.LA(1);

                         
                        int index45_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_17);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA45_10 = input.LA(1);

                         
                        int index45_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_10);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA45_32 = input.LA(1);

                         
                        int index45_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_32);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA45_35 = input.LA(1);

                         
                        int index45_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_35);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA45_11 = input.LA(1);

                         
                        int index45_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_11);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA45_37 = input.LA(1);

                         
                        int index45_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_37);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA45_28 = input.LA(1);

                         
                        int index45_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_28);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA45_5 = input.LA(1);

                         
                        int index45_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_5);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA45_21 = input.LA(1);

                         
                        int index45_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_21);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA45_47 = input.LA(1);

                         
                        int index45_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_47);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA45_8 = input.LA(1);

                         
                        int index45_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_8);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA45_24 = input.LA(1);

                         
                        int index45_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_24);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA45_3 = input.LA(1);

                         
                        int index45_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_3);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA45_20 = input.LA(1);

                         
                        int index45_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_20);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA45_29 = input.LA(1);

                         
                        int index45_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_29);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA45_19 = input.LA(1);

                         
                        int index45_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_19);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA45_9 = input.LA(1);

                         
                        int index45_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_9);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA45_53 = input.LA(1);

                         
                        int index45_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_53);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA45_15 = input.LA(1);

                         
                        int index45_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_15);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA45_48 = input.LA(1);

                         
                        int index45_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_48);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA45_23 = input.LA(1);

                         
                        int index45_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_23);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA45_45 = input.LA(1);

                         
                        int index45_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_45);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA45_14 = input.LA(1);

                         
                        int index45_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_14);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA45_39 = input.LA(1);

                         
                        int index45_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_39);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA45_7 = input.LA(1);

                         
                        int index45_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_7);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA45_12 = input.LA(1);

                         
                        int index45_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_12);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA45_16 = input.LA(1);

                         
                        int index45_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_16);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA45_42 = input.LA(1);

                         
                        int index45_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_42);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA45_34 = input.LA(1);

                         
                        int index45_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_34);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA45_36 = input.LA(1);

                         
                        int index45_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_36);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA45_6 = input.LA(1);

                         
                        int index45_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_6);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA45_30 = input.LA(1);

                         
                        int index45_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_30);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA45_18 = input.LA(1);

                         
                        int index45_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_18);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA45_27 = input.LA(1);

                         
                        int index45_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_27);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA45_22 = input.LA(1);

                         
                        int index45_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_22);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA45_50 = input.LA(1);

                         
                        int index45_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_50);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA45_43 = input.LA(1);

                         
                        int index45_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_43);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA45_4 = input.LA(1);

                         
                        int index45_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_4);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA45_51 = input.LA(1);

                         
                        int index45_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_51);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA45_31 = input.LA(1);

                         
                        int index45_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_31);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA45_13 = input.LA(1);

                         
                        int index45_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_13);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA45_41 = input.LA(1);

                         
                        int index45_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_41);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA40_static {
    static final String DFA40_eotS =
        "\53\uffff";
    static final String DFA40_eofS =
        "\1\1\52\uffff";
    static final String DFA40_minS =
        "\1\45\1\uffff\50\0\1\uffff";
    static final String DFA40_maxS =
        "\1\u00b2\1\uffff\50\0\1\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA40_specialS =
        "\2\uffff\1\7\1\27\1\33\1\26\1\5\1\10\1\14\1\46\1\13\1\12\1\37\1"+
        "\36\1\47\1\24\1\16\1\43\1\21\1\44\1\42\1\20\1\41\1\45\1\25\1\17"+
        "\1\40\1\3\1\4\1\15\1\30\1\31\1\11\1\1\1\0\1\34\1\2\1\23\1\35\1\6"+
        "\1\22\1\32\1\uffff}>";
    static final String[] DFA40_transitionS = {
            "\56\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\51\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_static.DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_static.DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_static.DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_static.DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_static.DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_static.DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 211:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA40_34 = input.LA(1);

                         
                        int index40_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_34);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA40_33 = input.LA(1);

                         
                        int index40_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_33);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA40_36 = input.LA(1);

                         
                        int index40_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_36);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA40_27 = input.LA(1);

                         
                        int index40_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_27);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA40_28 = input.LA(1);

                         
                        int index40_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_28);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA40_32 = input.LA(1);

                         
                        int index40_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_32);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA40_29 = input.LA(1);

                         
                        int index40_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_29);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA40_16 = input.LA(1);

                         
                        int index40_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_16);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA40_25 = input.LA(1);

                         
                        int index40_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_25);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA40_21 = input.LA(1);

                         
                        int index40_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_21);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA40_18 = input.LA(1);

                         
                        int index40_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA40_40 = input.LA(1);

                         
                        int index40_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_40);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA40_37 = input.LA(1);

                         
                        int index40_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_37);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA40_15 = input.LA(1);

                         
                        int index40_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_15);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA40_24 = input.LA(1);

                         
                        int index40_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_24);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA40_30 = input.LA(1);

                         
                        int index40_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_30);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA40_31 = input.LA(1);

                         
                        int index40_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_31);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA40_41 = input.LA(1);

                         
                        int index40_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_41);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA40_35 = input.LA(1);

                         
                        int index40_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_35);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA40_38 = input.LA(1);

                         
                        int index40_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_38);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA40_26 = input.LA(1);

                         
                        int index40_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_26);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA40_22 = input.LA(1);

                         
                        int index40_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_22);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA40_20 = input.LA(1);

                         
                        int index40_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_20);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA40_17 = input.LA(1);

                         
                        int index40_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_17);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA40_19 = input.LA(1);

                         
                        int index40_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_19);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA40_23 = input.LA(1);

                         
                        int index40_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_23);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\13\uffff";
    static final String DFA42_eofS =
        "\1\1\12\uffff";
    static final String DFA42_minS =
        "\1\45\1\uffff\4\44\4\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b2\1\uffff\4\44\4\0\1\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA42_specialS =
        "\6\uffff\1\3\1\0\1\2\1\1\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\175\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()* loopback of 211:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_7 = input.LA(1);

                         
                        int index42_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA43_static {
    static final String DFA43_eotS =
        "\17\uffff";
    static final String DFA43_eofS =
        "\1\7\16\uffff";
    static final String DFA43_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA43_maxS =
        "\1\u00b2\6\44\1\uffff\6\0\1\uffff";
    static final String DFA43_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA43_specialS =
        "\10\uffff\1\3\1\1\1\5\1\2\1\0\1\4\1\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_static.DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_static.DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_static.DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_static.DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_static.DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_static.DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "211:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA43_12 = input.LA(1);

                         
                        int index43_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA43_9 = input.LA(1);

                         
                        int index43_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA43_11 = input.LA(1);

                         
                        int index43_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA43_8 = input.LA(1);

                         
                        int index43_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA43_13 = input.LA(1);

                         
                        int index43_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA43_10 = input.LA(1);

                         
                        int index43_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\u0091\uffff";
    static final String DFA49_eofS =
        "\1\13\u0090\uffff";
    static final String DFA49_minS =
        "\1\45\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\26\uffff\1\0\1\uffff"+
        "\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA49_maxS =
        "\1\u00b2\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\26\uffff\1\0"+
        "\1\uffff\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA49_acceptS =
        "\13\uffff\1\2\u0084\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\4\uffff\1\14\3\uffff\1\15\26\uffff\1\16\1\uffff\1\17\34\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\13\1\11\1\12\3\13\1\10\1\13\1\117\1\120\1\116\1\124\1\125"+
            "\1\134\1\135\1\121\1\133\1\126\1\130\1\122\1\123\1\132\1\131"+
            "\1\127\1\13\1\55\7\13\1\57\74\13\1\15\1\13\1\u0086\11\13\1\14"+
            "\1\22\1\26\2\13\1\115\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\114\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 211:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA49_18 = input.LA(1);

                         
                        int index49_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_18);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA49_22 = input.LA(1);

                         
                        int index49_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA49_45 = input.LA(1);

                         
                        int index49_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_45);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA49_47 = input.LA(1);

                         
                        int index49_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_47);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA49_76 = input.LA(1);

                         
                        int index49_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_76);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA49_77 = input.LA(1);

                         
                        int index49_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_77);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA49_78 = input.LA(1);

                         
                        int index49_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_78);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA49_79 = input.LA(1);

                         
                        int index49_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_79);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA49_80 = input.LA(1);

                         
                        int index49_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_80);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA49_81 = input.LA(1);

                         
                        int index49_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_81);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA49_82 = input.LA(1);

                         
                        int index49_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_82);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA49_83 = input.LA(1);

                         
                        int index49_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_83);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA49_84 = input.LA(1);

                         
                        int index49_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_84);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_85);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA49_86 = input.LA(1);

                         
                        int index49_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_86);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA49_87 = input.LA(1);

                         
                        int index49_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_87);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA49_88 = input.LA(1);

                         
                        int index49_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_88);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA49_89 = input.LA(1);

                         
                        int index49_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_89);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA49_90 = input.LA(1);

                         
                        int index49_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_90);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA49_91 = input.LA(1);

                         
                        int index49_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_91);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA49_92 = input.LA(1);

                         
                        int index49_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_92);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA49_93 = input.LA(1);

                         
                        int index49_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_93);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA49_134 = input.LA(1);

                         
                        int index49_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_134);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA50_static {
    static final String DFA50_eotS =
        "\60\uffff";
    static final String DFA50_eofS =
        "\51\uffff\1\53\2\uffff\1\53\3\uffff";
    static final String DFA50_minS =
        "\1\123\11\uffff\1\44\36\uffff\1\45\1\44\1\uffff\1\45\1\44\1\0\1"+
        "\uffff";
    static final String DFA50_maxS =
        "\1\u00ae\11\uffff\1\44\36\uffff\1\u00b2\1\44\1\uffff\1\u00b2\1"+
        "\44\1\0\1\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\2\uffff\1\27\3\uffff\1\12";
    static final String DFA50_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\51\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\152\53\1\52\43\53",
            "\1\54",
            "",
            "\71\53\1\55\124\53",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_static.DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_static.DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_static.DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_static.DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_static.DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_static.DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "212:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA50_46 = input.LA(1);

                         
                        int index50_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index50_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA52_static {
    static final String DFA52_eotS =
        "\124\uffff";
    static final String DFA52_eofS =
        "\124\uffff";
    static final String DFA52_minS =
        "\1\45\2\uffff\20\0\1\uffff\3\0\1\uffff\4\0\1\uffff\2\0\65\uffff";
    static final String DFA52_maxS =
        "\1\u00b2\2\uffff\20\0\1\uffff\3\0\1\uffff\4\0\1\uffff\2\0\65\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\1\1\2\20\uffff\1\6\10\uffff\1\7\2\uffff\1\11\1\13\1"+
        "\14\1\16\1\21\1\23\1\26\1\30\1\32\1\33\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\50\1\51\1\52\1\53\1\54\1\56\1\57\1\60\5\uffff"+
        "\1\61\1\62\1\63\1\3\1\5\1\24\1\4\1\20\1\27\1\55\1\47\1\25\1\10\1"+
        "\34\1\15\1\12\1\17\1\22\1\46\1\64\1\31";
    static final String DFA52_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\uffff\1\20\1\21\1\22\1\uffff\1\23\1\24\1\25"+
        "\1\26\1\uffff\1\27\1\30\65\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\35\1\20\1\21\1\33\1\44\1\uffff\1\17\1\13\20\uffff\1\12\1"+
            "\43\1\uffff\1\47\1\uffff\1\31\1\50\1\57\1\11\1\45\1\6\1\46\1"+
            "\36\1\37\1\24\1\51\1\52\1\53\1\54\1\55\1\30\1\22\4\uffff\1\25"+
            "\1\32\11\uffff\1\23\1\uffff\1\56\4\uffff\1\62\1\uffff\1\63\1"+
            "\uffff\1\64\5\uffff\1\65\1\uffff\1\60\3\uffff\1\66\1\uffff\1"+
            "\42\1\61\3\uffff\1\7\2\uffff\1\4\5\uffff\1\10\1\uffff\1\34\1"+
            "\uffff\1\3\2\uffff\1\5\1\23\1\71\1\67\1\uffff\1\14\1\15\1\16"+
            "\1\77\1\uffff\1\26\1\40\1\41\1\100\1\71\1\101\1\1\1\2\4\uffff"+
            "\1\70\10\uffff\4\71",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_static.DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_static.DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_static.DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_static.DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_static.DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_static.DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "219:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( ((synpred179_ChemicalChunker()||(synpred179_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 28;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA52_4 = input.LA(1);

                         
                        int index52_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                         
                        input.seek(index52_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA52_5 = input.LA(1);

                         
                        int index52_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index52_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA52_6 = input.LA(1);

                         
                        int index52_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index52_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA52_7 = input.LA(1);

                         
                        int index52_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred217_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index52_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred211_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA52_18 = input.LA(1);

                         
                        int index52_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                         
                        input.seek(index52_18);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA52_20 = input.LA(1);

                         
                        int index52_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index52_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA52_21 = input.LA(1);

                         
                        int index52_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred185_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index52_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA52_22 = input.LA(1);

                         
                        int index52_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index52_22);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA52_24 = input.LA(1);

                         
                        int index52_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index52_24);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA52_25 = input.LA(1);

                         
                        int index52_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index52_25);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA52_26 = input.LA(1);

                         
                        int index52_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index52_26);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA52_27 = input.LA(1);

                         
                        int index52_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 82;}

                         
                        input.seek(index52_27);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA52_29 = input.LA(1);

                         
                        int index52_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index52_29);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA52_30 = input.LA(1);

                         
                        int index52_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index52_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA54_static {
    static final String DFA54_eotS =
        "\45\uffff";
    static final String DFA54_eofS =
        "\45\uffff";
    static final String DFA54_minS =
        "\1\46\36\0\6\uffff";
    static final String DFA54_maxS =
        "\1\u00a7\36\0\6\uffff";
    static final String DFA54_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA54_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_static.DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_static.DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_static.DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_static.DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_static.DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_static.DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "224:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA54_2 = input.LA(1);

                         
                        int index54_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA54_4 = input.LA(1);

                         
                        int index54_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA54_5 = input.LA(1);

                         
                        int index54_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA54_6 = input.LA(1);

                         
                        int index54_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA54_7 = input.LA(1);

                         
                        int index54_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA54_11 = input.LA(1);

                         
                        int index54_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA54_15 = input.LA(1);

                         
                        int index54_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA54_16 = input.LA(1);

                         
                        int index54_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA54_17 = input.LA(1);

                         
                        int index54_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA54_18 = input.LA(1);

                         
                        int index54_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA54_19 = input.LA(1);

                         
                        int index54_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA54_20 = input.LA(1);

                         
                        int index54_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA54_21 = input.LA(1);

                         
                        int index54_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA54_22 = input.LA(1);

                         
                        int index54_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA54_23 = input.LA(1);

                         
                        int index54_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA54_24 = input.LA(1);

                         
                        int index54_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA54_25 = input.LA(1);

                         
                        int index54_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA54_26 = input.LA(1);

                         
                        int index54_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA54_27 = input.LA(1);

                         
                        int index54_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA54_28 = input.LA(1);

                         
                        int index54_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA54_29 = input.LA(1);

                         
                        int index54_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA54_30 = input.LA(1);

                         
                        int index54_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA56_static {
    static final String DFA56_eotS =
        "\17\uffff";
    static final String DFA56_eofS =
        "\17\uffff";
    static final String DFA56_minS =
        "\1\46\1\uffff\6\44\1\uffff\6\0";
    static final String DFA56_maxS =
        "\1\u00a5\1\uffff\6\44\1\uffff\6\0";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA56_specialS =
        "\11\uffff\1\5\1\1\1\2\1\3\1\0\1\4}>";
    static final String[] DFA56_transitionS = {
            "\1\6\1\7\3\uffff\1\5\1\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1"+
            "\1\12\uffff\1\1\55\uffff\1\1\2\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_static.DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_static.DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_static.DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_static.DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_static.DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_static.DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 230:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA58_static {
    static final String DFA58_eotS =
        "\27\uffff";
    static final String DFA58_eofS =
        "\27\uffff";
    static final String DFA58_minS =
        "\1\46\1\uffff\12\44\12\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00a7\1\uffff\12\44\12\0\1\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA58_specialS =
        "\14\uffff\1\7\1\2\1\11\1\5\1\0\1\3\1\10\1\4\1\1\1\6\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\uffff\20\1\1\uffff\1\1\121\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_static.DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_static.DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_static.DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_static.DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_static.DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_static.DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 236:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA58_16 = input.LA(1);

                         
                        int index58_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA58_20 = input.LA(1);

                         
                        int index58_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_20);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA58_13 = input.LA(1);

                         
                        int index58_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA58_17 = input.LA(1);

                         
                        int index58_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA58_19 = input.LA(1);

                         
                        int index58_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA58_15 = input.LA(1);

                         
                        int index58_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA58_21 = input.LA(1);

                         
                        int index58_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_21);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA58_12 = input.LA(1);

                         
                        int index58_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_12);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA58_18 = input.LA(1);

                         
                        int index58_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA64_static {
    static final String DFA64_eotS =
        "\27\uffff";
    static final String DFA64_eofS =
        "\27\uffff";
    static final String DFA64_minS =
        "\1\46\12\44\1\uffff\12\0\1\uffff";
    static final String DFA64_maxS =
        "\1\u00a7\12\44\1\uffff\12\0\1\uffff";
    static final String DFA64_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA64_specialS =
        "\14\uffff\1\7\1\0\1\11\1\4\1\10\1\5\1\2\1\3\1\1\1\6\1\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\11\1\12\3\uffff\1\10\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_static.DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_static.DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_static.DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_static.DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_static.DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_static.DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_static.DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_static.DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "241:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA64_13 = input.LA(1);

                         
                        int index64_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA64_20 = input.LA(1);

                         
                        int index64_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_20);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA64_18 = input.LA(1);

                         
                        int index64_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA64_19 = input.LA(1);

                         
                        int index64_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA64_15 = input.LA(1);

                         
                        int index64_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_15);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA64_17 = input.LA(1);

                         
                        int index64_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_17);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA64_21 = input.LA(1);

                         
                        int index64_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_21);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA64_12 = input.LA(1);

                         
                        int index64_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_12);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA64_16 = input.LA(1);

                         
                        int index64_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_16);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA64_14 = input.LA(1);

                         
                        int index64_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA76_static {
    static final String DFA76_eotS =
        "\u0091\uffff";
    static final String DFA76_eofS =
        "\1\1\u0090\uffff";
    static final String DFA76_minS =
        "\1\45\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\15\0\160\uffff";
    static final String DFA76_maxS =
        "\1\u00b2\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\15\0\160\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA76_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\4\uffff\1\10\1"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\160\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\1\1\11\1\12\3\1\1\10\1\35\20\1\1\34\7\1\1\33\1\1\1\27\3"+
            "\1\1\31\6\1\1\36\4\1\1\32\12\1\1\40\35\1\1\30\2\1\1\15\5\1\1"+
            "\25\3\1\1\24\1\1\1\14\1\22\1\26\3\1\1\5\1\6\1\7\2\1\1\37\30"+
            "\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_static.DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_static.DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_static.DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_static.DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_static.DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_static.DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()* loopback of 262:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA76_5 = input.LA(1);

                         
                        int index76_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA76_6 = input.LA(1);

                         
                        int index76_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA76_7 = input.LA(1);

                         
                        int index76_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA76_9 = input.LA(1);

                         
                        int index76_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA76_10 = input.LA(1);

                         
                        int index76_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA76_12 = input.LA(1);

                         
                        int index76_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA76_13 = input.LA(1);

                         
                        int index76_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA76_18 = input.LA(1);

                         
                        int index76_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA76_20 = input.LA(1);

                         
                        int index76_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA76_21 = input.LA(1);

                         
                        int index76_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_21);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA76_22 = input.LA(1);

                         
                        int index76_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_22);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA76_23 = input.LA(1);

                         
                        int index76_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_23);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA76_24 = input.LA(1);

                         
                        int index76_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_24);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA76_25 = input.LA(1);

                         
                        int index76_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_25);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA76_26 = input.LA(1);

                         
                        int index76_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_26);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA76_27 = input.LA(1);

                         
                        int index76_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_27);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA76_28 = input.LA(1);

                         
                        int index76_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_28);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA76_29 = input.LA(1);

                         
                        int index76_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA76_30 = input.LA(1);

                         
                        int index76_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_30);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA76_31 = input.LA(1);

                         
                        int index76_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_31);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA76_32 = input.LA(1);

                         
                        int index76_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\27\uffff";
    static final String DFA75_eofS =
        "\27\uffff";
    static final String DFA75_minS =
        "\1\46\15\uffff\1\0\10\uffff";
    static final String DFA75_maxS =
        "\1\u009a\15\uffff\1\0\10\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA75_specialS =
        "\16\uffff\1\0\10\uffff}>";
    static final String[] DFA75_transitionS = {
            "\2\1\3\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\26\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 262:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_14 = input.LA(1);

                         
                        int index75_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA82_static {
    static final String DFA82_eotS =
        "\35\uffff";
    static final String DFA82_eofS =
        "\1\1\34\uffff";
    static final String DFA82_minS =
        "\1\46\1\uffff\23\0\10\uffff";
    static final String DFA82_maxS =
        "\1\u009a\1\uffff\23\0\10\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\11\23\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA82_specialS =
        "\2\uffff\1\22\1\12\1\16\1\7\1\13\1\20\1\4\1\15\1\14\1\11\1\1\1"+
        "\2\1\3\1\5\1\21\1\17\1\6\1\10\1\0\10\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\22\20\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\23\4\uffff\1\15\12\uffff\1\1\35"+
            "\uffff\1\5\2\uffff\1\16\5\uffff\1\17\3\uffff\1\2\2\uffff\1\3"+
            "\4\uffff\1\6\1\7\1\10\2\uffff\1\24",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_static.DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_static.DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_static.DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_static.DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_static.DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_static.DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()+ loopback of 269:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA82_20 = input.LA(1);

                         
                        int index82_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA82_12 = input.LA(1);

                         
                        int index82_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA82_13 = input.LA(1);

                         
                        int index82_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA82_14 = input.LA(1);

                         
                        int index82_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA82_8 = input.LA(1);

                         
                        int index82_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA82_15 = input.LA(1);

                         
                        int index82_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA82_18 = input.LA(1);

                         
                        int index82_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA82_5 = input.LA(1);

                         
                        int index82_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_5);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA82_19 = input.LA(1);

                         
                        int index82_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_19);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA82_11 = input.LA(1);

                         
                        int index82_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA82_3 = input.LA(1);

                         
                        int index82_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_3);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA82_6 = input.LA(1);

                         
                        int index82_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_6);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA82_10 = input.LA(1);

                         
                        int index82_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_10);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA82_9 = input.LA(1);

                         
                        int index82_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_9);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA82_4 = input.LA(1);

                         
                        int index82_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_4);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA82_17 = input.LA(1);

                         
                        int index82_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_17);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA82_7 = input.LA(1);

                         
                        int index82_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_7);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA82_16 = input.LA(1);

                         
                        int index82_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_16);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA82_2 = input.LA(1);

                         
                        int index82_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA84_static {
    static final String DFA84_eotS =
        "\17\uffff";
    static final String DFA84_eofS =
        "\1\7\16\uffff";
    static final String DFA84_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA84_maxS =
        "\1\u00b2\6\44\1\uffff\6\0\1\uffff";
    static final String DFA84_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA84_specialS =
        "\10\uffff\1\1\1\2\1\0\1\5\1\3\1\4\1\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_static.DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_static.DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_static.DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_static.DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_static.DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_static.DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "271:55: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA84_10 = input.LA(1);

                         
                        int index84_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA84_8 = input.LA(1);

                         
                        int index84_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA84_9 = input.LA(1);

                         
                        int index84_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA84_12 = input.LA(1);

                         
                        int index84_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA84_13 = input.LA(1);

                         
                        int index84_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA84_11 = input.LA(1);

                         
                        int index84_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA86_static {
    static final String DFA86_eotS =
        "\u0092\uffff";
    static final String DFA86_eofS =
        "\1\11\u0091\uffff";
    static final String DFA86_minS =
        "\1\45\10\0\u0089\uffff";
    static final String DFA86_maxS =
        "\1\u00b2\10\0\u0089\uffff";
    static final String DFA86_acceptS =
        "\11\uffff\1\3\u0086\uffff\1\1\1\2";
    static final String DFA86_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\u0089\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\7\37\11\1\10\1\11\1\3\70\11\1\4\10\11\1\5\1\11\1\6\1\11"+
            "\1\1\2\11\1\2\42\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_static.DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_static.DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_static.DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_static.DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_static.DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_static.DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "271:69: ( numericReferenceOrQuantity | nnchementity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA86_1 = input.LA(1);

                         
                        int index86_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred269_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred269_ChemicalChunker())) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA86_2 = input.LA(1);

                         
                        int index86_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA86_3 = input.LA(1);

                         
                        int index86_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA86_4 = input.LA(1);

                         
                        int index86_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA86_5 = input.LA(1);

                         
                        int index86_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA86_6 = input.LA(1);

                         
                        int index86_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA86_7 = input.LA(1);

                         
                        int index86_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA86_8 = input.LA(1);

                         
                        int index86_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA87_static {
    static final String DFA87_eotS =
        "\u0091\uffff";
    static final String DFA87_eofS =
        "\1\1\u0090\uffff";
    static final String DFA87_minS =
        "\1\45\23\uffff\4\0\171\uffff";
    static final String DFA87_maxS =
        "\1\u00b2\23\uffff\4\0\171\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA87_specialS =
        "\24\uffff\1\0\1\1\1\2\1\3\171\uffff}>";
    static final String[] DFA87_transitionS = {
            "\42\1\1\26\70\1\1\27\14\1\1\24\2\1\1\25\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_static.DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_static.DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_static.DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_static.DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_static.DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_static.DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "()* loopback of 271:115: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA87_20 = input.LA(1);

                         
                        int index87_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA87_21 = input.LA(1);

                         
                        int index87_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA87_22 = input.LA(1);

                         
                        int index87_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA87_23 = input.LA(1);

                         
                        int index87_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA88_static {
    static final String DFA88_eotS =
        "\u0091\uffff";
    static final String DFA88_eofS =
        "\1\5\u0090\uffff";
    static final String DFA88_minS =
        "\1\45\4\0\u008c\uffff";
    static final String DFA88_maxS =
        "\1\u00b2\4\0\u008c\uffff";
    static final String DFA88_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA88_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA88_transitionS = {
            "\21\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_static.DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_static.DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_static.DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_static.DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_static.DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_static.DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "271:125: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA88_1 = input.LA(1);

                         
                        int index88_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA88_2 = input.LA(1);

                         
                        int index88_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred272_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA88_3 = input.LA(1);

                         
                        int index88_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred272_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA88_4 = input.LA(1);

                         
                        int index88_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred272_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA90_static {
    static final String DFA90_eotS =
        "\13\uffff";
    static final String DFA90_eofS =
        "\1\4\5\uffff\1\4\4\uffff";
    static final String DFA90_minS =
        "\1\45\3\44\1\uffff\1\0\1\45\1\0\1\uffff\1\44\1\0";
    static final String DFA90_maxS =
        "\1\u00b2\3\44\1\uffff\1\0\1\u00b2\1\0\1\uffff\1\44\1\0";
    static final String DFA90_acceptS =
        "\4\uffff\1\2\3\uffff\1\1\2\uffff";
    static final String DFA90_specialS =
        "\5\uffff\1\0\1\uffff\1\1\2\uffff\1\2}>";
    static final String[] DFA90_transitionS = {
            "\135\4\1\2\1\4\1\3\1\4\1\1\54\4",
            "\1\5",
            "\1\6",
            "\1\7",
            "",
            "\1\uffff",
            "\55\4\1\11\140\4",
            "\1\uffff",
            "",
            "\1\12",
            "\1\uffff"
    };
    }

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_static.DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_static.DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_static.DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_static.DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_static.DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_static.DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_static.DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_static.DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "273:35: ( afterOscarCompoundStructure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA90_5 = input.LA(1);

                         
                        int index90_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index90_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA90_7 = input.LA(1);

                         
                        int index90_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index90_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA90_10 = input.LA(1);

                         
                        int index90_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index90_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA100_static {
    static final String DFA100_eotS =
        "\22\uffff";
    static final String DFA100_eofS =
        "\22\uffff";
    static final String DFA100_minS =
        "\1\46\6\0\13\uffff";
    static final String DFA100_maxS =
        "\1\u0097\6\0\13\uffff";
    static final String DFA100_acceptS =
        "\7\uffff\1\2\1\uffff\1\3\7\uffff\1\1";
    static final String DFA100_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\13\uffff}>";
    static final String[] DFA100_transitionS = {
            "\2\11\3\uffff\2\11\20\uffff\1\7\7\uffff\1\7\1\uffff\1\3\12"+
            "\uffff\1\11\55\uffff\1\4\2\uffff\1\5\5\uffff\1\6\3\uffff\1\1"+
            "\2\uffff\1\2\4\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_static.DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_static.DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_static.DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_static.DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_static.DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_static.DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_static.DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_static.DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "280:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA100_1 = input.LA(1);

                         
                        int index100_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA100_2 = input.LA(1);

                         
                        int index100_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA100_3 = input.LA(1);

                         
                        int index100_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA100_4 = input.LA(1);

                         
                        int index100_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA100_5 = input.LA(1);

                         
                        int index100_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA100_6 = input.LA(1);

                         
                        int index100_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA101_static {
    static final String DFA101_eotS =
        "\43\uffff";
    static final String DFA101_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA101_minS =
        "\1\45\1\44\1\uffff\1\45\5\44\4\45\1\0\7\44\1\uffff\3\45\1\0\3\45"+
        "\3\44\3\45";
    static final String DFA101_maxS =
        "\1\u00b2\1\44\1\uffff\1\u00b2\5\44\4\u00b2\1\0\7\44\1\uffff\3\u00b2"+
        "\1\0\3\u00b2\3\44\3\u00b2";
    static final String DFA101_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA101_specialS =
        "\15\uffff\1\0\13\uffff\1\1\11\uffff}>";
    static final String[] DFA101_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\4\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\4\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_static.DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_static.DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_static.DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_static.DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_static.DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_static.DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "280:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA101_13 = input.LA(1);

                         
                        int index101_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA101_25 = input.LA(1);

                         
                        int index101_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA104_static {
    static final String DFA104_eotS =
        "\15\uffff";
    static final String DFA104_eofS =
        "\15\uffff";
    static final String DFA104_minS =
        "\1\46\2\uffff\1\0\11\uffff";
    static final String DFA104_maxS =
        "\1\u0097\2\uffff\1\0\11\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\7\uffff";
    static final String DFA104_specialS =
        "\3\uffff\1\0\11\uffff}>";
    static final String[] DFA104_transitionS = {
            "\2\5\3\uffff\2\5\45\uffff\1\5\60\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\3\2\uffff\1\1\4\uffff\3\5",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_static.DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_static.DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_static.DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_static.DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_static.DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_static.DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "283:78: ( bracketedContentInMol )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA104_3 = input.LA(1);

                         
                        int index104_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index104_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\u0091\uffff";
    static final String DFA110_eofS =
        "\1\2\u0090\uffff";
    static final String DFA110_minS =
        "\1\45\1\0\14\uffff\6\0\3\uffff\2\0\170\uffff";
    static final String DFA110_maxS =
        "\1\u00b2\1\0\14\uffff\6\0\3\uffff\2\0\170\uffff";
    static final String DFA110_acceptS =
        "\2\uffff\1\2\u008d\uffff\1\1";
    static final String DFA110_specialS =
        "\1\uffff\1\0\14\uffff\1\1\1\2\1\3\1\4\1\5\1\6\3\uffff\1\7\1\10"+
        "\170\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\2\1\22\1\23\3\2\1\21\1\27\45\2\1\30\72\2\1\1\7\2\1\16\1"+
            "\17\1\20\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()+ loopback of 286:100: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_1 = input.LA(1);

                         
                        int index110_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_14 = input.LA(1);

                         
                        int index110_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA110_15 = input.LA(1);

                         
                        int index110_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA110_16 = input.LA(1);

                         
                        int index110_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA110_17 = input.LA(1);

                         
                        int index110_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA110_18 = input.LA(1);

                         
                        int index110_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA110_19 = input.LA(1);

                         
                        int index110_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA110_23 = input.LA(1);

                         
                        int index110_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_23);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA110_24 = input.LA(1);

                         
                        int index110_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\17\uffff";
    static final String DFA111_eofS =
        "\17\uffff";
    static final String DFA111_minS =
        "\1\46\10\uffff\2\0\4\uffff";
    static final String DFA111_maxS =
        "\1\u0097\10\uffff\2\0\4\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\3\11\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA111_specialS =
        "\11\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA111_transitionS = {
            "\2\1\3\uffff\2\1\32\uffff\1\13\12\uffff\1\1\55\uffff\1\13\2"+
            "\uffff\1\15\5\uffff\1\15\3\uffff\1\11\2\uffff\1\12\4\uffff\3"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()* loopback of 289:3: ( quantity | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA112_static {
    static final String DFA112_eotS =
        "\14\uffff";
    static final String DFA112_eofS =
        "\1\2\13\uffff";
    static final String DFA112_minS =
        "\1\45\1\0\1\uffff\10\0\1\uffff";
    static final String DFA112_maxS =
        "\1\u00b2\1\0\1\uffff\10\0\1\uffff";
    static final String DFA112_acceptS =
        "\2\uffff\1\2\10\uffff\1\1";
    static final String DFA112_specialS =
        "\1\uffff\1\4\1\uffff\1\10\1\1\1\6\1\0\1\7\1\3\1\5\1\2\1\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\2\1\7\1\10\3\2\1\6\1\11\45\2\1\12\72\2\1\1\7\2\1\3\1\4\1"+
            "\5\33\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_static.DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_static.DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_static.DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_static.DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_static.DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_static.DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()+ loopback of 289:37: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA112_10 = input.LA(1);

                         
                        int index112_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA112_5 = input.LA(1);

                         
                        int index112_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_5);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_7);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA114_static {
    static final String DFA114_eotS =
        "\u0094\uffff";
    static final String DFA114_eofS =
        "\1\1\u0093\uffff";
    static final String DFA114_minS =
        "\1\45\3\uffff\1\0\13\uffff\5\0\177\uffff";
    static final String DFA114_maxS =
        "\1\u00b2\3\uffff\1\0\13\uffff\5\0\177\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\5\u008e\uffff\1\1\1\3\1\4\1\2";
    static final String DFA114_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\177\uffff}>";
    static final String[] DFA114_transitionS = {
            "\42\1\1\22\70\1\1\23\2\1\1\4\5\1\1\24\3\1\1\20\2\1\1\21\42"+
            "\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_static.DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_static.DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_static.DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_static.DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_static.DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_static.DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "()* loopback of 291:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA114_4 = input.LA(1);

                         
                        int index114_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA114_16 = input.LA(1);

                         
                        int index114_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA114_17 = input.LA(1);

                         
                        int index114_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA114_19 = input.LA(1);

                         
                        int index114_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA114_20 = input.LA(1);

                         
                        int index114_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA115_static {
    static final String DFA115_eotS =
        "\43\uffff";
    static final String DFA115_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA115_minS =
        "\1\45\1\44\1\uffff\1\45\5\44\4\45\1\0\7\44\1\uffff\3\45\1\0\3\45"+
        "\3\44\3\45";
    static final String DFA115_maxS =
        "\1\u00b2\1\44\1\uffff\1\u00b2\5\44\4\u00b2\1\0\7\44\1\uffff\3\u00b2"+
        "\1\0\3\u00b2\3\44\3\u00b2";
    static final String DFA115_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA115_specialS =
        "\15\uffff\1\1\13\uffff\1\0\11\uffff}>";
    static final String[] DFA115_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\4\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\4\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_static.DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_static.DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_static.DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_static.DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_static.DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_static.DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "297:68: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA115_25 = input.LA(1);

                         
                        int index115_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index115_25);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA115_13 = input.LA(1);

                         
                        int index115_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index115_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\56\uffff";
    static final String DFA117_eofS =
        "\56\uffff";
    static final String DFA117_minS =
        "\1\45\2\44\1\uffff\4\44\1\uffff\1\44\1\uffff\1\45\1\52\4\46\1\45"+
        "\6\44\1\52\1\45\2\0\1\45\1\0\5\44\2\u008a\1\52\2\u008e\3\44\3\0";
    static final String DFA117_maxS =
        "\1\u0097\2\44\1\uffff\4\44\1\uffff\1\44\1\uffff\1\u0090\1\u009a"+
        "\3\u0097\1\u0095\1\u0090\6\44\1\u009a\1\u0090\2\0\1\u0090\1\0\5"+
        "\44\2\u008a\1\u009a\2\u008e\3\44\3\0";
    static final String DFA117_acceptS =
        "\3\uffff\1\1\4\uffff\1\2\1\uffff\1\3\43\uffff";
    static final String DFA117_specialS =
        "\32\uffff\1\4\1\3\1\uffff\1\0\15\uffff\1\1\1\5\1\2}>";
    static final String[] DFA117_transitionS = {
            "\1\12\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1"+
            "\10\2\uffff\1\11\1\uffff\1\3\11\uffff\1\10\6\uffff\1\10\47\uffff"+
            "\1\3\10\uffff\1\12\1\uffff\1\12\1\uffff\1\1\2\uffff\1\2\4\uffff"+
            "\1\4\2\12",
            "\1\13",
            "\1\14",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\21",
            "",
            "\1\12\41\uffff\1\3\70\uffff\1\3\12\uffff\1\12\4\uffff\1\22",
            "\1\3\2\uffff\1\10\21\uffff\3\3\1\uffff\2\3\2\uffff\1\10\70"+
            "\uffff\1\10\7\uffff\1\3\2\uffff\1\12\1\uffff\1\10\2\uffff\1"+
            "\10\11\uffff\1\3",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\10\1\uffff\1\10\2\uffff\2\10\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\12\13\uffff\1\10\6\uffff\1\10\74\uffff\1\10",
            "\1\27\7\uffff\1\10\10\uffff\1\10\2\uffff\1\10\15\uffff\1\10"+
            "\63\uffff\1\10\3\uffff\2\10\10\uffff\1\23\1\uffff\1\25\1\uffff"+
            "\1\26\2\uffff\1\24",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\3\24\uffff\3\3\1\uffff\2\3\103\uffff\1\3\2\uffff\1\12\2"+
            "\uffff\1\12\13\uffff\1\3",
            "\1\37\152\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\41\41\uffff\1\10\70\uffff\1\10\12\uffff\1\42\4\uffff\1"+
            "\40",
            "\1\uffff",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\50",
            "\1\10\24\uffff\3\10\1\uffff\2\10\103\uffff\1\10\2\uffff\1"+
            "\42\2\uffff\1\51\13\uffff\1\10",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "299:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_29 = input.LA(1);

                         
                        int index117_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index117_29);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA117_43 = input.LA(1);

                         
                        int index117_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index117_43);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA117_45 = input.LA(1);

                         
                        int index117_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index117_45);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA117_27 = input.LA(1);

                         
                        int index117_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index117_27);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA117_26 = input.LA(1);

                         
                        int index117_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index117_26);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA117_44 = input.LA(1);

                         
                        int index117_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index117_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA116_static {
    static final String DFA116_eotS =
        "\25\uffff";
    static final String DFA116_eofS =
        "\25\uffff";
    static final String DFA116_minS =
        "\1\45\13\0\11\uffff";
    static final String DFA116_maxS =
        "\1\u0097\13\0\11\uffff";
    static final String DFA116_acceptS =
        "\14\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA116_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\11\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\14\1\4\1\14\1\12\2\uffff\1\3\1\5\20\uffff\1\6\4\uffff\1"+
            "\10\2\uffff\1\13\13\uffff\1\7\6\uffff\1\11\60\uffff\1\14\1\uffff"+
            "\1\14\1\uffff\1\14\2\uffff\1\1\4\uffff\1\2\2\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_static.DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_static.DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_static.DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_static.DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_static.DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_static.DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "300:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA116_1 = input.LA(1);

                         
                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA116_2 = input.LA(1);

                         
                        int index116_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index116_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA116_3 = input.LA(1);

                         
                        int index116_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index116_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA116_4 = input.LA(1);

                         
                        int index116_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index116_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA116_5 = input.LA(1);

                         
                        int index116_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index116_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA116_6 = input.LA(1);

                         
                        int index116_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index116_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA116_7 = input.LA(1);

                         
                        int index116_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index116_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA116_8 = input.LA(1);

                         
                        int index116_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index116_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA116_9 = input.LA(1);

                         
                        int index116_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index116_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA116_10 = input.LA(1);

                         
                        int index116_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index116_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA116_11 = input.LA(1);

                         
                        int index116_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index116_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA118_static {
    static final String DFA118_eotS =
        "\31\uffff";
    static final String DFA118_eofS =
        "\5\uffff\1\1\23\uffff";
    static final String DFA118_minS =
        "\1\45\1\uffff\2\44\1\uffff\2\45\11\44\10\0\1\52";
    static final String DFA118_maxS =
        "\1\u0097\1\uffff\2\44\1\uffff\1\u00b2\1\u0090\11\44\10\0\1\u009a";
    static final String DFA118_acceptS =
        "\1\uffff\1\2\2\uffff\1\1\24\uffff";
    static final String DFA118_specialS =
        "\20\uffff\1\1\1\4\1\3\1\5\1\7\1\2\1\0\1\6\1\uffff}>";
    static final String[] DFA118_transitionS = {
            "\4\1\2\uffff\2\1\11\uffff\1\1\6\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\1\4\11\uffff\1\1\6\uffff\1\1\47\uffff\1\4\10\uffff"+
            "\1\1\1\uffff\2\1\1\3\2\uffff\1\2\1\1\3\uffff\3\1",
            "",
            "\1\5",
            "\1\6",
            "",
            "\5\1\1\15\24\1\1\7\1\12\1\16\1\1\1\13\1\14\103\1\1\11\21\1"+
            "\1\10\30\1",
            "\1\1\41\uffff\1\4\70\uffff\1\4\12\uffff\1\1\4\uffff\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\4\24\uffff\3\4\1\uffff\2\4\103\uffff\1\4\2\uffff\1\1\2"+
            "\uffff\1\1\13\uffff\1\4"
    };
    }

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_static.DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_static.DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_static.DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_static.DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_static.DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_static.DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "()+ loopback of 303:4: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA118_22 = input.LA(1);

                         
                        int index118_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA118_16 = input.LA(1);

                         
                        int index118_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA118_21 = input.LA(1);

                         
                        int index118_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_21);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA118_18 = input.LA(1);

                         
                        int index118_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA118_17 = input.LA(1);

                         
                        int index118_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA118_19 = input.LA(1);

                         
                        int index118_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA118_23 = input.LA(1);

                         
                        int index118_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_23);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA118_20 = input.LA(1);

                         
                        int index118_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA121_static {
    static final String DFA121_eotS =
        "\u0091\uffff";
    static final String DFA121_eofS =
        "\1\1\u0090\uffff";
    static final String DFA121_minS =
        "\1\45\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA121_maxS =
        "\1\u00b2\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA121_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0086\uffff}>";
    static final String[] DFA121_transitionS = {
            "\42\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_static.DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_static.DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_static.DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_static.DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_static.DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_static.DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 306:29: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA121_10 = input.LA(1);

                         
                        int index121_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA122_static {
    static final String DFA122_eotS =
        "\u0091\uffff";
    static final String DFA122_eofS =
        "\1\2\u0090\uffff";
    static final String DFA122_minS =
        "\1\45\1\0\u008f\uffff";
    static final String DFA122_maxS =
        "\1\u00b2\1\0\u008f\uffff";
    static final String DFA122_acceptS =
        "\2\uffff\1\2\u008d\uffff\1\1";
    static final String DFA122_specialS =
        "\1\uffff\1\0\u008f\uffff}>";
    static final String[] DFA122_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_static.DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_static.DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_static.DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_static.DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_static.DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_static.DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "306:39: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA122_1 = input.LA(1);

                         
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\u0091\uffff";
    static final String DFA123_eofS =
        "\1\5\u0090\uffff";
    static final String DFA123_minS =
        "\1\45\4\0\u008c\uffff";
    static final String DFA123_maxS =
        "\1\u00b2\4\0\u008c\uffff";
    static final String DFA123_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA123_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA123_transitionS = {
            "\21\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "306:49: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred325_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred325_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred325_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA127_static {
    static final String DFA127_eotS =
        "\u0091\uffff";
    static final String DFA127_eofS =
        "\1\1\u0090\uffff";
    static final String DFA127_minS =
        "\1\45\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA127_maxS =
        "\1\u00b2\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA127_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0086\uffff}>";
    static final String[] DFA127_transitionS = {
            "\42\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_static.DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_static.DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_static.DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_static.DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_static.DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_static.DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "()* loopback of 309:148: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA127_6 = input.LA(1);

                         
                        int index127_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA127_8 = input.LA(1);

                         
                        int index127_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA127_9 = input.LA(1);

                         
                        int index127_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA127_10 = input.LA(1);

                         
                        int index127_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA128_static {
    static final String DFA128_eotS =
        "\43\uffff";
    static final String DFA128_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA128_minS =
        "\1\45\1\44\1\uffff\1\45\5\44\4\45\1\0\7\44\1\uffff\3\45\1\0\3\45"+
        "\3\44\3\45";
    static final String DFA128_maxS =
        "\1\u00b2\1\44\1\uffff\1\u00b2\5\44\4\u00b2\1\0\7\44\1\uffff\3\u00b2"+
        "\1\0\3\u00b2\3\44\3\u00b2";
    static final String DFA128_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA128_specialS =
        "\15\uffff\1\1\13\uffff\1\0\11\uffff}>";
    static final String[] DFA128_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\4\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\4\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_static.DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_static.DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_static.DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_static.DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_static.DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_static.DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "309:158: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA128_25 = input.LA(1);

                         
                        int index128_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index128_25);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA128_13 = input.LA(1);

                         
                        int index128_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index128_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA129_static {
    static final String DFA129_eotS =
        "\u0091\uffff";
    static final String DFA129_eofS =
        "\1\5\u0090\uffff";
    static final String DFA129_minS =
        "\1\45\4\0\u008c\uffff";
    static final String DFA129_maxS =
        "\1\u00b2\4\0\u008c\uffff";
    static final String DFA129_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA129_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA129_transitionS = {
            "\21\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_static.DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_static.DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_static.DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_static.DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_static.DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_static.DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "309:168: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA129_1 = input.LA(1);

                         
                        int index129_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA129_2 = input.LA(1);

                         
                        int index129_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred332_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA129_3 = input.LA(1);

                         
                        int index129_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred332_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA129_4 = input.LA(1);

                         
                        int index129_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred332_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA130_static {
    static final String DFA130_eotS =
        "\u0091\uffff";
    static final String DFA130_eofS =
        "\1\1\u0090\uffff";
    static final String DFA130_minS =
        "\1\45\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA130_maxS =
        "\1\u00b2\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA130_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0086\uffff}>";
    static final String[] DFA130_transitionS = {
            "\42\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_static.DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_static.DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_static.DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_static.DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_static.DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_static.DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()* loopback of 312:37: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA130_6 = input.LA(1);

                         
                        int index130_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA130_8 = input.LA(1);

                         
                        int index130_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA130_9 = input.LA(1);

                         
                        int index130_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA130_10 = input.LA(1);

                         
                        int index130_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA131_static {
    static final String DFA131_eotS =
        "\43\uffff";
    static final String DFA131_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA131_minS =
        "\1\45\1\44\1\uffff\1\45\5\44\4\45\1\0\7\44\1\uffff\3\45\1\0\3\45"+
        "\3\44\3\45";
    static final String DFA131_maxS =
        "\1\u00b2\1\44\1\uffff\1\u00b2\5\44\4\u00b2\1\0\7\44\1\uffff\3\u00b2"+
        "\1\0\3\u00b2\3\44\3\u00b2";
    static final String DFA131_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA131_specialS =
        "\15\uffff\1\1\13\uffff\1\0\11\uffff}>";
    static final String[] DFA131_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\4\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\4\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_static.DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_static.DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_static.DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_static.DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_static.DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_static.DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "312:47: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA131_25 = input.LA(1);

                         
                        int index131_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_25);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA131_13 = input.LA(1);

                         
                        int index131_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\u0091\uffff";
    static final String DFA132_eofS =
        "\1\5\u0090\uffff";
    static final String DFA132_minS =
        "\1\45\4\0\u008c\uffff";
    static final String DFA132_maxS =
        "\1\u00b2\4\0\u008c\uffff";
    static final String DFA132_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA132_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA132_transitionS = {
            "\21\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "312:57: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA132_2 = input.LA(1);

                         
                        int index132_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA132_3 = input.LA(1);

                         
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA132_4 = input.LA(1);

                         
                        int index132_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA134_static {
    static final String DFA134_eotS =
        "\u0091\uffff";
    static final String DFA134_eofS =
        "\1\10\u0090\uffff";
    static final String DFA134_minS =
        "\1\45\7\0\u0089\uffff";
    static final String DFA134_maxS =
        "\1\u00b2\7\0\u0089\uffff";
    static final String DFA134_acceptS =
        "\10\uffff\1\2\u0087\uffff\1\1";
    static final String DFA134_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u0089\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\7\41\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_static.DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_static.DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_static.DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_static.DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_static.DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_static.DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "315:82: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA134_1 = input.LA(1);

                         
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred338_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred338_ChemicalChunker())) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA134_2 = input.LA(1);

                         
                        int index134_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA134_3 = input.LA(1);

                         
                        int index134_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA134_4 = input.LA(1);

                         
                        int index134_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA134_5 = input.LA(1);

                         
                        int index134_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA134_6 = input.LA(1);

                         
                        int index134_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA134_7 = input.LA(1);

                         
                        int index134_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA137_static {
    static final String DFA137_eotS =
        "\u0091\uffff";
    static final String DFA137_eofS =
        "\1\10\u0090\uffff";
    static final String DFA137_minS =
        "\1\45\7\0\u0089\uffff";
    static final String DFA137_maxS =
        "\1\u00b2\7\0\u0089\uffff";
    static final String DFA137_acceptS =
        "\10\uffff\1\2\u0087\uffff\1\1";
    static final String DFA137_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u0089\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\7\41\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_static.DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_static.DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_static.DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_static.DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_static.DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_static.DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "318:66: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA137_1 = input.LA(1);

                         
                        int index137_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred341_ChemicalChunker()||(synpred341_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA137_2 = input.LA(1);

                         
                        int index137_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA137_3 = input.LA(1);

                         
                        int index137_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA137_4 = input.LA(1);

                         
                        int index137_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA137_5 = input.LA(1);

                         
                        int index137_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA137_6 = input.LA(1);

                         
                        int index137_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA137_7 = input.LA(1);

                         
                        int index137_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA142_static {
    static final String DFA142_eotS =
        "\11\uffff";
    static final String DFA142_eofS =
        "\11\uffff";
    static final String DFA142_minS =
        "\1\46\3\44\2\uffff\3\46";
    static final String DFA142_maxS =
        "\1\u0095\3\44\2\uffff\3\u0095";
    static final String DFA142_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA142_specialS =
        "\11\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4\2"+
            "\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\6",
            "\1\7",
            "\1\10",
            "",
            "",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1"
    };
    }

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_static.DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_static.DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_static.DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_static.DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_static.DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_static.DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_static.DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_static.DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "320:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity );";
        }
    }
    static class DFA143_static {
    static final String DFA143_eotS =
        "\103\uffff";
    static final String DFA143_eofS =
        "\6\uffff\1\4\12\uffff\1\4\12\uffff\3\4\15\uffff\1\4\6\uffff\1\4"+
        "\1\uffff\2\4\2\uffff\2\4\4\uffff\1\4\1\uffff\1\4\1\uffff";
    static final String DFA143_minS =
        "\1\45\2\44\2\uffff\2\45\11\44\1\52\1\45\7\0\3\44\3\45\14\44\1\0"+
        "\1\45\6\0\1\45\1\0\2\45\2\44\2\45\4\44\1\45\1\0\1\45\1\0";
    static final String DFA143_maxS =
        "\1\u0090\2\44\2\uffff\1\u0090\1\u00b2\11\44\1\u009a\1\u00b2\7\0"+
        "\3\44\3\u00b2\14\44\1\0\1\u00b2\6\0\1\u00b2\1\0\2\u00b2\2\44\2\u00b2"+
        "\4\44\1\u00b2\1\0\1\u00b2\1\0";
    static final String DFA143_acceptS =
        "\3\uffff\1\1\1\2\76\uffff";
    static final String DFA143_specialS =
        "\22\uffff\1\4\1\0\1\20\1\16\1\1\1\5\1\2\22\uffff\1\15\1\uffff\1"+
        "\17\1\7\1\6\1\12\1\11\1\14\1\uffff\1\3\13\uffff\1\13\1\uffff\1\10}>";
    static final String[] DFA143_transitionS = {
            "\1\4\41\uffff\1\3\70\uffff\1\3\10\uffff\1\4\1\uffff\1\4\1\uffff"+
            "\1\1\2\uffff\1\2",
            "\1\5",
            "\1\6",
            "",
            "",
            "\1\4\41\uffff\1\3\70\uffff\1\3\12\uffff\1\4\4\uffff\1\7",
            "\5\4\1\15\24\4\1\12\1\17\1\14\1\4\1\16\1\13\103\4\1\11\21"+
            "\4\1\10\30\4",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\3\24\uffff\3\3\1\uffff\2\3\103\uffff\1\3\2\uffff\1\4\2"+
            "\uffff\1\4\13\uffff\1\3",
            "\42\4\1\32\70\4\1\33\7\4\1\11\7\4\1\31\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\34",
            "\1\35",
            "\1\36",
            "\5\4\1\37\24\4\1\44\1\41\1\42\1\4\1\43\1\46\103\4\1\45\21"+
            "\4\1\40\30\4",
            "\153\4\1\50\25\4\1\47\14\4",
            "\21\4\1\51\113\4\1\52\60\4",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\uffff",
            "\143\4\1\45\52\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\153\4\1\50\42\4",
            "\1\uffff",
            "\153\4\1\67\42\4",
            "\153\4\1\70\42\4",
            "\1\71",
            "\1\72",
            "\143\4\1\74\21\4\1\73\30\4",
            "\143\4\1\76\21\4\1\75\30\4",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\143\4\1\74\52\4",
            "\1\uffff",
            "\143\4\1\76\52\4",
            "\1\uffff"
    };
    }

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_static.DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_static.DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_static.DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_static.DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_static.DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_static.DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "324:1: numericReferenceOrQuantity : ( quantity | numericOrIdentifierCompoundReference );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA143_19 = input.LA(1);

                         
                        int index143_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_19);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA143_22 = input.LA(1);

                         
                        int index143_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_22);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA143_24 = input.LA(1);

                         
                        int index143_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_24);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA143_52 = input.LA(1);

                         
                        int index143_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_52);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA143_18 = input.LA(1);

                         
                        int index143_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_18);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA143_23 = input.LA(1);

                         
                        int index143_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_23);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA143_47 = input.LA(1);

                         
                        int index143_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA143_46 = input.LA(1);

                         
                        int index143_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_46);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA143_66 = input.LA(1);

                         
                        int index143_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_66);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA143_49 = input.LA(1);

                         
                        int index143_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA143_48 = input.LA(1);

                         
                        int index143_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_48);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA143_64 = input.LA(1);

                         
                        int index143_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_64);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA143_50 = input.LA(1);

                         
                        int index143_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_50);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA143_43 = input.LA(1);

                         
                        int index143_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_43);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA143_21 = input.LA(1);

                         
                        int index143_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_21);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA143_45 = input.LA(1);

                         
                        int index143_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_45);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA143_20 = input.LA(1);

                         
                        int index143_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA146_static {
    static final String DFA146_eotS =
        "\u0091\uffff";
    static final String DFA146_eofS =
        "\1\1\u0090\uffff";
    static final String DFA146_minS =
        "\1\45\16\uffff\4\0\176\uffff";
    static final String DFA146_maxS =
        "\1\u00b2\16\uffff\4\0\176\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA146_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\176\uffff}>";
    static final String[] DFA146_transitionS = {
            "\42\1\1\21\70\1\1\22\14\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_static.DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_static.DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_static.DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_static.DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_static.DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_static.DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "()* loopback of 328:42: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA146_15 = input.LA(1);

                         
                        int index146_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA146_16 = input.LA(1);

                         
                        int index146_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA146_17 = input.LA(1);

                         
                        int index146_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA146_18 = input.LA(1);

                         
                        int index146_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA151_static {
    static final String DFA151_eotS =
        "\u0091\uffff";
    static final String DFA151_eofS =
        "\1\1\u0090\uffff";
    static final String DFA151_minS =
        "\1\45\2\uffff\1\0\u008d\uffff";
    static final String DFA151_maxS =
        "\1\u00b2\2\uffff\1\0\u008d\uffff";
    static final String DFA151_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA151_specialS =
        "\3\uffff\1\0\u008d\uffff}>";
    static final String[] DFA151_transitionS = {
            "\136\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_static.DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_static.DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_static.DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_static.DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_static.DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_static.DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_static.DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_static.DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()* loopback of 349:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA151_3 = input.LA(1);

                         
                        int index151_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index151_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA155_static {
    static final String DFA155_eotS =
        "\u0091\uffff";
    static final String DFA155_eofS =
        "\1\4\u0090\uffff";
    static final String DFA155_minS =
        "\1\45\3\0\u008d\uffff";
    static final String DFA155_maxS =
        "\1\u00b2\3\0\u008d\uffff";
    static final String DFA155_acceptS =
        "\4\uffff\1\2\u008b\uffff\1\1";
    static final String DFA155_specialS =
        "\1\uffff\1\0\1\1\1\2\u008d\uffff}>";
    static final String[] DFA155_transitionS = {
            "\42\4\1\2\70\4\1\3\17\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_static.DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_static.DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_static.DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_static.DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_static.DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_static.DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "353:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA155_2 = input.LA(1);

                         
                        int index155_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index155_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA156_static {
    static final String DFA156_eotS =
        "\27\uffff";
    static final String DFA156_eofS =
        "\15\uffff\1\20\3\uffff\1\20\2\uffff\1\20\2\uffff";
    static final String DFA156_minS =
        "\1\107\1\44\2\uffff\1\77\1\uffff\2\44\4\uffff\1\u0088\1\45\2\44"+
        "\1\uffff\1\45\1\0\1\44\1\45\1\44\1\0";
    static final String DFA156_maxS =
        "\1\u0090\1\44\2\uffff\1\u009a\1\uffff\2\44\4\uffff\1\u0088\1\u00b2"+
        "\2\44\1\uffff\1\u00b2\1\0\1\44\1\u00b2\1\44\1\0";
    static final String DFA156_acceptS =
        "\2\uffff\1\5\1\7\1\uffff\1\3\2\uffff\1\2\1\6\1\1\1\4\4\uffff\1"+
        "\10\6\uffff";
    static final String DFA156_specialS =
        "\22\uffff\1\1\3\uffff\1\0}>";
    static final String[] DFA156_transitionS = {
            "\1\2\70\uffff\1\3\17\uffff\1\1",
            "\1\4",
            "",
            "",
            "\1\5\1\10\1\12\1\uffff\1\11\1\13\103\uffff\1\7\21\uffff\1"+
            "\6",
            "",
            "\1\14",
            "\1\15",
            "",
            "",
            "",
            "",
            "\1\7",
            "\133\20\1\17\5\20\1\16\54\20",
            "\1\21",
            "\1\22",
            "",
            "\153\20\1\23\42\20",
            "\1\uffff",
            "\1\24",
            "\143\20\1\25\52\20",
            "\1\26",
            "\1\uffff"
    };
    }

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_static.DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_static.DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_static.DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_static.DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_static.DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_static.DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_static.DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_static.DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "354:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA156_22 = input.LA(1);

                         
                        int index156_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index156_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA156_18 = input.LA(1);

                         
                        int index156_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index156_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA164_static {
    static final String DFA164_eotS =
        "\u0087\uffff";
    static final String DFA164_eofS =
        "\u0087\uffff";
    static final String DFA164_minS =
        "\1\45\45\uffff\1\0\6\uffff\3\0\2\uffff\1\0\3\uffff\6\0\13\uffff"+
        "\1\0\77\uffff";
    static final String DFA164_maxS =
        "\1\u00b2\45\uffff\1\0\6\uffff\3\0\2\uffff\1\0\3\uffff\6\0\13\uffff"+
        "\1\0\77\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\16\1\uffff\1\1\47\uffff\1\2\77\uffff\1\4\1\5\1\6\1\7"+
        "\21\uffff\1\11\1\13\1\14\1\3\1\10\1\15\1\12";
    static final String DFA164_specialS =
        "\46\uffff\1\0\6\uffff\1\1\1\2\1\3\2\uffff\1\4\3\uffff\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\13\uffff\1\13\77\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\107\1\72\1\73\2\53\1\uffff\1\71\1\53\20\156\2\53\1\uffff"+
            "\1\53\1\uffff\21\53\4\3\2\53\11\3\1\53\1\3\1\53\4\3\1\53\1\3"+
            "\1\53\1\3\1\53\5\3\1\53\1\3\1\53\3\3\1\53\1\3\1\46\1\53\3\3"+
            "\1\53\1\uffff\1\u0081\1\56\2\uffff\1\155\1\u0082\1\154\1\62"+
            "\1\1\1\53\1\uffff\1\55\1\1\1\u0080\1\57\3\53\1\156\1\66\1\67"+
            "\1\70\1\53\1\153\10\53\4\uffff\1\53\1\156\1\uffff\6\3\4\53",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_static.DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_static.DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_static.DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_static.DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_static.DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_static.DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_static.DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_static.DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "()+ loopback of 373:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA164_38 = input.LA(1);

                         
                        int index164_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index164_38);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA164_45 = input.LA(1);

                         
                        int index164_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred385_ChemicalChunker()||(synpred385_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 43;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index164_45);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA164_46 = input.LA(1);

                         
                        int index164_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index164_46);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA164_47 = input.LA(1);

                         
                        int index164_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred396_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index164_47);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA164_50 = input.LA(1);

                         
                        int index164_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index164_50);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA164_54 = input.LA(1);

                         
                        int index164_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred393_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index164_54);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA164_55 = input.LA(1);

                         
                        int index164_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred393_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index164_55);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA164_56 = input.LA(1);

                         
                        int index164_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred393_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index164_56);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA164_57 = input.LA(1);

                         
                        int index164_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred393_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index164_57);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA164_58 = input.LA(1);

                         
                        int index164_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred393_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index164_58);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA164_59 = input.LA(1);

                         
                        int index164_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred393_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index164_59);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA164_71 = input.LA(1);

                         
                        int index164_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred396_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index164_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA168_static {
    static final String DFA168_eotS =
        "\u0089\uffff";
    static final String DFA168_eofS =
        "\u0089\uffff";
    static final String DFA168_minS =
        "\1\45\43\uffff\1\0\4\uffff\17\0\25\uffff\1\0\73\uffff";
    static final String DFA168_maxS =
        "\1\u00b2\43\uffff\1\0\4\uffff\17\0\25\uffff\1\0\73\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\1\66\uffff\1\10\1\11\1\12\1\13\22\uffff\1\16\1\17\1"+
        "\20\57\uffff\1\2\1\4\1\5\1\6\1\7\1\21\1\3\1\15\1\14";
    static final String DFA168_specialS =
        "\44\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\25\uffff\1\20\73\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\67\1\61\1\62\2\120\1\uffff\1\60\1\54\20\73\2\120\1\uffff"+
            "\1\120\1\uffff\5\120\1\52\12\120\1\63\4\1\2\120\11\1\1\120\1"+
            "\1\1\120\4\1\1\120\1\1\1\120\1\1\1\120\5\1\1\120\1\1\1\120\3"+
            "\1\1\120\1\1\1\44\1\120\3\1\1\53\1\uffff\1\116\1\115\2\uffff"+
            "\1\72\1\117\1\71\1\65\1\uffff\1\66\1\uffff\1\64\2\uffff\1\51"+
            "\3\120\1\73\1\55\1\56\1\57\1\120\1\70\10\120\4\uffff\1\120\1"+
            "\73\1\uffff\6\1\4\120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_static.DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_static.DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_static.DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_static.DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_static.DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_static.DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "379:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA168_36 = input.LA(1);

                         
                        int index168_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_36);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA168_41 = input.LA(1);

                         
                        int index168_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index168_41);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA168_42 = input.LA(1);

                         
                        int index168_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA168_43 = input.LA(1);

                         
                        int index168_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA168_44 = input.LA(1);

                         
                        int index168_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA168_45 = input.LA(1);

                         
                        int index168_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA168_46 = input.LA(1);

                         
                        int index168_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_46);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA168_47 = input.LA(1);

                         
                        int index168_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_47);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA168_48 = input.LA(1);

                         
                        int index168_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_48);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA168_49 = input.LA(1);

                         
                        int index168_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA168_50 = input.LA(1);

                         
                        int index168_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_50);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA168_51 = input.LA(1);

                         
                        int index168_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_51);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA168_52 = input.LA(1);

                         
                        int index168_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 134;}

                        else if ( ((synpred403_ChemicalChunker()||(synpred403_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 129;}

                        else if ( (((synpred417_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred417_ChemicalChunker())) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index168_52);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA168_53 = input.LA(1);

                         
                        int index168_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index168_53);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA168_54 = input.LA(1);

                         
                        int index168_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_54);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA168_55 = input.LA(1);

                         
                        int index168_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index168_55);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA168_77 = input.LA(1);

                         
                        int index168_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index168_77);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA169_static {
    static final String DFA169_eotS =
        "\u008a\uffff";
    static final String DFA169_eofS =
        "\u008a\uffff";
    static final String DFA169_minS =
        "\1\45\45\uffff\1\0\4\uffff\17\0\26\uffff\1\0\71\uffff";
    static final String DFA169_maxS =
        "\1\u00b2\45\uffff\1\0\4\uffff\17\0\26\uffff\1\0\71\uffff";
    static final String DFA169_acceptS =
        "\1\uffff\1\21\1\uffff\1\1\66\uffff\1\7\1\10\1\11\1\12\21\uffff"+
        "\1\13\1\uffff\1\15\1\16\1\17\57\uffff\1\2\1\4\1\5\1\6\1\20\1\3\1"+
        "\14";
    static final String DFA169_specialS =
        "\46\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\26\uffff\1\20\71\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\71\1\63\1\64\2\123\1\uffff\1\62\1\56\20\75\2\123\1\uffff"+
            "\1\123\1\uffff\5\123\1\54\12\123\1\65\4\3\2\123\11\3\1\123\1"+
            "\3\1\123\4\3\1\123\1\3\1\123\1\3\1\123\5\3\1\123\1\3\1\123\3"+
            "\3\1\123\1\3\1\46\1\123\3\3\1\55\1\uffff\1\121\1\120\2\uffff"+
            "\1\74\1\122\1\73\1\67\1\1\1\70\1\uffff\1\66\1\1\1\117\1\53\3"+
            "\123\1\75\1\57\1\60\1\61\1\123\1\72\10\123\4\uffff\1\123\1\75"+
            "\1\uffff\6\3\4\123",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_static.DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_static.DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_static.DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_static.DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_static.DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_static.DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "()* loopback of 379:265: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA169_38 = input.LA(1);

                         
                        int index169_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred418_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_38);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA169_43 = input.LA(1);

                         
                        int index169_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred422_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index169_43);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA169_44 = input.LA(1);

                         
                        int index169_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_44);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA169_45 = input.LA(1);

                         
                        int index169_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_45);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA169_46 = input.LA(1);

                         
                        int index169_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_46);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA169_47 = input.LA(1);

                         
                        int index169_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_47);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA169_48 = input.LA(1);

                         
                        int index169_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA169_49 = input.LA(1);

                         
                        int index169_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA169_50 = input.LA(1);

                         
                        int index169_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA169_51 = input.LA(1);

                         
                        int index169_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA169_52 = input.LA(1);

                         
                        int index169_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA169_53 = input.LA(1);

                         
                        int index169_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA169_54 = input.LA(1);

                         
                        int index169_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 136;}

                        else if ( ((synpred421_ChemicalChunker()||(synpred421_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 132;}

                        else if ( ((synpred432_ChemicalChunker()||(synpred432_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 83;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index169_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA169_55 = input.LA(1);

                         
                        int index169_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred421_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index169_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA169_56 = input.LA(1);

                         
                        int index169_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred421_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA169_57 = input.LA(1);

                         
                        int index169_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred421_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index169_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA169_80 = input.LA(1);

                         
                        int index169_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred428_ChemicalChunker()) ) {s = 79;}

                        else if ( (synpred432_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index169_80);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA174_static {
    static final String DFA174_eotS =
        "\u0091\uffff";
    static final String DFA174_eofS =
        "\1\6\u0090\uffff";
    static final String DFA174_minS =
        "\1\45\5\0\u008b\uffff";
    static final String DFA174_maxS =
        "\1\u00b2\5\0\u008b\uffff";
    static final String DFA174_acceptS =
        "\6\uffff\1\2\u0089\uffff\1\1";
    static final String DFA174_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008b\uffff}>";
    static final String[] DFA174_transitionS = {
            "\1\5\143\6\1\1\1\6\1\3\1\6\1\4\2\6\1\2\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_static.DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_static.DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_static.DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_static.DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_static.DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_static.DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_static.DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_static.DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "386:31: ( allIdentifierTypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA174_1 = input.LA(1);

                         
                        int index174_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index174_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA174_2 = input.LA(1);

                         
                        int index174_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index174_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA174_3 = input.LA(1);

                         
                        int index174_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index174_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA174_4 = input.LA(1);

                         
                        int index174_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred441_ChemicalChunker()||(synpred441_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index174_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA174_5 = input.LA(1);

                         
                        int index174_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index174_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA177_static {
    static final String DFA177_eotS =
        "\u0092\uffff";
    static final String DFA177_eofS =
        "\1\1\u0091\uffff";
    static final String DFA177_minS =
        "\1\45\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\15\uffff\1\0\41\uffff"+
        "\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA177_maxS =
        "\1\u00b2\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\15\uffff\1\0\41"+
        "\uffff\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA177_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\1\1\2";
    static final String DFA177_specialS =
        "\3\uffff\1\0\13\uffff\1\1\10\uffff\1\2\15\uffff\1\3\41\uffff\1"+
        "\4\1\uffff\1\5\13\uffff\1\6\73\uffff}>";
    static final String[] DFA177_transitionS = {
            "\21\1\1\110\2\1\1\126\20\1\1\46\6\1\1\30\60\1\1\112\1\3\11"+
            "\1\1\17\45\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_static.DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_static.DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_static.DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_static.DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_static.DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_static.DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_static.DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_static.DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "()* loopback of 386:83: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA177_3 = input.LA(1);

                         
                        int index177_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index177_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA177_15 = input.LA(1);

                         
                        int index177_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred448_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index177_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA177_24 = input.LA(1);

                         
                        int index177_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index177_24);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA177_38 = input.LA(1);

                         
                        int index177_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index177_38);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA177_72 = input.LA(1);

                         
                        int index177_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index177_72);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA177_74 = input.LA(1);

                         
                        int index177_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index177_74);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA177_86 = input.LA(1);

                         
                        int index177_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred447_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index177_86);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA202_static {
    static final String DFA202_eotS =
        "\107\uffff";
    static final String DFA202_eofS =
        "\107\uffff";
    static final String DFA202_minS =
        "\1\45\17\uffff\1\0\66\uffff";
    static final String DFA202_maxS =
        "\1\u00b2\17\uffff\1\0\66\uffff";
    static final String DFA202_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA202_specialS =
        "\20\uffff\1\0\66\uffff}>";
    static final String[] DFA202_transitionS = {
            "\5\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\106\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA202_eot = DFA.unpackEncodedString(DFA202_static.DFA202_eotS);
    static final short[] DFA202_eof = DFA.unpackEncodedString(DFA202_static.DFA202_eofS);
    static final char[] DFA202_min = DFA.unpackEncodedStringToUnsignedChars(DFA202_static.DFA202_minS);
    static final char[] DFA202_max = DFA.unpackEncodedStringToUnsignedChars(DFA202_static.DFA202_maxS);
    static final short[] DFA202_accept = DFA.unpackEncodedString(DFA202_static.DFA202_acceptS);
    static final short[] DFA202_special = DFA.unpackEncodedString(DFA202_static.DFA202_specialS);
    static final short[][] DFA202_transition;

    static {
        int numStates = DFA202_static.DFA202_transitionS.length;
        DFA202_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA202_transition[i] = DFA.unpackEncodedString(DFA202_static.DFA202_transitionS[i]);
        }
    }

    class DFA202 extends DFA {

        public DFA202(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 202;
            this.eot = DFA202_eot;
            this.eof = DFA202_eof;
            this.min = DFA202_min;
            this.max = DFA202_max;
            this.accept = DFA202_accept;
            this.special = DFA202_special;
            this.transition = DFA202_transition;
        }
        public String getDescription() {
            return "()* loopback of 195:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA202_16 = input.LA(1);

                         
                        int index202_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index202_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 202, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA214_static {
    static final String DFA214_eotS =
        "\27\uffff";
    static final String DFA214_eofS =
        "\27\uffff";
    static final String DFA214_minS =
        "\1\46\15\uffff\1\0\10\uffff";
    static final String DFA214_maxS =
        "\1\u009a\15\uffff\1\0\10\uffff";
    static final String DFA214_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA214_specialS =
        "\16\uffff\1\0\10\uffff}>";
    static final String[] DFA214_transitionS = {
            "\2\1\3\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\26\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA214_eot = DFA.unpackEncodedString(DFA214_static.DFA214_eotS);
    static final short[] DFA214_eof = DFA.unpackEncodedString(DFA214_static.DFA214_eofS);
    static final char[] DFA214_min = DFA.unpackEncodedStringToUnsignedChars(DFA214_static.DFA214_minS);
    static final char[] DFA214_max = DFA.unpackEncodedStringToUnsignedChars(DFA214_static.DFA214_maxS);
    static final short[] DFA214_accept = DFA.unpackEncodedString(DFA214_static.DFA214_acceptS);
    static final short[] DFA214_special = DFA.unpackEncodedString(DFA214_static.DFA214_specialS);
    static final short[][] DFA214_transition;

    static {
        int numStates = DFA214_static.DFA214_transitionS.length;
        DFA214_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA214_transition[i] = DFA.unpackEncodedString(DFA214_static.DFA214_transitionS[i]);
        }
    }

    class DFA214 extends DFA {

        public DFA214(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 214;
            this.eot = DFA214_eot;
            this.eof = DFA214_eof;
            this.min = DFA214_min;
            this.max = DFA214_max;
            this.accept = DFA214_accept;
            this.special = DFA214_special;
            this.transition = DFA214_transition;
        }
        public String getDescription() {
            return "()* loopback of 262:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA214_14 = input.LA(1);

                         
                        int index214_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index214_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 214, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    static class FOLLOW_sentence_in_document199_static {
    public static final BitSet FOLLOW_sentence_in_document199 = new BitSet(new long[]{0xFFFFFFE000000002L,0xFFFFFFFFFFFFFFFFL,0x0007FFFFFFFFFF7FL});

    }static class FOLLOW_procedureNounPhrase_in_sentence219_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_sentence219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_sentenceStructure_in_sentence224_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentence224 = new BitSet(new long[]{0xFFFFFFE000000002L,0xFFFFFFFFFFFFFFFFL,0x0007FFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentence226_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentence226 = new BitSet(new long[]{0xFFFFFFE000000002L,0xFFFFFFFFFFFFFFFFL,0x0007FFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentence231_static {
    public static final BitSet FOLLOW_stop_in_sentence231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nounphrase_in_sentenceStructure241_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure241 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBA2FL});

    }static class FOLLOW_verbphrase_in_sentenceStructure243_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure243 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBA2FL});

    }static class FOLLOW_prepphrase_in_sentenceStructure245_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure245 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBA2FL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure247_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure247 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBA2FL});

    }static class FOLLOW_advAdj_in_sentenceStructure252_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure252 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C00E0800EL});

    }static class FOLLOW_colon_in_sentenceStructure254_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure254 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C00E0800EL});

    }static class FOLLOW_conjunction_in_sentenceStructure259_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000800AL});

    }static class FOLLOW_rbconj_in_sentenceStructure261_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000800AL});

    }static class FOLLOW_comma_in_sentenceStructure263_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000800AL});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase275_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken294_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken296_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken298_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken300_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken302_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken304_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken308_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken310_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken312_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken314_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken316_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken318_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken320_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken322_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken324_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken326_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken328_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken330_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken332_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken334_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken336_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken338_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken340_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken342_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken344_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken346_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken348_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken348 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken352_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken354_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken356_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken358_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken360_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken362_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken364_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken366_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken368_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken370_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken372_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken374_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken376_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken378_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken380_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken382_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken384_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken386_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken388_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percentsign_in_unmatchedToken390_static {
    public static final BitSet FOLLOW_percentsign_in_unmatchedToken390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken392_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken394_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken396_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken398_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken402_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken404_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken406_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken408_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken410_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken412_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken414_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken416_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken418_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken420_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken422_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken424_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken426_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken428_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken430_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken432_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken434_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken436_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken438_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedure_in_procedureNounPhrase451_static {
    public static final BitSet FOLLOW_headingProcedure_in_procedureNounPhrase451 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure470_static {
    public static final BitSet FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004084L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure472_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure472 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedHeadingProcedure_in_headingProcedure476_static {
    public static final BitSet FOLLOW_bracketedHeadingProcedure_in_headingProcedure476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004084L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure478_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator489_static {
    public static final BitSet FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_headingProcedureRequiringTerminator491_static {
    public static final BitSet FOLLOW_numeric_in_headingProcedureRequiringTerminator491 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure514_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure518_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure522_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_headingProcedureTerminators547_static {
    public static final BitSet FOLLOW_rrb_in_headingProcedureTerminators547 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_headingProcedureTerminators549_static {
    public static final BitSet FOLLOW_stop_in_headingProcedureTerminators549 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_headingProcedureTerminators551_static {
    public static final BitSet FOLLOW_colon_in_headingProcedureTerminators551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase560_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase560 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure579_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure579 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure581_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure581 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1590_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2607_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2607 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_dt_in_nounphraseStructure2610_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2610 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2613_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2613 = new BitSet(new long[]{0x60411BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEFBA09L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2617_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2617 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEFBA09L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2620_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2620 = new BitSet(new long[]{0x60411BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEFBA09L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2627_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2630_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_nounphraseContent642_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseContent642 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseContent647_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseContent647 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_ratioOrBracketedRatio_in_nounphraseContent649_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_nounphraseContent649 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_noun_in_nounphraseContent651_static {
    public static final BitSet FOLLOW_noun_in_nounphraseContent651 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_numeric_in_nounphraseContent653_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseContent653 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_bracketedContent_in_nounphraseContent655_static {
    public static final BitSet FOLLOW_bracketedContent_in_nounphraseContent655 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase667_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase667 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase669_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase669 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase671_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_dissolvePhrase673_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure698_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure698 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_nnp_in_dissolveStructure702_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnchementity_in_dissolveStructure704_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure704 = new BitSet(new long[]{0x0001000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure707_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure707 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_molecule_in_dissolveStructure710_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure710 = new BitSet(new long[]{0x0001000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure712_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure712 = new BitSet(new long[]{0x0001000000000000L});

    }static class FOLLOW_inMolecule_in_dissolveStructure716_static {
    public static final BitSet FOLLOW_inMolecule_in_dissolveStructure716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008008L});

    }static class FOLLOW_conjunction_in_dissolveStructure719_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure719 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_molecule_in_dissolveStructure721_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008008L});

    }static class FOLLOW_inin_in_inMolecule733_static {
    public static final BitSet FOLLOW_inin_in_inMolecule733 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E13A09L});

    }static class FOLLOW_dtTHE_in_inMolecule735_static {
    public static final BitSet FOLLOW_dtTHE_in_inMolecule735 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_adj_in_inMolecule738_static {
    public static final BitSet FOLLOW_adj_in_inMolecule738 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_nnp_in_inMolecule741_static {
    public static final BitSet FOLLOW_nnp_in_inMolecule741 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_molecule_in_inMolecule745_static {
    public static final BitSet FOLLOW_molecule_in_inMolecule745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_inMolecule747_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_inMolecule747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase757_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure775_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure775 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_to_in_verbphraseStructure778_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure778 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_inAll_in_verbphraseStructure781_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure781 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_inafter_in_verbphraseStructure784_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure784 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_md_in_verbphraseStructure788_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure788 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_rbconj_in_verbphraseStructure791_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure791 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_adv_in_verbphraseStructure794_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure794 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_adj_in_verbphraseStructure797_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure797 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_verb_in_verbphraseStructure800_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure800 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_md_in_verbphraseStructure803_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure803 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_adv_in_verbphraseStructure806_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure806 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_adj_in_verbphraseStructure809_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure809 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_neg_in_verbphraseStructure812_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure812 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_inoff_in_verbphraseStructure818_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure818 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC00F38028L});

    }static class FOLLOW_cc_in_verbphraseStructure822_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure822 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30028L});

    }static class FOLLOW_comma_in_verbphraseStructure825_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure825 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30020L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure828_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure828 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC00F38028L});

    }static class FOLLOW_vb_in_verb840_static {
    public static final BitSet FOLLOW_vb_in_verb840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb842_static {
    public static final BitSet FOLLOW_vbp_in_verb842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb844_static {
    public static final BitSet FOLLOW_vbg_in_verb844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb846_static {
    public static final BitSet FOLLOW_vbd_in_verb846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb848_static {
    public static final BitSet FOLLOW_vbz_in_verb848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb850_static {
    public static final BitSet FOLLOW_vbn_in_verb850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb852_static {
    public static final BitSet FOLLOW_vbuse_in_verb852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb854_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb856_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb858_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb860_static {
    public static final BitSet FOLLOW_vbsubject_in_verb860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb862_static {
    public static final BitSet FOLLOW_vbadd_in_verb862 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb864_static {
    public static final BitSet FOLLOW_vbdilute_in_verb864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb866_static {
    public static final BitSet FOLLOW_vbcharge_in_verb866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb868_static {
    public static final BitSet FOLLOW_vbcontain_in_verb868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb870_static {
    public static final BitSet FOLLOW_vbdrop_in_verb870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb872_static {
    public static final BitSet FOLLOW_vbfill_in_verb872 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb874_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb876_static {
    public static final BitSet FOLLOW_vbtreat_in_verb876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb878_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb880_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb882_static {
    public static final BitSet FOLLOW_vbcool_in_verb882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb884_static {
    public static final BitSet FOLLOW_vbdegass_in_verb884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb886_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb888_static {
    public static final BitSet FOLLOW_vbdry_in_verb888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb890_static {
    public static final BitSet FOLLOW_vbextract_in_verb890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb892_static {
    public static final BitSet FOLLOW_vbfilter_in_verb892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb895_static {
    public static final BitSet FOLLOW_vbheat_in_verb895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb897_static {
    public static final BitSet FOLLOW_vbincrease_in_verb897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb899_static {
    public static final BitSet FOLLOW_vbpartition_in_verb899 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb901_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb903_static {
    public static final BitSet FOLLOW_vbpurify_in_verb903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb905_static {
    public static final BitSet FOLLOW_vbquench_in_verb905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb907_static {
    public static final BitSet FOLLOW_vbrecover_in_verb907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb909_static {
    public static final BitSet FOLLOW_vbremove_in_verb909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb911_static {
    public static final BitSet FOLLOW_vbstir_in_verb911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb913_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb915_static {
    public static final BitSet FOLLOW_vbwait_in_verb915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb917_static {
    public static final BitSet FOLLOW_vbwash_in_verb917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb919_static {
    public static final BitSet FOLLOW_vbyield_in_verb919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb921_static {
    public static final BitSet FOLLOW_vbchange_in_verb921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb930_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_cc_in_degassMultiVerb932_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb932 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb934_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun943_static {
    public static final BitSet FOLLOW_nounStructure_in_noun943 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_noun946_static {
    public static final BitSet FOLLOW_dash_in_noun946 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x00078043FDEF2A09L});

    }static class FOLLOW_nounStructure_in_noun948_static {
    public static final BitSet FOLLOW_nounStructure_in_noun948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_prp_in_nounStructure959_static {
    public static final BitSet FOLLOW_prp_in_nounStructure959 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure961_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure961 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure963_static {
    public static final BitSet FOLLOW_citation_in_nounStructure963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure965_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure967_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure969_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure969 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure971_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure973_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure975_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure977_static {
    public static final BitSet FOLLOW_nn_in_nounStructure977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure979_static {
    public static final BitSet FOLLOW_nns_in_nounStructure979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure981_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure983_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure985_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure985 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure987_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure987 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure989_static {
    public static final BitSet FOLLOW_range_in_nounStructure989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure991_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure991 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure993_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure993 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure995_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure995 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure997_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure997 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure999_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure999 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure1001_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure1001 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure1003_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure1003 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure1005_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure1005 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure1007_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure1007 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure1009_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure1009 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure1011_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure1011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure1013_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure1013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure1015_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure1015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure1017_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure1017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure1019_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure1019 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure1021_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure1021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure1023_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure1023 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure1025_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure1025 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure1027_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure1027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure1029_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure1029 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure1031_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1031 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure1033_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1033 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure1035_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure1035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure1037_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure1037 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure1039_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure1039 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure1041_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1041 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure1043_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure1045_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure1045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure1047_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure1047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure1049_static {
    public static final BitSet FOLLOW_fw_in_nounStructure1049 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure1051_static {
    public static final BitSet FOLLOW_sym_in_nounStructure1051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure1053_static {
    public static final BitSet FOLLOW_clause_in_nounStructure1053 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure1055_static {
    public static final BitSet FOLLOW_ls_in_nounStructure1055 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure1057_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure1057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure1059_static {
    public static final BitSet FOLLOW_pos_in_nounStructure1059 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure1061_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure1061 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase1073_static {
    public static final BitSet FOLLOW_neg_in_prepphrase1073 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30020L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase1077_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase1079_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1079 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase1081_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase1083_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1083 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase1085_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase1087_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1087 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1099_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1099 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1119_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1119 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000003C00E32A09L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1122_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1122 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000003C00E12A09L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1125_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1125 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000003C00E12A09L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1128_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1130_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1140_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1158_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1158 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000000L,0x000000BC00F30000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1161_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1161 = new BitSet(new long[]{0x400008C000000000L,0x0000000000000000L,0x0000003C00E30000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1165_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1165 = new BitSet(new long[]{0x400008C000000000L,0x0000000000000000L,0x0000003C00E10000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1168_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1168 = new BitSet(new long[]{0x400008C000000000L,0x0000000000000000L,0x0000003C00E10000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1171_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1171 = new BitSet(new long[]{0x4000000000000000L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1174_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1174 = new BitSet(new long[]{0x4000000000000002L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1184_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1205_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1205 = new BitSet(new long[]{0x1FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1208_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1208 = new BitSet(new long[]{0x000008C000000000L,0x0000000000000040L,0x0000003C00E30000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1211_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1211 = new BitSet(new long[]{0x000008C000000000L,0x0000000000000040L,0x0000003C00E10000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1214_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000010000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1217_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1220_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});

    }static class FOLLOW_inin_in_prepphraseIN1229_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1229 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_molecule_in_prepphraseIN1231_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1231 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1252_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000020000L});

    }static class FOLLOW_dt_in_prepphraseRole1254_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1257_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1280_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1280 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30020L});

    }static class FOLLOW_inMost_in_prepphraseOther1283_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1283 = new BitSet(new long[]{0x7FFFFBE000000000L,0x1A282A140187FFFDL,0x000780FFFDFF3A29L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1287_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1287 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1313_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1313 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1316_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1338_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1338 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1341_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1341 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1344_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1369_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1369 = new BitSet(new long[]{0x0000200000000000L});

    }static class FOLLOW_inas_in_preparationphrase1371_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1371 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000020040L,0x000000BC00F30020L});

    }static class FOLLOW_nnexample_in_preparationphrase1374_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_preparationphrase1376_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1379_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1390_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1390 = new BitSet(new long[]{0x200018E000000002L,0x00000004008408A0L,0x0000000004E3AA09L});

    }static class FOLLOW_conjunction_in_multiApparatus1393_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1393 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E3AA09L});

    }static class FOLLOW_apparatus_in_multiApparatus1396_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1396 = new BitSet(new long[]{0x200018E000000002L,0x00000004008408A0L,0x0000000004E3AA09L});

    }static class FOLLOW_dt_in_apparatus1407_static {
    public static final BitSet FOLLOW_dt_in_apparatus1407 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_preapparatus_in_apparatus1410_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1410 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_nnApp_in_apparatus1413_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1413 = new BitSet(new long[]{0x200018E000000002L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_nnapparatus_in_nnApp1440_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1440 = new BitSet(new long[]{0x200018E000000002L,0x00000004008408A0L,0x0000000004E32A49L});

    }static class FOLLOW_dash_in_nnApp1444_static {
    public static final BitSet FOLLOW_dash_in_nnApp1444 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_nnapparatus_in_nnApp1446_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_quantity_in_preapparatus1460_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1460 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_adj_in_preapparatus1462_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1462 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nnpressure_in_preapparatus1464_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1464 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nnadd_in_preapparatus1466_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1466 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_molecule_in_preapparatus1468_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1468 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nnchementity_in_preapparatus1470_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1470 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nnstate_in_preapparatus1472_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1472 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nn_in_preapparatus1474_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1474 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_jjcomp_in_oscarCompound1487_static {
    public static final BitSet FOLLOW_jjcomp_in_oscarCompound1487 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_adj_in_oscarCompound1489_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1489 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1493_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1493 = new BitSet(new long[]{0x224019E000000002L,0x88000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_adj_in_oscarCompound1495_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1495 = new BitSet(new long[]{0x224019E000000002L,0x88000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_nnstate_in_oscarCompound1498_static {
    public static final BitSet FOLLOW_nnstate_in_oscarCompound1498 = new BitSet(new long[]{0x224019E000000002L,0x88000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericReferenceOrQuantity_in_oscarCompound1502_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_oscarCompound1502 = new BitSet(new long[]{0x0240000000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_nnchementity_in_oscarCompound1506_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1506 = new BitSet(new long[]{0x0240000000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_oscarCompound1511_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1511 = new BitSet(new long[]{0x0240000000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_fromProcedure_in_oscarCompound1514_static {
    public static final BitSet FOLLOW_fromProcedure_in_oscarCompound1514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1523_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0000000000000054L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1526_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1531_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1531 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1554_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1556_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1561_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_afterOscarCompoundStructure1580_static {
    public static final BitSet FOLLOW_colon_in_afterOscarCompoundStructure1580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1582_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0000000000000004L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1588_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000050L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1590_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000050L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1599_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1602_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1605_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1605 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1615_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1633_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1633 = new BitSet(new long[]{0x0000200000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1636_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1636 = new BitSet(new long[]{0x0000200000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1640_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1640 = new BitSet(new long[]{0x0000200000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1643_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31654_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31654 = new BitSet(new long[]{0x0040002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount31656_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount31656 = new BitSet(new long[]{0x0040002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_inof_in_moleculeamount31660_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000033000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31663_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000012000L});

    }static class FOLLOW_dt_in_moleculeamount31667_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000012000L});

    }static class FOLLOW_ratioOrBracketedRatio_in_moleculeamount31671_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_moleculeamount31671 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount31673_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount31673 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31676_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31676 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_moleculeamount11686_static {
    public static final BitSet FOLLOW_nnchementity_in_moleculeamount11686 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_nnstate_in_moleculeamount11690_static {
    public static final BitSet FOLLOW_nnstate_in_moleculeamount11690 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_quantity_in_moleculeamount11695_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11695 = new BitSet(new long[]{0x0040002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount11697_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount11697 = new BitSet(new long[]{0x0040002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_inof_in_moleculeamount11701_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11701 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E33A09L});

    }static class FOLLOW_quantity_in_moleculeamount11704_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11704 = new BitSet(new long[]{0x204018E000000000L,0x00000000000400A0L,0x0000000000E33A09L});

    }static class FOLLOW_inof_in_moleculeamount11706_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11706 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E33A09L});

    }static class FOLLOW_dtTHE_in_moleculeamount11712_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11712 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_dt_in_moleculeamount11716_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11716 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11720_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11720 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11723_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21732_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21732 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount21734_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount21734 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21738_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21738 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21741_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1749_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1749 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1751_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1751 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1753_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1756_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1756 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1758_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1758 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1761_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1761 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1772_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1772 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1789_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1789 = new BitSet(new long[]{0x0000202000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1791_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1791 = new BitSet(new long[]{0x0000200000000002L});

    }static class FOLLOW_asAstate_in_unnamedmoleculeDescription1793_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmoleculeDescription1793 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1803_static {
    public static final BitSet FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1803 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1806_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1810_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1814_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1814 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1820_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1824_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1824 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_quantityOf1833_static {
    public static final BitSet FOLLOW_quantity_in_quantityOf1833 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000080L,0x0000000000033001L});

    }static class FOLLOW_inof_in_quantityOf1836_static {
    public static final BitSet FOLLOW_inof_in_quantityOf1836 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000021000L});

    }static class FOLLOW_dtTHE_in_quantityOf1840_static {
    public static final BitSet FOLLOW_dtTHE_in_quantityOf1840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_quantityOf1844_static {
    public static final BitSet FOLLOW_dt_in_quantityOf1844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11855_static {
    public static final BitSet FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11855 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11857_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11857 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11860_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11860 = new BitSet(new long[]{0x0240000000000002L,0x8800000000000000L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11863_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21874_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21874 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21877_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21877 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21881_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21881 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21887_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21887 = new BitSet(new long[]{0x224039E000000000L,0x88000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21890_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21890 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21894_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21894 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21898_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21898 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21903_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21903 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21906_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21906 = new BitSet(new long[]{0x0240000000000002L,0x8800000000000000L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21909_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1919_static {
    public static final BitSet FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1919 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_definiteUnnamedMolecule1921_static {
    public static final BitSet FOLLOW_quantity_in_definiteUnnamedMolecule1921 = new BitSet(new long[]{0x0240200000000002L,0x8800000000000080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_definiteUnnamedMolecule1924_static {
    public static final BitSet FOLLOW_asAstate_in_definiteUnnamedMolecule1924 = new BitSet(new long[]{0x0240000000000002L,0x8800000000000000L});

    }static class FOLLOW_fromProcedure_in_definiteUnnamedMolecule1927_static {
    public static final BitSet FOLLOW_fromProcedure_in_definiteUnnamedMolecule1927 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_definiteUnnamedMoleculeStructure1937_static {
    public static final BitSet FOLLOW_adj_in_definiteUnnamedMoleculeStructure1937 = new BitSet(new long[]{0x000018C000000000L,0x0000000000000020L,0x0000000000E00000L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1941_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1941 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1943_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1947_static {
    public static final BitSet FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1949_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1949 = new BitSet(new long[]{0x200019E000000002L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1951_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1957_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1957 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1966_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1970_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1970 = new BitSet(new long[]{0x200019E000000002L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1972_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN1985_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN1985 = new BitSet(new long[]{0x2000194000000000L,0x0000000001020004L,0x0000000000200000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN1987_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN1987 = new BitSet(new long[]{0x2000194000000000L,0x0000000001020004L,0x0000000000200000L});

    }static class FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN1989_static {
    public static final BitSet FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN1989 = new BitSet(new long[]{0x2000194000000000L,0x0000000001020004L,0x0000000000200000L});

    }static class FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN1991_static {
    public static final BitSet FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN1991 = new BitSet(new long[]{0x2000194000000000L,0x0000000001020004L,0x0000000000200000L});

    }static class FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN1996_static {
    public static final BitSet FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN1996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN1998_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN1998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2000_static {
    public static final BitSet FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2002_static {
    public static final BitSet FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2002 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2004_static {
    public static final BitSet FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2010_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2010 = new BitSet(new long[]{0x0000084000000000L,0x0000000000000020L,0x0000000000200000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2012_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2012 = new BitSet(new long[]{0x0000084000000000L,0x0000000000000020L,0x0000000000200000L});

    }static class FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2014_static {
    public static final BitSet FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2014 = new BitSet(new long[]{0x0000084000000000L,0x0000000000000020L,0x0000000000200000L});

    }static class FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2018_static {
    public static final BitSet FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_numericReferenceOrQuantity2028_static {
    public static final BitSet FOLLOW_quantity_in_numericReferenceOrQuantity2028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2032_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2032 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_asAstate2041_static {
    public static final BitSet FOLLOW_inas_in_asAstate2041 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000220000L});

    }static class FOLLOW_dt_in_asAstate2043_static {
    public static final BitSet FOLLOW_dt_in_asAstate2043 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_jj_in_asAstate2047_static {
    public static final BitSet FOLLOW_jj_in_asAstate2047 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_jjchem_in_asAstate2049_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate2049 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_oscarcj_in_asAstate2051_static {
    public static final BitSet FOLLOW_oscarcj_in_asAstate2051 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_nnstate_in_asAstate2055_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate2055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_asAstate2057_static {
    public static final BitSet FOLLOW_quantity_in_asAstate2057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2068_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberCompoundReference2087_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference2087 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2108_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity2128_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2130_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2139_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2139 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12159_static {
    public static final BitSet FOLLOW_lrb_in_quantity12159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurements_in_quantity12161_static {
    public static final BitSet FOLLOW_measurements_in_quantity12161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004088L});

    }static class FOLLOW_comma_in_quantity12164_static {
    public static final BitSet FOLLOW_comma_in_quantity12164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurements_in_quantity12167_static {
    public static final BitSet FOLLOW_measurements_in_quantity12167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004088L});

    }static class FOLLOW_comma_in_quantity12172_static {
    public static final BitSet FOLLOW_comma_in_quantity12172 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12174_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004088L});

    }static class FOLLOW_stop_in_quantity12179_static {
    public static final BitSet FOLLOW_stop_in_quantity12179 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12181_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004080L});

    }static class FOLLOW_rrb_in_quantity12186_static {
    public static final BitSet FOLLOW_rrb_in_quantity12186 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2194_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2194 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22215_static {
    public static final BitSet FOLLOW_measurements_in_quantity22215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_comma_in_quantity22218_static {
    public static final BitSet FOLLOW_comma_in_quantity22218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurements_in_quantity22221_static {
    public static final BitSet FOLLOW_measurements_in_quantity22221 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_cd_in_measurements2234_static {
    public static final BitSet FOLLOW_cd_in_measurements2234 = new BitSet(new long[]{0x200018E000000000L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nn_in_measurements2236_static {
    public static final BitSet FOLLOW_nn_in_measurements2236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_multiple_in_measurements2241_static {
    public static final BitSet FOLLOW_multiple_in_measurements2241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_measurementtypes_in_measurements2243_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_dt_in_measurements2246_static {
    public static final BitSet FOLLOW_dt_in_measurements2246 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2254_static {
    public static final BitSet FOLLOW_cd_in_multiple2254 = new BitSet(new long[]{0x0000040000000000L});

    }static class FOLLOW_cdunicode_in_multiple2256_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurementtypes_in_multiple2258_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2258 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2283_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2283 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2285_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2285 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2287_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2287 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2289_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2291_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2291 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2293_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2295_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2297_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2305_static {
    public static final BitSet FOLLOW_cd_in_molar2305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_molar2307_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2307 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2327_static {
    public static final BitSet FOLLOW_cd_in_amount2327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nnamount_in_amount2329_static {
    public static final BitSet FOLLOW_nnamount_in_amount2329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2349_static {
    public static final BitSet FOLLOW_cd_in_mass2349 = new BitSet(new long[]{0x8000000000000000L});

    }static class FOLLOW_nnmass_in_mass2351_static {
    public static final BitSet FOLLOW_nnmass_in_mass2351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2370_static {
    public static final BitSet FOLLOW_cd_in_volume2370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_nnvol_in_volume2372_static {
    public static final BitSet FOLLOW_nnvol_in_volume2372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2392_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000010000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2394_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2397_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2417_static {
    public static final BitSet FOLLOW_cd_in_equivalent2417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nneq_in_equivalent2419_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield1_in_yield2436_static {
    public static final BitSet FOLLOW_yield1_in_yield2436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield2_in_yield2447_static {
    public static final BitSet FOLLOW_yield2_in_yield2447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_yield12461_static {
    public static final BitSet FOLLOW_nnyield_in_yield12461 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_inof_in_yield12464_static {
    public static final BitSet FOLLOW_inof_in_yield12464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010001L});

    }static class FOLLOW_colon_in_yield12466_static {
    public static final BitSet FOLLOW_colon_in_yield12466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010001L});

    }static class FOLLOW_percent_in_yield12469_static {
    public static final BitSet FOLLOW_percent_in_yield12469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield22475_static {
    public static final BitSet FOLLOW_percent_in_yield22475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nnyield_in_yield22477_static {
    public static final BitSet FOLLOW_nnyield_in_yield22477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_percent2485_static {
    public static final BitSet FOLLOW_cd_in_percent2485 = new BitSet(new long[]{0x200018E000000000L,0x00000000008408A0L,0x0000000004E12B09L});

    }static class FOLLOW_nn_in_percent2487_static {
    public static final BitSet FOLLOW_nn_in_percent2487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_percentsign_in_percent2490_static {
    public static final BitSet FOLLOW_percentsign_in_percent2490 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_percent2494_static {
    public static final BitSet FOLLOW_dash_in_percent2494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_percent2496_static {
    public static final BitSet FOLLOW_cd_in_percent2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_percentsign_in_percent2498_static {
    public static final BitSet FOLLOW_percentsign_in_percent2498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_bracketedContent2532_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContent2532 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_bracketedContent1_in_bracketedContent2537_static {
    public static final BitSet FOLLOW_bracketedContent1_in_bracketedContent2537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent2_in_bracketedContent2539_static {
    public static final BitSet FOLLOW_bracketedContent2_in_bracketedContent2539 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent3_in_bracketedContent2541_static {
    public static final BitSet FOLLOW_bracketedContent3_in_bracketedContent2541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContent12566_static {
    public static final BitSet FOLLOW_comma_in_bracketedContent12566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_lrb_in_bracketedContent12568_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContent12568 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent12570_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent12570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedContent12572_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContent12572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_comma_in_bracketedContent12574_static {
    public static final BitSet FOLLOW_comma_in_bracketedContent12574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedContent22580_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContent22580 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent22582_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent22582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedContent22584_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContent22584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_bracketedContent32590_static {
    public static final BitSet FOLLOW_lsqb_in_bracketedContent32590 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent32592_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent32592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rsqb_in_bracketedContent32594_static {
    public static final BitSet FOLLOW_rsqb_in_bracketedContent32594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_bracketedContentContents2601_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentContents2601 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_noun_in_bracketedContentContents2603_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentContents2603 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_bracketedContent_in_bracketedContentContents2605_static {
    public static final BitSet FOLLOW_bracketedContent_in_bracketedContentContents2605 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_md_in_bracketedContentContents2607_static {
    public static final BitSet FOLLOW_md_in_bracketedContentContents2607 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_percentsign_in_bracketedContentContents2609_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentContents2609 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_dash_in_bracketedContentContents2611_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentContents2611 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_inAll_in_bracketedContentContents2613_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentContents2613 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_ratio_in_bracketedContentContents2615_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentContents2615 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_conjunction_in_bracketedContentContents2617_static {
    public static final BitSet FOLLOW_conjunction_in_bracketedContentContents2617 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_adj_in_bracketedContentContents2619_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentContents2619 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_colon_in_bracketedContentContents2621_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentContents2621 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_stop_in_bracketedContentContents2623_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentContents2623 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_numeric_in_bracketedContentContents2625_static {
    public static final BitSet FOLLOW_numeric_in_bracketedContentContents2625 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_ratio_in_bracketedContentInMol2634_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMol2634 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2639_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2639 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2641_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2641 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2643_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContentInMolStructure12668_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolStructure12668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_lrb_in_bracketedContentInMolStructure12670_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContentInMolStructure12670 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFF2BCFL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12672_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedContentInMolStructure12674_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContentInMolStructure12674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_comma_in_bracketedContentInMolStructure12676_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolStructure12676 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedContentInMolStructure22682_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContentInMolStructure22682 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFF2BCFL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22684_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedContentInMolStructure22686_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContentInMolStructure22686 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_bracketedContentInMolStructure32692_static {
    public static final BitSet FOLLOW_lsqb_in_bracketedContentInMolStructure32692 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFF2BCFL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32694_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rsqb_in_bracketedContentInMolStructure32696_static {
    public static final BitSet FOLLOW_rsqb_in_bracketedContentInMolStructure32696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_bracketedContentInMolContents2703_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentInMolContents2703 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_quantity2Node_in_bracketedContentInMolContents2705_static {
    public static final BitSet FOLLOW_quantity2Node_in_bracketedContentInMolContents2705 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_oscarCompound_in_bracketedContentInMolContents2707_static {
    public static final BitSet FOLLOW_oscarCompound_in_bracketedContentInMolContents2707 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2709_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2709 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_ratio_in_bracketedContentInMolContents2711_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMolContents2711 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2713_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000008CL});

    }static class FOLLOW_comma_in_bracketedContentInMolContents2716_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolContents2716 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2720_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2720 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2726_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2726 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_cd_in_bracketedContentInMolContents2729_static {
    public static final BitSet FOLLOW_cd_in_bracketedContentInMolContents2729 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_md_in_bracketedContentInMolContents2731_static {
    public static final BitSet FOLLOW_md_in_bracketedContentInMolContents2731 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_percentsign_in_bracketedContentInMolContents2733_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentInMolContents2733 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_dash_in_bracketedContentInMolContents2735_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentInMolContents2735 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_inAll_in_bracketedContentInMolContents2737_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentInMolContents2737 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_comma_in_bracketedContentInMolContents2739_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolContents2739 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_adj_in_bracketedContentInMolContents2741_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentInMolContents2741 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2743_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2743 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2745_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2745 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_noun_in_bracketedContentInMolContents2747_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentInMolContents2747 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2749_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2749 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_verb_in_bracketedContentInMolContents2753_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentInMolContents2753 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_quantity2Node_in_bracketedContentInMolContents2755_static {
    public static final BitSet FOLLOW_quantity2Node_in_bracketedContentInMolContents2755 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_oscarCompound_in_bracketedContentInMolContents2757_static {
    public static final BitSet FOLLOW_oscarCompound_in_bracketedContentInMolContents2757 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2759_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2759 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_ratio_in_bracketedContentInMolContents2761_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMolContents2761 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_cd_in_bracketedContentInMolContents2763_static {
    public static final BitSet FOLLOW_cd_in_bracketedContentInMolContents2763 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_md_in_bracketedContentInMolContents2765_static {
    public static final BitSet FOLLOW_md_in_bracketedContentInMolContents2765 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_percentsign_in_bracketedContentInMolContents2767_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentInMolContents2767 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_dash_in_bracketedContentInMolContents2769_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentInMolContents2769 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_inAll_in_bracketedContentInMolContents2771_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentInMolContents2771 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_conjunction_in_bracketedContentInMolContents2773_static {
    public static final BitSet FOLLOW_conjunction_in_bracketedContentInMolContents2773 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_adj_in_bracketedContentInMolContents2775_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentInMolContents2775 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2777_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2777 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2779_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2779 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_noun_in_bracketedContentInMolContents2781_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentInMolContents2781 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2783_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2783 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_infrom_in_fromProcedure2794_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2794 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_inof_in_fromProcedure2800_static {
    public static final BitSet FOLLOW_inof_in_fromProcedure2800 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_vbyield_in_fromProcedure2807_static {
    public static final BitSet FOLLOW_vbyield_in_fromProcedure2807 = new BitSet(new long[]{0x0211000000000000L});

    }static class FOLLOW_vbsynthesize_in_fromProcedure2809_static {
    public static final BitSet FOLLOW_vbsynthesize_in_fromProcedure2809 = new BitSet(new long[]{0x0211000000000000L});

    }static class FOLLOW_inin_in_fromProcedure2813_static {
    public static final BitSet FOLLOW_inin_in_fromProcedure2813 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_inby_in_fromProcedure2815_static {
    public static final BitSet FOLLOW_inby_in_fromProcedure2815 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_infrom_in_fromProcedure2817_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2817 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_procedureNode_in_fromProcedure2821_static {
    public static final BitSet FOLLOW_procedureNode_in_fromProcedure2821 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2828_static {
    public static final BitSet FOLLOW_method_in_procedureNode2828 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2849_static {
    public static final BitSet FOLLOW_nngeneral_in_method2849 = new BitSet(new long[]{0x200018E000000000L,0x0000000000840EA0L,0x0000000004E12A09L});

    }static class FOLLOW_nn_in_method2851_static {
    public static final BitSet FOLLOW_nn_in_method2851 = new BitSet(new long[]{0x200018E000000000L,0x0000000000840EA0L,0x0000000004E12A09L});

    }static class FOLLOW_nnmethod_in_method2855_static {
    public static final BitSet FOLLOW_nnmethod_in_method2855 = new BitSet(new long[]{0x224019E000000002L,0x0000000001860EA4L,0x0000000014E12A0DL});

    }static class FOLLOW_allIdentifierTypes_in_method2857_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_method2857 = new BitSet(new long[]{0x224018E000000002L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_nnexample_in_method2862_static {
    public static final BitSet FOLLOW_nnexample_in_method2862 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_allIdentifierTypes_in_method2864_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_method2864 = new BitSet(new long[]{0x224018E000000002L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_comma_in_method2870_static {
    public static final BitSet FOLLOW_comma_in_method2870 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_colon_in_method2873_static {
    public static final BitSet FOLLOW_colon_in_method2873 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_inof_in_method2876_static {
    public static final BitSet FOLLOW_inof_in_method2876 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_infrom_in_method2880_static {
    public static final BitSet FOLLOW_infrom_in_method2880 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_submethod_in_method2884_static {
    public static final BitSet FOLLOW_submethod_in_method2884 = new BitSet(new long[]{0x224018E000000002L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_lrb_in_method2888_static {
    public static final BitSet FOLLOW_lrb_in_method2888 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_submethod_in_method2890_static {
    public static final BitSet FOLLOW_submethod_in_method2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_method2892_static {
    public static final BitSet FOLLOW_rrb_in_method2892 = new BitSet(new long[]{0x224018E000000002L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_nnmethod_in_submethod2903_static {
    public static final BitSet FOLLOW_nnmethod_in_submethod2903 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_nnexample_in_submethod2905_static {
    public static final BitSet FOLLOW_nnexample_in_submethod2905 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_allIdentifierTypes_in_submethod2908_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_submethod2908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound2917_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound2917 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_allIdentifierTypes_in_referenceToExampleCompound2919_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_referenceToExampleCompound2919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2937_static {
    public static final BitSet FOLLOW_adv_in_advAdj2937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2939_static {
    public static final BitSet FOLLOW_adj_in_advAdj2939 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range2946_static {
    public static final BitSet FOLLOW_numeric_in_range2946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_range2948_static {
    public static final BitSet FOLLOW_dash_in_range2948 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000010800L});

    }static class FOLLOW_numeric_in_range2950_static {
    public static final BitSet FOLLOW_numeric_in_range2950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2957_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2957 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure2974_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure2974 = new BitSet(new long[]{0x200018E000000000L,0x00000000008488A0L,0x0000000004E12A09L});

    }static class FOLLOW_dashNN_in_cycleStructure2976_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure2976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_nncycle_in_cycleStructure2979_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure2979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN2987_static {
    public static final BitSet FOLLOW_adj_in_dashNN2987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nn_in_dashNN2989_static {
    public static final BitSet FOLLOW_nn_in_dashNN2989 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_cd_in_dashNN2991_static {
    public static final BitSet FOLLOW_cd_in_dashNN2991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_dashNN2995_static {
    public static final BitSet FOLLOW_dash_in_dashNN2995 = new BitSet(new long[]{0x200018E000000000L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_adj_in_dashNN2998_static {
    public static final BitSet FOLLOW_adj_in_dashNN2998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nn_in_dashNN3000_static {
    public static final BitSet FOLLOW_nn_in_dashNN3000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_cd_in_dashNN3002_static {
    public static final BitSet FOLLOW_cd_in_dashNN3002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_lrb_in_ratioOrBracketedRatio3013_static {
    public static final BitSet FOLLOW_lrb_in_ratioOrBracketedRatio3013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3015_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_ratioOrBracketedRatio3017_static {
    public static final BitSet FOLLOW_rrb_in_ratioOrBracketedRatio3017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3021_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatio_in_ratio3028_static {
    public static final BitSet FOLLOW_cdRatio_in_ratio3028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cdRatio3043_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_colon_in_cdRatio3046_static {
    public static final BitSet FOLLOW_colon_in_cdRatio3046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_cdRatio3048_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_citationStructure_in_citation3060_static {
    public static final BitSet FOLLOW_citationStructure_in_citation3060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation3062_static {
    public static final BitSet FOLLOW_comma_in_citation3062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_citationContent_in_citation3064_static {
    public static final BitSet FOLLOW_citationContent_in_citation3064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_comma_in_citation3066_static {
    public static final BitSet FOLLOW_comma_in_citation3066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure3074_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure3074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent3090_static {
    public static final BitSet FOLLOW_lrb_in_citationContent3090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_nnp_in_citationContent3093_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_fw_in_citationContent3095_static {
    public static final BitSet FOLLOW_fw_in_citationContent3095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_cd_in_citationContent3097_static {
    public static final BitSet FOLLOW_cd_in_citationContent3097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_conjunction_in_citationContent3099_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_nnp_in_citationContent3103_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001009C008L});

    }static class FOLLOW_fw_in_citationContent3105_static {
    public static final BitSet FOLLOW_fw_in_citationContent3105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001009C008L});

    }static class FOLLOW_cd_in_citationContent3107_static {
    public static final BitSet FOLLOW_cd_in_citationContent3107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001009C008L});

    }static class FOLLOW_conjunction_in_citationContent3109_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001009C008L});

    }static class FOLLOW_rrb_in_citationContent3113_static {
    public static final BitSet FOLLOW_rrb_in_citationContent3113 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3123_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3123 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_allIdentifierTypes3127_static {
    public static final BitSet FOLLOW_cd_in_allIdentifierTypes3127 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3136_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3138_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3138 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3140_static {
    public static final BitSet FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3143_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3143 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric3151_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric3151 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3155_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3155 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric3163_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric3163 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000010800L});

    }static class FOLLOW_numeric_in_bracketedNumeric3165_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric3165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedNumeric3167_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric3167 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference3174_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference3174 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000010800L});

    }static class FOLLOW_numeric_in_squareBracketedReference3176_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference3176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rsqb_in_squareBracketedReference3178_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference3178 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier3185_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier3185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3188_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3188 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3192_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3192 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier3200_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier3200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010800L});

    }static class FOLLOW_cd_in_bracketedIdentifier3202_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier3202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier3205_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier3205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier3207_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier3207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj3215_static {
    public static final BitSet FOLLOW_jj_in_adj3215 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj3217_static {
    public static final BitSet FOLLOW_jjr_in_adj3217 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj3219_static {
    public static final BitSet FOLLOW_jjs_in_adj3219 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj3221_static {
    public static final BitSet FOLLOW_jjchem_in_adj3221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj3223_static {
    public static final BitSet FOLLOW_oscarcj_in_adj3223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj3225_static {
    public static final BitSet FOLLOW_oscarrn_in_adj3225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv3232_static {
    public static final BitSet FOLLOW_rb_in_adv3232 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv3234_static {
    public static final BitSet FOLLOW_rbr_in_adv3234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv3236_static {
    public static final BitSet FOLLOW_rp_in_adv3236 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv3238_static {
    public static final BitSet FOLLOW_rbs_in_adv3238 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause3245_static {
    public static final BitSet FOLLOW_wdt_in_clause3245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause3247_static {
    public static final BitSet FOLLOW_wp_poss_in_clause3247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause3249_static {
    public static final BitSet FOLLOW_wrb_in_clause3249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause3251_static {
    public static final BitSet FOLLOW_ex_in_clause3251 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause3253_static {
    public static final BitSet FOLLOW_pdt_in_clause3253 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause3255_static {
    public static final BitSet FOLLOW_wp_in_clause3255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction3262_static {
    public static final BitSet FOLLOW_cc_in_conjunction3262 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction3264_static {
    public static final BitSet FOLLOW_comma_in_conjunction3264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll3271_static {
    public static final BitSet FOLLOW_in_in_inAll3271 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll3273_static {
    public static final BitSet FOLLOW_inafter_in_inAll3273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll3275_static {
    public static final BitSet FOLLOW_inas_in_inAll3275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll3277_static {
    public static final BitSet FOLLOW_inbefore_in_inAll3277 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll3279_static {
    public static final BitSet FOLLOW_inby_in_inAll3279 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll3281_static {
    public static final BitSet FOLLOW_infor_in_inAll3281 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll3283_static {
    public static final BitSet FOLLOW_infrom_in_inAll3283 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll3285_static {
    public static final BitSet FOLLOW_inin_in_inAll3285 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll3287_static {
    public static final BitSet FOLLOW_ininto_in_inAll3287 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll3289_static {
    public static final BitSet FOLLOW_inof_in_inAll3289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll3291_static {
    public static final BitSet FOLLOW_inoff_in_inAll3291 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll3293_static {
    public static final BitSet FOLLOW_inon_in_inAll3293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll3295_static {
    public static final BitSet FOLLOW_inover_in_inAll3295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll3297_static {
    public static final BitSet FOLLOW_inunder_in_inAll3297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll3299_static {
    public static final BitSet FOLLOW_invia_in_inAll3299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll3301_static {
    public static final BitSet FOLLOW_inwith_in_inAll3301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll3303_static {
    public static final BitSet FOLLOW_inwithout_in_inAll3303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll3305_static {
    public static final BitSet FOLLOW_to_in_inAll3305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3312_static {
    public static final BitSet FOLLOW_in_in_inMost3312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3314_static {
    public static final BitSet FOLLOW_inas_in_inMost3314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3316_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3318_static {
    public static final BitSet FOLLOW_inby_in_inMost3318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3320_static {
    public static final BitSet FOLLOW_infor_in_inMost3320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3322_static {
    public static final BitSet FOLLOW_infrom_in_inMost3322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3324_static {
    public static final BitSet FOLLOW_inin_in_inMost3324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3326_static {
    public static final BitSet FOLLOW_ininto_in_inMost3326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3328_static {
    public static final BitSet FOLLOW_inof_in_inMost3328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3330_static {
    public static final BitSet FOLLOW_inoff_in_inMost3330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3332_static {
    public static final BitSet FOLLOW_inon_in_inMost3332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3334_static {
    public static final BitSet FOLLOW_inover_in_inMost3334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3336_static {
    public static final BitSet FOLLOW_inunder_in_inMost3336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3338_static {
    public static final BitSet FOLLOW_invia_in_inMost3338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3340_static {
    public static final BitSet FOLLOW_inwith_in_inMost3340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3342_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3344_static {
    public static final BitSet FOLLOW_to_in_inMost3344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3351_static {
    public static final BitSet FOLLOW_cd_in_numeric3351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3353_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_37_in_cdAlphanum3361_static {
    public static final BitSet FOLLOW_37_in_cdAlphanum3361 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3363_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_oscarcj3376_static {
    public static final BitSet FOLLOW_38_in_oscarcj3376 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3378_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarrn3391_static {
    public static final BitSet FOLLOW_39_in_oscarrn3391 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3393_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarase3406_static {
    public static final BitSet FOLLOW_40_in_oscarase3406 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3408_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_tmunicode3421_static {
    public static final BitSet FOLLOW_41_in_tmunicode3421 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3423_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_cdunicode3436_static {
    public static final BitSet FOLLOW_42_in_cdunicode3436 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3438_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_jjchem3451_static {
    public static final BitSet FOLLOW_43_in_jjchem3451 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3453_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3453 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_jjcomp3466_static {
    public static final BitSet FOLLOW_44_in_jjcomp3466 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3468_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3468 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_inas3482_static {
    public static final BitSet FOLLOW_45_in_inas3482 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inas3484_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3484 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_inbefore3497_static {
    public static final BitSet FOLLOW_46_in_inbefore3497 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3499_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3499 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inafter3512_static {
    public static final BitSet FOLLOW_47_in_inafter3512 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inafter3514_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inin3527_static {
    public static final BitSet FOLLOW_48_in_inin3527 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inin3529_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_ininto3542_static {
    public static final BitSet FOLLOW_49_in_ininto3542 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_ininto3544_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3544 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inwith3557_static {
    public static final BitSet FOLLOW_50_in_inwith3557 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inwith3559_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3559 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_inwithout3572_static {
    public static final BitSet FOLLOW_51_in_inwithout3572 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3574_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inby3587_static {
    public static final BitSet FOLLOW_52_in_inby3587 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inby3589_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3589 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_invia3602_static {
    public static final BitSet FOLLOW_53_in_invia3602 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_invia3604_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3604 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inof3617_static {
    public static final BitSet FOLLOW_54_in_inof3617 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inof3619_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3619 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_inon3632_static {
    public static final BitSet FOLLOW_55_in_inon3632 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inon3634_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_infor3647_static {
    public static final BitSet FOLLOW_56_in_infor3647 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_infor3649_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3649 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_infrom3662_static {
    public static final BitSet FOLLOW_57_in_infrom3662 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_infrom3664_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3664 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_inunder3677_static {
    public static final BitSet FOLLOW_58_in_inunder3677 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inunder3679_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3679 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_inover3692_static {
    public static final BitSet FOLLOW_59_in_inover3692 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inover3694_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inoff3707_static {
    public static final BitSet FOLLOW_60_in_inoff3707 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inoff3709_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_nnstate3724_static {
    public static final BitSet FOLLOW_61_in_nnstate3724 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3726_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_nntime3739_static {
    public static final BitSet FOLLOW_62_in_nntime3739 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nntime3741_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnmass3754_static {
    public static final BitSet FOLLOW_63_in_nnmass3754 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3756_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3756 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nnamount3769_static {
    public static final BitSet FOLLOW_64_in_nnamount3769 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3771_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3771 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmolar3784_static {
    public static final BitSet FOLLOW_65_in_nnmolar3784 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3786_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnatmosphere3799_static {
    public static final BitSet FOLLOW_66_in_nnatmosphere3799 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3801_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nneq3814_static {
    public static final BitSet FOLLOW_67_in_nneq3814 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nneq3816_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3816 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnvol3829_static {
    public static final BitSet FOLLOW_68_in_nnvol3829 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3831_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nnchementity3844_static {
    public static final BitSet FOLLOW_69_in_nnchementity3844 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3846_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nntemp3859_static {
    public static final BitSet FOLLOW_70_in_nntemp3859 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3861_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnph3874_static {
    public static final BitSet FOLLOW_71_in_nnph3874 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnph3876_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nnflash3889_static {
    public static final BitSet FOLLOW_72_in_nnflash3889 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3891_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nngeneral3904_static {
    public static final BitSet FOLLOW_73_in_nngeneral3904 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3906_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnmethod3919_static {
    public static final BitSet FOLLOW_74_in_nnmethod3919 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3921_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nnpressure3934_static {
    public static final BitSet FOLLOW_75_in_nnpressure3934 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3936_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nncolumn3949_static {
    public static final BitSet FOLLOW_76_in_nncolumn3949 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3951_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnchromatography3964_static {
    public static final BitSet FOLLOW_77_in_nnchromatography3964 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3966_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nnvacuum3979_static {
    public static final BitSet FOLLOW_78_in_nnvacuum3979 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3981_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nncycle3994_static {
    public static final BitSet FOLLOW_79_in_nncycle3994 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nncycle3996_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nntimes4009_static {
    public static final BitSet FOLLOW_80_in_nntimes4009 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nntimes4011_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes4011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nnexample4024_static {
    public static final BitSet FOLLOW_81_in_nnexample4024 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnexample4026_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample4026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_oscarcm4041_static {
    public static final BitSet FOLLOW_82_in_oscarcm4041 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm4043_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm4043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_vbuse4058_static {
    public static final BitSet FOLLOW_83_in_vbuse4058 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbuse4060_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse4060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_vbchange4073_static {
    public static final BitSet FOLLOW_84_in_vbchange4073 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbchange4075_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange4075 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbsubmerge4088_static {
    public static final BitSet FOLLOW_85_in_vbsubmerge4088 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge4090_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge4090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbsubject4103_static {
    public static final BitSet FOLLOW_86_in_vbsubject4103 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject4105_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject4105 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_nnadd4120_static {
    public static final BitSet FOLLOW_87_in_nnadd4120 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnadd4122_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd4122 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_nnmixture4135_static {
    public static final BitSet FOLLOW_88_in_nnmixture4135 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture4137_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture4137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_vbdilute4150_static {
    public static final BitSet FOLLOW_89_in_vbdilute4150 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute4152_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute4152 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_vbadd4165_static {
    public static final BitSet FOLLOW_90_in_vbadd4165 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbadd4167_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd4167 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbcharge4180_static {
    public static final BitSet FOLLOW_91_in_vbcharge4180 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge4182_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge4182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbcontain4195_static {
    public static final BitSet FOLLOW_92_in_vbcontain4195 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain4197_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain4197 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbdrop4210_static {
    public static final BitSet FOLLOW_93_in_vbdrop4210 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop4212_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop4212 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbfill4225_static {
    public static final BitSet FOLLOW_94_in_vbfill4225 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbfill4227_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill4227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbsuspend4240_static {
    public static final BitSet FOLLOW_95_in_vbsuspend4240 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend4242_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend4242 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbtreat4255_static {
    public static final BitSet FOLLOW_96_in_vbtreat4255 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat4257_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat4257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbapparatus4272_static {
    public static final BitSet FOLLOW_97_in_vbapparatus4272 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus4274_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus4274 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_nnapparatus4287_static {
    public static final BitSet FOLLOW_98_in_nnapparatus4287 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4289_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbconcentrate4304_static {
    public static final BitSet FOLLOW_99_in_vbconcentrate4304 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4306_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnconcentrate4319_static {
    public static final BitSet FOLLOW_100_in_nnconcentrate4319 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4321_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbcool4336_static {
    public static final BitSet FOLLOW_101_in_vbcool4336 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4338_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_vbdegass4353_static {
    public static final BitSet FOLLOW_102_in_vbdegass4353 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4355_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbdissolve4370_static {
    public static final BitSet FOLLOW_103_in_vbdissolve4370 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4372_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdry4387_static {
    public static final BitSet FOLLOW_104_in_vbdry4387 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4389_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_nndry4402_static {
    public static final BitSet FOLLOW_105_in_nndry4402 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nndry4404_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbextract4419_static {
    public static final BitSet FOLLOW_106_in_vbextract4419 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4421_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nnextract4434_static {
    public static final BitSet FOLLOW_107_in_nnextract4434 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4436_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbfilter4451_static {
    public static final BitSet FOLLOW_108_in_vbfilter4451 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4453_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4453 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnfilter4466_static {
    public static final BitSet FOLLOW_109_in_nnfilter4466 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4468_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4468 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbheat4483_static {
    public static final BitSet FOLLOW_110_in_vbheat4483 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4485_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4485 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_vbincrease4498_static {
    public static final BitSet FOLLOW_111_in_vbincrease4498 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4500_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4500 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbimmerse4515_static {
    public static final BitSet FOLLOW_112_in_vbimmerse4515 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4517_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4517 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbpartition4532_static {
    public static final BitSet FOLLOW_113_in_vbpartition4532 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4534_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbprecipitate4549_static {
    public static final BitSet FOLLOW_114_in_vbprecipitate4549 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4551_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_nnprecipitate4564_static {
    public static final BitSet FOLLOW_115_in_nnprecipitate4564 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4566_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4566 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbpurify4581_static {
    public static final BitSet FOLLOW_116_in_vbpurify4581 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4583_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4583 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnpurify4596_static {
    public static final BitSet FOLLOW_117_in_nnpurify4596 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4598_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4598 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbquench4613_static {
    public static final BitSet FOLLOW_118_in_vbquench4613 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4615_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_vbrecover4630_static {
    public static final BitSet FOLLOW_119_in_vbrecover4630 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4632_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbremove4647_static {
    public static final BitSet FOLLOW_120_in_vbremove4647 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4649_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4649 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_nnremove4662_static {
    public static final BitSet FOLLOW_121_in_nnremove4662 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4664_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4664 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbstir4679_static {
    public static final BitSet FOLLOW_122_in_vbstir4679 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4681_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4681 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_vbsynthesize4696_static {
    public static final BitSet FOLLOW_123_in_vbsynthesize4696 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4698_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_nnsynthesize4711_static {
    public static final BitSet FOLLOW_124_in_nnsynthesize4711 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4713_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4713 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbwait4728_static {
    public static final BitSet FOLLOW_125_in_vbwait4728 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4730_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4730 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_vbwash4745_static {
    public static final BitSet FOLLOW_126_in_vbwash4745 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4747_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbyield4762_static {
    public static final BitSet FOLLOW_127_in_vbyield4762 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4764_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_nnyield4779_static {
    public static final BitSet FOLLOW_128_in_nnyield4779 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4781_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_rbconj4797_static {
    public static final BitSet FOLLOW_129_in_rbconj4797 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4799_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4799 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_colon4812_static {
    public static final BitSet FOLLOW_130_in_colon4812 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_colon4814_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4814 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_comma4827_static {
    public static final BitSet FOLLOW_131_in_comma4827 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_comma4829_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4829 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_apost4842_static {
    public static final BitSet FOLLOW_132_in_apost4842 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_apost4844_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_neg4857_static {
    public static final BitSet FOLLOW_133_in_neg4857 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_neg4859_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_dash4872_static {
    public static final BitSet FOLLOW_134_in_dash4872 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_dash4874_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_stop4887_static {
    public static final BitSet FOLLOW_135_in_stop4887 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_stop4889_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_percentsign4902_static {
    public static final BitSet FOLLOW_136_in_percentsign4902 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_percentsign4904_static {
    public static final BitSet FOLLOW_TOKEN_in_percentsign4904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_lsqb4917_static {
    public static final BitSet FOLLOW_137_in_lsqb4917 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_lsqb4919_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_rsqb4932_static {
    public static final BitSet FOLLOW_138_in_rsqb4932 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rsqb4934_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_nnidentifier4948_static {
    public static final BitSet FOLLOW_139_in_nnidentifier4948 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier4950_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier4950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_dtTHE4965_static {
    public static final BitSet FOLLOW_140_in_dtTHE4965 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4967_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_lrb4981_static {
    public static final BitSet FOLLOW_141_in_lrb4981 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_lrb4983_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_rrb4996_static {
    public static final BitSet FOLLOW_142_in_rrb4996 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rrb4998_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_cc5015_static {
    public static final BitSet FOLLOW_143_in_cc5015 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_cc5017_static {
    public static final BitSet FOLLOW_TOKEN_in_cc5017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_cd5032_static {
    public static final BitSet FOLLOW_144_in_cd5032 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_cd5034_static {
    public static final BitSet FOLLOW_TOKEN_in_cd5034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_dt5049_static {
    public static final BitSet FOLLOW_145_in_dt5049 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_dt5051_static {
    public static final BitSet FOLLOW_TOKEN_in_dt5051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_ex5066_static {
    public static final BitSet FOLLOW_146_in_ex5066 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_ex5068_static {
    public static final BitSet FOLLOW_TOKEN_in_ex5068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_fw5083_static {
    public static final BitSet FOLLOW_147_in_fw5083 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_fw5085_static {
    public static final BitSet FOLLOW_TOKEN_in_fw5085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_in5100_static {
    public static final BitSet FOLLOW_148_in_in5100 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_in5102_static {
    public static final BitSet FOLLOW_TOKEN_in_in5102 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_jj5117_static {
    public static final BitSet FOLLOW_149_in_jj5117 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jj5119_static {
    public static final BitSet FOLLOW_TOKEN_in_jj5119 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_jjr5134_static {
    public static final BitSet FOLLOW_150_in_jjr5134 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jjr5136_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr5136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jjs5151_static {
    public static final BitSet FOLLOW_151_in_jjs5151 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jjs5153_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs5153 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_ls5168_static {
    public static final BitSet FOLLOW_152_in_ls5168 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_ls5170_static {
    public static final BitSet FOLLOW_TOKEN_in_ls5170 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_md5185_static {
    public static final BitSet FOLLOW_153_in_md5185 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_md5187_static {
    public static final BitSet FOLLOW_TOKEN_in_md5187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_nn5202_static {
    public static final BitSet FOLLOW_154_in_nn5202 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nn5204_static {
    public static final BitSet FOLLOW_TOKEN_in_nn5204 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_nns5219_static {
    public static final BitSet FOLLOW_155_in_nns5219 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nns5221_static {
    public static final BitSet FOLLOW_TOKEN_in_nns5221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nnp5236_static {
    public static final BitSet FOLLOW_156_in_nnp5236 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnp5238_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp5238 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nnps5253_static {
    public static final BitSet FOLLOW_157_in_nnps5253 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnps5255_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps5255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_pdt5270_static {
    public static final BitSet FOLLOW_158_in_pdt5270 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_pdt5272_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt5272 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_pos5287_static {
    public static final BitSet FOLLOW_159_in_pos5287 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_pos5289_static {
    public static final BitSet FOLLOW_TOKEN_in_pos5289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_prp5304_static {
    public static final BitSet FOLLOW_160_in_prp5304 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_prp5306_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_prp_poss5321_static {
    public static final BitSet FOLLOW_161_in_prp_poss5321 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5323_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_rb5338_static {
    public static final BitSet FOLLOW_162_in_rb5338 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rb5340_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_rbr5355_static {
    public static final BitSet FOLLOW_163_in_rbr5355 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rbr5357_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rbs5372_static {
    public static final BitSet FOLLOW_164_in_rbs5372 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rbs5374_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rp5389_static {
    public static final BitSet FOLLOW_165_in_rp5389 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rp5391_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5391 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_sym5406_static {
    public static final BitSet FOLLOW_166_in_sym5406 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_sym5408_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_to5423_static {
    public static final BitSet FOLLOW_167_in_to5423 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_to5425_static {
    public static final BitSet FOLLOW_TOKEN_in_to5425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_uh5440_static {
    public static final BitSet FOLLOW_168_in_uh5440 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_uh5442_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5442 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_vb5457_static {
    public static final BitSet FOLLOW_169_in_vb5457 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vb5459_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5459 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_vbd5474_static {
    public static final BitSet FOLLOW_170_in_vbd5474 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbd5476_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5476 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vbg5491_static {
    public static final BitSet FOLLOW_171_in_vbg5491 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbg5493_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbn5508_static {
    public static final BitSet FOLLOW_172_in_vbn5508 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbn5510_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbp5525_static {
    public static final BitSet FOLLOW_173_in_vbp5525 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbp5527_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbz5542_static {
    public static final BitSet FOLLOW_174_in_vbz5542 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbz5544_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5544 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_wdt5559_static {
    public static final BitSet FOLLOW_175_in_wdt5559 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_wdt5561_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_wp5576_static {
    public static final BitSet FOLLOW_176_in_wp5576 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_wp5578_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5578 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wp_poss5593_static {
    public static final BitSet FOLLOW_177_in_wp_poss5593 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5595_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wrb5610_static {
    public static final BitSet FOLLOW_178_in_wrb5610 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_wrb5612_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5612 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker219_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker219 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker224_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker224 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker226_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker226 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred6_ChemicalChunker241_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred7_ChemicalChunker243_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred8_ChemicalChunker245_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker247_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred10_ChemicalChunker252_static {
    public static final BitSet FOLLOW_advAdj_in_synpred10_ChemicalChunker252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred11_ChemicalChunker254_static {
    public static final BitSet FOLLOW_colon_in_synpred11_ChemicalChunker254 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred12_ChemicalChunker259_static {
    public static final BitSet FOLLOW_conjunction_in_synpred12_ChemicalChunker259 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred13_ChemicalChunker261_static {
    public static final BitSet FOLLOW_rbconj_in_synpred13_ChemicalChunker261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred14_ChemicalChunker263_static {
    public static final BitSet FOLLOW_comma_in_synpred14_ChemicalChunker263 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker478_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker579_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker579 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred93_ChemicalChunker610_static {
    public static final BitSet FOLLOW_dt_in_synpred93_ChemicalChunker610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred94_ChemicalChunker617_static {
    public static final BitSet FOLLOW_conjunction_in_synpred94_ChemicalChunker617 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred95_ChemicalChunker617_static {
    public static final BitSet FOLLOW_conjunction_in_synpred95_ChemicalChunker617 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEFBA09L});

    }static class FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker620_static {
    public static final BitSet FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker627_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker630_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred98_ChemicalChunker642_static {
    public static final BitSet FOLLOW_advAdj_in_synpred98_ChemicalChunker642 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker647_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker647 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker649_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker649 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred101_ChemicalChunker651_static {
    public static final BitSet FOLLOW_noun_in_synpred101_ChemicalChunker651 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred102_ChemicalChunker653_static {
    public static final BitSet FOLLOW_numeric_in_synpred102_ChemicalChunker653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent_in_synpred103_ChemicalChunker655_static {
    public static final BitSet FOLLOW_bracketedContent_in_synpred103_ChemicalChunker655 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker667_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker667 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred105_ChemicalChunker698_static {
    public static final BitSet FOLLOW_adj_in_synpred105_ChemicalChunker698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred108_ChemicalChunker710_static {
    public static final BitSet FOLLOW_molecule_in_synpred108_ChemicalChunker710 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred109_ChemicalChunker719_static {
    public static final BitSet FOLLOW_conjunction_in_synpred109_ChemicalChunker719 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker721_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker721 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred111_ChemicalChunker738_static {
    public static final BitSet FOLLOW_adj_in_synpred111_ChemicalChunker738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred113_ChemicalChunker745_static {
    public static final BitSet FOLLOW_molecule_in_synpred113_ChemicalChunker745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_synpred115_ChemicalChunker778_static {
    public static final BitSet FOLLOW_to_in_synpred115_ChemicalChunker778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred116_ChemicalChunker781_static {
    public static final BitSet FOLLOW_inAll_in_synpred116_ChemicalChunker781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred122_ChemicalChunker800_static {
    public static final BitSet FOLLOW_verb_in_synpred122_ChemicalChunker800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred123_ChemicalChunker803_static {
    public static final BitSet FOLLOW_md_in_synpred123_ChemicalChunker803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred124_ChemicalChunker806_static {
    public static final BitSet FOLLOW_adv_in_synpred124_ChemicalChunker806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred125_ChemicalChunker809_static {
    public static final BitSet FOLLOW_adj_in_synpred125_ChemicalChunker809 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred126_ChemicalChunker812_static {
    public static final BitSet FOLLOW_neg_in_synpred126_ChemicalChunker812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred127_ChemicalChunker788_static {
    public static final BitSet FOLLOW_md_in_synpred127_ChemicalChunker788 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_rbconj_in_synpred127_ChemicalChunker791_static {
    public static final BitSet FOLLOW_rbconj_in_synpred127_ChemicalChunker791 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_adv_in_synpred127_ChemicalChunker794_static {
    public static final BitSet FOLLOW_adv_in_synpred127_ChemicalChunker794 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_adj_in_synpred127_ChemicalChunker797_static {
    public static final BitSet FOLLOW_adj_in_synpred127_ChemicalChunker797 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_verb_in_synpred127_ChemicalChunker800_static {
    public static final BitSet FOLLOW_verb_in_synpred127_ChemicalChunker800 = new BitSet(new long[]{0x1FFFE8C000000002L,0xEDD7D5EBFE780000L,0x00007EBC02F20022L});

    }static class FOLLOW_md_in_synpred127_ChemicalChunker803_static {
    public static final BitSet FOLLOW_md_in_synpred127_ChemicalChunker803 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C02E00020L});

    }static class FOLLOW_adv_in_synpred127_ChemicalChunker806_static {
    public static final BitSet FOLLOW_adv_in_synpred127_ChemicalChunker806 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C00E00020L});

    }static class FOLLOW_adj_in_synpred127_ChemicalChunker809_static {
    public static final BitSet FOLLOW_adj_in_synpred127_ChemicalChunker809 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_neg_in_synpred127_ChemicalChunker812_static {
    public static final BitSet FOLLOW_neg_in_synpred127_ChemicalChunker812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred128_ChemicalChunker818_static {
    public static final BitSet FOLLOW_inoff_in_synpred128_ChemicalChunker818 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred131_ChemicalChunker822_static {
    public static final BitSet FOLLOW_cc_in_synpred131_ChemicalChunker822 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30028L});

    }static class FOLLOW_comma_in_synpred131_ChemicalChunker825_static {
    public static final BitSet FOLLOW_comma_in_synpred131_ChemicalChunker825 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30020L});

    }static class FOLLOW_prepphrase_in_synpred131_ChemicalChunker828_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred131_ChemicalChunker828 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred141_ChemicalChunker858_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred141_ChemicalChunker858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred154_ChemicalChunker884_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred154_ChemicalChunker884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred172_ChemicalChunker946_static {
    public static final BitSet FOLLOW_dash_in_synpred172_ChemicalChunker946 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x00078043FDEF2A09L});

    }static class FOLLOW_nounStructure_in_synpred172_ChemicalChunker948_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred172_ChemicalChunker948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred175_ChemicalChunker963_static {
    public static final BitSet FOLLOW_citation_in_synpred175_ChemicalChunker963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred176_ChemicalChunker965_static {
    public static final BitSet FOLLOW_cycles_in_synpred176_ChemicalChunker965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred177_ChemicalChunker967_static {
    public static final BitSet FOLLOW_molecule_in_synpred177_ChemicalChunker967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred178_ChemicalChunker969_static {
    public static final BitSet FOLLOW_apparatus_in_synpred178_ChemicalChunker969 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred179_ChemicalChunker971_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred179_ChemicalChunker971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred180_ChemicalChunker973_static {
    public static final BitSet FOLLOW_nnstate_in_synpred180_ChemicalChunker973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred181_ChemicalChunker975_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred181_ChemicalChunker975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred182_ChemicalChunker977_static {
    public static final BitSet FOLLOW_nn_in_synpred182_ChemicalChunker977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred185_ChemicalChunker983_static {
    public static final BitSet FOLLOW_nnadd_in_synpred185_ChemicalChunker983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred187_ChemicalChunker987_static {
    public static final BitSet FOLLOW_nnexample_in_synpred187_ChemicalChunker987 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred188_ChemicalChunker989_static {
    public static final BitSet FOLLOW_range_in_synpred188_ChemicalChunker989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred190_ChemicalChunker993_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred190_ChemicalChunker993 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred192_ChemicalChunker997_static {
    public static final BitSet FOLLOW_quantity_in_synpred192_ChemicalChunker997 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred193_ChemicalChunker999_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred193_ChemicalChunker999 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred195_ChemicalChunker1003_static {
    public static final BitSet FOLLOW_nnph_in_synpred195_ChemicalChunker1003 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred197_ChemicalChunker1007_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred197_ChemicalChunker1007 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred200_ChemicalChunker1013_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred200_ChemicalChunker1013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_synpred210_ChemicalChunker1033_static {
    public static final BitSet FOLLOW_nnmixture_in_synpred210_ChemicalChunker1033 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred211_ChemicalChunker1035_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred211_ChemicalChunker1035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred217_ChemicalChunker1047_static {
    public static final BitSet FOLLOW_nnyield_in_synpred217_ChemicalChunker1047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred225_ChemicalChunker1077_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred225_ChemicalChunker1077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred226_ChemicalChunker1079_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred226_ChemicalChunker1079 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred227_ChemicalChunker1081_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred227_ChemicalChunker1081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred228_ChemicalChunker1083_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred228_ChemicalChunker1083 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred229_ChemicalChunker1085_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred229_ChemicalChunker1085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred231_ChemicalChunker1125_static {
    public static final BitSet FOLLOW_advAdj_in_synpred231_ChemicalChunker1125 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred232_ChemicalChunker1130_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred232_ChemicalChunker1130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred233_ChemicalChunker1158_static {
    public static final BitSet FOLLOW_advAdj_in_synpred233_ChemicalChunker1158 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred238_ChemicalChunker1174_static {
    public static final BitSet FOLLOW_nntime_in_synpred238_ChemicalChunker1174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred239_ChemicalChunker1205_static {
    public static final BitSet FOLLOW_advAdj_in_synpred239_ChemicalChunker1205 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred244_ChemicalChunker1220_static {
    public static final BitSet FOLLOW_nntemp_in_synpred244_ChemicalChunker1220 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred250_ChemicalChunker1393_static {
    public static final BitSet FOLLOW_conjunction_in_synpred250_ChemicalChunker1393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred251_ChemicalChunker1393_static {
    public static final BitSet FOLLOW_conjunction_in_synpred251_ChemicalChunker1393 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E3AA09L});

    }static class FOLLOW_apparatus_in_synpred251_ChemicalChunker1396_static {
    public static final BitSet FOLLOW_apparatus_in_synpred251_ChemicalChunker1396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred254_ChemicalChunker1413_static {
    public static final BitSet FOLLOW_nnApp_in_synpred254_ChemicalChunker1413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1440_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1440 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred256_ChemicalChunker1444_static {
    public static final BitSet FOLLOW_dash_in_synpred256_ChemicalChunker1444 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1446_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1446 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred257_ChemicalChunker1460_static {
    public static final BitSet FOLLOW_quantity_in_synpred257_ChemicalChunker1460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred258_ChemicalChunker1462_static {
    public static final BitSet FOLLOW_adj_in_synpred258_ChemicalChunker1462 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred259_ChemicalChunker1464_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred259_ChemicalChunker1464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred260_ChemicalChunker1466_static {
    public static final BitSet FOLLOW_nnadd_in_synpred260_ChemicalChunker1466 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred261_ChemicalChunker1468_static {
    public static final BitSet FOLLOW_molecule_in_synpred261_ChemicalChunker1468 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred262_ChemicalChunker1470_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred262_ChemicalChunker1470 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred263_ChemicalChunker1472_static {
    public static final BitSet FOLLOW_nnstate_in_synpred263_ChemicalChunker1472 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred264_ChemicalChunker1474_static {
    public static final BitSet FOLLOW_nn_in_synpred264_ChemicalChunker1474 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred267_ChemicalChunker1495_static {
    public static final BitSet FOLLOW_adj_in_synpred267_ChemicalChunker1495 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred268_ChemicalChunker1498_static {
    public static final BitSet FOLLOW_nnstate_in_synpred268_ChemicalChunker1498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred269_ChemicalChunker1502_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred269_ChemicalChunker1502 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred270_ChemicalChunker1506_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred270_ChemicalChunker1506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred271_ChemicalChunker1511_static {
    public static final BitSet FOLLOW_quantity_in_synpred271_ChemicalChunker1511 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred272_ChemicalChunker1514_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred272_ChemicalChunker1514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred273_ChemicalChunker1523_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred273_ChemicalChunker1523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred274_ChemicalChunker1526_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred274_ChemicalChunker1526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred276_ChemicalChunker1556_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred276_ChemicalChunker1556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred277_ChemicalChunker1554_static {
    public static final BitSet FOLLOW_dash_in_synpred277_ChemicalChunker1554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_synpred277_ChemicalChunker1556_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred277_ChemicalChunker1556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});

    }static class FOLLOW_dash_in_synpred278_ChemicalChunker1561_static {
    public static final BitSet FOLLOW_dash_in_synpred278_ChemicalChunker1561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred279_ChemicalChunker1554_static {
    public static final BitSet FOLLOW_dash_in_synpred279_ChemicalChunker1554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_synpred279_ChemicalChunker1556_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred279_ChemicalChunker1556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_synpred279_ChemicalChunker1561_static {
    public static final BitSet FOLLOW_dash_in_synpred279_ChemicalChunker1561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred283_ChemicalChunker1566_static {
    public static final BitSet FOLLOW_colon_in_synpred283_ChemicalChunker1566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_synpred283_ChemicalChunker1568_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred283_ChemicalChunker1568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000012004L});

    }static class FOLLOW_lrb_in_synpred283_ChemicalChunker1573_static {
    public static final BitSet FOLLOW_lrb_in_synpred283_ChemicalChunker1573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_ratio_in_synpred283_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_ratio_in_synpred283_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred284_ChemicalChunker1582_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred284_ChemicalChunker1582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred285_ChemicalChunker1580_static {
    public static final BitSet FOLLOW_colon_in_synpred285_ChemicalChunker1580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_synpred285_ChemicalChunker1582_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred285_ChemicalChunker1582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});

    }static class FOLLOW_dash_in_synpred286_ChemicalChunker1588_static {
    public static final BitSet FOLLOW_dash_in_synpred286_ChemicalChunker1588 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred287_ChemicalChunker1590_static {
    public static final BitSet FOLLOW_apost_in_synpred287_ChemicalChunker1590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred289_ChemicalChunker1633_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred289_ChemicalChunker1633 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred290_ChemicalChunker1636_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred290_ChemicalChunker1636 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred291_ChemicalChunker1643_static {
    public static final BitSet FOLLOW_asAstate_in_synpred291_ChemicalChunker1643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred292_ChemicalChunker1654_static {
    public static final BitSet FOLLOW_quantity_in_synpred292_ChemicalChunker1654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred293_ChemicalChunker1656_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred293_ChemicalChunker1656 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred296_ChemicalChunker1673_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred296_ChemicalChunker1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred299_ChemicalChunker1695_static {
    public static final BitSet FOLLOW_quantity_in_synpred299_ChemicalChunker1695 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred300_ChemicalChunker1697_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred300_ChemicalChunker1697 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred305_ChemicalChunker1720_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred305_ChemicalChunker1720 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred306_ChemicalChunker1732_static {
    public static final BitSet FOLLOW_quantity_in_synpred306_ChemicalChunker1732 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred307_ChemicalChunker1734_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred307_ChemicalChunker1734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1738_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred309_ChemicalChunker1749_static {
    public static final BitSet FOLLOW_citation_in_synpred309_ChemicalChunker1749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred310_ChemicalChunker1751_static {
    public static final BitSet FOLLOW_quantity_in_synpred310_ChemicalChunker1751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred312_ChemicalChunker1753_static {
    public static final BitSet FOLLOW_comma_in_synpred312_ChemicalChunker1753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_quantity1Node_in_synpred312_ChemicalChunker1756_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred312_ChemicalChunker1756 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred312_ChemicalChunker1758_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred312_ChemicalChunker1758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred313_ChemicalChunker1761_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred313_ChemicalChunker1761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred314_ChemicalChunker1793_static {
    public static final BitSet FOLLOW_asAstate_in_synpred314_ChemicalChunker1793 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred315_ChemicalChunker1806_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred315_ChemicalChunker1806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred316_ChemicalChunker1810_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred316_ChemicalChunker1810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred318_ChemicalChunker1820_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred318_ChemicalChunker1820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred319_ChemicalChunker1833_static {
    public static final BitSet FOLLOW_quantity_in_synpred319_ChemicalChunker1833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred323_ChemicalChunker1857_static {
    public static final BitSet FOLLOW_quantity_in_synpred323_ChemicalChunker1857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred324_ChemicalChunker1860_static {
    public static final BitSet FOLLOW_asAstate_in_synpred324_ChemicalChunker1860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred325_ChemicalChunker1863_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred325_ChemicalChunker1863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred330_ChemicalChunker1903_static {
    public static final BitSet FOLLOW_quantity_in_synpred330_ChemicalChunker1903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred331_ChemicalChunker1906_static {
    public static final BitSet FOLLOW_asAstate_in_synpred331_ChemicalChunker1906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred332_ChemicalChunker1909_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred332_ChemicalChunker1909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred333_ChemicalChunker1921_static {
    public static final BitSet FOLLOW_quantity_in_synpred333_ChemicalChunker1921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred334_ChemicalChunker1924_static {
    public static final BitSet FOLLOW_asAstate_in_synpred334_ChemicalChunker1924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1927_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1927 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred338_ChemicalChunker1951_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred338_ChemicalChunker1951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred341_ChemicalChunker1972_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred341_ChemicalChunker1972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred354_ChemicalChunker2028_static {
    public static final BitSet FOLLOW_quantity_in_synpred354_ChemicalChunker2028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred359_ChemicalChunker2057_static {
    public static final BitSet FOLLOW_quantity_in_synpred359_ChemicalChunker2057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred364_ChemicalChunker2218_static {
    public static final BitSet FOLLOW_comma_in_synpred364_ChemicalChunker2218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurements_in_synpred364_ChemicalChunker2221_static {
    public static final BitSet FOLLOW_measurements_in_synpred364_ChemicalChunker2221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred367_ChemicalChunker2246_static {
    public static final BitSet FOLLOW_dt_in_synpred367_ChemicalChunker2246 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred368_ChemicalChunker2258_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred368_ChemicalChunker2258 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred375_ChemicalChunker2295_static {
    public static final BitSet FOLLOW_yield_in_synpred375_ChemicalChunker2295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred380_ChemicalChunker2494_static {
    public static final BitSet FOLLOW_dash_in_synpred380_ChemicalChunker2494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_synpred380_ChemicalChunker2496_static {
    public static final BitSet FOLLOW_cd_in_synpred380_ChemicalChunker2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_percentsign_in_synpred380_ChemicalChunker2498_static {
    public static final BitSet FOLLOW_percentsign_in_synpred380_ChemicalChunker2498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred384_ChemicalChunker2601_static {
    public static final BitSet FOLLOW_verb_in_synpred384_ChemicalChunker2601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred385_ChemicalChunker2603_static {
    public static final BitSet FOLLOW_noun_in_synpred385_ChemicalChunker2603 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent_in_synpred386_ChemicalChunker2605_static {
    public static final BitSet FOLLOW_bracketedContent_in_synpred386_ChemicalChunker2605 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred391_ChemicalChunker2615_static {
    public static final BitSet FOLLOW_ratio_in_synpred391_ChemicalChunker2615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred392_ChemicalChunker2617_static {
    public static final BitSet FOLLOW_conjunction_in_synpred392_ChemicalChunker2617 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred393_ChemicalChunker2619_static {
    public static final BitSet FOLLOW_adj_in_synpred393_ChemicalChunker2619 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred396_ChemicalChunker2625_static {
    public static final BitSet FOLLOW_numeric_in_synpred396_ChemicalChunker2625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred400_ChemicalChunker2703_static {
    public static final BitSet FOLLOW_verb_in_synpred400_ChemicalChunker2703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred401_ChemicalChunker2705_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred401_ChemicalChunker2705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred402_ChemicalChunker2707_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred402_ChemicalChunker2707 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred403_ChemicalChunker2709_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred403_ChemicalChunker2709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred404_ChemicalChunker2711_static {
    public static final BitSet FOLLOW_ratio_in_synpred404_ChemicalChunker2711 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_synpred407_ChemicalChunker2713_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_synpred407_ChemicalChunker2713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000008CL});

    }static class FOLLOW_comma_in_synpred407_ChemicalChunker2716_static {
    public static final BitSet FOLLOW_comma_in_synpred407_ChemicalChunker2716 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred407_ChemicalChunker2720_static {
    public static final BitSet FOLLOW_colon_in_synpred407_ChemicalChunker2720 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred407_ChemicalChunker2726_static {
    public static final BitSet FOLLOW_stop_in_synpred407_ChemicalChunker2726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred408_ChemicalChunker2729_static {
    public static final BitSet FOLLOW_cd_in_synpred408_ChemicalChunker2729 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred413_ChemicalChunker2739_static {
    public static final BitSet FOLLOW_comma_in_synpred413_ChemicalChunker2739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred414_ChemicalChunker2741_static {
    public static final BitSet FOLLOW_adj_in_synpred414_ChemicalChunker2741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred417_ChemicalChunker2747_static {
    public static final BitSet FOLLOW_noun_in_synpred417_ChemicalChunker2747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred418_ChemicalChunker2753_static {
    public static final BitSet FOLLOW_verb_in_synpred418_ChemicalChunker2753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred419_ChemicalChunker2755_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred419_ChemicalChunker2755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred420_ChemicalChunker2757_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred420_ChemicalChunker2757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred421_ChemicalChunker2759_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred421_ChemicalChunker2759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred422_ChemicalChunker2761_static {
    public static final BitSet FOLLOW_ratio_in_synpred422_ChemicalChunker2761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred423_ChemicalChunker2763_static {
    public static final BitSet FOLLOW_cd_in_synpred423_ChemicalChunker2763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred428_ChemicalChunker2773_static {
    public static final BitSet FOLLOW_conjunction_in_synpred428_ChemicalChunker2773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred429_ChemicalChunker2775_static {
    public static final BitSet FOLLOW_adj_in_synpred429_ChemicalChunker2775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred432_ChemicalChunker2781_static {
    public static final BitSet FOLLOW_noun_in_synpred432_ChemicalChunker2781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred433_ChemicalChunker2783_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred433_ChemicalChunker2783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypes_in_synpred441_ChemicalChunker2857_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_synpred441_ChemicalChunker2857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred447_ChemicalChunker2870_static {
    public static final BitSet FOLLOW_comma_in_synpred447_ChemicalChunker2870 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_colon_in_synpred447_ChemicalChunker2873_static {
    public static final BitSet FOLLOW_colon_in_synpred447_ChemicalChunker2873 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_inof_in_synpred447_ChemicalChunker2876_static {
    public static final BitSet FOLLOW_inof_in_synpred447_ChemicalChunker2876 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_infrom_in_synpred447_ChemicalChunker2880_static {
    public static final BitSet FOLLOW_infrom_in_synpred447_ChemicalChunker2880 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_submethod_in_synpred447_ChemicalChunker2884_static {
    public static final BitSet FOLLOW_submethod_in_synpred447_ChemicalChunker2884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_synpred448_ChemicalChunker2888_static {
    public static final BitSet FOLLOW_lrb_in_synpred448_ChemicalChunker2888 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_submethod_in_synpred448_ChemicalChunker2890_static {
    public static final BitSet FOLLOW_submethod_in_synpred448_ChemicalChunker2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_synpred448_ChemicalChunker2892_static {
    public static final BitSet FOLLOW_rrb_in_synpred448_ChemicalChunker2892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred458_ChemicalChunker3046_static {
    public static final BitSet FOLLOW_colon_in_synpred458_ChemicalChunker3046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_synpred458_ChemicalChunker3048_static {
    public static final BitSet FOLLOW_cd_in_synpred458_ChemicalChunker3048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_synpred467_ChemicalChunker3123_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_synpred467_ChemicalChunker3123 = new BitSet(new long[]{0x0000000000000002L});

    }
}