// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-12-30 15:27:11

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=36;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=35;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=34;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=33;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[813+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public boolean isAtTokenPositionZero(TokenStream stream){
    	return stream.index()==0;
    }

    public boolean followedByVBDorVBZthenVBYIELDed(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	if ("VBD".equals(nextTokenTypeStr) || "VBZ".equals(nextTokenTypeStr)){
    		String twoAheadTypeStr = stream.LT(3).getText();
    		if ("VB-YIELD".equals(twoAheadTypeStr)){
    			String twoAheadTokenText = stream.LT(4).getText();
    			if (twoAheadTokenText !=null && twoAheadTokenText.toLowerCase().endsWith("ed")){
    				return true;
    			}
    		}
    	}
    	return false;
    }

    public boolean cdHasRoleOtherThanIdentifier(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	if (isQuantityUnit(nextTokenTypeStr)){
    		return true;//quantity
    	}
    	if ("NN-TIMES".equals(nextTokenTypeStr)){
    		return true;//e.g. washed with the compound 3 times
    	}
    	if ("COLON".equals(nextTokenTypeStr)){
    		String twoAheadTypeStr = stream.LT(3).getText();
    		if ("CD".equals(twoAheadTypeStr)){
    			String threeAheadTypeStr = stream.LT(5).getText();
    			if (!isQuantityUnit(threeAheadTypeStr)){
    				return true;//ratio
    			}
    		}
    	}
    	return false;
    }

    public boolean followedByQuantityUnits(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	return isQuantityUnit(nextTokenTypeStr);
    }

    public boolean isQuantityUnit(String tokenType){
    	return ("NN-MOLAR".equals(tokenType) || "NN-AMOUNT".equals(tokenType) ||
    			"NN-MASS".equals(tokenType) || "NN-VOL".equals(tokenType) ||
    			"NN-EQ".equals(tokenType) || "NN-PERCENT".equals(tokenType));
    }

    public boolean precededByProduct(TokenStream stream){
    	Token previousToken = stream.LT(-1);
    	if (previousToken !=null && previousToken.getText().equalsIgnoreCase("product")){
    		return true;
    	}
    	return false;
    }

    public boolean suitableVbYieldOrSynthesizeForReference(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("VB-YIELD".equals(nextTokenType.getText()) || "VB-SYNTHESIZE".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.toLowerCase().endsWith("ed")){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean nextIsSemiColon(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("STOP".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.equals(";")){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean notFollowedByBracketedYear(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("-LRB-".equals(nextTokenType.getText())){
    		Token nextNextTokenType = stream.LT(3);
    		if ("CD".equals(nextNextTokenType.getText())){
    			String nextNextTokenText = stream.LT(4).getText();
    			if (nextNextTokenText !=null){
    				try{
    					int i = Integer.parseInt(nextNextTokenText);
    					if (i >1000){
    						return false;
    					}
    				}
    				catch (NumberFormatException e) {
    				}
    			}
    		}
    	}
    	return true;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:1: document : ( sentence )+ -> ( ^( Sentence sentence ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence1 = null;


        RewriteRuleSubtreeStream stream_sentence=new RewriteRuleSubtreeStream(adaptor,"rule sentence");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:9: ( ( sentence )+ -> ( ^( Sentence sentence ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:11: ( sentence )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:11: ( sentence )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_document199_static.FOLLOW_sentence_in_document199);
            	    sentence1=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentence.add(sentence1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 157:20: -> ( ^( Sentence sentence ) )+
            {
                if ( !(stream_sentence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentence.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:23: ^( Sentence sentence )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentence.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentence.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:1: sentence : ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);
        int sentence_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase2 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure3 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:9: ( ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ )
            int alt3=2;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:12: procedureNounPhrase
                    {
                    pushFollow(FOLLOW_procedureNounPhrase_in_sentence219_static.FOLLOW_procedureNounPhrase_in_sentence219);
                    procedureNounPhrase2=procedureNounPhrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNounPhrase2.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:34: ( sentenceStructure | unmatchedPhrase )+
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:34: ( sentenceStructure | unmatchedPhrase )+
                    int cnt2=0;
                    loop2:
                    do {
                        int alt2=3;
                        alt2 = dfa2.predict(input);
                        switch (alt2) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:35: sentenceStructure
                    	    {
                    	    pushFollow(FOLLOW_sentenceStructure_in_sentence224_static.FOLLOW_sentenceStructure_in_sentence224);
                    	    sentenceStructure3=sentenceStructure();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure3.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:53: unmatchedPhrase
                    	    {
                    	    pushFollow(FOLLOW_unmatchedPhrase_in_sentence226_static.FOLLOW_unmatchedPhrase_in_sentence226);
                    	    unmatchedPhrase4=unmatchedPhrase();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase4.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt2 >= 1 ) break loop2;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(2, input);
                                throw eee;
                        }
                        cnt2++;
                    } while (true);


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:72: ( stop )*
            loop4:
            do {
                int alt4=2;
                switch ( input.LA(1) ) {
                case 135:
                    {
                    alt4=1;
                    }
                    break;

                }

                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentence231_static.FOLLOW_stop_in_sentence231);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentence_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter9 = null;

        ChemicalChunkerParser.advAdj_return advAdj10 = null;

        ChemicalChunkerParser.colon_return colon11 = null;

        ChemicalChunkerParser.conjunction_return conjunction12 = null;

        ChemicalChunkerParser.rbconj_return rbconj13 = null;

        ChemicalChunkerParser.comma_return comma14 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt5=0;
            loop5:
            do {
                int alt5=5;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure241_static.FOLLOW_nounphrase_in_sentenceStructure241);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure243_static.FOLLOW_verbphrase_in_sentenceStructure243);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure245_static.FOLLOW_prepphrase_in_sentenceStructure245);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure247_static.FOLLOW_prepphraseAfter_in_sentenceStructure247);
            	    prepphraseAfter9=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter9.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:73: ( advAdj | colon )*
            loop6:
            do {
                int alt6=3;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure252_static.FOLLOW_advAdj_in_sentenceStructure252);
            	    advAdj10=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj10.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure254_static.FOLLOW_colon_in_sentenceStructure254);
            	    colon11=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:89: ( conjunction | rbconj | comma )*
            loop7:
            do {
                int alt7=4;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure259_static.FOLLOW_conjunction_in_sentenceStructure259);
            	    conjunction12=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction12.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure261_static.FOLLOW_rbconj_in_sentenceStructure261);
            	    rbconj13=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj13.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure263_static.FOLLOW_comma_in_sentenceStructure263);
            	    comma14=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma14.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken15 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase275_static.FOLLOW_unmatchedToken_in_unmatchedPhrase275);
            unmatchedToken15=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken15.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 164:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric16 = null;

        ChemicalChunkerParser.advAdj_return advAdj17 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode18 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode19 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp20 = null;

        ChemicalChunkerParser.inAll_return inAll21 = null;

        ChemicalChunkerParser.nnexample_return nnexample22 = null;

        ChemicalChunkerParser.nnstate_return nnstate23 = null;

        ChemicalChunkerParser.nntime_return nntime24 = null;

        ChemicalChunkerParser.nnmass_return nnmass25 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar26 = null;

        ChemicalChunkerParser.nnamount_return nnamount27 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere28 = null;

        ChemicalChunkerParser.nneq_return nneq29 = null;

        ChemicalChunkerParser.nnvol_return nnvol30 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity31 = null;

        ChemicalChunkerParser.nntemp_return nntemp32 = null;

        ChemicalChunkerParser.nnph_return nnph33 = null;

        ChemicalChunkerParser.nnflash_return nnflash34 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral35 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod36 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure37 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn38 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography39 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum40 = null;

        ChemicalChunkerParser.nncycle_return nncycle41 = null;

        ChemicalChunkerParser.nntimes_return nntimes42 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm43 = null;

        ChemicalChunkerParser.oscarase_return oscarase44 = null;

        ChemicalChunkerParser.verb_return verb45 = null;

        ChemicalChunkerParser.nnadd_return nnadd46 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture47 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus48 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate49 = null;

        ChemicalChunkerParser.nndry_return nndry50 = null;

        ChemicalChunkerParser.nnextract_return nnextract51 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter52 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate53 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify54 = null;

        ChemicalChunkerParser.nnremove_return nnremove55 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize56 = null;

        ChemicalChunkerParser.nnyield_return nnyield57 = null;

        ChemicalChunkerParser.colon_return colon58 = null;

        ChemicalChunkerParser.apost_return apost59 = null;

        ChemicalChunkerParser.neg_return neg60 = null;

        ChemicalChunkerParser.dash_return dash61 = null;

        ChemicalChunkerParser.percentsign_return percentsign62 = null;

        ChemicalChunkerParser.lsqb_return lsqb63 = null;

        ChemicalChunkerParser.rsqb_return rsqb64 = null;

        ChemicalChunkerParser.lrb_return lrb65 = null;

        ChemicalChunkerParser.rrb_return rrb66 = null;

        ChemicalChunkerParser.cc_return cc67 = null;

        ChemicalChunkerParser.dt_return dt68 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE69 = null;

        ChemicalChunkerParser.fw_return fw70 = null;

        ChemicalChunkerParser.md_return md71 = null;

        ChemicalChunkerParser.nn_return nn72 = null;

        ChemicalChunkerParser.nns_return nns73 = null;

        ChemicalChunkerParser.nnp_return nnp74 = null;

        ChemicalChunkerParser.prp_return prp75 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss76 = null;

        ChemicalChunkerParser.rbconj_return rbconj77 = null;

        ChemicalChunkerParser.sym_return sym78 = null;

        ChemicalChunkerParser.uh_return uh79 = null;

        ChemicalChunkerParser.clause_return clause80 = null;

        ChemicalChunkerParser.comma_return comma81 = null;

        ChemicalChunkerParser.ls_return ls82 = null;

        ChemicalChunkerParser.nnps_return nnps83 = null;

        ChemicalChunkerParser.pos_return pos84 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier85 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt8=70;
            switch ( input.LA(1) ) {
            case 37:
            case 144:
                {
                alt8=1;
                }
                break;
            case 38:
            case 39:
            case 43:
            case 149:
            case 150:
            case 151:
            case 162:
            case 163:
            case 164:
            case 165:
                {
                alt8=2;
                }
                break;
            case 41:
                {
                alt8=3;
                }
                break;
            case 42:
                {
                alt8=4;
                }
                break;
            case 44:
                {
                alt8=5;
                }
                break;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 148:
            case 167:
                {
                alt8=6;
                }
                break;
            case 81:
                {
                alt8=7;
                }
                break;
            case 61:
                {
                alt8=8;
                }
                break;
            case 62:
                {
                alt8=9;
                }
                break;
            case 63:
                {
                alt8=10;
                }
                break;
            case 65:
                {
                alt8=11;
                }
                break;
            case 64:
                {
                alt8=12;
                }
                break;
            case 66:
                {
                alt8=13;
                }
                break;
            case 67:
                {
                alt8=14;
                }
                break;
            case 68:
                {
                alt8=15;
                }
                break;
            case 69:
                {
                alt8=16;
                }
                break;
            case 70:
                {
                alt8=17;
                }
                break;
            case 71:
                {
                alt8=18;
                }
                break;
            case 72:
                {
                alt8=19;
                }
                break;
            case 73:
                {
                alt8=20;
                }
                break;
            case 74:
                {
                alt8=21;
                }
                break;
            case 75:
                {
                alt8=22;
                }
                break;
            case 76:
                {
                alt8=23;
                }
                break;
            case 77:
                {
                alt8=24;
                }
                break;
            case 78:
                {
                alt8=25;
                }
                break;
            case 79:
                {
                alt8=26;
                }
                break;
            case 80:
                {
                alt8=27;
                }
                break;
            case 82:
                {
                alt8=28;
                }
                break;
            case 40:
                {
                alt8=29;
                }
                break;
            case 83:
            case 84:
            case 85:
            case 86:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 99:
            case 101:
            case 102:
            case 103:
            case 104:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 116:
            case 118:
            case 119:
            case 120:
            case 122:
            case 123:
            case 125:
            case 126:
            case 127:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt8=30;
                }
                break;
            case 87:
                {
                alt8=31;
                }
                break;
            case 88:
                {
                alt8=32;
                }
                break;
            case 98:
                {
                alt8=33;
                }
                break;
            case 100:
                {
                alt8=34;
                }
                break;
            case 105:
                {
                alt8=35;
                }
                break;
            case 107:
                {
                alt8=36;
                }
                break;
            case 109:
                {
                alt8=37;
                }
                break;
            case 115:
                {
                alt8=38;
                }
                break;
            case 117:
                {
                alt8=39;
                }
                break;
            case 121:
                {
                alt8=40;
                }
                break;
            case 124:
                {
                alt8=41;
                }
                break;
            case 128:
                {
                alt8=42;
                }
                break;
            case 130:
                {
                alt8=43;
                }
                break;
            case 132:
                {
                alt8=44;
                }
                break;
            case 133:
                {
                alt8=45;
                }
                break;
            case 134:
                {
                alt8=46;
                }
                break;
            case 136:
                {
                alt8=47;
                }
                break;
            case 137:
                {
                alt8=48;
                }
                break;
            case 138:
                {
                alt8=49;
                }
                break;
            case 141:
                {
                alt8=50;
                }
                break;
            case 142:
                {
                alt8=51;
                }
                break;
            case 143:
                {
                alt8=52;
                }
                break;
            case 145:
                {
                alt8=53;
                }
                break;
            case 140:
                {
                alt8=54;
                }
                break;
            case 147:
                {
                alt8=55;
                }
                break;
            case 153:
                {
                alt8=56;
                }
                break;
            case 154:
                {
                alt8=57;
                }
                break;
            case 155:
                {
                alt8=58;
                }
                break;
            case 156:
                {
                alt8=59;
                }
                break;
            case 160:
                {
                alt8=60;
                }
                break;
            case 161:
                {
                alt8=61;
                }
                break;
            case 129:
                {
                alt8=62;
                }
                break;
            case 166:
                {
                alt8=63;
                }
                break;
            case 168:
                {
                alt8=64;
                }
                break;
            case 146:
            case 158:
            case 175:
            case 176:
            case 177:
            case 178:
                {
                alt8=65;
                }
                break;
            case 131:
                {
                alt8=66;
                }
                break;
            case 152:
                {
                alt8=67;
                }
                break;
            case 157:
                {
                alt8=68;
                }
                break;
            case 159:
                {
                alt8=69;
                }
                break;
            case 139:
                {
                alt8=70;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken294_static.FOLLOW_numeric_in_unmatchedToken294);
                    numeric16=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric16.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken296_static.FOLLOW_advAdj_in_unmatchedToken296);
                    advAdj17=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj17.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken298_static.FOLLOW_tmunicode_in_unmatchedToken298);
                    tmunicode18=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode18.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken300_static.FOLLOW_cdunicode_in_unmatchedToken300);
                    cdunicode19=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode19.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken302_static.FOLLOW_jjcomp_in_unmatchedToken302);
                    jjcomp20=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp20.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken304_static.FOLLOW_inAll_in_unmatchedToken304);
                    inAll21=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll21.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken308_static.FOLLOW_nnexample_in_unmatchedToken308);
                    nnexample22=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample22.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken310_static.FOLLOW_nnstate_in_unmatchedToken310);
                    nnstate23=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate23.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken312_static.FOLLOW_nntime_in_unmatchedToken312);
                    nntime24=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime24.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken314_static.FOLLOW_nnmass_in_unmatchedToken314);
                    nnmass25=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass25.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken316_static.FOLLOW_nnmolar_in_unmatchedToken316);
                    nnmolar26=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar26.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken318_static.FOLLOW_nnamount_in_unmatchedToken318);
                    nnamount27=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount27.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken320_static.FOLLOW_nnatmosphere_in_unmatchedToken320);
                    nnatmosphere28=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere28.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken322_static.FOLLOW_nneq_in_unmatchedToken322);
                    nneq29=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq29.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken324_static.FOLLOW_nnvol_in_unmatchedToken324);
                    nnvol30=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol30.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken326_static.FOLLOW_nnchementity_in_unmatchedToken326);
                    nnchementity31=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity31.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken328_static.FOLLOW_nntemp_in_unmatchedToken328);
                    nntemp32=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp32.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken330_static.FOLLOW_nnph_in_unmatchedToken330);
                    nnph33=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph33.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken332_static.FOLLOW_nnflash_in_unmatchedToken332);
                    nnflash34=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash34.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken334_static.FOLLOW_nngeneral_in_unmatchedToken334);
                    nngeneral35=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral35.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken336_static.FOLLOW_nnmethod_in_unmatchedToken336);
                    nnmethod36=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod36.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken338_static.FOLLOW_nnpressure_in_unmatchedToken338);
                    nnpressure37=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure37.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken340_static.FOLLOW_nncolumn_in_unmatchedToken340);
                    nncolumn38=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn38.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken342_static.FOLLOW_nnchromatography_in_unmatchedToken342);
                    nnchromatography39=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography39.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken344_static.FOLLOW_nnvacuum_in_unmatchedToken344);
                    nnvacuum40=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum40.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken346_static.FOLLOW_nncycle_in_unmatchedToken346);
                    nncycle41=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle41.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken348_static.FOLLOW_nntimes_in_unmatchedToken348);
                    nntimes42=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes42.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken352_static.FOLLOW_oscarcm_in_unmatchedToken352);
                    oscarcm43=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm43.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:10: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken354_static.FOLLOW_oscarase_in_unmatchedToken354);
                    oscarase44=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase44.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:19: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken356_static.FOLLOW_verb_in_unmatchedToken356);
                    verb45=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb45.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:24: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken358_static.FOLLOW_nnadd_in_unmatchedToken358);
                    nnadd46=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd46.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:30: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken360_static.FOLLOW_nnmixture_in_unmatchedToken360);
                    nnmixture47=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture47.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:40: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken362_static.FOLLOW_nnapparatus_in_unmatchedToken362);
                    nnapparatus48=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus48.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:52: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken364_static.FOLLOW_nnconcentrate_in_unmatchedToken364);
                    nnconcentrate49=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate49.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:66: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken366_static.FOLLOW_nndry_in_unmatchedToken366);
                    nndry50=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry50.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:72: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken368_static.FOLLOW_nnextract_in_unmatchedToken368);
                    nnextract51=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract51.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:82: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken370_static.FOLLOW_nnfilter_in_unmatchedToken370);
                    nnfilter52=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter52.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:91: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken372_static.FOLLOW_nnprecipitate_in_unmatchedToken372);
                    nnprecipitate53=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate53.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:105: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken374_static.FOLLOW_nnpurify_in_unmatchedToken374);
                    nnpurify54=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify54.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:114: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken376_static.FOLLOW_nnremove_in_unmatchedToken376);
                    nnremove55=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove55.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:123: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken378_static.FOLLOW_nnsynthesize_in_unmatchedToken378);
                    nnsynthesize56=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize56.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:136: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken380_static.FOLLOW_nnyield_in_unmatchedToken380);
                    nnyield57=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield57.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:144: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken382_static.FOLLOW_colon_in_unmatchedToken382);
                    colon58=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon58.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:150: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken384_static.FOLLOW_apost_in_unmatchedToken384);
                    apost59=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost59.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:156: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken386_static.FOLLOW_neg_in_unmatchedToken386);
                    neg60=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg60.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:160: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken388_static.FOLLOW_dash_in_unmatchedToken388);
                    dash61=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash61.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:165: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_unmatchedToken390_static.FOLLOW_percentsign_in_unmatchedToken390);
                    percentsign62=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign62.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:177: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken392_static.FOLLOW_lsqb_in_unmatchedToken392);
                    lsqb63=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb63.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:182: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken394_static.FOLLOW_rsqb_in_unmatchedToken394);
                    rsqb64=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb64.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:187: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken396_static.FOLLOW_lrb_in_unmatchedToken396);
                    lrb65=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb65.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:191: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken398_static.FOLLOW_rrb_in_unmatchedToken398);
                    rrb66=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb66.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken402_static.FOLLOW_cc_in_unmatchedToken402);
                    cc67=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc67.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken404_static.FOLLOW_dt_in_unmatchedToken404);
                    dt68=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt68.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken406_static.FOLLOW_dtTHE_in_unmatchedToken406);
                    dtTHE69=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE69.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken408_static.FOLLOW_fw_in_unmatchedToken408);
                    fw70=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw70.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken410_static.FOLLOW_md_in_unmatchedToken410);
                    md71=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md71.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken412_static.FOLLOW_nn_in_unmatchedToken412);
                    nn72=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn72.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken414_static.FOLLOW_nns_in_unmatchedToken414);
                    nns73=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns73.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken416_static.FOLLOW_nnp_in_unmatchedToken416);
                    nnp74=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp74.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken418_static.FOLLOW_prp_in_unmatchedToken418);
                    prp75=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp75.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken420_static.FOLLOW_prp_poss_in_unmatchedToken420);
                    prp_poss76=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss76.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken422_static.FOLLOW_rbconj_in_unmatchedToken422);
                    rbconj77=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj77.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken424_static.FOLLOW_sym_in_unmatchedToken424);
                    sym78=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym78.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken426_static.FOLLOW_uh_in_unmatchedToken426);
                    uh79=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh79.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken428_static.FOLLOW_clause_in_unmatchedToken428);
                    clause80=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause80.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken430_static.FOLLOW_comma_in_unmatchedToken430);
                    comma81=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma81.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken432_static.FOLLOW_ls_in_unmatchedToken432);
                    ls82=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls82.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken434_static.FOLLOW_nnps_in_unmatchedToken434);
                    nnps83=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps83.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken436_static.FOLLOW_pos_in_unmatchedToken436);
                    pos84=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos84.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken438_static.FOLLOW_nnidentifier_in_unmatchedToken438);
                    nnidentifier85=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier85.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class procedureNounPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNounPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:1: procedureNounPhrase : {...}? headingProcedure -> ^( NounPhrase headingProcedure ) ;
    public final ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase() throws RecognitionException {
        ChemicalChunkerParser.procedureNounPhrase_return retval = new ChemicalChunkerParser.procedureNounPhrase_return();
        retval.start = input.LT(1);
        int procedureNounPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedure_return headingProcedure86 = null;


        RewriteRuleSubtreeStream stream_headingProcedure=new RewriteRuleSubtreeStream(adaptor,"rule headingProcedure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:2: ({...}? headingProcedure -> ^( NounPhrase headingProcedure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:4: {...}? headingProcedure
            {
            if ( !((isAtTokenPositionZero(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "procedureNounPhrase", "isAtTokenPositionZero(input)");
            }
            pushFollow(FOLLOW_headingProcedure_in_procedureNounPhrase451_static.FOLLOW_headingProcedure_in_procedureNounPhrase451);
            headingProcedure86=headingProcedure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_headingProcedure.add(headingProcedure86.getTree());


            // AST REWRITE
            // elements: headingProcedure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 173:54: -> ^( NounPhrase headingProcedure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:57: ^( NounPhrase headingProcedure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_headingProcedure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, procedureNounPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNounPhrase"

    public static class headingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:1: headingProcedure : ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? );
    public final ChemicalChunkerParser.headingProcedure_return headingProcedure() throws RecognitionException {
        ChemicalChunkerParser.headingProcedure_return retval = new ChemicalChunkerParser.headingProcedure_return();
        retval.start = input.LT(1);
        int headingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator87 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators88 = null;

        ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure89 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators90 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:2: ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? )
            int alt10=2;
            switch ( input.LA(1) ) {
            case 37:
            case 139:
            case 144:
                {
                alt10=1;
                }
                break;
            case 137:
            case 141:
                {
                alt10=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:4: headingProcedureRequiringTerminator headingProcedureTerminators
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure470_static.FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure470);
                    headingProcedureRequiringTerminator87=headingProcedureRequiringTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureRequiringTerminator87.getTree());
                    pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure472_static.FOLLOW_headingProcedureTerminators_in_headingProcedure472);
                    headingProcedureTerminators88=headingProcedureTerminators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators88.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:70: bracketedHeadingProcedure ( headingProcedureTerminators )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedHeadingProcedure_in_headingProcedure476_static.FOLLOW_bracketedHeadingProcedure_in_headingProcedure476);
                    bracketedHeadingProcedure89=bracketedHeadingProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedHeadingProcedure89.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:96: ( headingProcedureTerminators )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case 142:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_5 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 135:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_6 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 130:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_7 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: headingProcedureTerminators
                            {
                            pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure478_static.FOLLOW_headingProcedureTerminators_in_headingProcedure478);
                            headingProcedureTerminators90=headingProcedureTerminators();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators90.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, headingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedure"

    public static class headingProcedureRequiringTerminator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureRequiringTerminator"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:1: headingProcedureRequiringTerminator : ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureRequiringTerminator_return retval = new ChemicalChunkerParser.headingProcedureRequiringTerminator_return();
        retval.start = input.LT(1);
        int headingProcedureRequiringTerminator_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier91 = null;

        ChemicalChunkerParser.numeric_return numeric92 = null;


        RewriteRuleSubtreeStream stream_nnidentifier=new RewriteRuleSubtreeStream(adaptor,"rule nnidentifier");
        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:2: ( ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:4: ( nnidentifier | numeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:4: ( nnidentifier | numeric )
            int alt11=2;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt11=1;
                }
                break;
            case 37:
            case 144:
                {
                alt11=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:5: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator489_static.FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator489);
                    nnidentifier91=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnidentifier.add(nnidentifier91.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:18: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_headingProcedureRequiringTerminator491_static.FOLLOW_numeric_in_headingProcedureRequiringTerminator491);
                    numeric92=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric92.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numeric, nnidentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 179:27: -> ^( PROCEDURE ( nnidentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:30: ^( PROCEDURE ( nnidentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:42: ( nnidentifier )?
                if ( stream_nnidentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnidentifier.nextTree());

                }
                stream_nnidentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:56: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, headingProcedureRequiringTerminator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureRequiringTerminator"

    public static class bracketedHeadingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedHeadingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:1: bracketedHeadingProcedure : ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) ;
    public final ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure() throws RecognitionException {
        ChemicalChunkerParser.bracketedHeadingProcedure_return retval = new ChemicalChunkerParser.bracketedHeadingProcedure_return();
        retval.start = input.LT(1);
        int bracketedHeadingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier93 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric94 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference95 = null;


        RewriteRuleSubtreeStream stream_bracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule bracketedIdentifier");
        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:2: ( ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            int alt12=3;
            switch ( input.LA(1) ) {
            case 141:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 144:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 139:
                                {
                                alt12=1;
                                }
                                break;
                            case 142:
                                {
                                alt12=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 12, 7, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 12, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 37:
                        {
                        alt12=2;
                        }
                        break;
                    case 139:
                        {
                        alt12=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 12, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;
                }

                }
                break;
            case 137:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:5: bracketedIdentifier
                    {
                    pushFollow(FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure514_static.FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure514);
                    bracketedIdentifier93=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedIdentifier.add(bracketedIdentifier93.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:27: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure518_static.FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure518);
                    bracketedNumeric94=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric94.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:46: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure522_static.FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure522);
                    squareBracketedReference95=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference95.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedNumeric, squareBracketedReference, bracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 182:72: -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:75: ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:87: ( bracketedIdentifier )?
                if ( stream_bracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedIdentifier.nextTree());

                }
                stream_bracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:108: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:126: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bracketedHeadingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedHeadingProcedure"

    public static class headingProcedureTerminators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureTerminators"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:1: headingProcedureTerminators : ( rrb | stop | colon );
    public final ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureTerminators_return retval = new ChemicalChunkerParser.headingProcedureTerminators_return();
        retval.start = input.LT(1);
        int headingProcedureTerminators_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rrb_return rrb96 = null;

        ChemicalChunkerParser.stop_return stop97 = null;

        ChemicalChunkerParser.colon_return colon98 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:2: ( rrb | stop | colon )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 142:
                {
                alt13=1;
                }
                break;
            case 135:
                {
                alt13=2;
                }
                break;
            case 130:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:4: rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rrb_in_headingProcedureTerminators547_static.FOLLOW_rrb_in_headingProcedureTerminators547);
                    rrb96=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb96.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:8: stop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stop_in_headingProcedureTerminators549_static.FOLLOW_stop_in_headingProcedureTerminators549);
                    stop97=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop97.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:13: colon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_colon_in_headingProcedureTerminators551_static.FOLLOW_colon_in_headingProcedureTerminators551);
                    colon98=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon98.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, headingProcedureTerminators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureTerminators"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure99 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase560_static.FOLLOW_nounphraseStructure_in_nounphrase560);
            nounphraseStructure99=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure99.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 188:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1100 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2101 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt14=2;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure579_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure579);
                    nounphraseStructure1100=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure1100.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure581_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure581);
                    nounphraseStructure2101=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure2101.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus102 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1590_static.FOLLOW_multiApparatus_in_nounphraseStructure1590);
            multiApparatus102=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus102.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 193:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:1: nounphraseStructure2 : ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )? ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE103 = null;

        ChemicalChunkerParser.dt_return dt104 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent105 = null;

        ChemicalChunkerParser.conjunction_return conjunction106 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent107 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf108 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN109 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:2: ( ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:4: ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:4: ( dtTHE )?
            int alt15=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt15=1;
                    }
                    break;
            }

            switch (alt15) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2607_static.FOLLOW_dtTHE_in_nounphraseStructure2607);
                    dtTHE103=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE103.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:11: ( dt )?
            int alt16=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA16_3 = input.LA(3);

                            if ( (synpred93_ChemicalChunker()) ) {
                                alt16=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt16) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2610_static.FOLLOW_dt_in_nounphraseStructure2610);
                    dt104=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt104.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2613_static.FOLLOW_nounphraseContent_in_nounphraseStructure2613);
            nounphraseContent105=nounphraseContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent105.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:34: ( ( conjunction )* nounphraseContent {...}?)*
            loop18:
            do {
                int alt18=2;
                alt18 = dfa18.predict(input);
                switch (alt18) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )* nounphraseContent {...}?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )*
            	    loop17:
            	    do {
            	        int alt17=2;
            	        alt17 = dfa17.predict(input);
            	        switch (alt17) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2617_static.FOLLOW_conjunction_in_nounphraseStructure2617);
            	    	    conjunction106=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction106.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop17;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2620_static.FOLLOW_nounphraseContent_in_nounphraseStructure2620);
            	    nounphraseContent107=nounphraseContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent107.getTree());
            	    if ( !((!followedByVBDorVBZthenVBYIELDed(input))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "nounphraseStructure2", "!followedByVBDorVBZthenVBYIELDed(input)");
            	    }

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:111: ( prepphraseOf | prepphraseIN )?
            int alt19=3;
            switch ( input.LA(1) ) {
                case 54:
                    {
                    int LA19_1 = input.LA(2);

                    if ( (synpred96_ChemicalChunker()) ) {
                        alt19=1;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred97_ChemicalChunker()) ) {
                        alt19=2;
                    }
                    }
                    break;
            }

            switch (alt19) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:112: prepphraseOf
                    {
                    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2627_static.FOLLOW_prepphraseOf_in_nounphraseStructure2627);
                    prepphraseOf108=prepphraseOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf108.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:126: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2630_static.FOLLOW_prepphraseIN_in_nounphraseStructure2630);
                    prepphraseIN109=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN109.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class nounphraseContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:1: nounphraseContent : ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+ ;
    public final ChemicalChunkerParser.nounphraseContent_return nounphraseContent() throws RecognitionException {
        ChemicalChunkerParser.nounphraseContent_return retval = new ChemicalChunkerParser.nounphraseContent_return();
        retval.start = input.LT(1);
        int nounphraseContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj110 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase111 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio112 = null;

        ChemicalChunkerParser.noun_return noun113 = null;

        ChemicalChunkerParser.numeric_return numeric114 = null;

        ChemicalChunkerParser.bracketedContent_return bracketedContent115 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:2: ( ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( advAdj )*
            loop20:
            do {
                int alt20=2;
                alt20 = dfa20.predict(input);
                switch (alt20) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseContent642_static.FOLLOW_advAdj_in_nounphraseContent642);
            	    advAdj110=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj110.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+
            int cnt21=0;
            loop21:
            do {
                int alt21=6;
                alt21 = dfa21.predict(input);
                switch (alt21) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:14: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseContent647_static.FOLLOW_dissolvePhrase_in_nounphraseContent647);
            	    dissolvePhrase111=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase111.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:29: ratioOrBracketedRatio
            	    {
            	    pushFollow(FOLLOW_ratioOrBracketedRatio_in_nounphraseContent649_static.FOLLOW_ratioOrBracketedRatio_in_nounphraseContent649);
            	    ratioOrBracketedRatio112=ratioOrBracketedRatio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio112.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:51: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseContent651_static.FOLLOW_noun_in_nounphraseContent651);
            	    noun113=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun113.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:56: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseContent653_static.FOLLOW_numeric_in_nounphraseContent653);
            	    numeric114=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric114.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:64: bracketedContent
            	    {
            	    pushFollow(FOLLOW_bracketedContent_in_nounphraseContent655_static.FOLLOW_bracketedContent_in_nounphraseContent655);
            	    bracketedContent115=bracketedContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContent115.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, nounphraseContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseContent"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure116 = null;

        ChemicalChunkerParser.lrb_return lrb117 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure118 = null;

        ChemicalChunkerParser.rrb_return rrb119 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase667_static.FOLLOW_dissolveStructure_in_dissolvePhrase667);
                    dissolveStructure116=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure116.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase669_static.FOLLOW_lrb_in_dissolvePhrase669);
                    lrb117=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb117.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase671_static.FOLLOW_dissolveStructure_in_dissolvePhrase671);
                    dissolveStructure118=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure118.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase673_static.FOLLOW_rrb_in_dissolvePhrase673);
                    rrb119=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb119.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure, lrb, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 201:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj120 = null;

        ChemicalChunkerParser.nnp_return nnp121 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity122 = null;

        ChemicalChunkerParser.nnp_return nnp123 = null;

        ChemicalChunkerParser.molecule_return molecule124 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule125 = null;

        ChemicalChunkerParser.inMolecule_return inMolecule126 = null;

        ChemicalChunkerParser.conjunction_return conjunction127 = null;

        ChemicalChunkerParser.molecule_return molecule128 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( adj )?
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure698_static.FOLLOW_adj_in_dissolveStructure698);
                    adj120=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj120.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt26=2;
            switch ( input.LA(1) ) {
            case 156:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 69:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 37:
                            case 45:
                            case 54:
                            case 57:
                            case 71:
                            case 123:
                            case 127:
                            case 128:
                            case 131:
                            case 137:
                            case 139:
                            case 141:
                            case 144:
                                {
                                alt26=2;
                                }
                                break;
                            case 48:
                                {
                                alt26=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 26, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 43:
                    case 44:
                    case 61:
                    case 66:
                    case 71:
                    case 81:
                    case 82:
                    case 88:
                    case 128:
                    case 131:
                    case 137:
                    case 139:
                    case 141:
                    case 144:
                    case 149:
                    case 150:
                    case 151:
                        {
                        alt26=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;
                }

                }
                break;
            case 37:
            case 38:
            case 39:
            case 40:
            case 43:
            case 44:
            case 61:
            case 66:
            case 69:
            case 71:
            case 81:
            case 82:
            case 88:
            case 128:
            case 131:
            case 137:
            case 139:
            case 141:
            case 144:
            case 149:
            case 150:
            case 151:
                {
                alt26=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure702_static.FOLLOW_nnp_in_dissolveStructure702);
                    nnp121=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp121.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure704_static.FOLLOW_nnchementity_in_dissolveStructure704);
                    nnchementity122=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity122.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:28: ( nnp )?
                    int alt24=2;
                    switch ( input.LA(1) ) {
                        case 156:
                            {
                            alt24=1;
                            }
                            break;
                    }

                    switch (alt24) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure707_static.FOLLOW_nnp_in_dissolveStructure707);
                            nnp123=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp123.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:32: ( molecule | unnamedmolecule )
                    int alt25=2;
                    alt25 = dfa25.predict(input);
                    switch (alt25) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure710_static.FOLLOW_molecule_in_dissolveStructure710);
                            molecule124=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule124.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure712_static.FOLLOW_unnamedmolecule_in_dissolveStructure712);
                            unnamedmolecule125=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule125.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_inMolecule_in_dissolveStructure716_static.FOLLOW_inMolecule_in_dissolveStructure716);
            inMolecule126=inMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inMolecule126.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:71: ( conjunction molecule )*
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:72: conjunction molecule
            	    {
            	    pushFollow(FOLLOW_conjunction_in_dissolveStructure719_static.FOLLOW_conjunction_in_dissolveStructure719);
            	    conjunction127=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction127.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure721_static.FOLLOW_molecule_in_dissolveStructure721);
            	    molecule128=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule128.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class inMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:1: inMolecule : inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ;
    public final ChemicalChunkerParser.inMolecule_return inMolecule() throws RecognitionException {
        ChemicalChunkerParser.inMolecule_return retval = new ChemicalChunkerParser.inMolecule_return();
        retval.start = input.LT(1);
        int inMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin129 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE130 = null;

        ChemicalChunkerParser.adj_return adj131 = null;

        ChemicalChunkerParser.nnp_return nnp132 = null;

        ChemicalChunkerParser.molecule_return molecule133 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule134 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:2: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:4: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inin_in_inMolecule733_static.FOLLOW_inin_in_inMolecule733);
            inin129=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin129.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:9: ( dtTHE )?
            int alt28=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt28=1;
                    }
                    break;
            }

            switch (alt28) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_inMolecule735_static.FOLLOW_dtTHE_in_inMolecule735);
                    dtTHE130=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE130.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:16: ( adj )?
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_inMolecule738_static.FOLLOW_adj_in_inMolecule738);
                    adj131=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj131.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:21: ( nnp )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt30=1;
                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_inMolecule741_static.FOLLOW_nnp_in_inMolecule741);
                    nnp132=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp132.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:26: ( molecule | unnamedmolecule )
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:27: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_inMolecule745_static.FOLLOW_molecule_in_inMolecule745);
                    molecule133=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule133.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:36: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_inMolecule747_static.FOLLOW_unnamedmolecule_in_inMolecule747);
                    unnamedmolecule134=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule134.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, inMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMolecule"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure135 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase757_static.FOLLOW_verbphraseStructure_in_verbphrase757);
            verbphraseStructure135=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure135.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( md )* ( rbconj )? ( adv )* ( adj )? ( actionVerb ( md )* ( adv )* ( adj )? ( neg )? | otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )? ) ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt136 = null;

        ChemicalChunkerParser.to_return to137 = null;

        ChemicalChunkerParser.inAll_return inAll138 = null;

        ChemicalChunkerParser.inafter_return inafter139 = null;

        ChemicalChunkerParser.md_return md140 = null;

        ChemicalChunkerParser.rbconj_return rbconj141 = null;

        ChemicalChunkerParser.adv_return adv142 = null;

        ChemicalChunkerParser.adj_return adj143 = null;

        ChemicalChunkerParser.actionVerb_return actionVerb144 = null;

        ChemicalChunkerParser.md_return md145 = null;

        ChemicalChunkerParser.adv_return adv146 = null;

        ChemicalChunkerParser.adj_return adj147 = null;

        ChemicalChunkerParser.neg_return neg148 = null;

        ChemicalChunkerParser.otherVerb_return otherVerb149 = null;

        ChemicalChunkerParser.md_return md150 = null;

        ChemicalChunkerParser.adv_return adv151 = null;

        ChemicalChunkerParser.adj_return adj152 = null;

        ChemicalChunkerParser.neg_return neg153 = null;

        ChemicalChunkerParser.otherVerbStructure_return otherVerbStructure154 = null;

        ChemicalChunkerParser.actionVerbStructure_return actionVerbStructure155 = null;

        ChemicalChunkerParser.inoff_return inoff156 = null;

        ChemicalChunkerParser.cc_return cc157 = null;

        ChemicalChunkerParser.comma_return comma158 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase159 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( md )* ( rbconj )? ( adv )* ( adj )? ( actionVerb ( md )* ( adv )* ( adj )? ( neg )? | otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )? ) ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( md )* ( rbconj )? ( adv )* ( adj )? ( actionVerb ( md )* ( adv )* ( adj )? ( neg )? | otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )? ) ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:24: ( dt )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt32=1;
                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure776_static.FOLLOW_dt_in_verbphraseStructure776);
                    dt136=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt136.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:28: ( to )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 167:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_3 = input.LA(3);

                            if ( (synpred115_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure779_static.FOLLOW_to_in_verbphraseStructure779);
                    to137=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to137.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:32: ( inAll )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 148:
                case 167:
                    {
                    alt34=1;
                    }
                    break;
                case 47:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA34_4 = input.LA(3);

                            if ( (synpred116_ChemicalChunker()) ) {
                                alt34=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure782_static.FOLLOW_inAll_in_verbphraseStructure782);
                    inAll138=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll138.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:39: ( inafter )?
            int alt35=2;
            switch ( input.LA(1) ) {
                case 47:
                    {
                    alt35=1;
                    }
                    break;
            }

            switch (alt35) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure785_static.FOLLOW_inafter_in_verbphraseStructure785);
                    inafter139=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter139.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:48: ( md )*
            loop36:
            do {
                int alt36=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    alt36=1;
                    }
                    break;

                }

                switch (alt36) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_verbphraseStructure788_static.FOLLOW_md_in_verbphraseStructure788);
            	    md140=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md140.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:52: ( rbconj )?
            int alt37=2;
            switch ( input.LA(1) ) {
                case 129:
                    {
                    alt37=1;
                    }
                    break;
            }

            switch (alt37) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_verbphraseStructure791_static.FOLLOW_rbconj_in_verbphraseStructure791);
                    rbconj141=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj141.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:60: ( adv )*
            loop38:
            do {
                int alt38=2;
                switch ( input.LA(1) ) {
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt38=1;
                    }
                    break;

                }

                switch (alt38) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_verbphraseStructure794_static.FOLLOW_adv_in_verbphraseStructure794);
            	    adv142=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv142.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:65: ( adj )?
            int alt39=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                    {
                    alt39=1;
                    }
                    break;
            }

            switch (alt39) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_verbphraseStructure797_static.FOLLOW_adj_in_verbphraseStructure797);
                    adj143=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj143.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:70: ( actionVerb ( md )* ( adv )* ( adj )? ( neg )? | otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )? )
            int alt50=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 96:
            case 97:
            case 99:
            case 101:
            case 102:
            case 103:
            case 104:
            case 106:
            case 108:
            case 110:
            case 111:
            case 113:
            case 114:
            case 116:
            case 118:
            case 119:
            case 120:
            case 122:
            case 123:
            case 125:
            case 126:
            case 127:
                {
                alt50=1;
                }
                break;
            case 83:
            case 84:
            case 95:
            case 112:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt50=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }

            switch (alt50) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:71: actionVerb ( md )* ( adv )* ( adj )? ( neg )?
                    {
                    pushFollow(FOLLOW_actionVerb_in_verbphraseStructure801_static.FOLLOW_actionVerb_in_verbphraseStructure801);
                    actionVerb144=actionVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, actionVerb144.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:82: ( md )*
                    loop40:
                    do {
                        int alt40=2;
                        switch ( input.LA(1) ) {
                        case 153:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA40_3 = input.LA(3);

                                if ( (synpred122_ChemicalChunker()) ) {
                                    alt40=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt40) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
                    	    {
                    	    pushFollow(FOLLOW_md_in_verbphraseStructure803_static.FOLLOW_md_in_verbphraseStructure803);
                    	    md145=md();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md145.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:86: ( adv )*
                    loop41:
                    do {
                        int alt41=2;
                        alt41 = dfa41.predict(input);
                        switch (alt41) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
                    	    {
                    	    pushFollow(FOLLOW_adv_in_verbphraseStructure806_static.FOLLOW_adv_in_verbphraseStructure806);
                    	    adv146=adv();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv146.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:91: ( adj )?
                    int alt42=2;
                    alt42 = dfa42.predict(input);
                    switch (alt42) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                            {
                            pushFollow(FOLLOW_adj_in_verbphraseStructure809_static.FOLLOW_adj_in_verbphraseStructure809);
                            adj147=adj();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj147.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:96: ( neg )?
                    int alt43=2;
                    switch ( input.LA(1) ) {
                        case 133:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA43_3 = input.LA(3);

                                    if ( (synpred125_ChemicalChunker()) ) {
                                        alt43=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt43) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                            {
                            pushFollow(FOLLOW_neg_in_verbphraseStructure812_static.FOLLOW_neg_in_verbphraseStructure812);
                            neg148=neg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg148.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:104: otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )?
                    {
                    pushFollow(FOLLOW_otherVerb_in_verbphraseStructure818_static.FOLLOW_otherVerb_in_verbphraseStructure818);
                    otherVerb149=otherVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, otherVerb149.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:114: ( md )*
                    loop44:
                    do {
                        int alt44=2;
                        switch ( input.LA(1) ) {
                        case 153:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA44_3 = input.LA(3);

                                if ( (synpred127_ChemicalChunker()) ) {
                                    alt44=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt44) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
                    	    {
                    	    pushFollow(FOLLOW_md_in_verbphraseStructure820_static.FOLLOW_md_in_verbphraseStructure820);
                    	    md150=md();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md150.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:118: ( adv )*
                    loop45:
                    do {
                        int alt45=2;
                        alt45 = dfa45.predict(input);
                        switch (alt45) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
                    	    {
                    	    pushFollow(FOLLOW_adv_in_verbphraseStructure823_static.FOLLOW_adv_in_verbphraseStructure823);
                    	    adv151=adv();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv151.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:123: ( adj )?
                    int alt46=2;
                    alt46 = dfa46.predict(input);
                    switch (alt46) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                            {
                            pushFollow(FOLLOW_adj_in_verbphraseStructure826_static.FOLLOW_adj_in_verbphraseStructure826);
                            adj152=adj();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj152.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:128: ( neg )?
                    int alt47=2;
                    switch ( input.LA(1) ) {
                        case 133:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA47_3 = input.LA(3);

                                    if ( (synpred130_ChemicalChunker()) ) {
                                        alt47=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt47) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                            {
                            pushFollow(FOLLOW_neg_in_verbphraseStructure829_static.FOLLOW_neg_in_verbphraseStructure829);
                            neg153=neg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg153.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:133: ( otherVerbStructure )*
                    loop48:
                    do {
                        int alt48=2;
                        alt48 = dfa48.predict(input);
                        switch (alt48) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: otherVerbStructure
                    	    {
                    	    pushFollow(FOLLOW_otherVerbStructure_in_verbphraseStructure832_static.FOLLOW_otherVerbStructure_in_verbphraseStructure832);
                    	    otherVerbStructure154=otherVerbStructure();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, otherVerbStructure154.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:153: ( actionVerbStructure )?
                    int alt49=2;
                    alt49 = dfa49.predict(input);
                    switch (alt49) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: actionVerbStructure
                            {
                            pushFollow(FOLLOW_actionVerbStructure_in_verbphraseStructure835_static.FOLLOW_actionVerbStructure_in_verbphraseStructure835);
                            actionVerbStructure155=actionVerbStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, actionVerbStructure155.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:175: ( inoff )?
            int alt51=2;
            switch ( input.LA(1) ) {
                case 60:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA51_3 = input.LA(3);

                            if ( (synpred133_ChemicalChunker()) ) {
                                alt51=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt51) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure839_static.FOLLOW_inoff_in_verbphraseStructure839);
                    inoff156=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff156.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:182: ( ( cc )? ( comma )? prepphrase )*
            loop54:
            do {
                int alt54=2;
                alt54 = dfa54.predict(input);
                switch (alt54) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:183: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:183: ( cc )?
            	    int alt52=2;
            	    switch ( input.LA(1) ) {
            	        case 143:
            	            {
            	            alt52=1;
            	            }
            	            break;
            	    }

            	    switch (alt52) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure843_static.FOLLOW_cc_in_verbphraseStructure843);
            	            cc157=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc157.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:187: ( comma )?
            	    int alt53=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt53=1;
            	            }
            	            break;
            	    }

            	    switch (alt53) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure846_static.FOLLOW_comma_in_verbphraseStructure846);
            	            comma158=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma158.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure849_static.FOLLOW_prepphrase_in_verbphraseStructure849);
            	    prepphrase159=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase159.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class actionVerbStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "actionVerbStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:1: actionVerbStructure : ( md )* ( rbconj )? ( adv )* ( adj )? actionVerb ( md )* ( adv )* ( adj )? ( neg )? ;
    public final ChemicalChunkerParser.actionVerbStructure_return actionVerbStructure() throws RecognitionException {
        ChemicalChunkerParser.actionVerbStructure_return retval = new ChemicalChunkerParser.actionVerbStructure_return();
        retval.start = input.LT(1);
        int actionVerbStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.md_return md160 = null;

        ChemicalChunkerParser.rbconj_return rbconj161 = null;

        ChemicalChunkerParser.adv_return adv162 = null;

        ChemicalChunkerParser.adj_return adj163 = null;

        ChemicalChunkerParser.actionVerb_return actionVerb164 = null;

        ChemicalChunkerParser.md_return md165 = null;

        ChemicalChunkerParser.adv_return adv166 = null;

        ChemicalChunkerParser.adj_return adj167 = null;

        ChemicalChunkerParser.neg_return neg168 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:20: ( ( md )* ( rbconj )? ( adv )* ( adj )? actionVerb ( md )* ( adv )* ( adj )? ( neg )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:22: ( md )* ( rbconj )? ( adv )* ( adj )? actionVerb ( md )* ( adv )* ( adj )? ( neg )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:22: ( md )*
            loop55:
            do {
                int alt55=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    alt55=1;
                    }
                    break;

                }

                switch (alt55) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_actionVerbStructure859_static.FOLLOW_md_in_actionVerbStructure859);
            	    md160=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md160.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:26: ( rbconj )?
            int alt56=2;
            switch ( input.LA(1) ) {
                case 129:
                    {
                    alt56=1;
                    }
                    break;
            }

            switch (alt56) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_actionVerbStructure862_static.FOLLOW_rbconj_in_actionVerbStructure862);
                    rbconj161=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj161.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:34: ( adv )*
            loop57:
            do {
                int alt57=2;
                switch ( input.LA(1) ) {
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt57=1;
                    }
                    break;

                }

                switch (alt57) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_actionVerbStructure865_static.FOLLOW_adv_in_actionVerbStructure865);
            	    adv162=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv162.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:39: ( adj )?
            int alt58=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                    {
                    alt58=1;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_actionVerbStructure868_static.FOLLOW_adj_in_actionVerbStructure868);
                    adj163=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj163.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_actionVerb_in_actionVerbStructure871_static.FOLLOW_actionVerb_in_actionVerbStructure871);
            actionVerb164=actionVerb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, actionVerb164.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:55: ( md )*
            loop59:
            do {
                int alt59=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA59_3 = input.LA(3);

                        if ( (synpred141_ChemicalChunker()) ) {
                            alt59=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt59) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_actionVerbStructure873_static.FOLLOW_md_in_actionVerbStructure873);
            	    md165=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md165.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:59: ( adv )*
            loop60:
            do {
                int alt60=2;
                alt60 = dfa60.predict(input);
                switch (alt60) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_actionVerbStructure876_static.FOLLOW_adv_in_actionVerbStructure876);
            	    adv166=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv166.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:64: ( adj )?
            int alt61=2;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_actionVerbStructure879_static.FOLLOW_adj_in_actionVerbStructure879);
                    adj167=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj167.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:69: ( neg )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA62_3 = input.LA(3);

                            if ( (synpred144_ChemicalChunker()) ) {
                                alt62=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_actionVerbStructure882_static.FOLLOW_neg_in_actionVerbStructure882);
                    neg168=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg168.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, actionVerbStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "actionVerbStructure"

    public static class otherVerbStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "otherVerbStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:1: otherVerbStructure : ( md )* ( rbconj )? ( adv )* ( adj )? otherVerb ( md )* ( adv )* ( adj )? ( neg )? ;
    public final ChemicalChunkerParser.otherVerbStructure_return otherVerbStructure() throws RecognitionException {
        ChemicalChunkerParser.otherVerbStructure_return retval = new ChemicalChunkerParser.otherVerbStructure_return();
        retval.start = input.LT(1);
        int otherVerbStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.md_return md169 = null;

        ChemicalChunkerParser.rbconj_return rbconj170 = null;

        ChemicalChunkerParser.adv_return adv171 = null;

        ChemicalChunkerParser.adj_return adj172 = null;

        ChemicalChunkerParser.otherVerb_return otherVerb173 = null;

        ChemicalChunkerParser.md_return md174 = null;

        ChemicalChunkerParser.adv_return adv175 = null;

        ChemicalChunkerParser.adj_return adj176 = null;

        ChemicalChunkerParser.neg_return neg177 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:19: ( ( md )* ( rbconj )? ( adv )* ( adj )? otherVerb ( md )* ( adv )* ( adj )? ( neg )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:21: ( md )* ( rbconj )? ( adv )* ( adj )? otherVerb ( md )* ( adv )* ( adj )? ( neg )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:21: ( md )*
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    alt63=1;
                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_otherVerbStructure890_static.FOLLOW_md_in_otherVerbStructure890);
            	    md169=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md169.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:25: ( rbconj )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 129:
                    {
                    alt64=1;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_otherVerbStructure893_static.FOLLOW_rbconj_in_otherVerbStructure893);
                    rbconj170=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj170.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:33: ( adv )*
            loop65:
            do {
                int alt65=2;
                switch ( input.LA(1) ) {
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt65=1;
                    }
                    break;

                }

                switch (alt65) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_otherVerbStructure896_static.FOLLOW_adv_in_otherVerbStructure896);
            	    adv171=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv171.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:38: ( adj )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_otherVerbStructure899_static.FOLLOW_adj_in_otherVerbStructure899);
                    adj172=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj172.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_otherVerb_in_otherVerbStructure902_static.FOLLOW_otherVerb_in_otherVerbStructure902);
            otherVerb173=otherVerb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, otherVerb173.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:53: ( md )*
            loop67:
            do {
                int alt67=2;
                switch ( input.LA(1) ) {
                case 153:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA67_3 = input.LA(3);

                        if ( (synpred149_ChemicalChunker()) ) {
                            alt67=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt67) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_otherVerbStructure904_static.FOLLOW_md_in_otherVerbStructure904);
            	    md174=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md174.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:57: ( adv )*
            loop68:
            do {
                int alt68=2;
                alt68 = dfa68.predict(input);
                switch (alt68) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_otherVerbStructure907_static.FOLLOW_adv_in_otherVerbStructure907);
            	    adv175=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv175.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:62: ( adj )?
            int alt69=2;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_otherVerbStructure910_static.FOLLOW_adj_in_otherVerbStructure910);
                    adj176=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj176.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:67: ( neg )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA70_3 = input.LA(3);

                            if ( (synpred152_ChemicalChunker()) ) {
                                alt70=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_otherVerbStructure913_static.FOLLOW_neg_in_otherVerbStructure913);
                    neg177=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg177.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, otherVerbStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "otherVerbStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:1: verb : ( actionVerb | otherVerb );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.actionVerb_return actionVerb178 = null;

        ChemicalChunkerParser.otherVerb_return otherVerb179 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:5: ( actionVerb | otherVerb )
            int alt71=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 96:
            case 97:
            case 99:
            case 101:
            case 102:
            case 103:
            case 104:
            case 106:
            case 108:
            case 110:
            case 111:
            case 113:
            case 114:
            case 116:
            case 118:
            case 119:
            case 120:
            case 122:
            case 123:
            case 125:
            case 126:
            case 127:
                {
                alt71=1;
                }
                break;
            case 83:
            case 84:
            case 95:
            case 112:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt71=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }

            switch (alt71) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:7: actionVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_actionVerb_in_verb922_static.FOLLOW_actionVerb_in_verb922);
                    actionVerb178=actionVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, actionVerb178.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:20: otherVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_otherVerb_in_verb926_static.FOLLOW_otherVerb_in_verb926);
                    otherVerb179=otherVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, otherVerb179.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class actionVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "actionVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:1: actionVerb : ( vbadd | vbcharge | vbcontain | vbdilute | vbdrop | vbfill | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | degassMultiVerb | vbsubject | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbsubmerge | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield );
    public final ChemicalChunkerParser.actionVerb_return actionVerb() throws RecognitionException {
        ChemicalChunkerParser.actionVerb_return retval = new ChemicalChunkerParser.actionVerb_return();
        retval.start = input.LT(1);
        int actionVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbadd_return vbadd180 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge181 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain182 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute183 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop184 = null;

        ChemicalChunkerParser.vbfill_return vbfill185 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat186 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus187 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate188 = null;

        ChemicalChunkerParser.vbcool_return vbcool189 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass190 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb191 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject192 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve193 = null;

        ChemicalChunkerParser.vbdry_return vbdry194 = null;

        ChemicalChunkerParser.vbextract_return vbextract195 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter196 = null;

        ChemicalChunkerParser.vbheat_return vbheat197 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease198 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge199 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition200 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate201 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify202 = null;

        ChemicalChunkerParser.vbquench_return vbquench203 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover204 = null;

        ChemicalChunkerParser.vbremove_return vbremove205 = null;

        ChemicalChunkerParser.vbstir_return vbstir206 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize207 = null;

        ChemicalChunkerParser.vbwait_return vbwait208 = null;

        ChemicalChunkerParser.vbwash_return vbwash209 = null;

        ChemicalChunkerParser.vbyield_return vbyield210 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:12: ( vbadd | vbcharge | vbcontain | vbdilute | vbdrop | vbfill | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | degassMultiVerb | vbsubject | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbsubmerge | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield )
            int alt72=31;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:14: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_actionVerb933_static.FOLLOW_vbadd_in_actionVerb933);
                    vbadd180=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd180.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:20: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_actionVerb935_static.FOLLOW_vbcharge_in_actionVerb935);
                    vbcharge181=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge181.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:29: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_actionVerb937_static.FOLLOW_vbcontain_in_actionVerb937);
                    vbcontain182=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain182.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:39: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_actionVerb939_static.FOLLOW_vbdilute_in_actionVerb939);
                    vbdilute183=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute183.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:48: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_actionVerb941_static.FOLLOW_vbdrop_in_actionVerb941);
                    vbdrop184=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop184.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:55: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_actionVerb943_static.FOLLOW_vbfill_in_actionVerb943);
                    vbfill185=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill185.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:62: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_actionVerb945_static.FOLLOW_vbtreat_in_actionVerb945);
                    vbtreat186=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat186.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:70: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_actionVerb947_static.FOLLOW_vbapparatus_in_actionVerb947);
                    vbapparatus187=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus187.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:82: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_actionVerb949_static.FOLLOW_vbconcentrate_in_actionVerb949);
                    vbconcentrate188=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate188.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:96: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_actionVerb951_static.FOLLOW_vbcool_in_actionVerb951);
                    vbcool189=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool189.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:103: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_actionVerb953_static.FOLLOW_vbdegass_in_actionVerb953);
                    vbdegass190=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass190.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:112: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_actionVerb955_static.FOLLOW_degassMultiVerb_in_actionVerb955);
                    degassMultiVerb191=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb191.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:128: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_actionVerb957_static.FOLLOW_vbsubject_in_actionVerb957);
                    vbsubject192=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject192.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:138: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_actionVerb959_static.FOLLOW_vbdissolve_in_actionVerb959);
                    vbdissolve193=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve193.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:149: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_actionVerb961_static.FOLLOW_vbdry_in_actionVerb961);
                    vbdry194=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry194.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:155: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_actionVerb963_static.FOLLOW_vbextract_in_actionVerb963);
                    vbextract195=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract195.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:165: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_actionVerb965_static.FOLLOW_vbfilter_in_actionVerb965);
                    vbfilter196=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter196.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:174: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_actionVerb967_static.FOLLOW_vbheat_in_actionVerb967);
                    vbheat197=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat197.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:181: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_actionVerb969_static.FOLLOW_vbincrease_in_actionVerb969);
                    vbincrease198=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease198.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:192: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_actionVerb971_static.FOLLOW_vbsubmerge_in_actionVerb971);
                    vbsubmerge199=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge199.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:203: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_actionVerb973_static.FOLLOW_vbpartition_in_actionVerb973);
                    vbpartition200=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition200.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:215: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_actionVerb975_static.FOLLOW_vbprecipitate_in_actionVerb975);
                    vbprecipitate201=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate201.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:229: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_actionVerb977_static.FOLLOW_vbpurify_in_actionVerb977);
                    vbpurify202=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify202.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:238: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_actionVerb979_static.FOLLOW_vbquench_in_actionVerb979);
                    vbquench203=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench203.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:247: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_actionVerb981_static.FOLLOW_vbrecover_in_actionVerb981);
                    vbrecover204=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover204.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:257: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_actionVerb983_static.FOLLOW_vbremove_in_actionVerb983);
                    vbremove205=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove205.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:266: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_actionVerb985_static.FOLLOW_vbstir_in_actionVerb985);
                    vbstir206=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir206.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:273: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_actionVerb987_static.FOLLOW_vbsynthesize_in_actionVerb987);
                    vbsynthesize207=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize207.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:286: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_actionVerb989_static.FOLLOW_vbwait_in_actionVerb989);
                    vbwait208=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait208.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:293: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_actionVerb991_static.FOLLOW_vbwash_in_actionVerb991);
                    vbwash209=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash209.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:300: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_actionVerb993_static.FOLLOW_vbyield_in_actionVerb993);
                    vbyield210=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield210.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, actionVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "actionVerb"

    public static class otherVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "otherVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:1: otherVerb : ( vb | vbd | vbg | vbn | vbp | vbz | vbchange | vbimmerse | vbsuspend | vbuse );
    public final ChemicalChunkerParser.otherVerb_return otherVerb() throws RecognitionException {
        ChemicalChunkerParser.otherVerb_return retval = new ChemicalChunkerParser.otherVerb_return();
        retval.start = input.LT(1);
        int otherVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb211 = null;

        ChemicalChunkerParser.vbd_return vbd212 = null;

        ChemicalChunkerParser.vbg_return vbg213 = null;

        ChemicalChunkerParser.vbn_return vbn214 = null;

        ChemicalChunkerParser.vbp_return vbp215 = null;

        ChemicalChunkerParser.vbz_return vbz216 = null;

        ChemicalChunkerParser.vbchange_return vbchange217 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse218 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend219 = null;

        ChemicalChunkerParser.vbuse_return vbuse220 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:11: ( vb | vbd | vbg | vbn | vbp | vbz | vbchange | vbimmerse | vbsuspend | vbuse )
            int alt73=10;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt73=1;
                }
                break;
            case 170:
                {
                alt73=2;
                }
                break;
            case 171:
                {
                alt73=3;
                }
                break;
            case 172:
                {
                alt73=4;
                }
                break;
            case 173:
                {
                alt73=5;
                }
                break;
            case 174:
                {
                alt73=6;
                }
                break;
            case 84:
                {
                alt73=7;
                }
                break;
            case 112:
                {
                alt73=8;
                }
                break;
            case 95:
                {
                alt73=9;
                }
                break;
            case 83:
                {
                alt73=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:13: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_otherVerb1000_static.FOLLOW_vb_in_otherVerb1000);
                    vb211=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb211.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:16: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_otherVerb1002_static.FOLLOW_vbd_in_otherVerb1002);
                    vbd212=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd212.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:20: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_otherVerb1004_static.FOLLOW_vbg_in_otherVerb1004);
                    vbg213=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg213.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:24: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_otherVerb1006_static.FOLLOW_vbn_in_otherVerb1006);
                    vbn214=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn214.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:28: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_otherVerb1008_static.FOLLOW_vbp_in_otherVerb1008);
                    vbp215=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp215.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:32: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_otherVerb1010_static.FOLLOW_vbz_in_otherVerb1010);
                    vbz216=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz216.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:36: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_otherVerb1012_static.FOLLOW_vbchange_in_otherVerb1012);
                    vbchange217=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange217.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:45: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_otherVerb1014_static.FOLLOW_vbimmerse_in_otherVerb1014);
                    vbimmerse218=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse218.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:55: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_otherVerb1016_static.FOLLOW_vbsuspend_in_otherVerb1016);
                    vbsuspend219=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend219.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:65: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_otherVerb1018_static.FOLLOW_vbuse_in_otherVerb1018);
                    vbuse220=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse220.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, otherVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "otherVerb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass221 = null;

        ChemicalChunkerParser.cc_return cc222 = null;

        ChemicalChunkerParser.vbfill_return vbfill223 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb1027_static.FOLLOW_vbdegass_in_degassMultiVerb1027);
            vbdegass221=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass221.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb1029_static.FOLLOW_cc_in_degassMultiVerb1029);
            cc222=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc222.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb1031_static.FOLLOW_vbfill_in_degassMultiVerb1031);
            vbfill223=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill223.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure224 = null;

        ChemicalChunkerParser.dash_return dash225 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure226 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun1040_static.FOLLOW_nounStructure_in_noun1040);
            nounStructure224=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure224.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:23: ( dash nounStructure )*
            loop74:
            do {
                int alt74=2;
                switch ( input.LA(1) ) {
                case 134:
                    {
                    int LA74_2 = input.LA(2);

                    if ( (synpred193_ChemicalChunker()) ) {
                        alt74=1;
                    }


                    }
                    break;

                }

                switch (alt74) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun1043_static.FOLLOW_dash_in_noun1043);
            	    dash225=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash225.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun1045_static.FOLLOW_nounStructure_in_noun1045);
            	    nounStructure226=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure226.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp227 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss228 = null;

        ChemicalChunkerParser.citation_return citation229 = null;

        ChemicalChunkerParser.cycles_return cycles230 = null;

        ChemicalChunkerParser.molecule_return molecule231 = null;

        ChemicalChunkerParser.apparatus_return apparatus232 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule233 = null;

        ChemicalChunkerParser.nnstate_return nnstate234 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode235 = null;

        ChemicalChunkerParser.nn_return nn236 = null;

        ChemicalChunkerParser.nns_return nns237 = null;

        ChemicalChunkerParser.nnp_return nnp238 = null;

        ChemicalChunkerParser.nnadd_return nnadd239 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase240 = null;

        ChemicalChunkerParser.nnexample_return nnexample241 = null;

        ChemicalChunkerParser.range_return range242 = null;

        ChemicalChunkerParser.nntime_return nntime243 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere244 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode245 = null;

        ChemicalChunkerParser.quantity_return quantity246 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity247 = null;

        ChemicalChunkerParser.nntemp_return nntemp248 = null;

        ChemicalChunkerParser.nnph_return nnph249 = null;

        ChemicalChunkerParser.nnflash_return nnflash250 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral251 = null;

        ChemicalChunkerParser.nnamount_return nnamount252 = null;

        ChemicalChunkerParser.nneq_return nneq253 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure254 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn255 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography256 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum257 = null;

        ChemicalChunkerParser.nncycle_return nncycle258 = null;

        ChemicalChunkerParser.nntimes_return nntimes259 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate260 = null;

        ChemicalChunkerParser.nnvol_return nnvol261 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify262 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize263 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture264 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference265 = null;

        ChemicalChunkerParser.nndry_return nndry266 = null;

        ChemicalChunkerParser.nnextract_return nnextract267 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter268 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate269 = null;

        ChemicalChunkerParser.nnremove_return nnremove270 = null;

        ChemicalChunkerParser.nnyield_return nnyield271 = null;

        ChemicalChunkerParser.fw_return fw272 = null;

        ChemicalChunkerParser.sym_return sym273 = null;

        ChemicalChunkerParser.clause_return clause274 = null;

        ChemicalChunkerParser.ls_return ls275 = null;

        ChemicalChunkerParser.nnps_return nnps276 = null;

        ChemicalChunkerParser.pos_return pos277 = null;

        ChemicalChunkerParser.oscarase_return oscarase278 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt75=52;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure1056_static.FOLLOW_prp_in_nounStructure1056);
                    prp227=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp227.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure1058_static.FOLLOW_prp_poss_in_nounStructure1058);
                    prp_poss228=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss228.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure1060_static.FOLLOW_citation_in_nounStructure1060);
                    citation229=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation229.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure1062_static.FOLLOW_cycles_in_nounStructure1062);
                    cycles230=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles230.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure1064_static.FOLLOW_molecule_in_nounStructure1064);
                    molecule231=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule231.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure1066_static.FOLLOW_apparatus_in_nounStructure1066);
                    apparatus232=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus232.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:66: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure1068_static.FOLLOW_unnamedmolecule_in_nounStructure1068);
                    unnamedmolecule233=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule233.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:82: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure1070_static.FOLLOW_nnstate_in_nounStructure1070);
                    nnstate234=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate234.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:90: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure1072_static.FOLLOW_procedureNode_in_nounStructure1072);
                    procedureNode235=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode235.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:104: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure1074_static.FOLLOW_nn_in_nounStructure1074);
                    nn236=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn236.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:107: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure1076_static.FOLLOW_nns_in_nounStructure1076);
                    nns237=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns237.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:111: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure1078_static.FOLLOW_nnp_in_nounStructure1078);
                    nnp238=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp238.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:115: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure1080_static.FOLLOW_nnadd_in_nounStructure1080);
                    nnadd239=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd239.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:121: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure1082_static.FOLLOW_preparationphrase_in_nounStructure1082);
                    preparationphrase240=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase240.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:139: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure1084_static.FOLLOW_nnexample_in_nounStructure1084);
                    nnexample241=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample241.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:149: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure1086_static.FOLLOW_range_in_nounStructure1086);
                    range242=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range242.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:155: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure1088_static.FOLLOW_nntime_in_nounStructure1088);
                    nntime243=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime243.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:162: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure1090_static.FOLLOW_nnatmosphere_in_nounStructure1090);
                    nnatmosphere244=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere244.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:175: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure1092_static.FOLLOW_tmunicode_in_nounStructure1092);
                    tmunicode245=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode245.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:185: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure1094_static.FOLLOW_quantity_in_nounStructure1094);
                    quantity246=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity246.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:194: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure1096_static.FOLLOW_nnchementity_in_nounStructure1096);
                    nnchementity247=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity247.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:207: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure1098_static.FOLLOW_nntemp_in_nounStructure1098);
                    nntemp248=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp248.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:214: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure1100_static.FOLLOW_nnph_in_nounStructure1100);
                    nnph249=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph249.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:219: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure1102_static.FOLLOW_nnflash_in_nounStructure1102);
                    nnflash250=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash250.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:227: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure1104_static.FOLLOW_nngeneral_in_nounStructure1104);
                    nngeneral251=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral251.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:237: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure1106_static.FOLLOW_nnamount_in_nounStructure1106);
                    nnamount252=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount252.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:246: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure1108_static.FOLLOW_nneq_in_nounStructure1108);
                    nneq253=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq253.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:251: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure1110_static.FOLLOW_nnpressure_in_nounStructure1110);
                    nnpressure254=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure254.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:262: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure1112_static.FOLLOW_nncolumn_in_nounStructure1112);
                    nncolumn255=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn255.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:271: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure1114_static.FOLLOW_nnchromatography_in_nounStructure1114);
                    nnchromatography256=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography256.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:288: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure1116_static.FOLLOW_nnvacuum_in_nounStructure1116);
                    nnvacuum257=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum257.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:297: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure1118_static.FOLLOW_nncycle_in_nounStructure1118);
                    nncycle258=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle258.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:305: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure1120_static.FOLLOW_nntimes_in_nounStructure1120);
                    nntimes259=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes259.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:313: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure1122_static.FOLLOW_nnconcentrate_in_nounStructure1122);
                    nnconcentrate260=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate260.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:327: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure1124_static.FOLLOW_nnvol_in_nounStructure1124);
                    nnvol261=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol261.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:333: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure1126_static.FOLLOW_nnpurify_in_nounStructure1126);
                    nnpurify262=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify262.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:342: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1128_static.FOLLOW_nnsynthesize_in_nounStructure1128);
                    nnsynthesize263=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize263.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:355: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1130_static.FOLLOW_nnmixture_in_nounStructure1130);
                    nnmixture264=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture264.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:365: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure1132_static.FOLLOW_squareBracketedReference_in_nounStructure1132);
                    squareBracketedReference265=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference265.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:390: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1134_static.FOLLOW_nndry_in_nounStructure1134);
                    nndry266=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry266.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:396: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1136_static.FOLLOW_nnextract_in_nounStructure1136);
                    nnextract267=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract267.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:406: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1138_static.FOLLOW_nnfilter_in_nounStructure1138);
                    nnfilter268=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter268.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:415: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1140_static.FOLLOW_nnprecipitate_in_nounStructure1140);
                    nnprecipitate269=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate269.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:429: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1142_static.FOLLOW_nnremove_in_nounStructure1142);
                    nnremove270=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove270.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:438: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure1144_static.FOLLOW_nnyield_in_nounStructure1144);
                    nnyield271=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield271.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:446: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1146_static.FOLLOW_fw_in_nounStructure1146);
                    fw272=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw272.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:449: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1148_static.FOLLOW_sym_in_nounStructure1148);
                    sym273=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym273.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:453: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1150_static.FOLLOW_clause_in_nounStructure1150);
                    clause274=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause274.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:460: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure1152_static.FOLLOW_ls_in_nounStructure1152);
                    ls275=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls275.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:463: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure1154_static.FOLLOW_nnps_in_nounStructure1154);
                    nnps276=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps276.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:468: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure1156_static.FOLLOW_pos_in_nounStructure1156);
                    pos277=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos277.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:472: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure1158_static.FOLLOW_oscarase_in_nounStructure1158);
                    oscarase278=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase278.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg279 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere280 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime281 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp282 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN283 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole284 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther285 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:5: ( neg )?
            int alt76=2;
            switch ( input.LA(1) ) {
                case 133:
                    {
                    alt76=1;
                    }
                    break;
            }

            switch (alt76) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1170_static.FOLLOW_neg_in_prepphrase1170);
                    neg279=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg279.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt77=6;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1174_static.FOLLOW_prepphraseAtmosphere_in_prepphrase1174);
                    prepphraseAtmosphere280=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere280.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1176_static.FOLLOW_prepphraseTime_in_prepphrase1176);
                    prepphraseTime281=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime281.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1178_static.FOLLOW_prepphraseTemp_in_prepphrase1178);
                    prepphraseTemp282=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp282.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1180_static.FOLLOW_prepphraseIN_in_prepphrase1180);
                    prepphraseIN283=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN283.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1182_static.FOLLOW_prepphraseRole_in_prepphrase1182);
                    prepphraseRole284=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole284.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1184_static.FOLLOW_prepphraseOther_in_prepphrase1184);
                    prepphraseOther285=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther285.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent286 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1196_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1196);
            prepphraseAtmosphereContent286=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent286.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 234:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder287 = null;

        ChemicalChunkerParser.dt_return dt288 = null;

        ChemicalChunkerParser.advAdj_return advAdj289 = null;

        ChemicalChunkerParser.molecule_return molecule290 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere291 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1216_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1216);
            inunder287=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder287.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:12: ( dt )?
            int alt78=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt78=1;
                    }
                    break;
            }

            switch (alt78) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1219_static.FOLLOW_dt_in_prepphraseAtmosphereContent1219);
                    dt288=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt288.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:16: ( advAdj )*
            loop79:
            do {
                int alt79=2;
                alt79 = dfa79.predict(input);
                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1222_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1222);
            	    advAdj289=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj289.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1225_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1225);
            molecule290=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule290.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:33: ( nnatmosphere )?
            int alt80=2;
            switch ( input.LA(1) ) {
                case 66:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA80_3 = input.LA(3);

                            if ( (synpred253_ChemicalChunker()) ) {
                                alt80=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt80) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1227_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1227);
                    nnatmosphere291=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere291.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure292 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1237_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1237);
            prepPhraseTimeStructure292=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure292.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 240:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj293 = null;

        ChemicalChunkerParser.inAll_return inAll294 = null;

        ChemicalChunkerParser.dt_return dt295 = null;

        ChemicalChunkerParser.advAdj_return advAdj296 = null;

        ChemicalChunkerParser.cd_return cd297 = null;

        ChemicalChunkerParser.nntime_return nntime298 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:3: ( advAdj )*
            loop81:
            do {
                int alt81=2;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1255_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1255);
            	    advAdj293=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj293.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:11: ( inAll )?
            int alt82=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 148:
                case 167:
                    {
                    alt82=1;
                    }
                    break;
            }

            switch (alt82) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1258_static.FOLLOW_inAll_in_prepPhraseTimeStructure1258);
                    inAll294=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll294.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:19: ( dt )?
            int alt83=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt83=1;
                    }
                    break;
            }

            switch (alt83) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1262_static.FOLLOW_dt_in_prepPhraseTimeStructure1262);
                    dt295=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt295.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:23: ( advAdj )*
            loop84:
            do {
                int alt84=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt84=1;
                    }
                    break;

                }

                switch (alt84) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1265_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1265);
            	    advAdj296=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj296.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:31: ( cd )?
            int alt85=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt85=1;
                    }
                    break;
            }

            switch (alt85) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1268_static.FOLLOW_cd_in_prepPhraseTimeStructure1268);
                    cd297=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd297.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:35: ( nntime )+
            int cnt86=0;
            loop86:
            do {
                int alt86=2;
                switch ( input.LA(1) ) {
                case 62:
                    {
                    int LA86_2 = input.LA(2);

                    if ( (synpred259_ChemicalChunker()) ) {
                        alt86=1;
                    }


                    }
                    break;

                }

                switch (alt86) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1271_static.FOLLOW_nntime_in_prepPhraseTimeStructure1271);
            	    nntime298=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime298.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt86 >= 1 ) break loop86;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(86, input);
                        throw eee;
                }
                cnt86++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent299 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1281_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1281);
            prepphraseTempContent299=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent299.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 245:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj300 = null;

        ChemicalChunkerParser.inAll_return inAll301 = null;

        ChemicalChunkerParser.dt_return dt302 = null;

        ChemicalChunkerParser.advAdj_return advAdj303 = null;

        ChemicalChunkerParser.cd_return cd304 = null;

        ChemicalChunkerParser.nntemp_return nntemp305 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:5: ( advAdj )?
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1302_static.FOLLOW_advAdj_in_prepphraseTempContent1302);
                    advAdj300=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj300.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:13: ( inAll )?
            int alt88=2;
            switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 148:
                case 167:
                    {
                    alt88=1;
                    }
                    break;
            }

            switch (alt88) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1305_static.FOLLOW_inAll_in_prepphraseTempContent1305);
                    inAll301=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll301.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:20: ( dt )?
            int alt89=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt89=1;
                    }
                    break;
            }

            switch (alt89) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1308_static.FOLLOW_dt_in_prepphraseTempContent1308);
                    dt302=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt302.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:24: ( advAdj )?
            int alt90=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt90=1;
                    }
                    break;
            }

            switch (alt90) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1311_static.FOLLOW_advAdj_in_prepphraseTempContent1311);
                    advAdj303=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj303.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:32: ( cd )?
            int alt91=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt91=1;
                    }
                    break;
            }

            switch (alt91) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1314_static.FOLLOW_cd_in_prepphraseTempContent1314);
                    cd304=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd304.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:36: ( nntemp )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                switch ( input.LA(1) ) {
                case 70:
                    {
                    int LA92_2 = input.LA(2);

                    if ( (synpred265_ChemicalChunker()) ) {
                        alt92=1;
                    }


                    }
                    break;

                }

                switch (alt92) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1317_static.FOLLOW_nntemp_in_prepphraseTempContent1317);
            	    nntemp305=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp305.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin306 = null;

        ChemicalChunkerParser.molecule_return molecule307 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1326_static.FOLLOW_inin_in_prepphraseIN1326);
            inin306=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin306.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1328_static.FOLLOW_molecule_in_prepphraseIN1328);
            molecule307=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule307.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 251:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas308 = null;

        ChemicalChunkerParser.dt_return dt309 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity310 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1349_static.FOLLOW_inas_in_prepphraseRole1349);
            inas308=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas308.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:8: ( dt )?
            int alt93=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt93=1;
                    }
                    break;
            }

            switch (alt93) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1351_static.FOLLOW_dt_in_prepphraseRole1351);
                    dt309=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt309.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1354_static.FOLLOW_nnchementity_in_prepphraseRole1354);
            nnchementity310=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity310.getTree());


            // AST REWRITE
            // elements: dt, nnchementity, inas
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 254:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj311 = null;

        ChemicalChunkerParser.inMost_return inMost312 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase313 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: ( advAdj )*
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt94=1;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1377_static.FOLLOW_advAdj_in_prepphraseOther1377);
            	    advAdj311=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj311.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:12: ( inMost )+
            int cnt95=0;
            loop95:
            do {
                int alt95=2;
                switch ( input.LA(1) ) {
                case 45:
                case 46:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 148:
                case 167:
                    {
                    alt95=1;
                    }
                    break;

                }

                switch (alt95) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1380_static.FOLLOW_inMost_in_prepphraseOther1380);
            	    inMost312=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost312.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt95 >= 1 ) break loop95;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(95, input);
                        throw eee;
                }
                cnt95++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1384_static.FOLLOW_nounphrase_in_prepphraseOther1384);
            nounphrase313=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase313.getTree());


            // AST REWRITE
            // elements: inMost, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof314 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase315 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1410_static.FOLLOW_inof_in_prepphraseOf1410);
            inof314=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof314.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1413_static.FOLLOW_nounphrase_in_prepphraseOf1413);
            nounphrase315=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase315.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 260:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj316 = null;

        ChemicalChunkerParser.inafter_return inafter317 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase318 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:5: ( advAdj )?
            int alt96=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                case 162:
                case 163:
                case 164:
                case 165:
                    {
                    alt96=1;
                    }
                    break;
            }

            switch (alt96) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1435_static.FOLLOW_advAdj_in_prepphraseAfter1435);
                    advAdj316=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj316.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1438_static.FOLLOW_inafter_in_prepphraseAfter1438);
            inafter317=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter317.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1441_static.FOLLOW_nounphrase_in_prepphraseAfter1441);
            nounphrase318=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase318.getTree());


            // AST REWRITE
            // elements: advAdj, nounphrase, inafter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 263:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize319 = null;

        ChemicalChunkerParser.inas_return inas320 = null;

        ChemicalChunkerParser.nnexample_return nnexample321 = null;

        ChemicalChunkerParser.cd_return cd322 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase323 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1466_static.FOLLOW_vbsynthesize_in_preparationphrase1466);
            vbsynthesize319=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize319.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1468_static.FOLLOW_inas_in_preparationphrase1468);
            inas320=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas320.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:22: ( nnexample cd | prepphrase )
            int alt97=2;
            switch ( input.LA(1) ) {
            case 81:
                {
                alt97=1;
                }
                break;
            case 38:
            case 39:
            case 43:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 62:
            case 70:
            case 133:
            case 144:
            case 145:
            case 148:
            case 149:
            case 150:
            case 151:
            case 162:
            case 163:
            case 164:
            case 165:
            case 167:
                {
                alt97=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1471_static.FOLLOW_nnexample_in_preparationphrase1471);
                    nnexample321=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample321.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1473_static.FOLLOW_cd_in_preparationphrase1473);
                    cd322=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd322.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1476_static.FOLLOW_prepphrase_in_preparationphrase1476);
                    prepphrase323=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase323.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus324 = null;

        ChemicalChunkerParser.conjunction_return conjunction325 = null;

        ChemicalChunkerParser.apparatus_return apparatus326 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1487_static.FOLLOW_apparatus_in_multiApparatus1487);
            apparatus324=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus324.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:14: ( ( conjunction )* apparatus )*
            loop99:
            do {
                int alt99=2;
                alt99 = dfa99.predict(input);
                switch (alt99) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:15: ( conjunction )*
            	    loop98:
            	    do {
            	        int alt98=2;
            	        alt98 = dfa98.predict(input);
            	        switch (alt98) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1490_static.FOLLOW_conjunction_in_multiApparatus1490);
            	    	    conjunction325=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction325.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop98;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1493_static.FOLLOW_apparatus_in_multiApparatus1493);
            	    apparatus326=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus326.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt327 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus328 = null;

        ChemicalChunkerParser.nnApp_return nnApp329 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:4: ( dt )?
            int alt100=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt100=1;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1504_static.FOLLOW_dt_in_apparatus1504);
                    dt327=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt327.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:8: ( preapparatus )*
            loop101:
            do {
                int alt101=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 44:
                case 61:
                case 69:
                case 71:
                case 75:
                case 82:
                case 87:
                case 128:
                case 131:
                case 137:
                case 141:
                case 144:
                case 149:
                case 150:
                case 151:
                case 154:
                    {
                    alt101=1;
                    }
                    break;

                }

                switch (alt101) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1507_static.FOLLOW_preapparatus_in_apparatus1507);
            	    preapparatus328=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus328.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:22: ( nnApp )+
            int cnt102=0;
            loop102:
            do {
                int alt102=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    int LA102_2 = input.LA(2);

                    if ( (synpred275_ChemicalChunker()) ) {
                        alt102=1;
                    }


                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1510_static.FOLLOW_nnApp_in_apparatus1510);
            	    nnApp329=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp329.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);



            // AST REWRITE
            // elements: nnApp, dt, preapparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 271:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus330 = null;

        ChemicalChunkerParser.dash_return dash331 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus332 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:4: ( nnapparatus )+
            int cnt103=0;
            loop103:
            do {
                int alt103=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    int LA103_2 = input.LA(2);

                    if ( (synpred276_ChemicalChunker()) ) {
                        alt103=1;
                    }


                    }
                    break;

                }

                switch (alt103) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1537_static.FOLLOW_nnapparatus_in_nnApp1537);
            	    nnapparatus330=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus330.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt103 >= 1 ) break loop103;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(103, input);
                        throw eee;
                }
                cnt103++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:17: ( dash nnapparatus )*
            loop104:
            do {
                int alt104=2;
                switch ( input.LA(1) ) {
                case 134:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 98:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA104_5 = input.LA(5);

                                if ( (synpred277_ChemicalChunker()) ) {
                                    alt104=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt104) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1541_static.FOLLOW_dash_in_nnApp1541);
            	    dash331=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash331.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1543_static.FOLLOW_nnapparatus_in_nnApp1543);
            	    nnapparatus332=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus332.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity333 = null;

        ChemicalChunkerParser.adj_return adj334 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure335 = null;

        ChemicalChunkerParser.nnadd_return nnadd336 = null;

        ChemicalChunkerParser.molecule_return molecule337 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity338 = null;

        ChemicalChunkerParser.nnstate_return nnstate339 = null;

        ChemicalChunkerParser.nn_return nn340 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt105=0;
            loop105:
            do {
                int alt105=9;
                alt105 = dfa105.predict(input);
                switch (alt105) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1557_static.FOLLOW_quantity_in_preapparatus1557);
            	    quantity333=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity333.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1559_static.FOLLOW_adj_in_preapparatus1559);
            	    adj334=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj334.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1561_static.FOLLOW_nnpressure_in_preapparatus1561);
            	    nnpressure335=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure335.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1563_static.FOLLOW_nnadd_in_preapparatus1563);
            	    nnadd336=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd336.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1565_static.FOLLOW_molecule_in_preapparatus1565);
            	    molecule337=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule337.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1567_static.FOLLOW_nnchementity_in_preapparatus1567);
            	    nnchementity338=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity338.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1569_static.FOLLOW_nnstate_in_preapparatus1569);
            	    nnstate339=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate339.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1571_static.FOLLOW_nn_in_preapparatus1571);
            	    nn340=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn340.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt105 >= 1 ) break loop105;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(105, input);
                        throw eee;
                }
                cnt105++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:1: oscarCompound : ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp341 = null;

        ChemicalChunkerParser.adj_return adj342 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure343 = null;

        ChemicalChunkerParser.adj_return adj344 = null;

        ChemicalChunkerParser.nnstate_return nnstate345 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity346 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity347 = null;

        ChemicalChunkerParser.quantity_return quantity348 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure349 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:15: ( ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:18: ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:18: ( jjcomp | adj )*
            loop106:
            do {
                int alt106=3;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    alt106=1;
                    }
                    break;
                case 38:
                case 39:
                case 43:
                case 149:
                case 150:
                case 151:
                    {
                    alt106=2;
                    }
                    break;

                }

                switch (alt106) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:19: jjcomp
            	    {
            	    pushFollow(FOLLOW_jjcomp_in_oscarCompound1584_static.FOLLOW_jjcomp_in_oscarCompound1584);
            	    jjcomp341=jjcomp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp341.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:26: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1586_static.FOLLOW_adj_in_oscarCompound1586);
            	    adj342=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj342.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1590_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1590);
            oscarCompoundStructure343=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure343.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:55: ( adj )?
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1592_static.FOLLOW_adj_in_oscarCompound1592);
                    adj344=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj344.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:60: ( nnstate )?
            int alt108=2;
            switch ( input.LA(1) ) {
                case 61:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA108_3 = input.LA(3);

                            if ( (synpred289_ChemicalChunker()) ) {
                                alt108=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_oscarCompound1595_static.FOLLOW_nnstate_in_oscarCompound1595);
                    nnstate345=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate345.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:69: ( numericReferenceOrQuantity | nnchementity )?
            int alt109=3;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:70: numericReferenceOrQuantity
                    {
                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_oscarCompound1599_static.FOLLOW_numericReferenceOrQuantity_in_oscarCompound1599);
                    numericReferenceOrQuantity346=numericReferenceOrQuantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity346.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:99: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1603_static.FOLLOW_nnchementity_in_oscarCompound1603);
                    nnchementity347=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity347.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:115: ( quantity )*
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1608_static.FOLLOW_quantity_in_oscarCompound1608);
            	    quantity348=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity348.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:125: ( fromProcedure )?
            int alt111=2;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_oscarCompound1611_static.FOLLOW_fromProcedure_in_oscarCompound1611);
                    fromProcedure349=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure349.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: oscarCompoundStructure : ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm350 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure351 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure352 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:23: ( ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:25: ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:25: ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt114=2;
            switch ( input.LA(1) ) {
            case 82:
                {
                alt114=1;
                }
                break;
            case 141:
                {
                alt114=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:26: ( oscarcm )+ ( afterOscarCompoundStructure )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:26: ( oscarcm )+
                    int cnt112=0;
                    loop112:
                    do {
                        int alt112=2;
                        switch ( input.LA(1) ) {
                        case 82:
                            {
                            int LA112_2 = input.LA(2);

                            if ( (synpred294_ChemicalChunker()) ) {
                                alt112=1;
                            }


                            }
                            break;

                        }

                        switch (alt112) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1620_static.FOLLOW_oscarcm_in_oscarCompoundStructure1620);
                    	    oscarcm350=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm350.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt112 >= 1 ) break loop112;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(112, input);
                                throw eee;
                        }
                        cnt112++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:35: ( afterOscarCompoundStructure )?
                    int alt113=2;
                    alt113 = dfa113.predict(input);
                    switch (alt113) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1623_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1623);
                            afterOscarCompoundStructure351=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure351.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:66: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1628_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1628);
                    bracketedOscarCompoundStructure352=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure352.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedOscarCompoundStructure, afterOscarCompoundStructure, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 280:99: -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:102: ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:112: ( oscarcm )*
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:121: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:150: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:1: afterOscarCompoundStructure : ( ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dash_return dash353 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm354 = null;

        ChemicalChunkerParser.dash_return dash355 = null;

        ChemicalChunkerParser.colon_return colon356 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm357 = null;

        ChemicalChunkerParser.dash_return dash358 = null;

        ChemicalChunkerParser.apost_return apost359 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:28: ( ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ )
            int alt121=3;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==134) ) {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 82:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA121_6 = input.LA(5);

                            if ( (synpred300_ChemicalChunker()) ) {
                                alt121=1;
                            }
                            else if ( (true) ) {
                                alt121=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 121, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 121, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                        {
                        alt121=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 121, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA121_0==130) && (synpred304_ChemicalChunker())) {
                alt121=2;
            }
            else if ( (LA121_0==132) ) {
                alt121=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:30: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:30: ( dash ( oscarcm )+ )+
                    int cnt116=0;
                    loop116:
                    do {
                        int alt116=2;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 82:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA116_5 = input.LA(5);

                                        if ( (synpred298_ChemicalChunker()) ) {
                                            alt116=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt116) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:31: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1651_static.FOLLOW_dash_in_afterOscarCompoundStructure1651);
                    	    dash353=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash353.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:36: ( oscarcm )+
                    	    int cnt115=0;
                    	    loop115:
                    	    do {
                    	        int alt115=2;
                    	        switch ( input.LA(1) ) {
                    	        case 82:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA115_3 = input.LA(3);

                    	                if ( (synpred297_ChemicalChunker()) ) {
                    	                    alt115=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt115) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1653_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1653);
                    	    	    oscarcm354=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm354.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt115 >= 1 ) break loop115;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(115, input);
                    	                throw eee;
                    	        }
                    	        cnt115++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt116 >= 1 ) break loop116;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(116, input);
                                throw eee;
                        }
                        cnt116++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:47: ( dash )?
                    int alt117=2;
                    switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA117_3 = input.LA(3);

                                    if ( (synpred299_ChemicalChunker()) ) {
                                        alt117=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt117) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1658_static.FOLLOW_dash_in_afterOscarCompoundStructure1658);
                            dash355=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash355.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:53: ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:85: ( colon ( oscarcm )+ )+
                    int cnt119=0;
                    loop119:
                    do {
                        int alt119=2;
                        switch ( input.LA(1) ) {
                        case 130:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 82:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA119_5 = input.LA(5);

                                        if ( (synpred306_ChemicalChunker()) ) {
                                            alt119=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt119) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:86: colon ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_colon_in_afterOscarCompoundStructure1677_static.FOLLOW_colon_in_afterOscarCompoundStructure1677);
                    	    colon356=colon();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon356.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:92: ( oscarcm )+
                    	    int cnt118=0;
                    	    loop118:
                    	    do {
                    	        int alt118=2;
                    	        switch ( input.LA(1) ) {
                    	        case 82:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA118_3 = input.LA(3);

                    	                if ( (synpred305_ChemicalChunker()) ) {
                    	                    alt118=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt118) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1679_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1679);
                    	    	    oscarcm357=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm357.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt118 >= 1 ) break loop118;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(118, input);
                    	                throw eee;
                    	        }
                    	        cnt118++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt119 >= 1 ) break loop119;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(119, input);
                                throw eee;
                        }
                        cnt119++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:103: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:103: ( dash | apost )+
                    int cnt120=0;
                    loop120:
                    do {
                        int alt120=3;
                        switch ( input.LA(1) ) {
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA120_4 = input.LA(3);

                                if ( (synpred308_ChemicalChunker()) ) {
                                    alt120=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA120_5 = input.LA(3);

                                if ( (synpred307_ChemicalChunker()) ) {
                                    alt120=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt120) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:104: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1685_static.FOLLOW_dash_in_afterOscarCompoundStructure1685);
                    	    dash358=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash358.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:109: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1687_static.FOLLOW_apost_in_afterOscarCompoundStructure1687);
                    	    apost359=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost359.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt120 >= 1 ) break loop120;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(120, input);
                                throw eee;
                        }
                        cnt120++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb360 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm361 = null;

        ChemicalChunkerParser.rrb_return rrb362 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1696_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1696);
            lrb360=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb360.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:40: ( oscarcm )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                switch ( input.LA(1) ) {
                case 82:
                    {
                    alt122=1;
                    }
                    break;

                }

                switch (alt122) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1699_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1699);
            	    oscarcm361=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm361.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1702_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1702);
            rrb362=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb362.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount363 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1712_static.FOLLOW_moleculeamount_in_molecule1712);
            moleculeamount363=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount363.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 285:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3364 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1365 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2366 = null;

        ChemicalChunkerParser.asAstate_return asAstate367 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt123=3;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1730_static.FOLLOW_moleculeamount3_in_moleculeamount1730);
                    moleculeamount3364=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3364.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1733_static.FOLLOW_moleculeamount1_in_moleculeamount1733);
                    moleculeamount1365=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1365.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1737_static.FOLLOW_moleculeamount2_in_moleculeamount1737);
                    moleculeamount2366=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2366.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:71: ( asAstate )?
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1740_static.FOLLOW_asAstate_in_moleculeamount1740);
                    asAstate367=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate367.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:1: moleculeamount3 : ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity368 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol369 = null;

        ChemicalChunkerParser.inof_return inof370 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE371 = null;

        ChemicalChunkerParser.dt_return dt372 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio373 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol374 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound375 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:2: ( ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:3: ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:3: ( quantity | bracketedContentInMol )+
            int cnt125=0;
            loop125:
            do {
                int alt125=3;
                switch ( input.LA(1) ) {
                case 141:
                    {
                    int LA125_2 = input.LA(2);

                    if ( (synpred313_ChemicalChunker()) ) {
                        alt125=1;
                    }
                    else if ( (synpred314_ChemicalChunker()) ) {
                        alt125=2;
                    }


                    }
                    break;
                case 144:
                    {
                    int LA125_3 = input.LA(2);

                    if ( (synpred313_ChemicalChunker()) ) {
                        alt125=1;
                    }
                    else if ( (synpred314_ChemicalChunker()) ) {
                        alt125=2;
                    }


                    }
                    break;
                case 71:
                case 128:
                    {
                    alt125=1;
                    }
                    break;
                case 131:
                case 137:
                    {
                    alt125=2;
                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount31751_static.FOLLOW_quantity_in_moleculeamount31751);
            	    quantity368=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity368.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:13: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount31753_static.FOLLOW_bracketedContentInMol_in_moleculeamount31753);
            	    bracketedContentInMol369=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol369.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount31757_static.FOLLOW_inof_in_moleculeamount31757);
            inof370=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof370.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:42: ( dtTHE | dt )?
            int alt126=3;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt126=1;
                    }
                    break;
                case 145:
                    {
                    alt126=2;
                    }
                    break;
            }

            switch (alt126) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:43: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31760_static.FOLLOW_dtTHE_in_moleculeamount31760);
                    dtTHE371=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE371.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:51: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31764_static.FOLLOW_dt_in_moleculeamount31764);
                    dt372=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt372.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_ratioOrBracketedRatio_in_moleculeamount31768_static.FOLLOW_ratioOrBracketedRatio_in_moleculeamount31768);
            ratioOrBracketedRatio373=ratioOrBracketedRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio373.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:78: ( bracketedContentInMol )?
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: bracketedContentInMol
                    {
                    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount31770_static.FOLLOW_bracketedContentInMol_in_moleculeamount31770);
                    bracketedContentInMol374=bracketedContentInMol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol374.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31773_static.FOLLOW_oscarCompound_in_moleculeamount31773);
            oscarCompound375=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound375.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:1: moleculeamount1 : ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity376 = null;

        ChemicalChunkerParser.nnstate_return nnstate377 = null;

        ChemicalChunkerParser.quantity_return quantity378 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol379 = null;

        ChemicalChunkerParser.inof_return inof380 = null;

        ChemicalChunkerParser.quantity_return quantity381 = null;

        ChemicalChunkerParser.inof_return inof382 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE383 = null;

        ChemicalChunkerParser.dt_return dt384 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound385 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity386 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:2: ( ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:3: ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:3: ( nnchementity | nnstate )?
            int alt128=3;
            switch ( input.LA(1) ) {
                case 69:
                    {
                    alt128=1;
                    }
                    break;
                case 61:
                    {
                    alt128=2;
                    }
                    break;
            }

            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:4: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_moleculeamount11783_static.FOLLOW_nnchementity_in_moleculeamount11783);
                    nnchementity376=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity376.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:19: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_moleculeamount11787_static.FOLLOW_nnstate_in_moleculeamount11787);
                    nnstate377=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate377.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:29: ( quantity | bracketedContentInMol )+
            int cnt129=0;
            loop129:
            do {
                int alt129=3;
                switch ( input.LA(1) ) {
                case 141:
                    {
                    int LA129_2 = input.LA(2);

                    if ( (synpred320_ChemicalChunker()) ) {
                        alt129=1;
                    }
                    else if ( (synpred321_ChemicalChunker()) ) {
                        alt129=2;
                    }


                    }
                    break;
                case 144:
                    {
                    int LA129_3 = input.LA(2);

                    if ( (synpred320_ChemicalChunker()) ) {
                        alt129=1;
                    }
                    else if ( (synpred321_ChemicalChunker()) ) {
                        alt129=2;
                    }


                    }
                    break;
                case 71:
                case 128:
                    {
                    alt129=1;
                    }
                    break;
                case 131:
                case 137:
                    {
                    alt129=2;
                    }
                    break;

                }

                switch (alt129) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:30: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11792_static.FOLLOW_quantity_in_moleculeamount11792);
            	    quantity378=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity378.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:39: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount11794_static.FOLLOW_bracketedContentInMol_in_moleculeamount11794);
            	    bracketedContentInMol379=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol379.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        throw eee;
                }
                cnt129++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11798_static.FOLLOW_inof_in_moleculeamount11798);
            inof380=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof380.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:68: ( quantity ( inof )? )?
            int alt131=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 71:
                                case 128:
                                case 144:
                                    {
                                    alt131=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 71:
                case 128:
                case 144:
                    {
                    alt131=1;
                    }
                    break;
            }

            switch (alt131) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:69: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11801_static.FOLLOW_quantity_in_moleculeamount11801);
                    quantity381=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity381.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:78: ( inof )?
                    int alt130=2;
                    switch ( input.LA(1) ) {
                        case 54:
                            {
                            alt130=1;
                            }
                            break;
                    }

                    switch (alt130) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11803_static.FOLLOW_inof_in_moleculeamount11803);
                            inof382=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof382.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:86: ( dtTHE | dt )?
            int alt132=3;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt132=1;
                    }
                    break;
                case 145:
                    {
                    alt132=2;
                    }
                    break;
            }

            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:87: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11809_static.FOLLOW_dtTHE_in_moleculeamount11809);
                    dtTHE383=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE383.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:95: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11813_static.FOLLOW_dt_in_moleculeamount11813);
                    dt384=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt384.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:100: ( oscarCompound )+
            int cnt133=0;
            loop133:
            do {
                int alt133=2;
                alt133 = dfa133.predict(input);
                switch (alt133) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11817_static.FOLLOW_oscarCompound_in_moleculeamount11817);
            	    oscarCompound385=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound385.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt133 >= 1 ) break loop133;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(133, input);
                        throw eee;
                }
                cnt133++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11820_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11820);
            afterCompoundCitationOrQuantity386=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity386.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:1: moleculeamount2 : ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity387 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol388 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound389 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity390 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:2: ( ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:3: ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:3: ( quantity | bracketedContentInMol )*
            loop134:
            do {
                int alt134=3;
                alt134 = dfa134.predict(input);
                switch (alt134) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21829_static.FOLLOW_quantity_in_moleculeamount21829);
            	    quantity387=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity387.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:13: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount21831_static.FOLLOW_bracketedContentInMol_in_moleculeamount21831);
            	    bracketedContentInMol388=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol388.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:37: ( oscarCompound )+
            int cnt135=0;
            loop135:
            do {
                int alt135=2;
                alt135 = dfa135.predict(input);
                switch (alt135) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21835_static.FOLLOW_oscarCompound_in_moleculeamount21835);
            	    oscarCompound389=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound389.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt135 >= 1 ) break loop135;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(135, input);
                        throw eee;
                }
                cnt135++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21838_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21838);
            afterCompoundCitationOrQuantity390=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity390.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation391 = null;

        ChemicalChunkerParser.quantity_return quantity392 = null;

        ChemicalChunkerParser.comma_return comma393 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node394 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure395 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol396 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*
            loop137:
            do {
                int alt137=5;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1846_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1846);
            	    citation391=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation391.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1848_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1848);
            	    quantity392=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity392.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1850_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1850);
            	    comma393=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma393.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:59: ( quantity1Node | citationStructure )
            	    int alt136=2;
            	    switch ( input.LA(1) ) {
            	    case 141:
            	        {
            	        switch ( input.LA(2) ) {
            	        case TOKEN:
            	            {
            	            switch ( input.LA(3) ) {
            	            case 131:
            	            case 143:
            	            case 147:
            	            case 156:
            	                {
            	                alt136=2;
            	                }
            	                break;
            	            case 144:
            	                {
            	                switch ( input.LA(4) ) {
            	                case TOKEN:
            	                    {
            	                    switch ( input.LA(5) ) {
            	                    case 42:
            	                    case 63:
            	                    case 64:
            	                    case 65:
            	                    case 67:
            	                    case 68:
            	                    case 136:
            	                    case 154:
            	                        {
            	                        alt136=1;
            	                        }
            	                        break;
            	                    case 131:
            	                    case 143:
            	                    case 144:
            	                    case 147:
            	                    case 156:
            	                        {
            	                        alt136=2;
            	                        }
            	                        break;
            	                    default:
            	                        if (state.backtracking>0) {state.failed=true; return retval;}
            	                        NoViableAltException nvae =
            	                            new NoViableAltException("", 136, 6, input);

            	                        throw nvae;
            	                    }

            	                    }
            	                    break;
            	                default:
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 136, 4, input);

            	                    throw nvae;
            	                }

            	                }
            	                break;
            	            case 71:
            	            case 128:
            	                {
            	                alt136=1;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 136, 2, input);

            	                throw nvae;
            	            }

            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 136, 1, input);

            	            throw nvae;
            	        }

            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 136, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt136) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1853_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1853);
            	            quantity1Node394=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node394.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1855_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1855);
            	            citationStructure395=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure395.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:93: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1858_static.FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1858);
            	    bracketedContentInMol396=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol396.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:1: unnamedmolecule : unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription397 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:2: ( unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:4: unnamedmoleculeDescription
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1869_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1869);
            unnamedmoleculeDescription397=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription397.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeDescription
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:31: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:34: ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:1: unnamedmoleculeDescription : unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart398 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity399 = null;

        ChemicalChunkerParser.asAstate_return asAstate400 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:2: ( unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:4: unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1886_static.FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1886);
            unnamedmoleculeDescriptionStart398=unnamedmoleculeDescriptionStart();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeDescriptionStart398.getTree());
            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1888_static.FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1888);
            afterCompoundCitationOrQuantity399=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity399.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:68: ( asAstate )?
            int alt138=2;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmoleculeDescription1890_static.FOLLOW_asAstate_in_unnamedmoleculeDescription1890);
                    asAstate400=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate400.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeDescriptionStart_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescriptionStart"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );
    public final ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return retval = new ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescriptionStart_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantityOf_return quantityOf401 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1402 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2403 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule404 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2405 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule406 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:2: ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
            int alt140=3;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:4: quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1900_static.FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1900);
                    quantityOf401=quantityOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantityOf401.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    int alt139=3;
                    alt139 = dfa139.predict(input);
                    switch (alt139) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:16: potentialUnnamedMoleculeAmount1
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1903_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1903);
                            potentialUnnamedMoleculeAmount1402=potentialUnnamedMoleculeAmount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount1402.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:50: potentialUnnamedMoleculeAmount2
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1907_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1907);
                            potentialUnnamedMoleculeAmount2403=potentialUnnamedMoleculeAmount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2403.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:84: definiteUnnamedMolecule
                            {
                            pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1911_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1911);
                            definiteUnnamedMolecule404=definiteUnnamedMolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule404.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:112: potentialUnnamedMoleculeAmount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1917_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1917);
                    potentialUnnamedMoleculeAmount2405=potentialUnnamedMoleculeAmount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2405.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:146: definiteUnnamedMolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1921_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1921);
                    definiteUnnamedMolecule406=definiteUnnamedMolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule406.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, unnamedmoleculeDescriptionStart_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescriptionStart"

    public static class quantityOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantityOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:1: quantityOf : ( quantity )+ ( inof )? ( dtTHE | dt )? ;
    public final ChemicalChunkerParser.quantityOf_return quantityOf() throws RecognitionException {
        ChemicalChunkerParser.quantityOf_return retval = new ChemicalChunkerParser.quantityOf_return();
        retval.start = input.LT(1);
        int quantityOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity407 = null;

        ChemicalChunkerParser.inof_return inof408 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE409 = null;

        ChemicalChunkerParser.dt_return dt410 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:2: ( ( quantity )+ ( inof )? ( dtTHE | dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:4: ( quantity )+ ( inof )? ( dtTHE | dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:4: ( quantity )+
            int cnt141=0;
            loop141:
            do {
                int alt141=2;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_quantityOf1930_static.FOLLOW_quantity_in_quantityOf1930);
            	    quantity407=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity407.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt141 >= 1 ) break loop141;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(141, input);
                        throw eee;
                }
                cnt141++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:14: ( inof )?
            int alt142=2;
            switch ( input.LA(1) ) {
                case 54:
                    {
                    alt142=1;
                    }
                    break;
            }

            switch (alt142) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                    {
                    pushFollow(FOLLOW_inof_in_quantityOf1933_static.FOLLOW_inof_in_quantityOf1933);
                    inof408=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof408.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:20: ( dtTHE | dt )?
            int alt143=3;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt143=1;
                    }
                    break;
                case 145:
                    {
                    alt143=2;
                    }
                    break;
            }

            switch (alt143) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:21: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_quantityOf1937_static.FOLLOW_dtTHE_in_quantityOf1937);
                    dtTHE409=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE409.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:29: dt
                    {
                    pushFollow(FOLLOW_dt_in_quantityOf1941_static.FOLLOW_dt_in_quantityOf1941);
                    dt410=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt410.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, quantityOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantityOf"

    public static class potentialUnnamedMoleculeAmount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:1: potentialUnnamedMoleculeAmount1 : potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule411 = null;

        ChemicalChunkerParser.quantity_return quantity412 = null;

        ChemicalChunkerParser.asAstate_return asAstate413 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure414 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:2: ( potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:4: potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11952_static.FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11952);
            potentialUnnamedMolecule411=potentialUnnamedMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMolecule411.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:29: ( quantity )*
            loop144:
            do {
                int alt144=2;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11954_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11954);
            	    quantity412=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity412.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:39: ( asAstate )?
            int alt145=2;
            alt145 = dfa145.predict(input);
            switch (alt145) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11957_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11957);
                    asAstate413=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate413.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:49: ( fromProcedure )?
            int alt146=2;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11960_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11960);
                    fromProcedure414=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure414.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, potentialUnnamedMoleculeAmount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount1"

    public static class potentialUnnamedMoleculeAmount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: potentialUnnamedMoleculeAmount2 : ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference415 = null;

        ChemicalChunkerParser.quantity_return quantity416 = null;

        ChemicalChunkerParser.asAstate_return asAstate417 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN418 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity419 = null;

        ChemicalChunkerParser.asAstate_return asAstate420 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure421 = null;

        ChemicalChunkerParser.quantity_return quantity422 = null;

        ChemicalChunkerParser.asAstate_return asAstate423 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure424 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:2: ( ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) )
            int alt149=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt149=1;
                }
                break;
            case 38:
            case 40:
            case 43:
            case 44:
            case 61:
            case 66:
            case 69:
            case 81:
            case 88:
            case 149:
                {
                alt149=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:5: numberCompoundReference ( quantity | asAstate )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21971_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21971);
                    numberCompoundReference415=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference415.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:29: ( quantity | asAstate )
                    int alt147=2;
                    switch ( input.LA(1) ) {
                    case 71:
                    case 128:
                    case 141:
                    case 144:
                        {
                        alt147=1;
                        }
                        break;
                    case 45:
                        {
                        alt147=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 0, input);

                        throw nvae;
                    }

                    switch (alt147) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:30: quantity
                            {
                            pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21974_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21974);
                            quantity416=quantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity416.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:41: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21978_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21978);
                            asAstate417=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate417.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:54: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    {
                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21984_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21984);
                    potentialUnnamedMoleculeStructureNN418=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN418.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:90: ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    int alt148=3;
                    switch ( input.LA(1) ) {
                    case 37:
                    case 71:
                    case 128:
                    case 137:
                    case 139:
                    case 141:
                    case 144:
                        {
                        alt148=1;
                        }
                        break;
                    case 45:
                        {
                        alt148=2;
                        }
                        break;
                    case 54:
                    case 57:
                    case 123:
                    case 127:
                        {
                        alt148=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 148, 0, input);

                        throw nvae;
                    }

                    switch (alt148) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:91: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21987_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21987);
                            numericReferenceOrQuantity419=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity419.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:120: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21991_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21991);
                            asAstate420=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate420.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:131: fromProcedure
                            {
                            pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21995_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21995);
                            fromProcedure421=fromProcedure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure421.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:148: ( quantity )*
            loop150:
            do {
                int alt150=2;
                alt150 = dfa150.predict(input);
                switch (alt150) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount22000_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount22000);
            	    quantity422=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity422.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:158: ( asAstate )?
            int alt151=2;
            alt151 = dfa151.predict(input);
            switch (alt151) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22003_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22003);
                    asAstate423=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate423.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:168: ( fromProcedure )?
            int alt152=2;
            alt152 = dfa152.predict(input);
            switch (alt152) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22006_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22006);
                    fromProcedure424=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure424.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, potentialUnnamedMoleculeAmount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount2"

    public static class definiteUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:1: definiteUnnamedMolecule : definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMolecule_return retval = new ChemicalChunkerParser.definiteUnnamedMolecule_return();
        retval.start = input.LT(1);
        int definiteUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure425 = null;

        ChemicalChunkerParser.quantity_return quantity426 = null;

        ChemicalChunkerParser.asAstate_return asAstate427 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure428 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:2: ( definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:4: definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule2016_static.FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule2016);
            definiteUnnamedMoleculeStructure425=definiteUnnamedMoleculeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMoleculeStructure425.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:37: ( quantity )*
            loop153:
            do {
                int alt153=2;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_definiteUnnamedMolecule2018_static.FOLLOW_quantity_in_definiteUnnamedMolecule2018);
            	    quantity426=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity426.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:47: ( asAstate )?
            int alt154=2;
            alt154 = dfa154.predict(input);
            switch (alt154) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_definiteUnnamedMolecule2021_static.FOLLOW_asAstate_in_definiteUnnamedMolecule2021);
                    asAstate427=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate427.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:57: ( fromProcedure )?
            int alt155=2;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_definiteUnnamedMolecule2024_static.FOLLOW_fromProcedure_in_definiteUnnamedMolecule2024);
                    fromProcedure428=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure428.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, definiteUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMolecule"

    public static class definiteUnnamedMoleculeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMoleculeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:1: definiteUnnamedMoleculeStructure : ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return retval = new ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return();
        retval.start = input.LT(1);
        int definiteUnnamedMoleculeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj429 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity430 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference431 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp432 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity433 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity434 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference435 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:2: ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference )
            int alt159=2;
            switch ( input.LA(1) ) {
            case 38:
            case 39:
            case 43:
            case 44:
            case 69:
            case 149:
            case 150:
            case 151:
                {
                alt159=1;
                }
                break;
            case 37:
            case 137:
            case 139:
            case 141:
            case 144:
                {
                alt159=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:4: ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:4: ( adj )*
                    loop156:
                    do {
                        int alt156=2;
                        switch ( input.LA(1) ) {
                        case 38:
                        case 39:
                        case 43:
                        case 149:
                        case 150:
                        case 151:
                            {
                            alt156=1;
                            }
                            break;

                        }

                        switch (alt156) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    	    {
                    	    pushFollow(FOLLOW_adj_in_definiteUnnamedMoleculeStructure2034_static.FOLLOW_adj_in_definiteUnnamedMoleculeStructure2034);
                    	    adj429=adj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj429.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:9: ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    int alt158=2;
                    switch ( input.LA(1) ) {
                    case 69:
                        {
                        alt158=1;
                        }
                        break;
                    case 44:
                        {
                        alt158=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 0, input);

                        throw nvae;
                    }

                    switch (alt158) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:10: nnchementity numericOrIdentifierCompoundReference
                            {
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2038_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2038);
                            nnchementity430=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity430.getTree());
                            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2040_static.FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2040);
                            numericOrIdentifierCompoundReference431=numericOrIdentifierCompoundReference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference431.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:62: jjcomp nnchementity ( numericReferenceOrQuantity )?
                            {
                            pushFollow(FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure2044_static.FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure2044);
                            jjcomp432=jjcomp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp432.getTree());
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2046_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2046);
                            nnchementity433=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity433.getTree());
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:82: ( numericReferenceOrQuantity )?
                            int alt157=2;
                            alt157 = dfa157.predict(input);
                            switch (alt157) {
                                case 1 :
                                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                                    {
                                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure2048_static.FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure2048);
                                    numericReferenceOrQuantity434=numericReferenceOrQuantity();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity434.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:113: alphanumericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2054_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2054);
                    alphanumericOrIdentifierCompoundReference435=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, definiteUnnamedMoleculeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMoleculeStructure"

    public static class potentialUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:1: potentialUnnamedMolecule : ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? );
    public final ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMolecule_return retval = new ChemicalChunkerParser.potentialUnnamedMolecule_return();
        retval.start = input.LT(1);
        int potentialUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference436 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN437 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity438 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:2: ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? )
            int alt161=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt161=1;
                }
                break;
            case 38:
            case 40:
            case 43:
            case 44:
            case 61:
            case 66:
            case 69:
            case 81:
            case 88:
            case 149:
                {
                alt161=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:4: numberCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule2063_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule2063);
                    numberCompoundReference436=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference436.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:30: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule2067_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule2067);
                    potentialUnnamedMoleculeStructureNN437=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN437.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:66: ( numericReferenceOrQuantity )?
                    int alt160=2;
                    alt160 = dfa160.predict(input);
                    switch (alt160) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule2069_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule2069);
                            numericReferenceOrQuantity438=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity438.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, potentialUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMolecule"

    public static class potentialUnnamedMoleculeStructureNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeStructureNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity );
    public final ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeStructureNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj439 = null;

        ChemicalChunkerParser.jjchem_return jjchem440 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj441 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp442 = null;

        ChemicalChunkerParser.nnstate_return nnstate443 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound444 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere445 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture446 = null;

        ChemicalChunkerParser.oscarase_return oscarase447 = null;

        ChemicalChunkerParser.jj_return jj448 = null;

        ChemicalChunkerParser.jjchem_return jjchem449 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj450 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity451 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:2: ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity )
            int alt165=2;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:4: ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:4: ( jj | jjchem | oscarcj | jjcomp )*
                    loop162:
                    do {
                        int alt162=5;
                        switch ( input.LA(1) ) {
                        case 149:
                            {
                            alt162=1;
                            }
                            break;
                        case 43:
                            {
                            alt162=2;
                            }
                            break;
                        case 38:
                            {
                            alt162=3;
                            }
                            break;
                        case 44:
                            {
                            alt162=4;
                            }
                            break;

                        }

                        switch (alt162) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:5: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2082_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2082);
                    	    jj439=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj439.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:8: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2084_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2084);
                    	    jjchem440=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem440.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:15: oscarcj
                    	    {
                    	    pushFollow(FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2086_static.FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2086);
                    	    oscarcj441=oscarcj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj441.getTree());

                    	    }
                    	    break;
                    	case 4 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:23: jjcomp
                    	    {
                    	    pushFollow(FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2088_static.FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2088);
                    	    jjcomp442=jjcomp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp442.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:32: ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase )
                    int alt163=5;
                    switch ( input.LA(1) ) {
                    case 61:
                        {
                        alt163=1;
                        }
                        break;
                    case 81:
                        {
                        alt163=2;
                        }
                        break;
                    case 66:
                        {
                        alt163=3;
                        }
                        break;
                    case 88:
                        {
                        alt163=4;
                        }
                        break;
                    case 40:
                        {
                        alt163=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 0, input);

                        throw nvae;
                    }

                    switch (alt163) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:33: nnstate
                            {
                            pushFollow(FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2093_static.FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2093);
                            nnstate443=nnstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate443.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:41: referenceToExampleCompound
                            {
                            pushFollow(FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2095_static.FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2095);
                            referenceToExampleCompound444=referenceToExampleCompound();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound444.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:68: nnatmosphere
                            {
                            pushFollow(FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2097_static.FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2097);
                            nnatmosphere445=nnatmosphere();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere445.getTree());

                            }
                            break;
                        case 4 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:81: nnmixture
                            {
                            pushFollow(FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2099_static.FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2099);
                            nnmixture446=nnmixture();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture446.getTree());

                            }
                            break;
                        case 5 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:91: oscarase
                            {
                            pushFollow(FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2101_static.FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2101);
                            oscarase447=oscarase();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase447.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:103: ( jj | jjchem | oscarcj )* nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:103: ( jj | jjchem | oscarcj )*
                    loop164:
                    do {
                        int alt164=4;
                        switch ( input.LA(1) ) {
                        case 149:
                            {
                            alt164=1;
                            }
                            break;
                        case 43:
                            {
                            alt164=2;
                            }
                            break;
                        case 38:
                            {
                            alt164=3;
                            }
                            break;

                        }

                        switch (alt164) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:104: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2107_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2107);
                    	    jj448=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj448.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:107: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2109_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2109);
                    	    jjchem449=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem449.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:114: oscarcj
                    	    {
                    	    pushFollow(FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2111_static.FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2111);
                    	    oscarcj450=oscarcj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj450.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);

                    pushFollow(FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2115_static.FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2115);
                    nnchementity451=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity451.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, potentialUnnamedMoleculeStructureNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeStructureNN"

    public static class numericReferenceOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericReferenceOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: numericReferenceOrQuantity : ( quantity | numericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.numericReferenceOrQuantity_return retval = new ChemicalChunkerParser.numericReferenceOrQuantity_return();
        retval.start = input.LT(1);
        int numericReferenceOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity452 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference453 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:2: ( quantity | numericOrIdentifierCompoundReference )
            int alt166=2;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:4: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_numericReferenceOrQuantity2125_static.FOLLOW_quantity_in_numericReferenceOrQuantity2125);
                    quantity452=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity452.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:15: numericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2129_static.FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2129);
                    numericOrIdentifierCompoundReference453=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference453.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, numericReferenceOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericReferenceOrQuantity"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: asAstate : inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas454 = null;

        ChemicalChunkerParser.dt_return dt455 = null;

        ChemicalChunkerParser.jj_return jj456 = null;

        ChemicalChunkerParser.jjchem_return jjchem457 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj458 = null;

        ChemicalChunkerParser.nnstate_return nnstate459 = null;

        ChemicalChunkerParser.quantity_return quantity460 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:2: ( inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:4: inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate2138_static.FOLLOW_inas_in_asAstate2138);
            inas454=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas454.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:9: ( dt )?
            int alt167=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt167=1;
                    }
                    break;
            }

            switch (alt167) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate2140_static.FOLLOW_dt_in_asAstate2140);
                    dt455=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt455.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:13: ( jj | jjchem | oscarcj )*
            loop168:
            do {
                int alt168=4;
                switch ( input.LA(1) ) {
                case 149:
                    {
                    alt168=1;
                    }
                    break;
                case 43:
                    {
                    alt168=2;
                    }
                    break;
                case 38:
                    {
                    alt168=3;
                    }
                    break;

                }

                switch (alt168) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate2144_static.FOLLOW_jj_in_asAstate2144);
            	    jj456=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj456.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate2146_static.FOLLOW_jjchem_in_asAstate2146);
            	    jjchem457=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem457.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:24: oscarcj
            	    {
            	    pushFollow(FOLLOW_oscarcj_in_asAstate2148_static.FOLLOW_oscarcj_in_asAstate2148);
            	    oscarcj458=oscarcj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj458.getTree());

            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate2152_static.FOLLOW_nnstate_in_asAstate2152);
            nnstate459=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate459.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:42: ( quantity )*
            loop169:
            do {
                int alt169=2;
                alt169 = dfa169.predict(input);
                switch (alt169) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate2154_static.FOLLOW_quantity_in_asAstate2154);
            	    quantity460=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity460.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: alphanumericOrIdentifierCompoundReference : allIdentifierTypesOtherThanCD -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD461 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypesOtherThanCD=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypesOtherThanCD");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:3: ( allIdentifierTypesOtherThanCD -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:5: allIdentifierTypesOtherThanCD
            {
            pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2165_static.FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2165);
            allIdentifierTypesOtherThanCD461=allIdentifierTypesOtherThanCD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypesOtherThanCD.add(allIdentifierTypesOtherThanCD461.getTree());


            // AST REWRITE
            // elements: allIdentifierTypesOtherThanCD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:35: -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:38: ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_allIdentifierTypesOtherThanCD.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: numberCompoundReference : ( cd {...}?) -> ^( REFERENCETOCOMPOUND cd ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd462 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:3: ( ( cd {...}?) -> ^( REFERENCETOCOMPOUND cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:5: ( cd {...}?)
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:5: ( cd {...}?)
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:6: cd {...}?
            {
            pushFollow(FOLLOW_cd_in_numberCompoundReference2184_static.FOLLOW_cd_in_numberCompoundReference2184);
            cd462=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd462.getTree());
            if ( !((!cdHasRoleOtherThanIdentifier(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "numberCompoundReference", "!cdHasRoleOtherThanIdentifier(input)");
            }

            }



            // AST REWRITE
            // elements: cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:50: -> ^( REFERENCETOCOMPOUND cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:53: ^( REFERENCETOCOMPOUND cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: numericOrIdentifierCompoundReference : allIdentifierTypes -> ^( REFERENCETOCOMPOUND allIdentifierTypes ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes463 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypes=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:3: ( allIdentifierTypes -> ^( REFERENCETOCOMPOUND allIdentifierTypes ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:5: allIdentifierTypes
            {
            pushFollow(FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2205_static.FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2205);
            allIdentifierTypes463=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypes.add(allIdentifierTypes463.getTree());


            // AST REWRITE
            // elements: allIdentifierTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:24: -> ^( REFERENCETOCOMPOUND allIdentifierTypes )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:27: ^( REFERENCETOCOMPOUND allIdentifierTypes )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_allIdentifierTypes.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node464 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node465 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:14: ( quantity1Node | quantity2Node )
            int alt170=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt170=1;
                }
                break;
            case 71:
            case 128:
            case 144:
                {
                alt170=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2225_static.FOLLOW_quantity1Node_in_quantity2225);
                    quantity1Node464=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node464.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2227_static.FOLLOW_quantity2Node_in_quantity2227);
                    quantity2Node465=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node465.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1466 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2236_static.FOLLOW_quantity1_in_quantity1Node2236);
            quantity1466=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1466.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb467 = null;

        ChemicalChunkerParser.measurements_return measurements468 = null;

        ChemicalChunkerParser.comma_return comma469 = null;

        ChemicalChunkerParser.measurements_return measurements470 = null;

        ChemicalChunkerParser.comma_return comma471 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase472 = null;

        ChemicalChunkerParser.stop_return stop473 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase474 = null;

        ChemicalChunkerParser.rrb_return rrb475 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12256_static.FOLLOW_lrb_in_quantity12256);
            lrb467=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb467.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12258_static.FOLLOW_measurements_in_quantity12258);
            measurements468=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements468.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:21: ( comma measurements )*
            loop171:
            do {
                int alt171=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 71:
                        case 128:
                        case 144:
                            {
                            alt171=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt171) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12261_static.FOLLOW_comma_in_quantity12261);
            	    comma469=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma469.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12264_static.FOLLOW_measurements_in_quantity12264);
            	    measurements470=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements470.getTree());

            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:44: ( comma preparationphrase )*
            loop172:
            do {
                int alt172=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    alt172=1;
                    }
                    break;

                }

                switch (alt172) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12269_static.FOLLOW_comma_in_quantity12269);
            	    comma471=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma471.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12271_static.FOLLOW_preparationphrase_in_quantity12271);
            	    preparationphrase472=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase472.getTree());

            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:71: ( stop preparationphrase )*
            loop173:
            do {
                int alt173=2;
                switch ( input.LA(1) ) {
                case 135:
                    {
                    alt173=1;
                    }
                    break;

                }

                switch (alt173) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12276_static.FOLLOW_stop_in_quantity12276);
            	    stop473=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop473.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12278_static.FOLLOW_preparationphrase_in_quantity12278);
            	    preparationphrase474=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase474.getTree());

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12283_static.FOLLOW_rrb_in_quantity12283);
            rrb475=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb475.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2476 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2291_static.FOLLOW_quantity2_in_quantity2Node2291);
            quantity2476=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2476.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements477 = null;

        ChemicalChunkerParser.comma_return comma478 = null;

        ChemicalChunkerParser.measurements_return measurements479 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22312_static.FOLLOW_measurements_in_quantity22312);
            measurements477=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements477.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:18: ( comma measurements )*
            loop174:
            do {
                int alt174=2;
                alt174 = dfa174.predict(input);
                switch (alt174) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22315_static.FOLLOW_comma_in_quantity22315);
            	    comma478=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma478.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22318_static.FOLLOW_measurements_in_quantity22318);
            	    measurements479=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements479.getTree());

            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd480 = null;

        ChemicalChunkerParser.nn_return nn481 = null;

        ChemicalChunkerParser.multiple_return multiple482 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes483 = null;

        ChemicalChunkerParser.dt_return dt484 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:3: ( cd nn )?
            int alt175=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 154:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 71:
                                                case 128:
                                                case 144:
                                                    {
                                                    alt175=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt175) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2331_static.FOLLOW_cd_in_measurements2331);
                    cd480=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd480.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2333_static.FOLLOW_nn_in_measurements2333);
                    nn481=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn481.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:12: ( multiple | measurementtypes )
            int alt176=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 63:
                    case 64:
                    case 65:
                    case 67:
                    case 68:
                    case 136:
                    case 154:
                        {
                        alt176=2;
                        }
                        break;
                    case 42:
                        {
                        alt176=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 176, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 1, input);

                    throw nvae;
                }

                }
                break;
            case 71:
            case 128:
                {
                alt176=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2338_static.FOLLOW_multiple_in_measurements2338);
                    multiple482=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple482.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2340_static.FOLLOW_measurementtypes_in_measurements2340);
                    measurementtypes483=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes483.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:40: ( dt )?
            int alt177=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA177_3 = input.LA(3);

                            if ( (synpred388_ChemicalChunker()) ) {
                                alt177=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt177) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2343_static.FOLLOW_dt_in_measurements2343);
                    dt484=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt484.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd485 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode486 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes487 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2351_static.FOLLOW_cd_in_multiple2351);
            cd485=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd485.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2353_static.FOLLOW_cdunicode_in_multiple2353);
            cdunicode486=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode486.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:25: ( measurementtypes )?
            int alt178=2;
            alt178 = dfa178.predict(input);
            switch (alt178) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2355_static.FOLLOW_measurementtypes_in_multiple2355);
                    measurementtypes487=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes487.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cdunicode, measurementtypes, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar488 = null;

        ChemicalChunkerParser.amount_return amount489 = null;

        ChemicalChunkerParser.mass_return mass490 = null;

        ChemicalChunkerParser.volume_return volume491 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity492 = null;

        ChemicalChunkerParser.equivalent_return equivalent493 = null;

        ChemicalChunkerParser.yield_return yield494 = null;

        ChemicalChunkerParser.percent_return percent495 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt179=8;
            alt179 = dfa179.predict(input);
            switch (alt179) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2380_static.FOLLOW_molar_in_measurementtypes2380);
                    molar488=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar488.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2382_static.FOLLOW_amount_in_measurementtypes2382);
                    amount489=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount489.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2384_static.FOLLOW_mass_in_measurementtypes2384);
                    mass490=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass490.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2386_static.FOLLOW_volume_in_measurementtypes2386);
                    volume491=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume491.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2388_static.FOLLOW_logHydrogenActivity_in_measurementtypes2388);
                    logHydrogenActivity492=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity492.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2390_static.FOLLOW_equivalent_in_measurementtypes2390);
                    equivalent493=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent493.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2392_static.FOLLOW_yield_in_measurementtypes2392);
                    yield494=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield494.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2394_static.FOLLOW_percent_in_measurementtypes2394);
                    percent495=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent495.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: molar : cd nnmolar -> ^( MOLAR cd nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd496 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar497 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:7: ( cd nnmolar -> ^( MOLAR cd nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:9: cd nnmolar
            {
            pushFollow(FOLLOW_cd_in_molar2402_static.FOLLOW_cd_in_molar2402);
            cd496=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd496.getTree());
            pushFollow(FOLLOW_nnmolar_in_molar2404_static.FOLLOW_nnmolar_in_molar2404);
            nnmolar497=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar497.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:20: -> ^( MOLAR cd nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:23: ^( MOLAR cd nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: amount : cd nnamount -> ^( AMOUNT cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd498 = null;

        ChemicalChunkerParser.nnamount_return nnamount499 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:8: ( cd nnamount -> ^( AMOUNT cd nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount2424_static.FOLLOW_cd_in_amount2424);
            cd498=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd498.getTree());
            pushFollow(FOLLOW_nnamount_in_amount2426_static.FOLLOW_nnamount_in_amount2426);
            nnamount499=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount499.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:22: -> ^( AMOUNT cd nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:25: ^( AMOUNT cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: mass : cd nnmass -> ^( MASS cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd500 = null;

        ChemicalChunkerParser.nnmass_return nnmass501 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:6: ( cd nnmass -> ^( MASS cd nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass2446_static.FOLLOW_cd_in_mass2446);
            cd500=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd500.getTree());
            pushFollow(FOLLOW_nnmass_in_mass2448_static.FOLLOW_nnmass_in_mass2448);
            nnmass501=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass501.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:17: -> ^( MASS cd nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:20: ^( MASS cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: volume : cd nnvol -> ^( VOLUME cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd502 = null;

        ChemicalChunkerParser.nnvol_return nnvol503 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:8: ( cd nnvol -> ^( VOLUME cd nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume2467_static.FOLLOW_cd_in_volume2467);
            cd502=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd502.getTree());
            pushFollow(FOLLOW_nnvol_in_volume2469_static.FOLLOW_nnvol_in_volume2469);
            nnvol503=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol503.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:19: -> ^( VOLUME cd nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:22: ^( VOLUME cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph504 = null;

        ChemicalChunkerParser.sym_return sym505 = null;

        ChemicalChunkerParser.cd_return cd506 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2489_static.FOLLOW_nnph_in_logHydrogenActivity2489);
            nnph504=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph504.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:28: ( sym )?
            int alt180=2;
            switch ( input.LA(1) ) {
                case 166:
                    {
                    alt180=1;
                    }
                    break;
            }

            switch (alt180) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2491_static.FOLLOW_sym_in_logHydrogenActivity2491);
                    sym505=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym505.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2494_static.FOLLOW_cd_in_logHydrogenActivity2494);
            cd506=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd506.getTree());


            // AST REWRITE
            // elements: nnph, cd, sym
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:1: equivalent : cd nneq -> ^( EQUIVALENT cd nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd507 = null;

        ChemicalChunkerParser.nneq_return nneq508 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:11: ( cd nneq -> ^( EQUIVALENT cd nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:13: cd nneq
            {
            pushFollow(FOLLOW_cd_in_equivalent2514_static.FOLLOW_cd_in_equivalent2514);
            cd507=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd507.getTree());
            pushFollow(FOLLOW_nneq_in_equivalent2516_static.FOLLOW_nneq_in_equivalent2516);
            nneq508=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq508.getTree());


            // AST REWRITE
            // elements: cd, nneq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:21: -> ^( EQUIVALENT cd nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:24: ^( EQUIVALENT cd nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:1: yield : ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) );
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.yield1_return yield1509 = null;

        ChemicalChunkerParser.yield2_return yield2510 = null;


        RewriteRuleSubtreeStream stream_yield2=new RewriteRuleSubtreeStream(adaptor,"rule yield2");
        RewriteRuleSubtreeStream stream_yield1=new RewriteRuleSubtreeStream(adaptor,"rule yield1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:6: ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) )
            int alt181=2;
            switch ( input.LA(1) ) {
            case 128:
                {
                alt181=1;
                }
                break;
            case 144:
                {
                alt181=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:8: yield1
                    {
                    pushFollow(FOLLOW_yield1_in_yield2533_static.FOLLOW_yield1_in_yield2533);
                    yield1509=yield1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield1.add(yield1509.getTree());


                    // AST REWRITE
                    // elements: yield1
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 370:15: -> ^( YIELD yield1 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:18: ^( YIELD yield1 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:35: yield2
                    {
                    pushFollow(FOLLOW_yield2_in_yield2544_static.FOLLOW_yield2_in_yield2544);
                    yield2510=yield2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield2.add(yield2510.getTree());


                    // AST REWRITE
                    // elements: yield2
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 370:42: -> ^( YIELD yield2 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:45: ^( YIELD yield2 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class yield1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: yield1 : nnyield ( inof | colon ) percent ;
    public final ChemicalChunkerParser.yield1_return yield1() throws RecognitionException {
        ChemicalChunkerParser.yield1_return retval = new ChemicalChunkerParser.yield1_return();
        retval.start = input.LT(1);
        int yield1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnyield_return nnyield511 = null;

        ChemicalChunkerParser.inof_return inof512 = null;

        ChemicalChunkerParser.colon_return colon513 = null;

        ChemicalChunkerParser.percent_return percent514 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:7: ( nnyield ( inof | colon ) percent )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:9: nnyield ( inof | colon ) percent
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnyield_in_yield12558_static.FOLLOW_nnyield_in_yield12558);
            nnyield511=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield511.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:17: ( inof | colon )
            int alt182=2;
            switch ( input.LA(1) ) {
            case 54:
                {
                alt182=1;
                }
                break;
            case 130:
                {
                alt182=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:18: inof
                    {
                    pushFollow(FOLLOW_inof_in_yield12561_static.FOLLOW_inof_in_yield12561);
                    inof512=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof512.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:23: colon
                    {
                    pushFollow(FOLLOW_colon_in_yield12563_static.FOLLOW_colon_in_yield12563);
                    colon513=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon513.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percent_in_yield12566_static.FOLLOW_percent_in_yield12566);
            percent514=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent514.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, yield1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield1"

    public static class yield2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: yield2 : percent nnyield ;
    public final ChemicalChunkerParser.yield2_return yield2() throws RecognitionException {
        ChemicalChunkerParser.yield2_return retval = new ChemicalChunkerParser.yield2_return();
        retval.start = input.LT(1);
        int yield2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent515 = null;

        ChemicalChunkerParser.nnyield_return nnyield516 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:7: ( percent nnyield )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:9: percent nnyield
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_percent_in_yield22572_static.FOLLOW_percent_in_yield22572);
            percent515=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent515.getTree());
            pushFollow(FOLLOW_nnyield_in_yield22574_static.FOLLOW_nnyield_in_yield22574);
            nnyield516=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield516.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, yield2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield2"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:1: percent : cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd517 = null;

        ChemicalChunkerParser.nn_return nn518 = null;

        ChemicalChunkerParser.percentsign_return percentsign519 = null;

        ChemicalChunkerParser.dash_return dash520 = null;

        ChemicalChunkerParser.cd_return cd521 = null;

        ChemicalChunkerParser.percentsign_return percentsign522 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_percentsign=new RewriteRuleSubtreeStream(adaptor,"rule percentsign");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:9: ( cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:11: cd ( nn )? percentsign ( dash cd percentsign )?
            {
            pushFollow(FOLLOW_cd_in_percent2582_static.FOLLOW_cd_in_percent2582);
            cd517=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd517.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:14: ( nn )?
            int alt183=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt183=1;
                    }
                    break;
            }

            switch (alt183) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2584_static.FOLLOW_nn_in_percent2584);
                    nn518=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn518.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percentsign_in_percent2587_static.FOLLOW_percentsign_in_percent2587);
            percentsign519=percentsign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percentsign.add(percentsign519.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:30: ( dash cd percentsign )?
            int alt184=2;
            switch ( input.LA(1) ) {
                case 134:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 144:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 136:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA184_7 = input.LA(7);

                                                            if ( (synpred401_ChemicalChunker()) ) {
                                                                alt184=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt184) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:32: dash cd percentsign
                    {
                    pushFollow(FOLLOW_dash_in_percent2591_static.FOLLOW_dash_in_percent2591);
                    dash520=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash520.getTree());
                    pushFollow(FOLLOW_cd_in_percent2593_static.FOLLOW_cd_in_percent2593);
                    cd521=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd521.getTree());
                    pushFollow(FOLLOW_percentsign_in_percent2595_static.FOLLOW_percentsign_in_percent2595);
                    percentsign522=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_percentsign.add(percentsign522.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nn, percentsign, cd, percentsign, dash, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:54: -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:57: ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:72: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_percentsign.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:88: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:94: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:98: ( percentsign )?
                if ( stream_percentsign.hasNext() ) {
                    adaptor.addChild(root_1, stream_percentsign.nextTree());

                }
                stream_percentsign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class bracketedContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:1: bracketedContent : ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 ) -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? ) ;
    public final ChemicalChunkerParser.bracketedContent_return bracketedContent() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent_return retval = new ChemicalChunkerParser.bracketedContent_return();
        retval.start = input.LT(1);
        int bracketedContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio523 = null;

        ChemicalChunkerParser.bracketedContent1_return bracketedContent1524 = null;

        ChemicalChunkerParser.bracketedContent2_return bracketedContent2525 = null;

        ChemicalChunkerParser.bracketedContent3_return bracketedContent3526 = null;


        RewriteRuleSubtreeStream stream_bracketedContent3=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent3");
        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_bracketedContent2=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent2");
        RewriteRuleSubtreeStream stream_bracketedContent1=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:17: ( ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 ) -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:19: ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:19: ( ratio )?
            int alt185=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt185=1;
                    }
                    break;
            }

            switch (alt185) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContent2629_static.FOLLOW_ratio_in_bracketedContent2629);
                    ratio523=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio523.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:27: ( bracketedContent1 | bracketedContent2 | bracketedContent3 )
            int alt186=3;
            switch ( input.LA(1) ) {
            case 131:
                {
                alt186=1;
                }
                break;
            case 141:
                {
                alt186=2;
                }
                break;
            case 137:
                {
                alt186=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:28: bracketedContent1
                    {
                    pushFollow(FOLLOW_bracketedContent1_in_bracketedContent2634_static.FOLLOW_bracketedContent1_in_bracketedContent2634);
                    bracketedContent1524=bracketedContent1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent1.add(bracketedContent1524.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:46: bracketedContent2
                    {
                    pushFollow(FOLLOW_bracketedContent2_in_bracketedContent2636_static.FOLLOW_bracketedContent2_in_bracketedContent2636);
                    bracketedContent2525=bracketedContent2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent2.add(bracketedContent2525.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:64: bracketedContent3
                    {
                    pushFollow(FOLLOW_bracketedContent3_in_bracketedContent2638_static.FOLLOW_bracketedContent3_in_bracketedContent2638);
                    bracketedContent3526=bracketedContent3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent3.add(bracketedContent3526.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedContent3, ratio, bracketedContent1, bracketedContent2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:83: -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:86: ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:96: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:103: ( bracketedContent1 )?
                if ( stream_bracketedContent1.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent1.nextTree());

                }
                stream_bracketedContent1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:122: ( bracketedContent2 )?
                if ( stream_bracketedContent2.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent2.nextTree());

                }
                stream_bracketedContent2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:141: ( bracketedContent3 )?
                if ( stream_bracketedContent3.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent3.nextTree());

                }
                stream_bracketedContent3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, bracketedContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent"

    public static class bracketedContent1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:1: bracketedContent1 : comma lrb bracketedContentContents rrb comma ;
    public final ChemicalChunkerParser.bracketedContent1_return bracketedContent1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent1_return retval = new ChemicalChunkerParser.bracketedContent1_return();
        retval.start = input.LT(1);
        int bracketedContent1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma527 = null;

        ChemicalChunkerParser.lrb_return lrb528 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents529 = null;

        ChemicalChunkerParser.rrb_return rrb530 = null;

        ChemicalChunkerParser.comma_return comma531 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:18: ( comma lrb bracketedContentContents rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:20: comma lrb bracketedContentContents rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_bracketedContent12663_static.FOLLOW_comma_in_bracketedContent12663);
            comma527=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma527.getTree());
            pushFollow(FOLLOW_lrb_in_bracketedContent12665_static.FOLLOW_lrb_in_bracketedContent12665);
            lrb528=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb528.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent12667_static.FOLLOW_bracketedContentContents_in_bracketedContent12667);
            bracketedContentContents529=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents529.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContent12669_static.FOLLOW_rrb_in_bracketedContent12669);
            rrb530=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb530.getTree());
            pushFollow(FOLLOW_comma_in_bracketedContent12671_static.FOLLOW_comma_in_bracketedContent12671);
            comma531=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma531.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, bracketedContent1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent1"

    public static class bracketedContent2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: bracketedContent2 : lrb bracketedContentContents rrb ;
    public final ChemicalChunkerParser.bracketedContent2_return bracketedContent2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent2_return retval = new ChemicalChunkerParser.bracketedContent2_return();
        retval.start = input.LT(1);
        int bracketedContent2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb532 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents533 = null;

        ChemicalChunkerParser.rrb_return rrb534 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:18: ( lrb bracketedContentContents rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:20: lrb bracketedContentContents rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedContent22677_static.FOLLOW_lrb_in_bracketedContent22677);
            lrb532=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb532.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent22679_static.FOLLOW_bracketedContentContents_in_bracketedContent22679);
            bracketedContentContents533=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents533.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContent22681_static.FOLLOW_rrb_in_bracketedContent22681);
            rrb534=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb534.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, bracketedContent2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent2"

    public static class bracketedContent3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: bracketedContent3 : lsqb bracketedContentContents rsqb ;
    public final ChemicalChunkerParser.bracketedContent3_return bracketedContent3() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent3_return retval = new ChemicalChunkerParser.bracketedContent3_return();
        retval.start = input.LT(1);
        int bracketedContent3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb535 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents536 = null;

        ChemicalChunkerParser.rsqb_return rsqb537 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:18: ( lsqb bracketedContentContents rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:20: lsqb bracketedContentContents rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_bracketedContent32687_static.FOLLOW_lsqb_in_bracketedContent32687);
            lsqb535=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb535.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent32689_static.FOLLOW_bracketedContentContents_in_bracketedContent32689);
            bracketedContentContents536=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents536.getTree());
            pushFollow(FOLLOW_rsqb_in_bracketedContent32691_static.FOLLOW_rsqb_in_bracketedContent32691);
            rsqb537=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb537.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, bracketedContent3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent3"

    public static class bracketedContentContents_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentContents"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: bracketedContentContents : ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+ ;
    public final ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentContents_return retval = new ChemicalChunkerParser.bracketedContentContents_return();
        retval.start = input.LT(1);
        int bracketedContentContents_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb538 = null;

        ChemicalChunkerParser.noun_return noun539 = null;

        ChemicalChunkerParser.bracketedContent_return bracketedContent540 = null;

        ChemicalChunkerParser.md_return md541 = null;

        ChemicalChunkerParser.percentsign_return percentsign542 = null;

        ChemicalChunkerParser.dash_return dash543 = null;

        ChemicalChunkerParser.inAll_return inAll544 = null;

        ChemicalChunkerParser.ratio_return ratio545 = null;

        ChemicalChunkerParser.conjunction_return conjunction546 = null;

        ChemicalChunkerParser.adj_return adj547 = null;

        ChemicalChunkerParser.colon_return colon548 = null;

        ChemicalChunkerParser.stop_return stop549 = null;

        ChemicalChunkerParser.numeric_return numeric550 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:25: ( ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+
            int cnt187=0;
            loop187:
            do {
                int alt187=14;
                alt187 = dfa187.predict(input);
                switch (alt187) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:28: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_bracketedContentContents2698_static.FOLLOW_verb_in_bracketedContentContents2698);
            	    verb538=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb538.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:33: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_bracketedContentContents2700_static.FOLLOW_noun_in_bracketedContentContents2700);
            	    noun539=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun539.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:38: bracketedContent
            	    {
            	    pushFollow(FOLLOW_bracketedContent_in_bracketedContentContents2702_static.FOLLOW_bracketedContent_in_bracketedContentContents2702);
            	    bracketedContent540=bracketedContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContent540.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:55: md
            	    {
            	    pushFollow(FOLLOW_md_in_bracketedContentContents2704_static.FOLLOW_md_in_bracketedContentContents2704);
            	    md541=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md541.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:58: percentsign
            	    {
            	    pushFollow(FOLLOW_percentsign_in_bracketedContentContents2706_static.FOLLOW_percentsign_in_bracketedContentContents2706);
            	    percentsign542=percentsign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign542.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:70: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_bracketedContentContents2708_static.FOLLOW_dash_in_bracketedContentContents2708);
            	    dash543=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash543.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:75: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_bracketedContentContents2710_static.FOLLOW_inAll_in_bracketedContentContents2710);
            	    inAll544=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll544.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:81: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_bracketedContentContents2712_static.FOLLOW_ratio_in_bracketedContentContents2712);
            	    ratio545=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio545.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:87: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_bracketedContentContents2714_static.FOLLOW_conjunction_in_bracketedContentContents2714);
            	    conjunction546=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction546.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:99: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_bracketedContentContents2716_static.FOLLOW_adj_in_bracketedContentContents2716);
            	    adj547=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj547.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:103: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_bracketedContentContents2718_static.FOLLOW_colon_in_bracketedContentContents2718);
            	    colon548=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon548.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:109: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_bracketedContentContents2720_static.FOLLOW_stop_in_bracketedContentContents2720);
            	    stop549=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop549.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:114: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_bracketedContentContents2722_static.FOLLOW_numeric_in_bracketedContentContents2722);
            	    numeric550=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric550.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt187 >= 1 ) break loop187;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(187, input);
                        throw eee;
                }
                cnt187++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, bracketedContentContents_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentContents"

    public static class bracketedContentInMol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:1: bracketedContentInMol : ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 ) -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? ) ;
    public final ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMol_return retval = new ChemicalChunkerParser.bracketedContentInMol_return();
        retval.start = input.LT(1);
        int bracketedContentInMol_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio551 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure1_return bracketedContentInMolStructure1552 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2553 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure3_return bracketedContentInMolStructure3554 = null;


        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure1=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure1");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure2=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure2");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure3=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:22: ( ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 ) -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:24: ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:24: ( ratio )?
            int alt188=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt188=1;
                    }
                    break;
            }

            switch (alt188) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContentInMol2731_static.FOLLOW_ratio_in_bracketedContentInMol2731);
                    ratio551=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio551.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:32: ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 )
            int alt189=3;
            switch ( input.LA(1) ) {
            case 131:
                {
                alt189=1;
                }
                break;
            case 141:
                {
                alt189=2;
                }
                break;
            case 137:
                {
                alt189=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:33: bracketedContentInMolStructure1
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2736_static.FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2736);
                    bracketedContentInMolStructure1552=bracketedContentInMolStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure1.add(bracketedContentInMolStructure1552.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:65: bracketedContentInMolStructure2
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2738_static.FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2738);
                    bracketedContentInMolStructure2553=bracketedContentInMolStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure2.add(bracketedContentInMolStructure2553.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:97: bracketedContentInMolStructure3
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2740_static.FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2740);
                    bracketedContentInMolStructure3554=bracketedContentInMolStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure3.add(bracketedContentInMolStructure3554.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedContentInMolStructure3, bracketedContentInMolStructure2, ratio, bracketedContentInMolStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:130: -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:133: ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:143: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:150: ( bracketedContentInMolStructure1 )?
                if ( stream_bracketedContentInMolStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure1.nextTree());

                }
                stream_bracketedContentInMolStructure1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:183: ( bracketedContentInMolStructure2 )?
                if ( stream_bracketedContentInMolStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure2.nextTree());

                }
                stream_bracketedContentInMolStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:216: ( bracketedContentInMolStructure3 )?
                if ( stream_bracketedContentInMolStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure3.nextTree());

                }
                stream_bracketedContentInMolStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, bracketedContentInMol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMol"

    public static class bracketedContentInMolStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:1: bracketedContentInMolStructure1 : comma lrb bracketedContentInMolContents rrb comma ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure1_return bracketedContentInMolStructure1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure1_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure1_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma555 = null;

        ChemicalChunkerParser.lrb_return lrb556 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents557 = null;

        ChemicalChunkerParser.rrb_return rrb558 = null;

        ChemicalChunkerParser.comma_return comma559 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:32: ( comma lrb bracketedContentInMolContents rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:34: comma lrb bracketedContentInMolContents rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_bracketedContentInMolStructure12765_static.FOLLOW_comma_in_bracketedContentInMolStructure12765);
            comma555=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma555.getTree());
            pushFollow(FOLLOW_lrb_in_bracketedContentInMolStructure12767_static.FOLLOW_lrb_in_bracketedContentInMolStructure12767);
            lrb556=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb556.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12769_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12769);
            bracketedContentInMolContents557=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents557.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContentInMolStructure12771_static.FOLLOW_rrb_in_bracketedContentInMolStructure12771);
            rrb558=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb558.getTree());
            pushFollow(FOLLOW_comma_in_bracketedContentInMolStructure12773_static.FOLLOW_comma_in_bracketedContentInMolStructure12773);
            comma559=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma559.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, bracketedContentInMolStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure1"

    public static class bracketedContentInMolStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:1: bracketedContentInMolStructure2 : lrb bracketedContentInMolContents rrb ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure2_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure2_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb560 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents561 = null;

        ChemicalChunkerParser.rrb_return rrb562 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:32: ( lrb bracketedContentInMolContents rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:34: lrb bracketedContentInMolContents rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedContentInMolStructure22779_static.FOLLOW_lrb_in_bracketedContentInMolStructure22779);
            lrb560=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb560.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22781_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22781);
            bracketedContentInMolContents561=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents561.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContentInMolStructure22783_static.FOLLOW_rrb_in_bracketedContentInMolStructure22783);
            rrb562=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb562.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, bracketedContentInMolStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure2"

    public static class bracketedContentInMolStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:1: bracketedContentInMolStructure3 : lsqb bracketedContentInMolContents rsqb ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure3_return bracketedContentInMolStructure3() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure3_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure3_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb563 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents564 = null;

        ChemicalChunkerParser.rsqb_return rsqb565 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:32: ( lsqb bracketedContentInMolContents rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:34: lsqb bracketedContentInMolContents rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_bracketedContentInMolStructure32789_static.FOLLOW_lsqb_in_bracketedContentInMolStructure32789);
            lsqb563=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb563.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32791_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32791);
            bracketedContentInMolContents564=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents564.getTree());
            pushFollow(FOLLOW_rsqb_in_bracketedContentInMolStructure32793_static.FOLLOW_rsqb_in_bracketedContentInMolStructure32793);
            rsqb565=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb565.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, bracketedContentInMolStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure3"

    public static class bracketedContentInMolContents_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolContents"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:1: bracketedContentInMolContents : ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )* ;
    public final ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolContents_return retval = new ChemicalChunkerParser.bracketedContentInMolContents_return();
        retval.start = input.LT(1);
        int bracketedContentInMolContents_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb566 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node567 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound568 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference569 = null;

        ChemicalChunkerParser.ratio_return ratio570 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference571 = null;

        ChemicalChunkerParser.comma_return comma572 = null;

        ChemicalChunkerParser.colon_return colon573 = null;

        ChemicalChunkerParser.stop_return stop574 = null;

        ChemicalChunkerParser.cd_return cd575 = null;

        ChemicalChunkerParser.md_return md576 = null;

        ChemicalChunkerParser.percentsign_return percentsign577 = null;

        ChemicalChunkerParser.dash_return dash578 = null;

        ChemicalChunkerParser.inAll_return inAll579 = null;

        ChemicalChunkerParser.comma_return comma580 = null;

        ChemicalChunkerParser.adj_return adj581 = null;

        ChemicalChunkerParser.colon_return colon582 = null;

        ChemicalChunkerParser.stop_return stop583 = null;

        ChemicalChunkerParser.noun_return noun584 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol585 = null;

        ChemicalChunkerParser.verb_return verb586 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node587 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound588 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference589 = null;

        ChemicalChunkerParser.ratio_return ratio590 = null;

        ChemicalChunkerParser.cd_return cd591 = null;

        ChemicalChunkerParser.md_return md592 = null;

        ChemicalChunkerParser.percentsign_return percentsign593 = null;

        ChemicalChunkerParser.dash_return dash594 = null;

        ChemicalChunkerParser.inAll_return inAll595 = null;

        ChemicalChunkerParser.conjunction_return conjunction596 = null;

        ChemicalChunkerParser.adj_return adj597 = null;

        ChemicalChunkerParser.colon_return colon598 = null;

        ChemicalChunkerParser.stop_return stop599 = null;

        ChemicalChunkerParser.noun_return noun600 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol601 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:30: ( ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol )
            int alt191=17;
            alt191 = dfa191.predict(input);
            switch (alt191) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:33: verb
                    {
                    pushFollow(FOLLOW_verb_in_bracketedContentInMolContents2800_static.FOLLOW_verb_in_bracketedContentInMolContents2800);
                    verb566=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb566.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:38: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_bracketedContentInMolContents2802_static.FOLLOW_quantity2Node_in_bracketedContentInMolContents2802);
                    quantity2Node567=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node567.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:52: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_bracketedContentInMolContents2804_static.FOLLOW_oscarCompound_in_bracketedContentInMolContents2804);
                    oscarCompound568=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound568.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:66: alphanumericOrIdentifierCompoundReference
                    {
                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2806_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2806);
                    alphanumericOrIdentifierCompoundReference569=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference569.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:108: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContentInMolContents2808_static.FOLLOW_ratio_in_bracketedContentInMolContents2808);
                    ratio570=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio570.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:114: numberCompoundReference ( comma | colon | {...}? stop )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2810_static.FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2810);
                    numberCompoundReference571=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference571.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:138: ( comma | colon | {...}? stop )
                    int alt190=3;
                    switch ( input.LA(1) ) {
                    case 131:
                        {
                        alt190=1;
                        }
                        break;
                    case 130:
                        {
                        alt190=2;
                        }
                        break;
                    case 135:
                        {
                        alt190=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 0, input);

                        throw nvae;
                    }

                    switch (alt190) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:139: comma
                            {
                            pushFollow(FOLLOW_comma_in_bracketedContentInMolContents2813_static.FOLLOW_comma_in_bracketedContentInMolContents2813);
                            comma572=comma();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma572.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:147: colon
                            {
                            pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2817_static.FOLLOW_colon_in_bracketedContentInMolContents2817);
                            colon573=colon();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon573.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:155: {...}? stop
                            {
                            if ( !((nextIsSemiColon(input))) ) {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                throw new FailedPredicateException(input, "bracketedContentInMolContents", "nextIsSemiColon(input)");
                            }
                            pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2823_static.FOLLOW_stop_in_bracketedContentInMolContents2823);
                            stop574=stop();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, stop574.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:187: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedContentInMolContents2826_static.FOLLOW_cd_in_bracketedContentInMolContents2826);
                    cd575=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd575.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:190: md
                    {
                    pushFollow(FOLLOW_md_in_bracketedContentInMolContents2828_static.FOLLOW_md_in_bracketedContentInMolContents2828);
                    md576=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md576.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:193: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_bracketedContentInMolContents2830_static.FOLLOW_percentsign_in_bracketedContentInMolContents2830);
                    percentsign577=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign577.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:205: dash
                    {
                    pushFollow(FOLLOW_dash_in_bracketedContentInMolContents2832_static.FOLLOW_dash_in_bracketedContentInMolContents2832);
                    dash578=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash578.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:210: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_bracketedContentInMolContents2834_static.FOLLOW_inAll_in_bracketedContentInMolContents2834);
                    inAll579=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll579.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:216: comma
                    {
                    pushFollow(FOLLOW_comma_in_bracketedContentInMolContents2836_static.FOLLOW_comma_in_bracketedContentInMolContents2836);
                    comma580=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma580.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:222: adj
                    {
                    pushFollow(FOLLOW_adj_in_bracketedContentInMolContents2838_static.FOLLOW_adj_in_bracketedContentInMolContents2838);
                    adj581=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj581.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:226: colon
                    {
                    pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2840_static.FOLLOW_colon_in_bracketedContentInMolContents2840);
                    colon582=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon582.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:232: stop
                    {
                    pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2842_static.FOLLOW_stop_in_bracketedContentInMolContents2842);
                    stop583=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop583.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:237: noun
                    {
                    pushFollow(FOLLOW_noun_in_bracketedContentInMolContents2844_static.FOLLOW_noun_in_bracketedContentInMolContents2844);
                    noun584=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun584.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:242: bracketedContentInMol
                    {
                    pushFollow(FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2846_static.FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2846);
                    bracketedContentInMol585=bracketedContentInMol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol585.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:265: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*
            loop192:
            do {
                int alt192=17;
                alt192 = dfa192.predict(input);
                switch (alt192) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:266: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_bracketedContentInMolContents2850_static.FOLLOW_verb_in_bracketedContentInMolContents2850);
            	    verb586=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb586.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:271: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_bracketedContentInMolContents2852_static.FOLLOW_quantity2Node_in_bracketedContentInMolContents2852);
            	    quantity2Node587=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node587.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:285: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_bracketedContentInMolContents2854_static.FOLLOW_oscarCompound_in_bracketedContentInMolContents2854);
            	    oscarCompound588=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound588.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:299: alphanumericOrIdentifierCompoundReference
            	    {
            	    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2856_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2856);
            	    alphanumericOrIdentifierCompoundReference589=alphanumericOrIdentifierCompoundReference();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference589.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:341: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_bracketedContentInMolContents2858_static.FOLLOW_ratio_in_bracketedContentInMolContents2858);
            	    ratio590=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio590.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:347: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_bracketedContentInMolContents2860_static.FOLLOW_cd_in_bracketedContentInMolContents2860);
            	    cd591=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd591.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:350: md
            	    {
            	    pushFollow(FOLLOW_md_in_bracketedContentInMolContents2862_static.FOLLOW_md_in_bracketedContentInMolContents2862);
            	    md592=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md592.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:353: percentsign
            	    {
            	    pushFollow(FOLLOW_percentsign_in_bracketedContentInMolContents2864_static.FOLLOW_percentsign_in_bracketedContentInMolContents2864);
            	    percentsign593=percentsign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign593.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:365: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_bracketedContentInMolContents2866_static.FOLLOW_dash_in_bracketedContentInMolContents2866);
            	    dash594=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash594.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:370: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_bracketedContentInMolContents2868_static.FOLLOW_inAll_in_bracketedContentInMolContents2868);
            	    inAll595=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll595.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:376: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_bracketedContentInMolContents2870_static.FOLLOW_conjunction_in_bracketedContentInMolContents2870);
            	    conjunction596=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction596.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:388: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_bracketedContentInMolContents2872_static.FOLLOW_adj_in_bracketedContentInMolContents2872);
            	    adj597=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj597.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:392: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2874_static.FOLLOW_colon_in_bracketedContentInMolContents2874);
            	    colon598=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon598.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:398: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2876_static.FOLLOW_stop_in_bracketedContentInMolContents2876);
            	    stop599=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop599.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:403: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_bracketedContentInMolContents2878_static.FOLLOW_noun_in_bracketedContentInMolContents2878);
            	    noun600=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun600.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:408: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2880_static.FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2880);
            	    bracketedContentInMol601=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol601.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, bracketedContentInMolContents_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolContents"

    public static class fromProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: fromProcedure : ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode ;
    public final ChemicalChunkerParser.fromProcedure_return fromProcedure() throws RecognitionException {
        ChemicalChunkerParser.fromProcedure_return retval = new ChemicalChunkerParser.fromProcedure_return();
        retval.start = input.LT(1);
        int fromProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.infrom_return infrom602 = null;

        ChemicalChunkerParser.inof_return inof603 = null;

        ChemicalChunkerParser.vbyield_return vbyield604 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize605 = null;

        ChemicalChunkerParser.inin_return inin606 = null;

        ChemicalChunkerParser.inby_return inby607 = null;

        ChemicalChunkerParser.infrom_return infrom608 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode609 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:14: ( ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) )
            int alt195=3;
            switch ( input.LA(1) ) {
            case 57:
                {
                alt195=1;
                }
                break;
            case 54:
                {
                alt195=2;
                }
                break;
            case 123:
            case 127:
                {
                alt195=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:17: infrom
                    {
                    pushFollow(FOLLOW_infrom_in_fromProcedure2891_static.FOLLOW_infrom_in_fromProcedure2891);
                    infrom602=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom602.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:26: {...}? inof
                    {
                    if ( !((precededByProduct(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "precededByProduct(input)");
                    }
                    pushFollow(FOLLOW_inof_in_fromProcedure2897_static.FOLLOW_inof_in_fromProcedure2897);
                    inof603=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof603.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:61: {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom )
                    {
                    if ( !((suitableVbYieldOrSynthesizeForReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "suitableVbYieldOrSynthesizeForReference(input)");
                    }
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:111: ( vbyield | vbsynthesize )
                    int alt193=2;
                    switch ( input.LA(1) ) {
                    case 127:
                        {
                        alt193=1;
                        }
                        break;
                    case 123:
                        {
                        alt193=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 193, 0, input);

                        throw nvae;
                    }

                    switch (alt193) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:112: vbyield
                            {
                            pushFollow(FOLLOW_vbyield_in_fromProcedure2904_static.FOLLOW_vbyield_in_fromProcedure2904);
                            vbyield604=vbyield();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield604.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:120: vbsynthesize
                            {
                            pushFollow(FOLLOW_vbsynthesize_in_fromProcedure2906_static.FOLLOW_vbsynthesize_in_fromProcedure2906);
                            vbsynthesize605=vbsynthesize();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize605.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:134: ( inin | inby | infrom )
                    int alt194=3;
                    switch ( input.LA(1) ) {
                    case 48:
                        {
                        alt194=1;
                        }
                        break;
                    case 52:
                        {
                        alt194=2;
                        }
                        break;
                    case 57:
                        {
                        alt194=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 194, 0, input);

                        throw nvae;
                    }

                    switch (alt194) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:135: inin
                            {
                            pushFollow(FOLLOW_inin_in_fromProcedure2910_static.FOLLOW_inin_in_fromProcedure2910);
                            inin606=inin();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin606.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:140: inby
                            {
                            pushFollow(FOLLOW_inby_in_fromProcedure2912_static.FOLLOW_inby_in_fromProcedure2912);
                            inby607=inby();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inby607.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:145: infrom
                            {
                            pushFollow(FOLLOW_infrom_in_fromProcedure2914_static.FOLLOW_infrom_in_fromProcedure2914);
                            infrom608=infrom();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom608.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_procedureNode_in_fromProcedure2918_static.FOLLOW_procedureNode_in_fromProcedure2918);
            procedureNode609=procedureNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode609.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, fromProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fromProcedure"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method610 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2925_static.FOLLOW_method_in_procedureNode2925);
            method610=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method610.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:1: method : ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral611 = null;

        ChemicalChunkerParser.nn_return nn612 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod613 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes614 = null;

        ChemicalChunkerParser.nnexample_return nnexample615 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes616 = null;

        ChemicalChunkerParser.comma_return comma617 = null;

        ChemicalChunkerParser.colon_return colon618 = null;

        ChemicalChunkerParser.inof_return inof619 = null;

        ChemicalChunkerParser.infrom_return infrom620 = null;

        ChemicalChunkerParser.submethod_return submethod621 = null;

        ChemicalChunkerParser.lrb_return lrb622 = null;

        ChemicalChunkerParser.submethod_return submethod623 = null;

        ChemicalChunkerParser.rrb_return rrb624 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:7: ( ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:5: ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:5: ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes )
            int alt198=2;
            switch ( input.LA(1) ) {
            case 73:
            case 74:
            case 154:
                {
                alt198=1;
                }
                break;
            case 81:
                {
                alt198=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }

            switch (alt198) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:6: ( nngeneral | nn )? nnmethod ( allIdentifierTypes )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:6: ( nngeneral | nn )?
                    int alt196=3;
                    switch ( input.LA(1) ) {
                        case 73:
                            {
                            alt196=1;
                            }
                            break;
                        case 154:
                            {
                            alt196=2;
                            }
                            break;
                    }

                    switch (alt196) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:7: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2946_static.FOLLOW_nngeneral_in_method2946);
                            nngeneral611=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral611.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:17: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2948_static.FOLLOW_nn_in_method2948);
                            nn612=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn612.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2952_static.FOLLOW_nnmethod_in_method2952);
                    nnmethod613=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod613.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:31: ( allIdentifierTypes )?
                    int alt197=2;
                    alt197 = dfa197.predict(input);
                    switch (alt197) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: allIdentifierTypes
                            {
                            pushFollow(FOLLOW_allIdentifierTypes_in_method2954_static.FOLLOW_allIdentifierTypes_in_method2954);
                            allIdentifierTypes614=allIdentifierTypes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes614.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:53: nnexample allIdentifierTypes
                    {
                    pushFollow(FOLLOW_nnexample_in_method2959_static.FOLLOW_nnexample_in_method2959);
                    nnexample615=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample615.getTree());
                    pushFollow(FOLLOW_allIdentifierTypes_in_method2961_static.FOLLOW_allIdentifierTypes_in_method2961);
                    allIdentifierTypes616=allIdentifierTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes616.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:83: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            loop200:
            do {
                int alt200=3;
                alt200 = dfa200.predict(input);
                switch (alt200) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:85: ( comma | colon | inof | infrom )? submethod
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:85: ( comma | colon | inof | infrom )?
            	    int alt199=5;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt199=1;
            	            }
            	            break;
            	        case 130:
            	            {
            	            alt199=2;
            	            }
            	            break;
            	        case 54:
            	            {
            	            alt199=3;
            	            }
            	            break;
            	        case 57:
            	            {
            	            alt199=4;
            	            }
            	            break;
            	    }

            	    switch (alt199) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:86: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_method2967_static.FOLLOW_comma_in_method2967);
            	            comma617=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma617.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:93: colon
            	            {
            	            pushFollow(FOLLOW_colon_in_method2970_static.FOLLOW_colon_in_method2970);
            	            colon618=colon();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon618.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:100: inof
            	            {
            	            pushFollow(FOLLOW_inof_in_method2973_static.FOLLOW_inof_in_method2973);
            	            inof619=inof();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof619.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:107: infrom
            	            {
            	            pushFollow(FOLLOW_infrom_in_method2977_static.FOLLOW_infrom_in_method2977);
            	            infrom620=infrom();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom620.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_submethod_in_method2981_static.FOLLOW_submethod_in_method2981);
            	    submethod621=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod621.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:128: lrb submethod rrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_method2985_static.FOLLOW_lrb_in_method2985);
            	    lrb622=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb622.getTree());
            	    pushFollow(FOLLOW_submethod_in_method2987_static.FOLLOW_submethod_in_method2987);
            	    submethod623=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod623.getTree());
            	    pushFollow(FOLLOW_rrb_in_method2989_static.FOLLOW_rrb_in_method2989);
            	    rrb624=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb624.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class submethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "submethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:1: submethod : ( nnmethod | nnexample ) allIdentifierTypes ;
    public final ChemicalChunkerParser.submethod_return submethod() throws RecognitionException {
        ChemicalChunkerParser.submethod_return retval = new ChemicalChunkerParser.submethod_return();
        retval.start = input.LT(1);
        int submethod_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod625 = null;

        ChemicalChunkerParser.nnexample_return nnexample626 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes627 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:11: ( ( nnmethod | nnexample ) allIdentifierTypes )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:13: ( nnmethod | nnexample ) allIdentifierTypes
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:13: ( nnmethod | nnexample )
            int alt201=2;
            switch ( input.LA(1) ) {
            case 74:
                {
                alt201=1;
                }
                break;
            case 81:
                {
                alt201=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:14: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_submethod3000_static.FOLLOW_nnmethod_in_submethod3000);
                    nnmethod625=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod625.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:23: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_submethod3002_static.FOLLOW_nnexample_in_submethod3002);
                    nnexample626=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample626.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_allIdentifierTypes_in_submethod3005_static.FOLLOW_allIdentifierTypes_in_submethod3005);
            allIdentifierTypes627=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes627.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, submethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "submethod"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: referenceToExampleCompound : nnexample allIdentifierTypes -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample628 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes629 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypes=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypes");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:28: ( nnexample allIdentifierTypes -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:2: nnexample allIdentifierTypes
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound3014_static.FOLLOW_nnexample_in_referenceToExampleCompound3014);
            nnexample628=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample628.getTree());
            pushFollow(FOLLOW_allIdentifierTypes_in_referenceToExampleCompound3016_static.FOLLOW_allIdentifierTypes_in_referenceToExampleCompound3016);
            allIdentifierTypes629=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypes.add(allIdentifierTypes629.getTree());


            // AST REWRITE
            // elements: allIdentifierTypes, nnexample
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:31: -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:34: ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                adaptor.addChild(root_1, stream_allIdentifierTypes.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv630 = null;

        ChemicalChunkerParser.adj_return adj631 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:2: ( adv | adj )
            int alt202=2;
            switch ( input.LA(1) ) {
            case 162:
            case 163:
            case 164:
            case 165:
                {
                alt202=1;
                }
                break;
            case 38:
            case 39:
            case 43:
            case 149:
            case 150:
            case 151:
                {
                alt202=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }

            switch (alt202) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj3034_static.FOLLOW_adv_in_advAdj3034);
                    adv630=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv630.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj3036_static.FOLLOW_adj_in_advAdj3036);
                    adj631=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj631.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric632 = null;

        ChemicalChunkerParser.dash_return dash633 = null;

        ChemicalChunkerParser.numeric_return numeric634 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range3043_static.FOLLOW_numeric_in_range3043);
            numeric632=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric632.getTree());
            pushFollow(FOLLOW_dash_in_range3045_static.FOLLOW_dash_in_range3045);
            dash633=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash633.getTree());
            pushFollow(FOLLOW_numeric_in_range3047_static.FOLLOW_numeric_in_range3047);
            numeric634=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric634.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure635 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles3054_static.FOLLOW_cycleStructure_in_cycles3054);
            cycleStructure635=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure635.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 404:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd636 = null;

        ChemicalChunkerParser.dashNN_return dashNN637 = null;

        ChemicalChunkerParser.nncycle_return nncycle638 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure3071_static.FOLLOW_cd_in_cycleStructure3071);
            cd636=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd636.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:21: ( dashNN )?
            int alt203=2;
            switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 43:
                case 144:
                case 149:
                case 150:
                case 151:
                case 154:
                    {
                    alt203=1;
                    }
                    break;
            }

            switch (alt203) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure3073_static.FOLLOW_dashNN_in_cycleStructure3073);
                    dashNN637=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN637.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure3076_static.FOLLOW_nncycle_in_cycleStructure3076);
            nncycle638=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle638.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj639 = null;

        ChemicalChunkerParser.nn_return nn640 = null;

        ChemicalChunkerParser.cd_return cd641 = null;

        ChemicalChunkerParser.dash_return dash642 = null;

        ChemicalChunkerParser.adj_return adj643 = null;

        ChemicalChunkerParser.nn_return nn644 = null;

        ChemicalChunkerParser.cd_return cd645 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:10: ( adj | nn | cd )
            int alt204=3;
            switch ( input.LA(1) ) {
            case 38:
            case 39:
            case 43:
            case 149:
            case 150:
            case 151:
                {
                alt204=1;
                }
                break;
            case 154:
                {
                alt204=2;
                }
                break;
            case 144:
                {
                alt204=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }

            switch (alt204) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN3084_static.FOLLOW_adj_in_dashNN3084);
                    adj639=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj639.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN3086_static.FOLLOW_nn_in_dashNN3086);
                    nn640=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn640.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN3088_static.FOLLOW_cd_in_dashNN3088);
                    cd641=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd641.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:22: ( dash ( adj | nn | cd ) )*
            loop206:
            do {
                int alt206=2;
                switch ( input.LA(1) ) {
                case 134:
                    {
                    alt206=1;
                    }
                    break;

                }

                switch (alt206) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN3092_static.FOLLOW_dash_in_dashNN3092);
            	    dash642=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash642.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:28: ( adj | nn | cd )
            	    int alt205=3;
            	    switch ( input.LA(1) ) {
            	    case 38:
            	    case 39:
            	    case 43:
            	    case 149:
            	    case 150:
            	    case 151:
            	        {
            	        alt205=1;
            	        }
            	        break;
            	    case 154:
            	        {
            	        alt205=2;
            	        }
            	        break;
            	    case 144:
            	        {
            	        alt205=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 205, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt205) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN3095_static.FOLLOW_adj_in_dashNN3095);
            	            adj643=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj643.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN3097_static.FOLLOW_nn_in_dashNN3097);
            	            nn644=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn644.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN3099_static.FOLLOW_cd_in_dashNN3099);
            	            cd645=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd645.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratioOrBracketedRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratioOrBracketedRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: ratioOrBracketedRatio : ( lrb ratio rrb | ratio );
    public final ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio() throws RecognitionException {
        ChemicalChunkerParser.ratioOrBracketedRatio_return retval = new ChemicalChunkerParser.ratioOrBracketedRatio_return();
        retval.start = input.LT(1);
        int ratioOrBracketedRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb646 = null;

        ChemicalChunkerParser.ratio_return ratio647 = null;

        ChemicalChunkerParser.rrb_return rrb648 = null;

        ChemicalChunkerParser.ratio_return ratio649 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:23: ( lrb ratio rrb | ratio )
            int alt207=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt207=1;
                }
                break;
            case 144:
                {
                alt207=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }

            switch (alt207) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:25: lrb ratio rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lrb_in_ratioOrBracketedRatio3110_static.FOLLOW_lrb_in_ratioOrBracketedRatio3110);
                    lrb646=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb646.getTree());
                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3112_static.FOLLOW_ratio_in_ratioOrBracketedRatio3112);
                    ratio647=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio647.getTree());
                    pushFollow(FOLLOW_rrb_in_ratioOrBracketedRatio3114_static.FOLLOW_rrb_in_ratioOrBracketedRatio3114);
                    rrb648=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb648.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:41: ratio
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3118_static.FOLLOW_ratio_in_ratioOrBracketedRatio3118);
                    ratio649=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio649.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, ratioOrBracketedRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratioOrBracketedRatio"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:1: ratio : cdRatio -> ^( RATIO cdRatio ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatio_return cdRatio650 = null;


        RewriteRuleSubtreeStream stream_cdRatio=new RewriteRuleSubtreeStream(adaptor,"rule cdRatio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:7: ( cdRatio -> ^( RATIO cdRatio ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:9: cdRatio
            {
            pushFollow(FOLLOW_cdRatio_in_ratio3125_static.FOLLOW_cdRatio_in_ratio3125);
            cdRatio650=cdRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdRatio.add(cdRatio650.getTree());


            // AST REWRITE
            // elements: cdRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:17: -> ^( RATIO cdRatio )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:20: ^( RATIO cdRatio )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                adaptor.addChild(root_1, stream_cdRatio.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class cdRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:1: cdRatio : cd ( colon cd {...}?)+ ;
    public final ChemicalChunkerParser.cdRatio_return cdRatio() throws RecognitionException {
        ChemicalChunkerParser.cdRatio_return retval = new ChemicalChunkerParser.cdRatio_return();
        retval.start = input.LT(1);
        int cdRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd651 = null;

        ChemicalChunkerParser.colon_return colon652 = null;

        ChemicalChunkerParser.cd_return cd653 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:9: ( cd ( colon cd {...}?)+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:11: cd ( colon cd {...}?)+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cdRatio3140_static.FOLLOW_cd_in_cdRatio3140);
            cd651=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd651.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:14: ( colon cd {...}?)+
            int cnt208=0;
            loop208:
            do {
                int alt208=2;
                switch ( input.LA(1) ) {
                case 130:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 144:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA208_5 = input.LA(5);

                                if ( (synpred479_ChemicalChunker()) ) {
                                    alt208=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt208) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:15: colon cd {...}?
            	    {
            	    pushFollow(FOLLOW_colon_in_cdRatio3143_static.FOLLOW_colon_in_cdRatio3143);
            	    colon652=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon652.getTree());
            	    pushFollow(FOLLOW_cd_in_cdRatio3145_static.FOLLOW_cd_in_cdRatio3145);
            	    cd653=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd653.getTree());
            	    if ( !((!followedByQuantityUnits(input))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "cdRatio", "!followedByQuantityUnits(input)");
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt208 >= 1 ) break loop208;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(208, input);
                        throw eee;
                }
                cnt208++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, cdRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdRatio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure654 = null;

        ChemicalChunkerParser.comma_return comma655 = null;

        ChemicalChunkerParser.citationContent_return citationContent656 = null;

        ChemicalChunkerParser.comma_return comma657 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:9: ( citationStructure | comma citationContent comma )
            int alt209=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt209=1;
                }
                break;
            case 131:
                {
                alt209=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation3157_static.FOLLOW_citationStructure_in_citation3157);
                    citationStructure654=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure654.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation3159_static.FOLLOW_comma_in_citation3159);
                    comma655=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma655.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation3161_static.FOLLOW_citationContent_in_citation3161);
                    citationContent656=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent656.getTree());
                    pushFollow(FOLLOW_comma_in_citation3163_static.FOLLOW_comma_in_citation3163);
                    comma657=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma657.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent658 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure3171_static.FOLLOW_citationContent_in_citationStructure3171);
            citationContent658=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent658.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb659 = null;

        ChemicalChunkerParser.nnp_return nnp660 = null;

        ChemicalChunkerParser.fw_return fw661 = null;

        ChemicalChunkerParser.cd_return cd662 = null;

        ChemicalChunkerParser.conjunction_return conjunction663 = null;

        ChemicalChunkerParser.nnp_return nnp664 = null;

        ChemicalChunkerParser.fw_return fw665 = null;

        ChemicalChunkerParser.cd_return cd666 = null;

        ChemicalChunkerParser.conjunction_return conjunction667 = null;

        ChemicalChunkerParser.rrb_return rrb668 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent3187_static.FOLLOW_lrb_in_citationContent3187);
            lrb659=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb659.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:24: ( nnp | fw | cd | conjunction )
            int alt210=4;
            switch ( input.LA(1) ) {
            case 156:
                {
                alt210=1;
                }
                break;
            case 147:
                {
                alt210=2;
                }
                break;
            case 144:
                {
                alt210=3;
                }
                break;
            case 131:
            case 143:
                {
                alt210=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent3190_static.FOLLOW_nnp_in_citationContent3190);
                    nnp660=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp660.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent3192_static.FOLLOW_fw_in_citationContent3192);
                    fw661=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw661.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent3194_static.FOLLOW_cd_in_citationContent3194);
                    cd662=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd662.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent3196_static.FOLLOW_conjunction_in_citationContent3196);
                    conjunction663=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction663.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:48: ( nnp | fw | cd | conjunction )+
            int cnt211=0;
            loop211:
            do {
                int alt211=5;
                switch ( input.LA(1) ) {
                case 156:
                    {
                    alt211=1;
                    }
                    break;
                case 147:
                    {
                    alt211=2;
                    }
                    break;
                case 144:
                    {
                    alt211=3;
                    }
                    break;
                case 131:
                case 143:
                    {
                    alt211=4;
                    }
                    break;

                }

                switch (alt211) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent3200_static.FOLLOW_nnp_in_citationContent3200);
            	    nnp664=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp664.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent3202_static.FOLLOW_fw_in_citationContent3202);
            	    fw665=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw665.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent3204_static.FOLLOW_cd_in_citationContent3204);
            	    cd666=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd666.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent3206_static.FOLLOW_conjunction_in_citationContent3206);
            	    conjunction667=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction667.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt211 >= 1 ) break loop211;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(211, input);
                        throw eee;
                }
                cnt211++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent3210_static.FOLLOW_rrb_in_citationContent3210);
            rrb668=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb668.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class allIdentifierTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allIdentifierTypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:1: allIdentifierTypes : ( allIdentifierTypesOtherThanCD | cd {...}?);
    public final ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes() throws RecognitionException {
        ChemicalChunkerParser.allIdentifierTypes_return retval = new ChemicalChunkerParser.allIdentifierTypes_return();
        retval.start = input.LT(1);
        int allIdentifierTypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD669 = null;

        ChemicalChunkerParser.cd_return cd670 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:20: ( allIdentifierTypesOtherThanCD | cd {...}?)
            int alt212=2;
            switch ( input.LA(1) ) {
            case 37:
            case 137:
            case 139:
            case 141:
                {
                alt212=1;
                }
                break;
            case 144:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    int LA212_3 = input.LA(3);

                    if ( (synpred488_ChemicalChunker()) ) {
                        alt212=1;
                    }
                    else if ( (true) ) {
                        alt212=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }

            switch (alt212) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:22: allIdentifierTypesOtherThanCD
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3220_static.FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3220);
                    allIdentifierTypesOtherThanCD669=allIdentifierTypesOtherThanCD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypesOtherThanCD669.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:54: cd {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_allIdentifierTypes3224_static.FOLLOW_cd_in_allIdentifierTypes3224);
                    cd670=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd670.getTree());
                    if ( !((!cdHasRoleOtherThanIdentifier(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "allIdentifierTypes", "!cdHasRoleOtherThanIdentifier(input)");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, allIdentifierTypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allIdentifierTypes"

    public static class allIdentifierTypesOtherThanCD_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allIdentifierTypesOtherThanCD"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:1: allIdentifierTypesOtherThanCD : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | {...}? bracketedNumeric );
    public final ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD() throws RecognitionException {
        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return retval = new ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return();
        retval.start = input.LT(1);
        int allIdentifierTypesOtherThanCD_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference671 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier672 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum673 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric674 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:31: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | {...}? bracketedNumeric )
            int alt213=4;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt213=1;
                }
                break;
            case 139:
            case 144:
                {
                alt213=2;
                }
                break;
            case 141:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 144:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 139:
                                {
                                alt213=2;
                                }
                                break;
                            case 142:
                                {
                                alt213=4;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 213, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 213, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 139:
                        {
                        alt213=2;
                        }
                        break;
                    case 37:
                        {
                        alt213=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 3, input);

                    throw nvae;
                }

                }
                break;
            case 37:
                {
                alt213=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }

            switch (alt213) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:33: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3233_static.FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3233);
                    squareBracketedReference671=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference671.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:58: identifierOrBracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3235_static.FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3235);
                    identifierOrBracketedIdentifier672=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier672.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:90: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3237_static.FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3237);
                    cdAlphanum673=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum673.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:101: {...}? bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((notFollowedByBracketedYear(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "allIdentifierTypesOtherThanCD", "notFollowedByBracketedYear(input)");
                    }
                    pushFollow(FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3240_static.FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3240);
                    bracketedNumeric674=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric674.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, allIdentifierTypesOtherThanCD_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allIdentifierTypesOtherThanCD"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric675 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric676 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:27: ( numeric | bracketedNumeric )
            int alt214=2;
            switch ( input.LA(1) ) {
            case 37:
            case 144:
                {
                alt214=1;
                }
                break;
            case 141:
                {
                alt214=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }

            switch (alt214) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric3248_static.FOLLOW_numeric_in_numericOrBracketedNumeric3248);
                    numeric675=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric675.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3252_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3252);
                    bracketedNumeric676=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric676.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb677 = null;

        ChemicalChunkerParser.numeric_return numeric678 = null;

        ChemicalChunkerParser.rrb_return rrb679 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric3260_static.FOLLOW_lrb_in_bracketedNumeric3260);
            lrb677=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb677.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric3262_static.FOLLOW_numeric_in_bracketedNumeric3262);
            numeric678=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric678.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric3264_static.FOLLOW_rrb_in_bracketedNumeric3264);
            rrb679=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb679.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb680 = null;

        ChemicalChunkerParser.numeric_return numeric681 = null;

        ChemicalChunkerParser.rsqb_return rsqb682 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:26: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:28: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference3271_static.FOLLOW_lsqb_in_squareBracketedReference3271);
            lsqb680=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb680.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference3273_static.FOLLOW_numeric_in_squareBracketedReference3273);
            numeric681=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric681.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference3275_static.FOLLOW_rsqb_in_squareBracketedReference3275);
            rsqb682=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb682.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd683 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier684 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier685 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt216=2;
            switch ( input.LA(1) ) {
            case 139:
            case 144:
                {
                alt216=1;
                }
                break;
            case 141:
                {
                alt216=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }

            switch (alt216) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:35: ( cd )?
                    int alt215=2;
                    switch ( input.LA(1) ) {
                        case 144:
                            {
                            alt215=1;
                            }
                            break;
                    }

                    switch (alt215) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier3282_static.FOLLOW_cd_in_identifierOrBracketedIdentifier3282);
                            cd683=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd683.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3285_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3285);
                    nnidentifier684=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier684.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3289_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3289);
                    bracketedIdentifier685=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier685.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb686 = null;

        ChemicalChunkerParser.cd_return cd687 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier688 = null;

        ChemicalChunkerParser.rrb_return rrb689 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:21: ( lrb ( cd )? nnidentifier rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier3297_static.FOLLOW_lrb_in_bracketedIdentifier3297);
            lrb686=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb686.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:28: ( cd )?
            int alt217=2;
            switch ( input.LA(1) ) {
                case 144:
                    {
                    alt217=1;
                    }
                    break;
            }

            switch (alt217) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier3299_static.FOLLOW_cd_in_bracketedIdentifier3299);
                    cd687=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd687.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier3302_static.FOLLOW_nnidentifier_in_bracketedIdentifier3302);
            nnidentifier688=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier688.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier3304_static.FOLLOW_rrb_in_bracketedIdentifier3304);
            rrb689=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb689.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:1: adj : ( jj | jjr | jjs | jjchem | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj690 = null;

        ChemicalChunkerParser.jjr_return jjr691 = null;

        ChemicalChunkerParser.jjs_return jjs692 = null;

        ChemicalChunkerParser.jjchem_return jjchem693 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj694 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn695 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:5: ( jj | jjr | jjs | jjchem | oscarcj | oscarrn )
            int alt218=6;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt218=1;
                }
                break;
            case 150:
                {
                alt218=2;
                }
                break;
            case 151:
                {
                alt218=3;
                }
                break;
            case 43:
                {
                alt218=4;
                }
                break;
            case 38:
                {
                alt218=5;
                }
                break;
            case 39:
                {
                alt218=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }

            switch (alt218) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj3312_static.FOLLOW_jj_in_adj3312);
                    jj690=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj690.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj3314_static.FOLLOW_jjr_in_adj3314);
                    jjr691=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr691.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj3316_static.FOLLOW_jjs_in_adj3316);
                    jjs692=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs692.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:18: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj3318_static.FOLLOW_jjchem_in_adj3318);
                    jjchem693=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem693.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:25: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj3320_static.FOLLOW_oscarcj_in_adj3320);
                    oscarcj694=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj694.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj3322_static.FOLLOW_oscarrn_in_adj3322);
                    oscarrn695=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn695.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb696 = null;

        ChemicalChunkerParser.rbr_return rbr697 = null;

        ChemicalChunkerParser.rp_return rp698 = null;

        ChemicalChunkerParser.rbs_return rbs699 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:5: ( rb | rbr | rp | rbs )
            int alt219=4;
            switch ( input.LA(1) ) {
            case 162:
                {
                alt219=1;
                }
                break;
            case 163:
                {
                alt219=2;
                }
                break;
            case 165:
                {
                alt219=3;
                }
                break;
            case 164:
                {
                alt219=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }

            switch (alt219) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv3329_static.FOLLOW_rb_in_adv3329);
                    rb696=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb696.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv3331_static.FOLLOW_rbr_in_adv3331);
                    rbr697=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr697.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv3333_static.FOLLOW_rp_in_adv3333);
                    rp698=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp698.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv3335_static.FOLLOW_rbs_in_adv3335);
                    rbs699=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs699.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt700 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss701 = null;

        ChemicalChunkerParser.wrb_return wrb702 = null;

        ChemicalChunkerParser.ex_return ex703 = null;

        ChemicalChunkerParser.pdt_return pdt704 = null;

        ChemicalChunkerParser.wp_return wp705 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt220=6;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt220=1;
                }
                break;
            case 177:
                {
                alt220=2;
                }
                break;
            case 178:
                {
                alt220=3;
                }
                break;
            case 146:
                {
                alt220=4;
                }
                break;
            case 158:
                {
                alt220=5;
                }
                break;
            case 176:
                {
                alt220=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }

            switch (alt220) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause3342_static.FOLLOW_wdt_in_clause3342);
                    wdt700=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt700.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause3344_static.FOLLOW_wp_poss_in_clause3344);
                    wp_poss701=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss701.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause3346_static.FOLLOW_wrb_in_clause3346);
                    wrb702=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb702.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause3348_static.FOLLOW_ex_in_clause3348);
                    ex703=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex703.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause3350_static.FOLLOW_pdt_in_clause3350);
                    pdt704=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt704.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause3352_static.FOLLOW_wp_in_clause3352);
                    wp705=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp705.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc706 = null;

        ChemicalChunkerParser.comma_return comma707 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:13: ( cc | comma )
            int alt221=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt221=1;
                }
                break;
            case 131:
                {
                alt221=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }

            switch (alt221) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction3359_static.FOLLOW_cc_in_conjunction3359);
                    cc706=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc706.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction3361_static.FOLLOW_comma_in_conjunction3361);
                    comma707=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma707.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in708 = null;

        ChemicalChunkerParser.inafter_return inafter709 = null;

        ChemicalChunkerParser.inas_return inas710 = null;

        ChemicalChunkerParser.inbefore_return inbefore711 = null;

        ChemicalChunkerParser.inby_return inby712 = null;

        ChemicalChunkerParser.infor_return infor713 = null;

        ChemicalChunkerParser.infrom_return infrom714 = null;

        ChemicalChunkerParser.inin_return inin715 = null;

        ChemicalChunkerParser.ininto_return ininto716 = null;

        ChemicalChunkerParser.inof_return inof717 = null;

        ChemicalChunkerParser.inoff_return inoff718 = null;

        ChemicalChunkerParser.inon_return inon719 = null;

        ChemicalChunkerParser.inover_return inover720 = null;

        ChemicalChunkerParser.inunder_return inunder721 = null;

        ChemicalChunkerParser.invia_return invia722 = null;

        ChemicalChunkerParser.inwith_return inwith723 = null;

        ChemicalChunkerParser.inwithout_return inwithout724 = null;

        ChemicalChunkerParser.to_return to725 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt222=18;
            switch ( input.LA(1) ) {
            case 148:
                {
                alt222=1;
                }
                break;
            case 47:
                {
                alt222=2;
                }
                break;
            case 45:
                {
                alt222=3;
                }
                break;
            case 46:
                {
                alt222=4;
                }
                break;
            case 52:
                {
                alt222=5;
                }
                break;
            case 56:
                {
                alt222=6;
                }
                break;
            case 57:
                {
                alt222=7;
                }
                break;
            case 48:
                {
                alt222=8;
                }
                break;
            case 49:
                {
                alt222=9;
                }
                break;
            case 54:
                {
                alt222=10;
                }
                break;
            case 60:
                {
                alt222=11;
                }
                break;
            case 55:
                {
                alt222=12;
                }
                break;
            case 59:
                {
                alt222=13;
                }
                break;
            case 58:
                {
                alt222=14;
                }
                break;
            case 53:
                {
                alt222=15;
                }
                break;
            case 50:
                {
                alt222=16;
                }
                break;
            case 51:
                {
                alt222=17;
                }
                break;
            case 167:
                {
                alt222=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }

            switch (alt222) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll3368_static.FOLLOW_in_in_inAll3368);
                    in708=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in708.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll3370_static.FOLLOW_inafter_in_inAll3370);
                    inafter709=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter709.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll3372_static.FOLLOW_inas_in_inAll3372);
                    inas710=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas710.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll3374_static.FOLLOW_inbefore_in_inAll3374);
                    inbefore711=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore711.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll3376_static.FOLLOW_inby_in_inAll3376);
                    inby712=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby712.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll3378_static.FOLLOW_infor_in_inAll3378);
                    infor713=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor713.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll3380_static.FOLLOW_infrom_in_inAll3380);
                    infrom714=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom714.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll3382_static.FOLLOW_inin_in_inAll3382);
                    inin715=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin715.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll3384_static.FOLLOW_ininto_in_inAll3384);
                    ininto716=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto716.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll3386_static.FOLLOW_inof_in_inAll3386);
                    inof717=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof717.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll3388_static.FOLLOW_inoff_in_inAll3388);
                    inoff718=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff718.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll3390_static.FOLLOW_inon_in_inAll3390);
                    inon719=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon719.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll3392_static.FOLLOW_inover_in_inAll3392);
                    inover720=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover720.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll3394_static.FOLLOW_inunder_in_inAll3394);
                    inunder721=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder721.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll3396_static.FOLLOW_invia_in_inAll3396);
                    invia722=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia722.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll3398_static.FOLLOW_inwith_in_inAll3398);
                    inwith723=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith723.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll3400_static.FOLLOW_inwithout_in_inAll3400);
                    inwithout724=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout724.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll3402_static.FOLLOW_to_in_inAll3402);
                    to725=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to725.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in726 = null;

        ChemicalChunkerParser.inas_return inas727 = null;

        ChemicalChunkerParser.inbefore_return inbefore728 = null;

        ChemicalChunkerParser.inby_return inby729 = null;

        ChemicalChunkerParser.infor_return infor730 = null;

        ChemicalChunkerParser.infrom_return infrom731 = null;

        ChemicalChunkerParser.inin_return inin732 = null;

        ChemicalChunkerParser.ininto_return ininto733 = null;

        ChemicalChunkerParser.inof_return inof734 = null;

        ChemicalChunkerParser.inoff_return inoff735 = null;

        ChemicalChunkerParser.inon_return inon736 = null;

        ChemicalChunkerParser.inover_return inover737 = null;

        ChemicalChunkerParser.inunder_return inunder738 = null;

        ChemicalChunkerParser.invia_return invia739 = null;

        ChemicalChunkerParser.inwith_return inwith740 = null;

        ChemicalChunkerParser.inwithout_return inwithout741 = null;

        ChemicalChunkerParser.to_return to742 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt223=17;
            switch ( input.LA(1) ) {
            case 148:
                {
                alt223=1;
                }
                break;
            case 45:
                {
                alt223=2;
                }
                break;
            case 46:
                {
                alt223=3;
                }
                break;
            case 52:
                {
                alt223=4;
                }
                break;
            case 56:
                {
                alt223=5;
                }
                break;
            case 57:
                {
                alt223=6;
                }
                break;
            case 48:
                {
                alt223=7;
                }
                break;
            case 49:
                {
                alt223=8;
                }
                break;
            case 54:
                {
                alt223=9;
                }
                break;
            case 60:
                {
                alt223=10;
                }
                break;
            case 55:
                {
                alt223=11;
                }
                break;
            case 59:
                {
                alt223=12;
                }
                break;
            case 58:
                {
                alt223=13;
                }
                break;
            case 53:
                {
                alt223=14;
                }
                break;
            case 50:
                {
                alt223=15;
                }
                break;
            case 51:
                {
                alt223=16;
                }
                break;
            case 167:
                {
                alt223=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }

            switch (alt223) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3409_static.FOLLOW_in_in_inMost3409);
                    in726=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in726.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3411_static.FOLLOW_inas_in_inMost3411);
                    inas727=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas727.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3413_static.FOLLOW_inbefore_in_inMost3413);
                    inbefore728=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore728.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3415_static.FOLLOW_inby_in_inMost3415);
                    inby729=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby729.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3417_static.FOLLOW_infor_in_inMost3417);
                    infor730=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor730.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3419_static.FOLLOW_infrom_in_inMost3419);
                    infrom731=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom731.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3421_static.FOLLOW_inin_in_inMost3421);
                    inin732=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin732.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3423_static.FOLLOW_ininto_in_inMost3423);
                    ininto733=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto733.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3425_static.FOLLOW_inof_in_inMost3425);
                    inof734=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof734.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3427_static.FOLLOW_inoff_in_inMost3427);
                    inoff735=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff735.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3429_static.FOLLOW_inon_in_inMost3429);
                    inon736=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon736.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3431_static.FOLLOW_inover_in_inMost3431);
                    inover737=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover737.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3433_static.FOLLOW_inunder_in_inMost3433);
                    inunder738=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder738.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3435_static.FOLLOW_invia_in_inMost3435);
                    invia739=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia739.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3437_static.FOLLOW_inwith_in_inMost3437);
                    inwith740=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith740.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3439_static.FOLLOW_inwithout_in_inMost3439);
                    inwithout741=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout741.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3441_static.FOLLOW_to_in_inMost3441);
                    to742=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to742.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd743 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum744 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:9: ( cd | cdAlphanum )
            int alt224=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt224=1;
                }
                break;
            case 37:
                {
                alt224=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }

            switch (alt224) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3448_static.FOLLOW_cd_in_numeric3448);
                    cd743=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd743.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3450_static.FOLLOW_cdAlphanum_in_numeric3450);
                    cdAlphanum744=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum744.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal745=(Token)match(input,37,FOLLOW_37_in_cdAlphanum3458_static.FOLLOW_37_in_cdAlphanum3458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_37.add(string_literal745);

            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3460_static.FOLLOW_TOKEN_in_cdAlphanum3460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN746);



            // AST REWRITE
            // elements: TOKEN, 37
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_37.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:9: 'OSCAR-CJ' TOKEN
            {
            string_literal747=(Token)match(input,38,FOLLOW_38_in_oscarcj3473_static.FOLLOW_38_in_oscarcj3473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal747);

            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3475_static.FOLLOW_TOKEN_in_oscarcj3475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN748);



            // AST REWRITE
            // elements: TOKEN, 38
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:9: 'OSCAR-RN' TOKEN
            {
            string_literal749=(Token)match(input,39,FOLLOW_39_in_oscarrn3488_static.FOLLOW_39_in_oscarrn3488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal749);

            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3490_static.FOLLOW_TOKEN_in_oscarrn3490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN750);



            // AST REWRITE
            // elements: 39, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:10: 'OSCAR-ASE' TOKEN
            {
            string_literal751=(Token)match(input,40,FOLLOW_40_in_oscarase3503_static.FOLLOW_40_in_oscarase3503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal751);

            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3505_static.FOLLOW_TOKEN_in_oscarase3505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN752);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:11: 'TM-UNICODE' TOKEN
            {
            string_literal753=(Token)match(input,41,FOLLOW_41_in_tmunicode3518_static.FOLLOW_41_in_tmunicode3518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal753);

            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3520_static.FOLLOW_TOKEN_in_tmunicode3520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN754);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal755=null;
        Token TOKEN756=null;

        Object string_literal755_tree=null;
        Object TOKEN756_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:11: 'CD-UNICODE' TOKEN
            {
            string_literal755=(Token)match(input,42,FOLLOW_42_in_cdunicode3533_static.FOLLOW_42_in_cdunicode3533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal755);

            TOKEN756=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3535_static.FOLLOW_TOKEN_in_cdunicode3535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN756);



            // AST REWRITE
            // elements: 42, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 441:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal757=null;
        Token TOKEN758=null;

        Object string_literal757_tree=null;
        Object TOKEN758_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:8: 'JJ-CHEM' TOKEN
            {
            string_literal757=(Token)match(input,43,FOLLOW_43_in_jjchem3548_static.FOLLOW_43_in_jjchem3548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal757);

            TOKEN758=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3550_static.FOLLOW_TOKEN_in_jjchem3550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN758);



            // AST REWRITE
            // elements: 43, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal759=null;
        Token TOKEN760=null;

        Object string_literal759_tree=null;
        Object TOKEN760_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal759=(Token)match(input,44,FOLLOW_44_in_jjcomp3563_static.FOLLOW_44_in_jjcomp3563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal759);

            TOKEN760=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3565_static.FOLLOW_TOKEN_in_jjcomp3565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN760);



            // AST REWRITE
            // elements: 44, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal761=null;
        Token TOKEN762=null;

        Object string_literal761_tree=null;
        Object TOKEN762_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:6: 'IN-AS' TOKEN
            {
            string_literal761=(Token)match(input,45,FOLLOW_45_in_inas3579_static.FOLLOW_45_in_inas3579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal761);

            TOKEN762=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3581_static.FOLLOW_TOKEN_in_inas3581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN762);



            // AST REWRITE
            // elements: 45, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal763=null;
        Token TOKEN764=null;

        Object string_literal763_tree=null;
        Object TOKEN764_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:10: 'IN-BEFORE' TOKEN
            {
            string_literal763=(Token)match(input,46,FOLLOW_46_in_inbefore3594_static.FOLLOW_46_in_inbefore3594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal763);

            TOKEN764=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3596_static.FOLLOW_TOKEN_in_inbefore3596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN764);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal765=null;
        Token TOKEN766=null;

        Object string_literal765_tree=null;
        Object TOKEN766_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:9: 'IN-AFTER' TOKEN
            {
            string_literal765=(Token)match(input,47,FOLLOW_47_in_inafter3609_static.FOLLOW_47_in_inafter3609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal765);

            TOKEN766=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3611_static.FOLLOW_TOKEN_in_inafter3611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN766);



            // AST REWRITE
            // elements: 47, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal767=null;
        Token TOKEN768=null;

        Object string_literal767_tree=null;
        Object TOKEN768_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:6: 'IN-IN' TOKEN
            {
            string_literal767=(Token)match(input,48,FOLLOW_48_in_inin3624_static.FOLLOW_48_in_inin3624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal767);

            TOKEN768=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3626_static.FOLLOW_TOKEN_in_inin3626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN768);



            // AST REWRITE
            // elements: TOKEN, 48
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal769=null;
        Token TOKEN770=null;

        Object string_literal769_tree=null;
        Object TOKEN770_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:8: 'IN-INTO' TOKEN
            {
            string_literal769=(Token)match(input,49,FOLLOW_49_in_ininto3639_static.FOLLOW_49_in_ininto3639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal769);

            TOKEN770=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3641_static.FOLLOW_TOKEN_in_ininto3641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN770);



            // AST REWRITE
            // elements: TOKEN, 49
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal771=null;
        Token TOKEN772=null;

        Object string_literal771_tree=null;
        Object TOKEN772_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:8: 'IN-WITH' TOKEN
            {
            string_literal771=(Token)match(input,50,FOLLOW_50_in_inwith3654_static.FOLLOW_50_in_inwith3654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal771);

            TOKEN772=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3656_static.FOLLOW_TOKEN_in_inwith3656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN772);



            // AST REWRITE
            // elements: 50, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal773=null;
        Token TOKEN774=null;

        Object string_literal773_tree=null;
        Object TOKEN774_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:11: 'IN-WITHOUT' TOKEN
            {
            string_literal773=(Token)match(input,51,FOLLOW_51_in_inwithout3669_static.FOLLOW_51_in_inwithout3669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal773);

            TOKEN774=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3671_static.FOLLOW_TOKEN_in_inwithout3671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN774);



            // AST REWRITE
            // elements: 51, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal775=null;
        Token TOKEN776=null;

        Object string_literal775_tree=null;
        Object TOKEN776_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:6: 'IN-BY' TOKEN
            {
            string_literal775=(Token)match(input,52,FOLLOW_52_in_inby3684_static.FOLLOW_52_in_inby3684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal775);

            TOKEN776=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3686_static.FOLLOW_TOKEN_in_inby3686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN776);



            // AST REWRITE
            // elements: TOKEN, 52
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 452:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal777=null;
        Token TOKEN778=null;

        Object string_literal777_tree=null;
        Object TOKEN778_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:7: 'IN-VIA' TOKEN
            {
            string_literal777=(Token)match(input,53,FOLLOW_53_in_invia3699_static.FOLLOW_53_in_invia3699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal777);

            TOKEN778=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3701_static.FOLLOW_TOKEN_in_invia3701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN778);



            // AST REWRITE
            // elements: TOKEN, 53
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal779=null;
        Token TOKEN780=null;

        Object string_literal779_tree=null;
        Object TOKEN780_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:6: 'IN-OF' TOKEN
            {
            string_literal779=(Token)match(input,54,FOLLOW_54_in_inof3714_static.FOLLOW_54_in_inof3714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal779);

            TOKEN780=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3716_static.FOLLOW_TOKEN_in_inof3716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN780);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal781=null;
        Token TOKEN782=null;

        Object string_literal781_tree=null;
        Object TOKEN782_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:6: 'IN-ON' TOKEN
            {
            string_literal781=(Token)match(input,55,FOLLOW_55_in_inon3729_static.FOLLOW_55_in_inon3729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal781);

            TOKEN782=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3731_static.FOLLOW_TOKEN_in_inon3731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN782);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal783=null;
        Token TOKEN784=null;

        Object string_literal783_tree=null;
        Object TOKEN784_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:7: 'IN-FOR' TOKEN
            {
            string_literal783=(Token)match(input,56,FOLLOW_56_in_infor3744_static.FOLLOW_56_in_infor3744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal783);

            TOKEN784=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3746_static.FOLLOW_TOKEN_in_infor3746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN784);



            // AST REWRITE
            // elements: 56, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 456:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal785=null;
        Token TOKEN786=null;

        Object string_literal785_tree=null;
        Object TOKEN786_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:8: 'IN-FROM' TOKEN
            {
            string_literal785=(Token)match(input,57,FOLLOW_57_in_infrom3759_static.FOLLOW_57_in_infrom3759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal785);

            TOKEN786=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3761_static.FOLLOW_TOKEN_in_infrom3761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN786);



            // AST REWRITE
            // elements: TOKEN, 57
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal787=null;
        Token TOKEN788=null;

        Object string_literal787_tree=null;
        Object TOKEN788_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:9: 'IN-UNDER' TOKEN
            {
            string_literal787=(Token)match(input,58,FOLLOW_58_in_inunder3774_static.FOLLOW_58_in_inunder3774); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal787);

            TOKEN788=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3776_static.FOLLOW_TOKEN_in_inunder3776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN788);



            // AST REWRITE
            // elements: TOKEN, 58
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 458:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal789=null;
        Token TOKEN790=null;

        Object string_literal789_tree=null;
        Object TOKEN790_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:8: 'IN-OVER' TOKEN
            {
            string_literal789=(Token)match(input,59,FOLLOW_59_in_inover3789_static.FOLLOW_59_in_inover3789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal789);

            TOKEN790=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3791_static.FOLLOW_TOKEN_in_inover3791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN790);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 459:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal791=null;
        Token TOKEN792=null;

        Object string_literal791_tree=null;
        Object TOKEN792_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:7: 'IN-OFF' TOKEN
            {
            string_literal791=(Token)match(input,60,FOLLOW_60_in_inoff3804_static.FOLLOW_60_in_inoff3804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal791);

            TOKEN792=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3806_static.FOLLOW_TOKEN_in_inoff3806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN792);



            // AST REWRITE
            // elements: TOKEN, 60
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal793=null;
        Token TOKEN794=null;

        Object string_literal793_tree=null;
        Object TOKEN794_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:9: 'NN-STATE' TOKEN
            {
            string_literal793=(Token)match(input,61,FOLLOW_61_in_nnstate3821_static.FOLLOW_61_in_nnstate3821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal793);

            TOKEN794=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3823_static.FOLLOW_TOKEN_in_nnstate3823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN794);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal795=null;
        Token TOKEN796=null;

        Object string_literal795_tree=null;
        Object TOKEN796_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:8: 'NN-TIME' TOKEN
            {
            string_literal795=(Token)match(input,62,FOLLOW_62_in_nntime3836_static.FOLLOW_62_in_nntime3836); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal795);

            TOKEN796=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3838_static.FOLLOW_TOKEN_in_nntime3838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN796);



            // AST REWRITE
            // elements: 62, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal797=null;
        Token TOKEN798=null;

        Object string_literal797_tree=null;
        Object TOKEN798_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:8: 'NN-MASS' TOKEN
            {
            string_literal797=(Token)match(input,63,FOLLOW_63_in_nnmass3851_static.FOLLOW_63_in_nnmass3851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal797);

            TOKEN798=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3853_static.FOLLOW_TOKEN_in_nnmass3853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN798);



            // AST REWRITE
            // elements: TOKEN, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal799=null;
        Token TOKEN800=null;

        Object string_literal799_tree=null;
        Object TOKEN800_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:10: 'NN-AMOUNT' TOKEN
            {
            string_literal799=(Token)match(input,64,FOLLOW_64_in_nnamount3866_static.FOLLOW_64_in_nnamount3866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal799);

            TOKEN800=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3868_static.FOLLOW_TOKEN_in_nnamount3868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN800);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal801=null;
        Token TOKEN802=null;

        Object string_literal801_tree=null;
        Object TOKEN802_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:9: 'NN-MOLAR' TOKEN
            {
            string_literal801=(Token)match(input,65,FOLLOW_65_in_nnmolar3881_static.FOLLOW_65_in_nnmolar3881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal801);

            TOKEN802=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3883_static.FOLLOW_TOKEN_in_nnmolar3883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN802);



            // AST REWRITE
            // elements: TOKEN, 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal803=null;
        Token TOKEN804=null;

        Object string_literal803_tree=null;
        Object TOKEN804_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal803=(Token)match(input,66,FOLLOW_66_in_nnatmosphere3896_static.FOLLOW_66_in_nnatmosphere3896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal803);

            TOKEN804=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3898_static.FOLLOW_TOKEN_in_nnatmosphere3898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN804);



            // AST REWRITE
            // elements: 66, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal805=null;
        Token TOKEN806=null;

        Object string_literal805_tree=null;
        Object TOKEN806_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:6: 'NN-EQ' TOKEN
            {
            string_literal805=(Token)match(input,67,FOLLOW_67_in_nneq3911_static.FOLLOW_67_in_nneq3911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal805);

            TOKEN806=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3913_static.FOLLOW_TOKEN_in_nneq3913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN806);



            // AST REWRITE
            // elements: TOKEN, 67
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal807=null;
        Token TOKEN808=null;

        Object string_literal807_tree=null;
        Object TOKEN808_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:7: 'NN-VOL' TOKEN
            {
            string_literal807=(Token)match(input,68,FOLLOW_68_in_nnvol3926_static.FOLLOW_68_in_nnvol3926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal807);

            TOKEN808=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3928_static.FOLLOW_TOKEN_in_nnvol3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN808);



            // AST REWRITE
            // elements: TOKEN, 68
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 470:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal809=null;
        Token TOKEN810=null;

        Object string_literal809_tree=null;
        Object TOKEN810_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal809=(Token)match(input,69,FOLLOW_69_in_nnchementity3941_static.FOLLOW_69_in_nnchementity3941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal809);

            TOKEN810=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3943_static.FOLLOW_TOKEN_in_nnchementity3943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN810);



            // AST REWRITE
            // elements: 69, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal811=null;
        Token TOKEN812=null;

        Object string_literal811_tree=null;
        Object TOKEN812_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:8: 'NN-TEMP' TOKEN
            {
            string_literal811=(Token)match(input,70,FOLLOW_70_in_nntemp3956_static.FOLLOW_70_in_nntemp3956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal811);

            TOKEN812=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3958_static.FOLLOW_TOKEN_in_nntemp3958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN812);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal813=null;
        Token TOKEN814=null;

        Object string_literal813_tree=null;
        Object TOKEN814_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:6: 'NN-PH' TOKEN
            {
            string_literal813=(Token)match(input,71,FOLLOW_71_in_nnph3971_static.FOLLOW_71_in_nnph3971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal813);

            TOKEN814=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3973_static.FOLLOW_TOKEN_in_nnph3973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN814);



            // AST REWRITE
            // elements: 71, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal815=null;
        Token TOKEN816=null;

        Object string_literal815_tree=null;
        Object TOKEN816_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:9: 'NN-FLASH' TOKEN
            {
            string_literal815=(Token)match(input,72,FOLLOW_72_in_nnflash3986_static.FOLLOW_72_in_nnflash3986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal815);

            TOKEN816=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3988_static.FOLLOW_TOKEN_in_nnflash3988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN816);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 474:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal817=null;
        Token TOKEN818=null;

        Object string_literal817_tree=null;
        Object TOKEN818_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:11: 'NN-GENERAL' TOKEN
            {
            string_literal817=(Token)match(input,73,FOLLOW_73_in_nngeneral4001_static.FOLLOW_73_in_nngeneral4001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal817);

            TOKEN818=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral4003_static.FOLLOW_TOKEN_in_nngeneral4003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN818);



            // AST REWRITE
            // elements: TOKEN, 73
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal819=null;
        Token TOKEN820=null;

        Object string_literal819_tree=null;
        Object TOKEN820_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:10: 'NN-METHOD' TOKEN
            {
            string_literal819=(Token)match(input,74,FOLLOW_74_in_nnmethod4016_static.FOLLOW_74_in_nnmethod4016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal819);

            TOKEN820=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod4018_static.FOLLOW_TOKEN_in_nnmethod4018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN820);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal821=null;
        Token TOKEN822=null;

        Object string_literal821_tree=null;
        Object TOKEN822_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:12: 'NN-PRESSURE' TOKEN
            {
            string_literal821=(Token)match(input,75,FOLLOW_75_in_nnpressure4031_static.FOLLOW_75_in_nnpressure4031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal821);

            TOKEN822=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure4033_static.FOLLOW_TOKEN_in_nnpressure4033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN822);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal823=null;
        Token TOKEN824=null;

        Object string_literal823_tree=null;
        Object TOKEN824_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:10: 'NN-COLUMN' TOKEN
            {
            string_literal823=(Token)match(input,76,FOLLOW_76_in_nncolumn4046_static.FOLLOW_76_in_nncolumn4046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal823);

            TOKEN824=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn4048_static.FOLLOW_TOKEN_in_nncolumn4048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN824);



            // AST REWRITE
            // elements: TOKEN, 76
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal825=null;
        Token TOKEN826=null;

        Object string_literal825_tree=null;
        Object TOKEN826_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal825=(Token)match(input,77,FOLLOW_77_in_nnchromatography4061_static.FOLLOW_77_in_nnchromatography4061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal825);

            TOKEN826=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography4063_static.FOLLOW_TOKEN_in_nnchromatography4063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN826);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal827=null;
        Token TOKEN828=null;

        Object string_literal827_tree=null;
        Object TOKEN828_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:10: 'NN-VACUUM' TOKEN
            {
            string_literal827=(Token)match(input,78,FOLLOW_78_in_nnvacuum4076_static.FOLLOW_78_in_nnvacuum4076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal827);

            TOKEN828=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum4078_static.FOLLOW_TOKEN_in_nnvacuum4078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN828);



            // AST REWRITE
            // elements: TOKEN, 78
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal829=null;
        Token TOKEN830=null;

        Object string_literal829_tree=null;
        Object TOKEN830_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:9: 'NN-CYCLE' TOKEN
            {
            string_literal829=(Token)match(input,79,FOLLOW_79_in_nncycle4091_static.FOLLOW_79_in_nncycle4091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal829);

            TOKEN830=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle4093_static.FOLLOW_TOKEN_in_nncycle4093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN830);



            // AST REWRITE
            // elements: 79, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 481:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal831=null;
        Token TOKEN832=null;

        Object string_literal831_tree=null;
        Object TOKEN832_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:9: 'NN-TIMES' TOKEN
            {
            string_literal831=(Token)match(input,80,FOLLOW_80_in_nntimes4106_static.FOLLOW_80_in_nntimes4106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal831);

            TOKEN832=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes4108_static.FOLLOW_TOKEN_in_nntimes4108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN832);



            // AST REWRITE
            // elements: 80, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal833=null;
        Token TOKEN834=null;

        Object string_literal833_tree=null;
        Object TOKEN834_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal833=(Token)match(input,81,FOLLOW_81_in_nnexample4121_static.FOLLOW_81_in_nnexample4121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal833);

            TOKEN834=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample4123_static.FOLLOW_TOKEN_in_nnexample4123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN834);



            // AST REWRITE
            // elements: 81, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal835=null;
        Token TOKEN836=null;

        Object string_literal835_tree=null;
        Object TOKEN836_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:9: 'OSCAR-CM' TOKEN
            {
            string_literal835=(Token)match(input,82,FOLLOW_82_in_oscarcm4138_static.FOLLOW_82_in_oscarcm4138); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal835);

            TOKEN836=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm4140_static.FOLLOW_TOKEN_in_oscarcm4140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN836);



            // AST REWRITE
            // elements: TOKEN, 82
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal837=null;
        Token TOKEN838=null;

        Object string_literal837_tree=null;
        Object TOKEN838_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:7: 'VB-USE' TOKEN
            {
            string_literal837=(Token)match(input,83,FOLLOW_83_in_vbuse4155_static.FOLLOW_83_in_vbuse4155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal837);

            TOKEN838=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse4157_static.FOLLOW_TOKEN_in_vbuse4157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN838);



            // AST REWRITE
            // elements: 83, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal839=null;
        Token TOKEN840=null;

        Object string_literal839_tree=null;
        Object TOKEN840_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:10: 'VB-CHANGE' TOKEN
            {
            string_literal839=(Token)match(input,84,FOLLOW_84_in_vbchange4170_static.FOLLOW_84_in_vbchange4170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal839);

            TOKEN840=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange4172_static.FOLLOW_TOKEN_in_vbchange4172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN840);



            // AST REWRITE
            // elements: TOKEN, 84
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal841=null;
        Token TOKEN842=null;

        Object string_literal841_tree=null;
        Object TOKEN842_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal841=(Token)match(input,85,FOLLOW_85_in_vbsubmerge4185_static.FOLLOW_85_in_vbsubmerge4185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal841);

            TOKEN842=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge4187_static.FOLLOW_TOKEN_in_vbsubmerge4187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN842);



            // AST REWRITE
            // elements: 85, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal843=null;
        Token TOKEN844=null;

        Object string_literal843_tree=null;
        Object TOKEN844_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:11: 'VB-SUBJECT' TOKEN
            {
            string_literal843=(Token)match(input,86,FOLLOW_86_in_vbsubject4200_static.FOLLOW_86_in_vbsubject4200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal843);

            TOKEN844=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject4202_static.FOLLOW_TOKEN_in_vbsubject4202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN844);



            // AST REWRITE
            // elements: 86, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 492:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal845=null;
        Token TOKEN846=null;

        Object string_literal845_tree=null;
        Object TOKEN846_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:7: 'NN-ADD' TOKEN
            {
            string_literal845=(Token)match(input,87,FOLLOW_87_in_nnadd4217_static.FOLLOW_87_in_nnadd4217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal845);

            TOKEN846=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd4219_static.FOLLOW_TOKEN_in_nnadd4219); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN846);



            // AST REWRITE
            // elements: 87, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal847=null;
        Token TOKEN848=null;

        Object string_literal847_tree=null;
        Object TOKEN848_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:11: 'NN-MIXTURE' TOKEN
            {
            string_literal847=(Token)match(input,88,FOLLOW_88_in_nnmixture4232_static.FOLLOW_88_in_nnmixture4232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal847);

            TOKEN848=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture4234_static.FOLLOW_TOKEN_in_nnmixture4234); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN848);



            // AST REWRITE
            // elements: TOKEN, 88
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal849=null;
        Token TOKEN850=null;

        Object string_literal849_tree=null;
        Object TOKEN850_tree=null;
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:10: 'VB-DILUTE' TOKEN
            {
            string_literal849=(Token)match(input,89,FOLLOW_89_in_vbdilute4247_static.FOLLOW_89_in_vbdilute4247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal849);

            TOKEN850=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute4249_static.FOLLOW_TOKEN_in_vbdilute4249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN850);



            // AST REWRITE
            // elements: 89, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 497:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal851=null;
        Token TOKEN852=null;

        Object string_literal851_tree=null;
        Object TOKEN852_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:7: 'VB-ADD' TOKEN
            {
            string_literal851=(Token)match(input,90,FOLLOW_90_in_vbadd4262_static.FOLLOW_90_in_vbadd4262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal851);

            TOKEN852=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd4264_static.FOLLOW_TOKEN_in_vbadd4264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN852);



            // AST REWRITE
            // elements: 90, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal853=null;
        Token TOKEN854=null;

        Object string_literal853_tree=null;
        Object TOKEN854_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:10: 'VB-CHARGE' TOKEN
            {
            string_literal853=(Token)match(input,91,FOLLOW_91_in_vbcharge4277_static.FOLLOW_91_in_vbcharge4277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal853);

            TOKEN854=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge4279_static.FOLLOW_TOKEN_in_vbcharge4279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN854);



            // AST REWRITE
            // elements: 91, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal855=null;
        Token TOKEN856=null;

        Object string_literal855_tree=null;
        Object TOKEN856_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:11: 'VB-CONTAIN' TOKEN
            {
            string_literal855=(Token)match(input,92,FOLLOW_92_in_vbcontain4292_static.FOLLOW_92_in_vbcontain4292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal855);

            TOKEN856=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain4294_static.FOLLOW_TOKEN_in_vbcontain4294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN856);



            // AST REWRITE
            // elements: TOKEN, 92
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal857=null;
        Token TOKEN858=null;

        Object string_literal857_tree=null;
        Object TOKEN858_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:8: 'VB-DROP' TOKEN
            {
            string_literal857=(Token)match(input,93,FOLLOW_93_in_vbdrop4307_static.FOLLOW_93_in_vbdrop4307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal857);

            TOKEN858=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop4309_static.FOLLOW_TOKEN_in_vbdrop4309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN858);



            // AST REWRITE
            // elements: 93, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal859=null;
        Token TOKEN860=null;

        Object string_literal859_tree=null;
        Object TOKEN860_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:8: 'VB-FILL' TOKEN
            {
            string_literal859=(Token)match(input,94,FOLLOW_94_in_vbfill4322_static.FOLLOW_94_in_vbfill4322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal859);

            TOKEN860=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill4324_static.FOLLOW_TOKEN_in_vbfill4324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN860);



            // AST REWRITE
            // elements: 94, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal861=null;
        Token TOKEN862=null;

        Object string_literal861_tree=null;
        Object TOKEN862_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:11: 'VB-SUSPEND' TOKEN
            {
            string_literal861=(Token)match(input,95,FOLLOW_95_in_vbsuspend4337_static.FOLLOW_95_in_vbsuspend4337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal861);

            TOKEN862=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend4339_static.FOLLOW_TOKEN_in_vbsuspend4339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN862);



            // AST REWRITE
            // elements: 95, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 503:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal863=null;
        Token TOKEN864=null;

        Object string_literal863_tree=null;
        Object TOKEN864_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:9: 'VB-TREAT' TOKEN
            {
            string_literal863=(Token)match(input,96,FOLLOW_96_in_vbtreat4352_static.FOLLOW_96_in_vbtreat4352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal863);

            TOKEN864=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat4354_static.FOLLOW_TOKEN_in_vbtreat4354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN864);



            // AST REWRITE
            // elements: TOKEN, 96
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal865=null;
        Token TOKEN866=null;

        Object string_literal865_tree=null;
        Object TOKEN866_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:13: 'VB-APPARATUS' TOKEN
            {
            string_literal865=(Token)match(input,97,FOLLOW_97_in_vbapparatus4369_static.FOLLOW_97_in_vbapparatus4369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal865);

            TOKEN866=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus4371_static.FOLLOW_TOKEN_in_vbapparatus4371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN866);



            // AST REWRITE
            // elements: TOKEN, 97
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 507:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal867=null;
        Token TOKEN868=null;

        Object string_literal867_tree=null;
        Object TOKEN868_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:13: 'NN-APPARATUS' TOKEN
            {
            string_literal867=(Token)match(input,98,FOLLOW_98_in_nnapparatus4384_static.FOLLOW_98_in_nnapparatus4384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal867);

            TOKEN868=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4386_static.FOLLOW_TOKEN_in_nnapparatus4386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN868);



            // AST REWRITE
            // elements: TOKEN, 98
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal869=null;
        Token TOKEN870=null;

        Object string_literal869_tree=null;
        Object TOKEN870_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal869=(Token)match(input,99,FOLLOW_99_in_vbconcentrate4401_static.FOLLOW_99_in_vbconcentrate4401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal869);

            TOKEN870=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4403_static.FOLLOW_TOKEN_in_vbconcentrate4403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN870);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal871=null;
        Token TOKEN872=null;

        Object string_literal871_tree=null;
        Object TOKEN872_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal871=(Token)match(input,100,FOLLOW_100_in_nnconcentrate4416_static.FOLLOW_100_in_nnconcentrate4416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal871);

            TOKEN872=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4418_static.FOLLOW_TOKEN_in_nnconcentrate4418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN872);



            // AST REWRITE
            // elements: 100, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal873=null;
        Token TOKEN874=null;

        Object string_literal873_tree=null;
        Object TOKEN874_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:8: 'VB-COOL' TOKEN
            {
            string_literal873=(Token)match(input,101,FOLLOW_101_in_vbcool4433_static.FOLLOW_101_in_vbcool4433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal873);

            TOKEN874=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4435_static.FOLLOW_TOKEN_in_vbcool4435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN874);



            // AST REWRITE
            // elements: 101, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal875=null;
        Token TOKEN876=null;

        Object string_literal875_tree=null;
        Object TOKEN876_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:10: 'VB-DEGASS' TOKEN
            {
            string_literal875=(Token)match(input,102,FOLLOW_102_in_vbdegass4450_static.FOLLOW_102_in_vbdegass4450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal875);

            TOKEN876=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4452_static.FOLLOW_TOKEN_in_vbdegass4452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN876);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 518:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal877=null;
        Token TOKEN878=null;

        Object string_literal877_tree=null;
        Object TOKEN878_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal877=(Token)match(input,103,FOLLOW_103_in_vbdissolve4467_static.FOLLOW_103_in_vbdissolve4467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal877);

            TOKEN878=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4469_static.FOLLOW_TOKEN_in_vbdissolve4469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN878);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 521:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal879=null;
        Token TOKEN880=null;

        Object string_literal879_tree=null;
        Object TOKEN880_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:7: 'VB-DRY' TOKEN
            {
            string_literal879=(Token)match(input,104,FOLLOW_104_in_vbdry4484_static.FOLLOW_104_in_vbdry4484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal879);

            TOKEN880=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4486_static.FOLLOW_TOKEN_in_vbdry4486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN880);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal881=null;
        Token TOKEN882=null;

        Object string_literal881_tree=null;
        Object TOKEN882_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:7: 'NN-DRY' TOKEN
            {
            string_literal881=(Token)match(input,105,FOLLOW_105_in_nndry4499_static.FOLLOW_105_in_nndry4499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal881);

            TOKEN882=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4501_static.FOLLOW_TOKEN_in_nndry4501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN882);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal883=null;
        Token TOKEN884=null;

        Object string_literal883_tree=null;
        Object TOKEN884_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:11: 'VB-EXTRACT' TOKEN
            {
            string_literal883=(Token)match(input,106,FOLLOW_106_in_vbextract4516_static.FOLLOW_106_in_vbextract4516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal883);

            TOKEN884=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4518_static.FOLLOW_TOKEN_in_vbextract4518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN884);



            // AST REWRITE
            // elements: 106, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal885=null;
        Token TOKEN886=null;

        Object string_literal885_tree=null;
        Object TOKEN886_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:11: 'NN-EXTRACT' TOKEN
            {
            string_literal885=(Token)match(input,107,FOLLOW_107_in_nnextract4531_static.FOLLOW_107_in_nnextract4531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal885);

            TOKEN886=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4533_static.FOLLOW_TOKEN_in_nnextract4533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN886);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal887=null;
        Token TOKEN888=null;

        Object string_literal887_tree=null;
        Object TOKEN888_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:10: 'VB-FILTER' TOKEN
            {
            string_literal887=(Token)match(input,108,FOLLOW_108_in_vbfilter4548_static.FOLLOW_108_in_vbfilter4548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal887);

            TOKEN888=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4550_static.FOLLOW_TOKEN_in_vbfilter4550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN888);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 532:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal889=null;
        Token TOKEN890=null;

        Object string_literal889_tree=null;
        Object TOKEN890_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:10: 'NN-FILTER' TOKEN
            {
            string_literal889=(Token)match(input,109,FOLLOW_109_in_nnfilter4563_static.FOLLOW_109_in_nnfilter4563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal889);

            TOKEN890=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4565_static.FOLLOW_TOKEN_in_nnfilter4565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN890);



            // AST REWRITE
            // elements: TOKEN, 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal891=null;
        Token TOKEN892=null;

        Object string_literal891_tree=null;
        Object TOKEN892_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:8: 'VB-HEAT' TOKEN
            {
            string_literal891=(Token)match(input,110,FOLLOW_110_in_vbheat4580_static.FOLLOW_110_in_vbheat4580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal891);

            TOKEN892=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4582_static.FOLLOW_TOKEN_in_vbheat4582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN892);



            // AST REWRITE
            // elements: 110, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal893=null;
        Token TOKEN894=null;

        Object string_literal893_tree=null;
        Object TOKEN894_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:12: 'VB-INCREASE' TOKEN
            {
            string_literal893=(Token)match(input,111,FOLLOW_111_in_vbincrease4595_static.FOLLOW_111_in_vbincrease4595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal893);

            TOKEN894=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4597_static.FOLLOW_TOKEN_in_vbincrease4597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN894);



            // AST REWRITE
            // elements: 111, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal895=null;
        Token TOKEN896=null;

        Object string_literal895_tree=null;
        Object TOKEN896_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:11: 'VB-IMMERSE' TOKEN
            {
            string_literal895=(Token)match(input,112,FOLLOW_112_in_vbimmerse4612_static.FOLLOW_112_in_vbimmerse4612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal895);

            TOKEN896=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4614_static.FOLLOW_TOKEN_in_vbimmerse4614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN896);



            // AST REWRITE
            // elements: TOKEN, 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal897=null;
        Token TOKEN898=null;

        Object string_literal897_tree=null;
        Object TOKEN898_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:13: 'VB-PARTITION' TOKEN
            {
            string_literal897=(Token)match(input,113,FOLLOW_113_in_vbpartition4629_static.FOLLOW_113_in_vbpartition4629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal897);

            TOKEN898=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4631_static.FOLLOW_TOKEN_in_vbpartition4631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN898);



            // AST REWRITE
            // elements: 113, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal899=null;
        Token TOKEN900=null;

        Object string_literal899_tree=null;
        Object TOKEN900_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal899=(Token)match(input,114,FOLLOW_114_in_vbprecipitate4646_static.FOLLOW_114_in_vbprecipitate4646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal899);

            TOKEN900=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4648_static.FOLLOW_TOKEN_in_vbprecipitate4648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN900);



            // AST REWRITE
            // elements: 114, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal901=null;
        Token TOKEN902=null;

        Object string_literal901_tree=null;
        Object TOKEN902_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal901=(Token)match(input,115,FOLLOW_115_in_nnprecipitate4661_static.FOLLOW_115_in_nnprecipitate4661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal901);

            TOKEN902=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4663_static.FOLLOW_TOKEN_in_nnprecipitate4663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN902);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal903=null;
        Token TOKEN904=null;

        Object string_literal903_tree=null;
        Object TOKEN904_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:10: 'VB-PURIFY' TOKEN
            {
            string_literal903=(Token)match(input,116,FOLLOW_116_in_vbpurify4678_static.FOLLOW_116_in_vbpurify4678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal903);

            TOKEN904=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4680_static.FOLLOW_TOKEN_in_vbpurify4680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN904);



            // AST REWRITE
            // elements: 116, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 550:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal905=null;
        Token TOKEN906=null;

        Object string_literal905_tree=null;
        Object TOKEN906_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:10: 'NN-PURIFY' TOKEN
            {
            string_literal905=(Token)match(input,117,FOLLOW_117_in_nnpurify4693_static.FOLLOW_117_in_nnpurify4693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal905);

            TOKEN906=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4695_static.FOLLOW_TOKEN_in_nnpurify4695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN906);



            // AST REWRITE
            // elements: 117, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 551:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal907=null;
        Token TOKEN908=null;

        Object string_literal907_tree=null;
        Object TOKEN908_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:10: 'VB-QUENCH' TOKEN
            {
            string_literal907=(Token)match(input,118,FOLLOW_118_in_vbquench4710_static.FOLLOW_118_in_vbquench4710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal907);

            TOKEN908=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4712_static.FOLLOW_TOKEN_in_vbquench4712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN908);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal909=null;
        Token TOKEN910=null;

        Object string_literal909_tree=null;
        Object TOKEN910_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:11: 'VB-RECOVER' TOKEN
            {
            string_literal909=(Token)match(input,119,FOLLOW_119_in_vbrecover4727_static.FOLLOW_119_in_vbrecover4727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal909);

            TOKEN910=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4729_static.FOLLOW_TOKEN_in_vbrecover4729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN910);



            // AST REWRITE
            // elements: TOKEN, 119
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 557:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal911=null;
        Token TOKEN912=null;

        Object string_literal911_tree=null;
        Object TOKEN912_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:10: 'VB-REMOVE' TOKEN
            {
            string_literal911=(Token)match(input,120,FOLLOW_120_in_vbremove4744_static.FOLLOW_120_in_vbremove4744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal911);

            TOKEN912=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4746_static.FOLLOW_TOKEN_in_vbremove4746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN912);



            // AST REWRITE
            // elements: TOKEN, 120
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal913=null;
        Token TOKEN914=null;

        Object string_literal913_tree=null;
        Object TOKEN914_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:10: 'NN-REMOVE' TOKEN
            {
            string_literal913=(Token)match(input,121,FOLLOW_121_in_nnremove4759_static.FOLLOW_121_in_nnremove4759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal913);

            TOKEN914=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4761_static.FOLLOW_TOKEN_in_nnremove4761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN914);



            // AST REWRITE
            // elements: 121, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal915=null;
        Token TOKEN916=null;

        Object string_literal915_tree=null;
        Object TOKEN916_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:8: 'VB-STIR' TOKEN
            {
            string_literal915=(Token)match(input,122,FOLLOW_122_in_vbstir4776_static.FOLLOW_122_in_vbstir4776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal915);

            TOKEN916=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4778_static.FOLLOW_TOKEN_in_vbstir4778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN916);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal917=null;
        Token TOKEN918=null;

        Object string_literal917_tree=null;
        Object TOKEN918_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal917=(Token)match(input,123,FOLLOW_123_in_vbsynthesize4793_static.FOLLOW_123_in_vbsynthesize4793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal917);

            TOKEN918=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4795_static.FOLLOW_TOKEN_in_vbsynthesize4795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN918);



            // AST REWRITE
            // elements: 123, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 567:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:568:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal919=null;
        Token TOKEN920=null;

        Object string_literal919_tree=null;
        Object TOKEN920_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:568:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:568:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal919=(Token)match(input,124,FOLLOW_124_in_nnsynthesize4808_static.FOLLOW_124_in_nnsynthesize4808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal919);

            TOKEN920=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4810_static.FOLLOW_TOKEN_in_nnsynthesize4810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN920);



            // AST REWRITE
            // elements: TOKEN, 124
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:568:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:571:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal921=null;
        Token TOKEN922=null;

        Object string_literal921_tree=null;
        Object TOKEN922_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:571:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:571:8: 'VB-WAIT' TOKEN
            {
            string_literal921=(Token)match(input,125,FOLLOW_125_in_vbwait4825_static.FOLLOW_125_in_vbwait4825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal921);

            TOKEN922=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4827_static.FOLLOW_TOKEN_in_vbwait4827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN922);



            // AST REWRITE
            // elements: 125, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:571:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:574:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal923=null;
        Token TOKEN924=null;

        Object string_literal923_tree=null;
        Object TOKEN924_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:574:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:574:8: 'VB-WASH' TOKEN
            {
            string_literal923=(Token)match(input,126,FOLLOW_126_in_vbwash4842_static.FOLLOW_126_in_vbwash4842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal923);

            TOKEN924=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4844_static.FOLLOW_TOKEN_in_vbwash4844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN924);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 574:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:574:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal925=null;
        Token TOKEN926=null;

        Object string_literal925_tree=null;
        Object TOKEN926_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:9: 'VB-YIELD' TOKEN
            {
            string_literal925=(Token)match(input,127,FOLLOW_127_in_vbyield4859_static.FOLLOW_127_in_vbyield4859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal925);

            TOKEN926=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4861_static.FOLLOW_TOKEN_in_vbyield4861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN926);



            // AST REWRITE
            // elements: 127, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 577:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:580:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal927=null;
        Token TOKEN928=null;

        Object string_literal927_tree=null;
        Object TOKEN928_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:580:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:580:9: 'NN-YIELD' TOKEN
            {
            string_literal927=(Token)match(input,128,FOLLOW_128_in_nnyield4876_static.FOLLOW_128_in_nnyield4876); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal927);

            TOKEN928=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4878_static.FOLLOW_TOKEN_in_nnyield4878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN928);



            // AST REWRITE
            // elements: 128, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 580:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:580:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal929=null;
        Token TOKEN930=null;

        Object string_literal929_tree=null;
        Object TOKEN930_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:8: 'RB-CONJ' TOKEN
            {
            string_literal929=(Token)match(input,129,FOLLOW_129_in_rbconj4894_static.FOLLOW_129_in_rbconj4894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal929);

            TOKEN930=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4896_static.FOLLOW_TOKEN_in_rbconj4896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN930);



            // AST REWRITE
            // elements: 129, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 584:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal931=null;
        Token TOKEN932=null;

        Object string_literal931_tree=null;
        Object TOKEN932_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:7: 'COLON' TOKEN
            {
            string_literal931=(Token)match(input,130,FOLLOW_130_in_colon4909_static.FOLLOW_130_in_colon4909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal931);

            TOKEN932=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4911_static.FOLLOW_TOKEN_in_colon4911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN932);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal933=null;
        Token TOKEN934=null;

        Object string_literal933_tree=null;
        Object TOKEN934_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:7: 'COMMA' TOKEN
            {
            string_literal933=(Token)match(input,131,FOLLOW_131_in_comma4924_static.FOLLOW_131_in_comma4924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal933);

            TOKEN934=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4926_static.FOLLOW_TOKEN_in_comma4926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN934);



            // AST REWRITE
            // elements: 131, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 586:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal935=null;
        Token TOKEN936=null;

        Object string_literal935_tree=null;
        Object TOKEN936_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:7: 'APOST' TOKEN
            {
            string_literal935=(Token)match(input,132,FOLLOW_132_in_apost4939_static.FOLLOW_132_in_apost4939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal935);

            TOKEN936=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4941_static.FOLLOW_TOKEN_in_apost4941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN936);



            // AST REWRITE
            // elements: TOKEN, 132
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 587:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal937=null;
        Token TOKEN938=null;

        Object string_literal937_tree=null;
        Object TOKEN938_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:5: 'NEG' TOKEN
            {
            string_literal937=(Token)match(input,133,FOLLOW_133_in_neg4954_static.FOLLOW_133_in_neg4954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal937);

            TOKEN938=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4956_static.FOLLOW_TOKEN_in_neg4956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN938);



            // AST REWRITE
            // elements: 133, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:589:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal939=null;
        Token TOKEN940=null;

        Object string_literal939_tree=null;
        Object TOKEN940_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:589:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:589:6: 'DASH' TOKEN
            {
            string_literal939=(Token)match(input,134,FOLLOW_134_in_dash4969_static.FOLLOW_134_in_dash4969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal939);

            TOKEN940=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4971_static.FOLLOW_TOKEN_in_dash4971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN940);



            // AST REWRITE
            // elements: 134, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 589:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:589:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal941=null;
        Token TOKEN942=null;

        Object string_literal941_tree=null;
        Object TOKEN942_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:6: 'STOP' TOKEN
            {
            string_literal941=(Token)match(input,135,FOLLOW_135_in_stop4984_static.FOLLOW_135_in_stop4984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal941);

            TOKEN942=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4986_static.FOLLOW_TOKEN_in_stop4986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN942);



            // AST REWRITE
            // elements: TOKEN, 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 590:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class percentsign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percentsign"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:1: percentsign : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.percentsign_return percentsign() throws RecognitionException {
        ChemicalChunkerParser.percentsign_return retval = new ChemicalChunkerParser.percentsign_return();
        retval.start = input.LT(1);
        int percentsign_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal943=null;
        Token TOKEN944=null;

        Object string_literal943_tree=null;
        Object TOKEN944_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:12: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:13: 'NN-PERCENT' TOKEN
            {
            string_literal943=(Token)match(input,136,FOLLOW_136_in_percentsign4999_static.FOLLOW_136_in_percentsign4999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal943);

            TOKEN944=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_percentsign5001_static.FOLLOW_TOKEN_in_percentsign5001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN944);



            // AST REWRITE
            // elements: TOKEN, 136
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:32: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:35: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, percentsign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percentsign"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:592:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal945=null;
        Token TOKEN946=null;

        Object string_literal945_tree=null;
        Object TOKEN946_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:592:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:592:6: 'LSQB' TOKEN
            {
            string_literal945=(Token)match(input,137,FOLLOW_137_in_lsqb5014_static.FOLLOW_137_in_lsqb5014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal945);

            TOKEN946=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb5016_static.FOLLOW_TOKEN_in_lsqb5016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN946);



            // AST REWRITE
            // elements: 137, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 592:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:592:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal947=null;
        Token TOKEN948=null;

        Object string_literal947_tree=null;
        Object TOKEN948_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:6: 'RSQB' TOKEN
            {
            string_literal947=(Token)match(input,138,FOLLOW_138_in_rsqb5029_static.FOLLOW_138_in_rsqb5029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal947);

            TOKEN948=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb5031_static.FOLLOW_TOKEN_in_rsqb5031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN948);



            // AST REWRITE
            // elements: 138, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:595:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal949=null;
        Token TOKEN950=null;

        Object string_literal949_tree=null;
        Object TOKEN950_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:595:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:595:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal949=(Token)match(input,139,FOLLOW_139_in_nnidentifier5045_static.FOLLOW_139_in_nnidentifier5045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal949);

            TOKEN950=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier5047_static.FOLLOW_TOKEN_in_nnidentifier5047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN950);



            // AST REWRITE
            // elements: TOKEN, 139
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 595:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:595:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:598:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal951=null;
        Token TOKEN952=null;

        Object string_literal951_tree=null;
        Object TOKEN952_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:598:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:598:7: 'DT-THE' TOKEN
            {
            string_literal951=(Token)match(input,140,FOLLOW_140_in_dtTHE5062_static.FOLLOW_140_in_dtTHE5062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal951);

            TOKEN952=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE5064_static.FOLLOW_TOKEN_in_dtTHE5064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN952);



            // AST REWRITE
            // elements: TOKEN, 140
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:598:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal953=null;
        Token TOKEN954=null;

        Object string_literal953_tree=null;
        Object TOKEN954_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:5: '-LRB-' TOKEN
            {
            string_literal953=(Token)match(input,141,FOLLOW_141_in_lrb5078_static.FOLLOW_141_in_lrb5078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal953);

            TOKEN954=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb5080_static.FOLLOW_TOKEN_in_lrb5080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN954);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:601:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal955=null;
        Token TOKEN956=null;

        Object string_literal955_tree=null;
        Object TOKEN956_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:601:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:601:5: '-RRB-' TOKEN
            {
            string_literal955=(Token)match(input,142,FOLLOW_142_in_rrb5093_static.FOLLOW_142_in_rrb5093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal955);

            TOKEN956=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb5095_static.FOLLOW_TOKEN_in_rrb5095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN956);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 601:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:601:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal957=null;
        Token TOKEN958=null;

        Object string_literal957_tree=null;
        Object TOKEN958_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:4: 'CC' TOKEN
            {
            string_literal957=(Token)match(input,143,FOLLOW_143_in_cc5112_static.FOLLOW_143_in_cc5112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal957);

            TOKEN958=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc5114_static.FOLLOW_TOKEN_in_cc5114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN958);



            // AST REWRITE
            // elements: 143, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 606:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal959=null;
        Token TOKEN960=null;

        Object string_literal959_tree=null;
        Object TOKEN960_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:4: 'CD' TOKEN
            {
            string_literal959=(Token)match(input,144,FOLLOW_144_in_cd5129_static.FOLLOW_144_in_cd5129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal959);

            TOKEN960=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd5131_static.FOLLOW_TOKEN_in_cd5131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN960);



            // AST REWRITE
            // elements: 144, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 609:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal961=null;
        Token TOKEN962=null;

        Object string_literal961_tree=null;
        Object TOKEN962_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:4: 'DT' TOKEN
            {
            string_literal961=(Token)match(input,145,FOLLOW_145_in_dt5146_static.FOLLOW_145_in_dt5146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal961);

            TOKEN962=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt5148_static.FOLLOW_TOKEN_in_dt5148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN962);



            // AST REWRITE
            // elements: TOKEN, 145
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal963=null;
        Token TOKEN964=null;

        Object string_literal963_tree=null;
        Object TOKEN964_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:4: 'EX' TOKEN
            {
            string_literal963=(Token)match(input,146,FOLLOW_146_in_ex5163_static.FOLLOW_146_in_ex5163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal963);

            TOKEN964=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex5165_static.FOLLOW_TOKEN_in_ex5165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN964);



            // AST REWRITE
            // elements: TOKEN, 146
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 615:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal965=null;
        Token TOKEN966=null;

        Object string_literal965_tree=null;
        Object TOKEN966_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:4: 'FW' TOKEN
            {
            string_literal965=(Token)match(input,147,FOLLOW_147_in_fw5180_static.FOLLOW_147_in_fw5180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal965);

            TOKEN966=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw5182_static.FOLLOW_TOKEN_in_fw5182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN966);



            // AST REWRITE
            // elements: TOKEN, 147
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 618:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal967=null;
        Token TOKEN968=null;

        Object string_literal967_tree=null;
        Object TOKEN968_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:4: 'IN' TOKEN
            {
            string_literal967=(Token)match(input,148,FOLLOW_148_in_in5197_static.FOLLOW_148_in_in5197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal967);

            TOKEN968=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in5199_static.FOLLOW_TOKEN_in_in5199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN968);



            // AST REWRITE
            // elements: 148, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 621:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal969=null;
        Token TOKEN970=null;

        Object string_literal969_tree=null;
        Object TOKEN970_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:4: 'JJ' TOKEN
            {
            string_literal969=(Token)match(input,149,FOLLOW_149_in_jj5214_static.FOLLOW_149_in_jj5214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal969);

            TOKEN970=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj5216_static.FOLLOW_TOKEN_in_jj5216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN970);



            // AST REWRITE
            // elements: 149, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal971=null;
        Token TOKEN972=null;

        Object string_literal971_tree=null;
        Object TOKEN972_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:5: 'JJR' TOKEN
            {
            string_literal971=(Token)match(input,150,FOLLOW_150_in_jjr5231_static.FOLLOW_150_in_jjr5231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal971);

            TOKEN972=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr5233_static.FOLLOW_TOKEN_in_jjr5233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN972);



            // AST REWRITE
            // elements: 150, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 627:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal973=null;
        Token TOKEN974=null;

        Object string_literal973_tree=null;
        Object TOKEN974_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:5: 'JJS' TOKEN
            {
            string_literal973=(Token)match(input,151,FOLLOW_151_in_jjs5248_static.FOLLOW_151_in_jjs5248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal973);

            TOKEN974=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs5250_static.FOLLOW_TOKEN_in_jjs5250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN974);



            // AST REWRITE
            // elements: 151, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 630:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal975=null;
        Token TOKEN976=null;

        Object string_literal975_tree=null;
        Object TOKEN976_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:4: 'LS' TOKEN
            {
            string_literal975=(Token)match(input,152,FOLLOW_152_in_ls5265_static.FOLLOW_152_in_ls5265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal975);

            TOKEN976=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls5267_static.FOLLOW_TOKEN_in_ls5267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN976);



            // AST REWRITE
            // elements: 152, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 633:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal977=null;
        Token TOKEN978=null;

        Object string_literal977_tree=null;
        Object TOKEN978_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:4: 'MD' TOKEN
            {
            string_literal977=(Token)match(input,153,FOLLOW_153_in_md5282_static.FOLLOW_153_in_md5282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal977);

            TOKEN978=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5284_static.FOLLOW_TOKEN_in_md5284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN978);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 636:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:639:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal979=null;
        Token TOKEN980=null;

        Object string_literal979_tree=null;
        Object TOKEN980_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:639:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:639:4: 'NN' TOKEN
            {
            string_literal979=(Token)match(input,154,FOLLOW_154_in_nn5299_static.FOLLOW_154_in_nn5299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal979);

            TOKEN980=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5301_static.FOLLOW_TOKEN_in_nn5301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN980);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 639:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:639:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:642:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal981=null;
        Token TOKEN982=null;

        Object string_literal981_tree=null;
        Object TOKEN982_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:642:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:642:5: 'NNS' TOKEN
            {
            string_literal981=(Token)match(input,155,FOLLOW_155_in_nns5316_static.FOLLOW_155_in_nns5316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal981);

            TOKEN982=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5318_static.FOLLOW_TOKEN_in_nns5318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN982);



            // AST REWRITE
            // elements: TOKEN, 155
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 642:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:642:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:645:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal983=null;
        Token TOKEN984=null;

        Object string_literal983_tree=null;
        Object TOKEN984_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:645:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:645:5: 'NNP' TOKEN
            {
            string_literal983=(Token)match(input,156,FOLLOW_156_in_nnp5333_static.FOLLOW_156_in_nnp5333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal983);

            TOKEN984=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5335_static.FOLLOW_TOKEN_in_nnp5335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN984);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:645:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:648:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal985=null;
        Token TOKEN986=null;

        Object string_literal985_tree=null;
        Object TOKEN986_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:648:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:648:6: 'NNPS' TOKEN
            {
            string_literal985=(Token)match(input,157,FOLLOW_157_in_nnps5350_static.FOLLOW_157_in_nnps5350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal985);

            TOKEN986=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps5352_static.FOLLOW_TOKEN_in_nnps5352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN986);



            // AST REWRITE
            // elements: 157, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:648:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:651:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal987=null;
        Token TOKEN988=null;

        Object string_literal987_tree=null;
        Object TOKEN988_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:651:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:651:5: 'PDT' TOKEN
            {
            string_literal987=(Token)match(input,158,FOLLOW_158_in_pdt5367_static.FOLLOW_158_in_pdt5367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal987);

            TOKEN988=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt5369_static.FOLLOW_TOKEN_in_pdt5369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN988);



            // AST REWRITE
            // elements: TOKEN, 158
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:651:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:654:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal989=null;
        Token TOKEN990=null;

        Object string_literal989_tree=null;
        Object TOKEN990_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:654:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:654:5: 'POS' TOKEN
            {
            string_literal989=(Token)match(input,159,FOLLOW_159_in_pos5384_static.FOLLOW_159_in_pos5384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal989);

            TOKEN990=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos5386_static.FOLLOW_TOKEN_in_pos5386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN990);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 654:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:654:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:657:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal991=null;
        Token TOKEN992=null;

        Object string_literal991_tree=null;
        Object TOKEN992_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:657:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:657:5: 'PRP' TOKEN
            {
            string_literal991=(Token)match(input,160,FOLLOW_160_in_prp5401_static.FOLLOW_160_in_prp5401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal991);

            TOKEN992=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5403_static.FOLLOW_TOKEN_in_prp5403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN992);



            // AST REWRITE
            // elements: TOKEN, 160
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 657:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:657:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:660:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal993=null;
        Token TOKEN994=null;

        Object string_literal993_tree=null;
        Object TOKEN994_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:660:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:660:10: 'PRP$' TOKEN
            {
            string_literal993=(Token)match(input,161,FOLLOW_161_in_prp_poss5418_static.FOLLOW_161_in_prp_poss5418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal993);

            TOKEN994=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5420_static.FOLLOW_TOKEN_in_prp_poss5420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN994);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 660:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:660:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:663:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal995=null;
        Token TOKEN996=null;

        Object string_literal995_tree=null;
        Object TOKEN996_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:663:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:663:4: 'RB' TOKEN
            {
            string_literal995=(Token)match(input,162,FOLLOW_162_in_rb5435_static.FOLLOW_162_in_rb5435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal995);

            TOKEN996=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5437_static.FOLLOW_TOKEN_in_rb5437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN996);



            // AST REWRITE
            // elements: TOKEN, 162
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:663:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:666:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal997=null;
        Token TOKEN998=null;

        Object string_literal997_tree=null;
        Object TOKEN998_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:666:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:666:5: 'RBR' TOKEN
            {
            string_literal997=(Token)match(input,163,FOLLOW_163_in_rbr5452_static.FOLLOW_163_in_rbr5452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal997);

            TOKEN998=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5454_static.FOLLOW_TOKEN_in_rbr5454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN998);



            // AST REWRITE
            // elements: 163, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 666:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:666:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:669:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal999=null;
        Token TOKEN1000=null;

        Object string_literal999_tree=null;
        Object TOKEN1000_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:669:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:669:5: 'RBS' TOKEN
            {
            string_literal999=(Token)match(input,164,FOLLOW_164_in_rbs5469_static.FOLLOW_164_in_rbs5469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal999);

            TOKEN1000=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5471_static.FOLLOW_TOKEN_in_rbs5471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1000);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 669:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:669:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:672:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1001=null;
        Token TOKEN1002=null;

        Object string_literal1001_tree=null;
        Object TOKEN1002_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:672:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:672:4: 'RP' TOKEN
            {
            string_literal1001=(Token)match(input,165,FOLLOW_165_in_rp5486_static.FOLLOW_165_in_rp5486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal1001);

            TOKEN1002=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5488_static.FOLLOW_TOKEN_in_rp5488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1002);



            // AST REWRITE
            // elements: 165, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 672:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:672:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:675:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1003=null;
        Token TOKEN1004=null;

        Object string_literal1003_tree=null;
        Object TOKEN1004_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:675:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:675:5: 'SYM' TOKEN
            {
            string_literal1003=(Token)match(input,166,FOLLOW_166_in_sym5503_static.FOLLOW_166_in_sym5503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal1003);

            TOKEN1004=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5505_static.FOLLOW_TOKEN_in_sym5505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1004);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 675:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:675:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:678:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1005=null;
        Token TOKEN1006=null;

        Object string_literal1005_tree=null;
        Object TOKEN1006_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:678:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:678:4: 'TO' TOKEN
            {
            string_literal1005=(Token)match(input,167,FOLLOW_167_in_to5520_static.FOLLOW_167_in_to5520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal1005);

            TOKEN1006=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5522_static.FOLLOW_TOKEN_in_to5522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1006);



            // AST REWRITE
            // elements: 167, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 678:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:678:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:681:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1007=null;
        Token TOKEN1008=null;

        Object string_literal1007_tree=null;
        Object TOKEN1008_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:681:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:681:4: 'UH' TOKEN
            {
            string_literal1007=(Token)match(input,168,FOLLOW_168_in_uh5537_static.FOLLOW_168_in_uh5537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal1007);

            TOKEN1008=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5539_static.FOLLOW_TOKEN_in_uh5539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1008);



            // AST REWRITE
            // elements: 168, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 681:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:681:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:684:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1009=null;
        Token TOKEN1010=null;

        Object string_literal1009_tree=null;
        Object TOKEN1010_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:684:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:684:4: 'VB' TOKEN
            {
            string_literal1009=(Token)match(input,169,FOLLOW_169_in_vb5554_static.FOLLOW_169_in_vb5554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal1009);

            TOKEN1010=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5556_static.FOLLOW_TOKEN_in_vb5556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1010);



            // AST REWRITE
            // elements: TOKEN, 169
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 684:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:684:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:687:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1011=null;
        Token TOKEN1012=null;

        Object string_literal1011_tree=null;
        Object TOKEN1012_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:687:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:687:5: 'VBD' TOKEN
            {
            string_literal1011=(Token)match(input,170,FOLLOW_170_in_vbd5571_static.FOLLOW_170_in_vbd5571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal1011);

            TOKEN1012=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5573_static.FOLLOW_TOKEN_in_vbd5573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1012);



            // AST REWRITE
            // elements: TOKEN, 170
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 687:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:687:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:690:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1013=null;
        Token TOKEN1014=null;

        Object string_literal1013_tree=null;
        Object TOKEN1014_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:690:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:690:5: 'VBG' TOKEN
            {
            string_literal1013=(Token)match(input,171,FOLLOW_171_in_vbg5588_static.FOLLOW_171_in_vbg5588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal1013);

            TOKEN1014=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5590_static.FOLLOW_TOKEN_in_vbg5590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1014);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 690:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:690:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:693:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1015=null;
        Token TOKEN1016=null;

        Object string_literal1015_tree=null;
        Object TOKEN1016_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:693:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:693:5: 'VBN' TOKEN
            {
            string_literal1015=(Token)match(input,172,FOLLOW_172_in_vbn5605_static.FOLLOW_172_in_vbn5605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal1015);

            TOKEN1016=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5607_static.FOLLOW_TOKEN_in_vbn5607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1016);



            // AST REWRITE
            // elements: 172, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 693:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:693:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:696:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1017=null;
        Token TOKEN1018=null;

        Object string_literal1017_tree=null;
        Object TOKEN1018_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:696:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:696:5: 'VBP' TOKEN
            {
            string_literal1017=(Token)match(input,173,FOLLOW_173_in_vbp5622_static.FOLLOW_173_in_vbp5622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal1017);

            TOKEN1018=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5624_static.FOLLOW_TOKEN_in_vbp5624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1018);



            // AST REWRITE
            // elements: 173, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:696:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:699:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1019=null;
        Token TOKEN1020=null;

        Object string_literal1019_tree=null;
        Object TOKEN1020_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:699:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:699:5: 'VBZ' TOKEN
            {
            string_literal1019=(Token)match(input,174,FOLLOW_174_in_vbz5639_static.FOLLOW_174_in_vbz5639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal1019);

            TOKEN1020=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5641_static.FOLLOW_TOKEN_in_vbz5641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1020);



            // AST REWRITE
            // elements: TOKEN, 174
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 699:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:699:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:702:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1021=null;
        Token TOKEN1022=null;

        Object string_literal1021_tree=null;
        Object TOKEN1022_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:702:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:702:5: 'WDT' TOKEN
            {
            string_literal1021=(Token)match(input,175,FOLLOW_175_in_wdt5656_static.FOLLOW_175_in_wdt5656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal1021);

            TOKEN1022=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5658_static.FOLLOW_TOKEN_in_wdt5658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1022);



            // AST REWRITE
            // elements: 175, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 702:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:702:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:705:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1023=null;
        Token TOKEN1024=null;

        Object string_literal1023_tree=null;
        Object TOKEN1024_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:705:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:705:4: 'WP' TOKEN
            {
            string_literal1023=(Token)match(input,176,FOLLOW_176_in_wp5673_static.FOLLOW_176_in_wp5673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal1023);

            TOKEN1024=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5675_static.FOLLOW_TOKEN_in_wp5675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1024);



            // AST REWRITE
            // elements: TOKEN, 176
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 705:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:705:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:708:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1025=null;
        Token TOKEN1026=null;

        Object string_literal1025_tree=null;
        Object TOKEN1026_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:708:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:708:9: 'WP$' TOKEN
            {
            string_literal1025=(Token)match(input,177,FOLLOW_177_in_wp_poss5690_static.FOLLOW_177_in_wp_poss5690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal1025);

            TOKEN1026=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5692_static.FOLLOW_TOKEN_in_wp_poss5692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1026);



            // AST REWRITE
            // elements: TOKEN, 177
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 708:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:708:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 269, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:711:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1027=null;
        Token TOKEN1028=null;

        Object string_literal1027_tree=null;
        Object TOKEN1028_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:711:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:711:5: 'WRB' TOKEN
            {
            string_literal1027=(Token)match(input,178,FOLLOW_178_in_wrb5707_static.FOLLOW_178_in_wrb5707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal1027);

            TOKEN1028=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5709_static.FOLLOW_TOKEN_in_wrb5709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1028);



            // AST REWRITE
            // elements: TOKEN, 178
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 711:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:711:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 270, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:12: ( procedureNounPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:12: procedureNounPhrase
        {
        pushFollow(FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker219_static.FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker219);
        procedureNounPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:35: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:35: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker224_static.FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker224);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:53: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:53: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker226_static.FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker226);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker241_static.FOLLOW_nounphrase_in_synpred6_ChemicalChunker241);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker243_static.FOLLOW_verbphrase_in_synpred7_ChemicalChunker243);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker245_static.FOLLOW_prepphrase_in_synpred8_ChemicalChunker245);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker247_static.FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker247);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred10_ChemicalChunker252_static.FOLLOW_advAdj_in_synpred10_ChemicalChunker252);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred11_ChemicalChunker254_static.FOLLOW_colon_in_synpred11_ChemicalChunker254);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred12_ChemicalChunker259_static.FOLLOW_conjunction_in_synpred12_ChemicalChunker259);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred13_ChemicalChunker261_static.FOLLOW_rbconj_in_synpred13_ChemicalChunker261);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred14_ChemicalChunker263_static.FOLLOW_comma_in_synpred14_ChemicalChunker263);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred85_ChemicalChunker
    public final void synpred85_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:96: ( headingProcedureTerminators )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:96: headingProcedureTerminators
        {
        pushFollow(FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker478_static.FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker478);
        headingProcedureTerminators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker579_static.FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker579);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred93_ChemicalChunker610_static.FOLLOW_dt_in_synpred93_ChemicalChunker610);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred94_ChemicalChunker617_static.FOLLOW_conjunction_in_synpred94_ChemicalChunker617);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( ( conjunction )* nounphraseContent {...}?)
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )* nounphraseContent {...}?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:35: ( conjunction )*
        loop225:
        do {
            int alt225=2;
            alt225 = dfa225.predict(input);
            switch (alt225) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred95_ChemicalChunker617_static.FOLLOW_conjunction_in_synpred95_ChemicalChunker617);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop225;
            }
        } while (true);

        pushFollow(FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker620_static.FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker620);
        nounphraseContent();

        state._fsp--;
        if (state.failed) return ;
        if ( !((!followedByVBDorVBZthenVBYIELDed(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred95_ChemicalChunker", "!followedByVBDorVBZthenVBYIELDed(input)");
        }

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:112: ( prepphraseOf )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:112: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker627_static.FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker627);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:126: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:126: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker630_static.FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker630);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred98_ChemicalChunker642_static.FOLLOW_advAdj_in_synpred98_ChemicalChunker642);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:14: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:14: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker647_static.FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker647);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:29: ( ratioOrBracketedRatio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:29: ratioOrBracketedRatio
        {
        pushFollow(FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker649_static.FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker649);
        ratioOrBracketedRatio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:51: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:51: noun
        {
        pushFollow(FOLLOW_noun_in_synpred101_ChemicalChunker651_static.FOLLOW_noun_in_synpred101_ChemicalChunker651);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:56: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:56: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred102_ChemicalChunker653_static.FOLLOW_numeric_in_synpred102_ChemicalChunker653);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:64: ( bracketedContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:64: bracketedContent
        {
        pushFollow(FOLLOW_bracketedContent_in_synpred103_ChemicalChunker655_static.FOLLOW_bracketedContent_in_synpred103_ChemicalChunker655);
        bracketedContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker667_static.FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker667);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred105_ChemicalChunker698_static.FOLLOW_adj_in_synpred105_ChemicalChunker698);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred108_ChemicalChunker710_static.FOLLOW_molecule_in_synpred108_ChemicalChunker710);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:72: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:72: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred109_ChemicalChunker719_static.FOLLOW_conjunction_in_synpred109_ChemicalChunker719);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker721_static.FOLLOW_molecule_in_synpred109_ChemicalChunker721);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred111_ChemicalChunker
    public final void synpred111_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:16: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:16: adj
        {
        pushFollow(FOLLOW_adj_in_synpred111_ChemicalChunker738_static.FOLLOW_adj_in_synpred111_ChemicalChunker738);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:27: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:27: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred113_ChemicalChunker745_static.FOLLOW_molecule_in_synpred113_ChemicalChunker745);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:28: to
        {
        pushFollow(FOLLOW_to_in_synpred115_ChemicalChunker779_static.FOLLOW_to_in_synpred115_ChemicalChunker779);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred116_ChemicalChunker782_static.FOLLOW_inAll_in_synpred116_ChemicalChunker782);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:82: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:82: md
        {
        pushFollow(FOLLOW_md_in_synpred122_ChemicalChunker803_static.FOLLOW_md_in_synpred122_ChemicalChunker803);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:86: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:86: adv
        {
        pushFollow(FOLLOW_adv_in_synpred123_ChemicalChunker806_static.FOLLOW_adv_in_synpred123_ChemicalChunker806);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:91: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:91: adj
        {
        pushFollow(FOLLOW_adj_in_synpred124_ChemicalChunker809_static.FOLLOW_adj_in_synpred124_ChemicalChunker809);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:96: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:96: neg
        {
        pushFollow(FOLLOW_neg_in_synpred125_ChemicalChunker812_static.FOLLOW_neg_in_synpred125_ChemicalChunker812);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:114: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:114: md
        {
        pushFollow(FOLLOW_md_in_synpred127_ChemicalChunker820_static.FOLLOW_md_in_synpred127_ChemicalChunker820);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:118: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:118: adv
        {
        pushFollow(FOLLOW_adv_in_synpred128_ChemicalChunker823_static.FOLLOW_adv_in_synpred128_ChemicalChunker823);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:123: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:123: adj
        {
        pushFollow(FOLLOW_adj_in_synpred129_ChemicalChunker826_static.FOLLOW_adj_in_synpred129_ChemicalChunker826);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred130_ChemicalChunker
    public final void synpred130_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:128: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:128: neg
        {
        pushFollow(FOLLOW_neg_in_synpred130_ChemicalChunker829_static.FOLLOW_neg_in_synpred130_ChemicalChunker829);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred130_ChemicalChunker

    // $ANTLR start synpred131_ChemicalChunker
    public final void synpred131_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:133: ( otherVerbStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:133: otherVerbStructure
        {
        pushFollow(FOLLOW_otherVerbStructure_in_synpred131_ChemicalChunker832_static.FOLLOW_otherVerbStructure_in_synpred131_ChemicalChunker832);
        otherVerbStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_ChemicalChunker

    // $ANTLR start synpred132_ChemicalChunker
    public final void synpred132_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:153: ( actionVerbStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:153: actionVerbStructure
        {
        pushFollow(FOLLOW_actionVerbStructure_in_synpred132_ChemicalChunker835_static.FOLLOW_actionVerbStructure_in_synpred132_ChemicalChunker835);
        actionVerbStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_ChemicalChunker

    // $ANTLR start synpred133_ChemicalChunker
    public final void synpred133_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:175: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:175: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred133_ChemicalChunker839_static.FOLLOW_inoff_in_synpred133_ChemicalChunker839);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_ChemicalChunker

    // $ANTLR start synpred136_ChemicalChunker
    public final void synpred136_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:183: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:183: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:183: ( cc )?
        int alt230=2;
        switch ( input.LA(1) ) {
            case 143:
                {
                alt230=1;
                }
                break;
        }

        switch (alt230) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred136_ChemicalChunker843_static.FOLLOW_cc_in_synpred136_ChemicalChunker843);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:187: ( comma )?
        int alt231=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt231=1;
                }
                break;
        }

        switch (alt231) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred136_ChemicalChunker846_static.FOLLOW_comma_in_synpred136_ChemicalChunker846);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred136_ChemicalChunker849_static.FOLLOW_prepphrase_in_synpred136_ChemicalChunker849);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_ChemicalChunker

    // $ANTLR start synpred141_ChemicalChunker
    public final void synpred141_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:55: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:55: md
        {
        pushFollow(FOLLOW_md_in_synpred141_ChemicalChunker873_static.FOLLOW_md_in_synpred141_ChemicalChunker873);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:59: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:59: adv
        {
        pushFollow(FOLLOW_adv_in_synpred142_ChemicalChunker876_static.FOLLOW_adv_in_synpred142_ChemicalChunker876);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred143_ChemicalChunker
    public final void synpred143_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:64: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:64: adj
        {
        pushFollow(FOLLOW_adj_in_synpred143_ChemicalChunker879_static.FOLLOW_adj_in_synpred143_ChemicalChunker879);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_ChemicalChunker

    // $ANTLR start synpred144_ChemicalChunker
    public final void synpred144_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:69: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:69: neg
        {
        pushFollow(FOLLOW_neg_in_synpred144_ChemicalChunker882_static.FOLLOW_neg_in_synpred144_ChemicalChunker882);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_ChemicalChunker

    // $ANTLR start synpred149_ChemicalChunker
    public final void synpred149_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:53: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:53: md
        {
        pushFollow(FOLLOW_md_in_synpred149_ChemicalChunker904_static.FOLLOW_md_in_synpred149_ChemicalChunker904);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_ChemicalChunker

    // $ANTLR start synpred150_ChemicalChunker
    public final void synpred150_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:57: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:57: adv
        {
        pushFollow(FOLLOW_adv_in_synpred150_ChemicalChunker907_static.FOLLOW_adv_in_synpred150_ChemicalChunker907);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:62: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:62: adj
        {
        pushFollow(FOLLOW_adj_in_synpred151_ChemicalChunker910_static.FOLLOW_adj_in_synpred151_ChemicalChunker910);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:67: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:67: neg
        {
        pushFollow(FOLLOW_neg_in_synpred152_ChemicalChunker913_static.FOLLOW_neg_in_synpred152_ChemicalChunker913);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred164_ChemicalChunker
    public final void synpred164_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:103: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:103: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred164_ChemicalChunker953_static.FOLLOW_vbdegass_in_synpred164_ChemicalChunker953);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_ChemicalChunker

    // $ANTLR start synpred165_ChemicalChunker
    public final void synpred165_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:112: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:112: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred165_ChemicalChunker955_static.FOLLOW_degassMultiVerb_in_synpred165_ChemicalChunker955);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred193_ChemicalChunker1043_static.FOLLOW_dash_in_synpred193_ChemicalChunker1043);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred193_ChemicalChunker1045_static.FOLLOW_nounStructure_in_synpred193_ChemicalChunker1045);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred196_ChemicalChunker1060_static.FOLLOW_citation_in_synpred196_ChemicalChunker1060);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred197_ChemicalChunker1062_static.FOLLOW_cycles_in_synpred197_ChemicalChunker1062);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred198_ChemicalChunker
    public final void synpred198_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred198_ChemicalChunker1064_static.FOLLOW_molecule_in_synpred198_ChemicalChunker1064);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_ChemicalChunker

    // $ANTLR start synpred199_ChemicalChunker
    public final void synpred199_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred199_ChemicalChunker1066_static.FOLLOW_apparatus_in_synpred199_ChemicalChunker1066);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:66: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:66: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred200_ChemicalChunker1068_static.FOLLOW_unnamedmolecule_in_synpred200_ChemicalChunker1068);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred201_ChemicalChunker
    public final void synpred201_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:82: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:82: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred201_ChemicalChunker1070_static.FOLLOW_nnstate_in_synpred201_ChemicalChunker1070);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_ChemicalChunker

    // $ANTLR start synpred202_ChemicalChunker
    public final void synpred202_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:90: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:90: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred202_ChemicalChunker1072_static.FOLLOW_procedureNode_in_synpred202_ChemicalChunker1072);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_ChemicalChunker

    // $ANTLR start synpred203_ChemicalChunker
    public final void synpred203_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:104: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:104: nn
        {
        pushFollow(FOLLOW_nn_in_synpred203_ChemicalChunker1074_static.FOLLOW_nn_in_synpred203_ChemicalChunker1074);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_ChemicalChunker

    // $ANTLR start synpred206_ChemicalChunker
    public final void synpred206_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:115: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:115: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred206_ChemicalChunker1080_static.FOLLOW_nnadd_in_synpred206_ChemicalChunker1080);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred206_ChemicalChunker

    // $ANTLR start synpred208_ChemicalChunker
    public final void synpred208_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:139: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:139: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred208_ChemicalChunker1084_static.FOLLOW_nnexample_in_synpred208_ChemicalChunker1084);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_ChemicalChunker

    // $ANTLR start synpred209_ChemicalChunker
    public final void synpred209_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:149: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:149: range
        {
        pushFollow(FOLLOW_range_in_synpred209_ChemicalChunker1086_static.FOLLOW_range_in_synpred209_ChemicalChunker1086);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_ChemicalChunker

    // $ANTLR start synpred211_ChemicalChunker
    public final void synpred211_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:162: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:162: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred211_ChemicalChunker1090_static.FOLLOW_nnatmosphere_in_synpred211_ChemicalChunker1090);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:185: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:185: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred213_ChemicalChunker1094_static.FOLLOW_quantity_in_synpred213_ChemicalChunker1094);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred214_ChemicalChunker
    public final void synpred214_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:194: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:194: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred214_ChemicalChunker1096_static.FOLLOW_nnchementity_in_synpred214_ChemicalChunker1096);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_ChemicalChunker

    // $ANTLR start synpred216_ChemicalChunker
    public final void synpred216_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:214: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:214: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred216_ChemicalChunker1100_static.FOLLOW_nnph_in_synpred216_ChemicalChunker1100);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_ChemicalChunker

    // $ANTLR start synpred218_ChemicalChunker
    public final void synpred218_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:227: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:227: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred218_ChemicalChunker1104_static.FOLLOW_nngeneral_in_synpred218_ChemicalChunker1104);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:251: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:251: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred221_ChemicalChunker1110_static.FOLLOW_nnpressure_in_synpred221_ChemicalChunker1110);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:355: ( nnmixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:355: nnmixture
        {
        pushFollow(FOLLOW_nnmixture_in_synpred231_ChemicalChunker1130_static.FOLLOW_nnmixture_in_synpred231_ChemicalChunker1130);
        nnmixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:365: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:365: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred232_ChemicalChunker1132_static.FOLLOW_squareBracketedReference_in_synpred232_ChemicalChunker1132);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred238_ChemicalChunker
    public final void synpred238_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:438: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:438: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred238_ChemicalChunker1144_static.FOLLOW_nnyield_in_synpred238_ChemicalChunker1144);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_ChemicalChunker

    // $ANTLR start synpred246_ChemicalChunker
    public final void synpred246_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred246_ChemicalChunker1174_static.FOLLOW_prepphraseAtmosphere_in_synpred246_ChemicalChunker1174);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_ChemicalChunker

    // $ANTLR start synpred247_ChemicalChunker
    public final void synpred247_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred247_ChemicalChunker1176_static.FOLLOW_prepphraseTime_in_synpred247_ChemicalChunker1176);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_ChemicalChunker

    // $ANTLR start synpred248_ChemicalChunker
    public final void synpred248_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred248_ChemicalChunker1178_static.FOLLOW_prepphraseTemp_in_synpred248_ChemicalChunker1178);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_ChemicalChunker

    // $ANTLR start synpred249_ChemicalChunker
    public final void synpred249_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred249_ChemicalChunker1180_static.FOLLOW_prepphraseIN_in_synpred249_ChemicalChunker1180);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred250_ChemicalChunker1182_static.FOLLOW_prepphraseRole_in_synpred250_ChemicalChunker1182);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred252_ChemicalChunker1222_static.FOLLOW_advAdj_in_synpred252_ChemicalChunker1222);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred253_ChemicalChunker1227_static.FOLLOW_nnatmosphere_in_synpred253_ChemicalChunker1227);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred254_ChemicalChunker1255_static.FOLLOW_advAdj_in_synpred254_ChemicalChunker1255);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred259_ChemicalChunker1271_static.FOLLOW_nntime_in_synpred259_ChemicalChunker1271);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred260_ChemicalChunker1302_static.FOLLOW_advAdj_in_synpred260_ChemicalChunker1302);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred265_ChemicalChunker1317_static.FOLLOW_nntemp_in_synpred265_ChemicalChunker1317);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred271_ChemicalChunker1490_static.FOLLOW_conjunction_in_synpred271_ChemicalChunker1490);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:15: ( conjunction )*
        loop232:
        do {
            int alt232=2;
            alt232 = dfa232.predict(input);
            switch (alt232) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred272_ChemicalChunker1490_static.FOLLOW_conjunction_in_synpred272_ChemicalChunker1490);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop232;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred272_ChemicalChunker1493_static.FOLLOW_apparatus_in_synpred272_ChemicalChunker1493);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred275_ChemicalChunker1510_static.FOLLOW_nnApp_in_synpred275_ChemicalChunker1510);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred276_ChemicalChunker1537_static.FOLLOW_nnapparatus_in_synpred276_ChemicalChunker1537);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred277_ChemicalChunker1541_static.FOLLOW_dash_in_synpred277_ChemicalChunker1541);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred277_ChemicalChunker1543_static.FOLLOW_nnapparatus_in_synpred277_ChemicalChunker1543);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred278_ChemicalChunker1557_static.FOLLOW_quantity_in_synpred278_ChemicalChunker1557);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred279_ChemicalChunker1559_static.FOLLOW_adj_in_synpred279_ChemicalChunker1559);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred280_ChemicalChunker1561_static.FOLLOW_nnpressure_in_synpred280_ChemicalChunker1561);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred281_ChemicalChunker1563_static.FOLLOW_nnadd_in_synpred281_ChemicalChunker1563);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred282_ChemicalChunker1565_static.FOLLOW_molecule_in_synpred282_ChemicalChunker1565);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred283_ChemicalChunker1567_static.FOLLOW_nnchementity_in_synpred283_ChemicalChunker1567);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred284_ChemicalChunker1569_static.FOLLOW_nnstate_in_synpred284_ChemicalChunker1569);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred285_ChemicalChunker1571_static.FOLLOW_nn_in_synpred285_ChemicalChunker1571);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:55: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:55: adj
        {
        pushFollow(FOLLOW_adj_in_synpred288_ChemicalChunker1592_static.FOLLOW_adj_in_synpred288_ChemicalChunker1592);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred289_ChemicalChunker1595_static.FOLLOW_nnstate_in_synpred289_ChemicalChunker1595);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:70: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:70: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred290_ChemicalChunker1599_static.FOLLOW_numericReferenceOrQuantity_in_synpred290_ChemicalChunker1599);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:99: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:99: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred291_ChemicalChunker1603_static.FOLLOW_nnchementity_in_synpred291_ChemicalChunker1603);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:115: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:115: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred292_ChemicalChunker1608_static.FOLLOW_quantity_in_synpred292_ChemicalChunker1608);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:125: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:125: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred293_ChemicalChunker1611_static.FOLLOW_fromProcedure_in_synpred293_ChemicalChunker1611);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:26: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred294_ChemicalChunker1620_static.FOLLOW_oscarcm_in_synpred294_ChemicalChunker1620);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:35: ( afterOscarCompoundStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:35: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred295_ChemicalChunker1623_static.FOLLOW_afterOscarCompoundStructure_in_synpred295_ChemicalChunker1623);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred297_ChemicalChunker
    public final void synpred297_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:36: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:36: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred297_ChemicalChunker1653_static.FOLLOW_oscarcm_in_synpred297_ChemicalChunker1653);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred297_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:31: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:31: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred298_ChemicalChunker1651_static.FOLLOW_dash_in_synpred298_ChemicalChunker1651);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:36: ( oscarcm )+
        int cnt235=0;
        loop235:
        do {
            int alt235=2;
            switch ( input.LA(1) ) {
            case 82:
                {
                alt235=1;
                }
                break;

            }

            switch (alt235) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred298_ChemicalChunker1653_static.FOLLOW_oscarcm_in_synpred298_ChemicalChunker1653);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt235 >= 1 ) break loop235;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(235, input);
                    throw eee;
            }
            cnt235++;
        } while (true);


        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:47: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:47: dash
        {
        pushFollow(FOLLOW_dash_in_synpred299_ChemicalChunker1658_static.FOLLOW_dash_in_synpred299_ChemicalChunker1658);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:30: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:30: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:30: ( dash ( oscarcm )+ )+
        int cnt237=0;
        loop237:
        do {
            int alt237=2;
            switch ( input.LA(1) ) {
            case 134:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 82:
                        {
                        alt237=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt237) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:31: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred300_ChemicalChunker1651_static.FOLLOW_dash_in_synpred300_ChemicalChunker1651);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:36: ( oscarcm )+
        	    int cnt236=0;
        	    loop236:
        	    do {
        	        int alt236=2;
        	        switch ( input.LA(1) ) {
        	        case 82:
        	            {
        	            alt236=1;
        	            }
        	            break;

        	        }

        	        switch (alt236) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred300_ChemicalChunker1653_static.FOLLOW_oscarcm_in_synpred300_ChemicalChunker1653);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt236 >= 1 ) break loop236;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(236, input);
        	                throw eee;
        	        }
        	        cnt236++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt237 >= 1 ) break loop237;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(237, input);
                    throw eee;
            }
            cnt237++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:47: ( dash )?
        int alt238=2;
        switch ( input.LA(1) ) {
            case 134:
                {
                alt238=1;
                }
                break;
        }

        switch (alt238) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred300_ChemicalChunker1658_static.FOLLOW_dash_in_synpred300_ChemicalChunker1658);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:53: ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:54: ( colon ( oscarcm )+ )+ ( lrb )? ratio
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:54: ( colon ( oscarcm )+ )+
        int cnt241=0;
        loop241:
        do {
            int alt241=2;
            switch ( input.LA(1) ) {
            case 130:
                {
                alt241=1;
                }
                break;

            }

            switch (alt241) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:55: colon ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_colon_in_synpred304_ChemicalChunker1663_static.FOLLOW_colon_in_synpred304_ChemicalChunker1663);
        	    colon();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:61: ( oscarcm )+
        	    int cnt240=0;
        	    loop240:
        	    do {
        	        int alt240=2;
        	        switch ( input.LA(1) ) {
        	        case 82:
        	            {
        	            alt240=1;
        	            }
        	            break;

        	        }

        	        switch (alt240) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred304_ChemicalChunker1665_static.FOLLOW_oscarcm_in_synpred304_ChemicalChunker1665);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt240 >= 1 ) break loop240;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(240, input);
        	                throw eee;
        	        }
        	        cnt240++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt241 >= 1 ) break loop241;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(241, input);
                    throw eee;
            }
            cnt241++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:72: ( lrb )?
        int alt242=2;
        switch ( input.LA(1) ) {
            case 141:
                {
                alt242=1;
                }
                break;
        }

        switch (alt242) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: lrb
                {
                pushFollow(FOLLOW_lrb_in_synpred304_ChemicalChunker1670_static.FOLLOW_lrb_in_synpred304_ChemicalChunker1670);
                lrb();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_ratio_in_synpred304_ChemicalChunker1673_static.FOLLOW_ratio_in_synpred304_ChemicalChunker1673);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:92: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:92: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred305_ChemicalChunker1679_static.FOLLOW_oscarcm_in_synpred305_ChemicalChunker1679);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:86: ( colon ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:86: colon ( oscarcm )+
        {
        pushFollow(FOLLOW_colon_in_synpred306_ChemicalChunker1677_static.FOLLOW_colon_in_synpred306_ChemicalChunker1677);
        colon();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:92: ( oscarcm )+
        int cnt243=0;
        loop243:
        do {
            int alt243=2;
            switch ( input.LA(1) ) {
            case 82:
                {
                alt243=1;
                }
                break;

            }

            switch (alt243) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred306_ChemicalChunker1679_static.FOLLOW_oscarcm_in_synpred306_ChemicalChunker1679);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt243 >= 1 ) break loop243;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(243, input);
                    throw eee;
            }
            cnt243++;
        } while (true);


        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:104: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:104: dash
        {
        pushFollow(FOLLOW_dash_in_synpred307_ChemicalChunker1685_static.FOLLOW_dash_in_synpred307_ChemicalChunker1685);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:109: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:109: apost
        {
        pushFollow(FOLLOW_apost_in_synpred308_ChemicalChunker1687_static.FOLLOW_apost_in_synpred308_ChemicalChunker1687);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:19: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred310_ChemicalChunker1730_static.FOLLOW_moleculeamount3_in_synpred310_ChemicalChunker1730);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:36: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred311_ChemicalChunker1733_static.FOLLOW_moleculeamount1_in_synpred311_ChemicalChunker1733);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:71: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred312_ChemicalChunker1740_static.FOLLOW_asAstate_in_synpred312_ChemicalChunker1740);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred313_ChemicalChunker1751_static.FOLLOW_quantity_in_synpred313_ChemicalChunker1751);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred314_ChemicalChunker
    public final void synpred314_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:13: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:13: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred314_ChemicalChunker1753_static.FOLLOW_bracketedContentInMol_in_synpred314_ChemicalChunker1753);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_ChemicalChunker

    // $ANTLR start synpred317_ChemicalChunker
    public final void synpred317_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:78: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:78: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred317_ChemicalChunker1770_static.FOLLOW_bracketedContentInMol_in_synpred317_ChemicalChunker1770);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:30: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:30: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred320_ChemicalChunker1792_static.FOLLOW_quantity_in_synpred320_ChemicalChunker1792);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:39: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:39: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred321_ChemicalChunker1794_static.FOLLOW_bracketedContentInMol_in_synpred321_ChemicalChunker1794);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:100: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:100: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred326_ChemicalChunker1817_static.FOLLOW_oscarCompound_in_synpred326_ChemicalChunker1817);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred327_ChemicalChunker1829_static.FOLLOW_quantity_in_synpred327_ChemicalChunker1829);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred328_ChemicalChunker
    public final void synpred328_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:13: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:13: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred328_ChemicalChunker1831_static.FOLLOW_bracketedContentInMol_in_synpred328_ChemicalChunker1831);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_ChemicalChunker

    // $ANTLR start synpred329_ChemicalChunker
    public final void synpred329_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:37: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:37: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred329_ChemicalChunker1835_static.FOLLOW_oscarCompound_in_synpred329_ChemicalChunker1835);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred329_ChemicalChunker

    // $ANTLR start synpred330_ChemicalChunker
    public final void synpred330_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:35: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred330_ChemicalChunker1846_static.FOLLOW_citation_in_synpred330_ChemicalChunker1846);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_ChemicalChunker

    // $ANTLR start synpred331_ChemicalChunker
    public final void synpred331_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred331_ChemicalChunker1848_static.FOLLOW_quantity_in_synpred331_ChemicalChunker1848);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:53: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred333_ChemicalChunker1850_static.FOLLOW_comma_in_synpred333_ChemicalChunker1850);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:59: ( quantity1Node | citationStructure )
        int alt245=2;
        switch ( input.LA(1) ) {
        case 141:
            {
            switch ( input.LA(2) ) {
            case TOKEN:
                {
                switch ( input.LA(3) ) {
                case 144:
                    {
                    switch ( input.LA(4) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(5) ) {
                        case 42:
                        case 63:
                        case 64:
                        case 65:
                        case 67:
                        case 68:
                        case 136:
                        case 154:
                            {
                            alt245=1;
                            }
                            break;
                        case 131:
                        case 143:
                        case 144:
                        case 147:
                        case 156:
                            {
                            alt245=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 245, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 245, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                case 71:
                case 128:
                    {
                    alt245=1;
                    }
                    break;
                case 131:
                case 143:
                case 147:
                case 156:
                    {
                    alt245=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 1, input);

                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 245, 0, input);

            throw nvae;
        }

        switch (alt245) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred333_ChemicalChunker1853_static.FOLLOW_quantity1Node_in_synpred333_ChemicalChunker1853);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred333_ChemicalChunker1855_static.FOLLOW_citationStructure_in_synpred333_ChemicalChunker1855);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:93: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:93: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred334_ChemicalChunker1858_static.FOLLOW_bracketedContentInMol_in_synpred334_ChemicalChunker1858);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:68: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:68: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred335_ChemicalChunker1890_static.FOLLOW_asAstate_in_synpred335_ChemicalChunker1890);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:16: ( potentialUnnamedMoleculeAmount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:16: potentialUnnamedMoleculeAmount1
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred336_ChemicalChunker1903_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred336_ChemicalChunker1903);
        potentialUnnamedMoleculeAmount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:50: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:50: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred337_ChemicalChunker1907_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred337_ChemicalChunker1907);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred339_ChemicalChunker
    public final void synpred339_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:112: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:112: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred339_ChemicalChunker1917_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred339_ChemicalChunker1917);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_ChemicalChunker

    // $ANTLR start synpred340_ChemicalChunker
    public final void synpred340_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred340_ChemicalChunker1930_static.FOLLOW_quantity_in_synpred340_ChemicalChunker1930);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred340_ChemicalChunker

    // $ANTLR start synpred344_ChemicalChunker
    public final void synpred344_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:29: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:29: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred344_ChemicalChunker1954_static.FOLLOW_quantity_in_synpred344_ChemicalChunker1954);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_ChemicalChunker

    // $ANTLR start synpred345_ChemicalChunker
    public final void synpred345_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:39: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:39: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred345_ChemicalChunker1957_static.FOLLOW_asAstate_in_synpred345_ChemicalChunker1957);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_ChemicalChunker

    // $ANTLR start synpred346_ChemicalChunker
    public final void synpred346_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:49: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:49: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred346_ChemicalChunker1960_static.FOLLOW_fromProcedure_in_synpred346_ChemicalChunker1960);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred346_ChemicalChunker

    // $ANTLR start synpred351_ChemicalChunker
    public final void synpred351_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:148: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:148: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred351_ChemicalChunker2000_static.FOLLOW_quantity_in_synpred351_ChemicalChunker2000);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred351_ChemicalChunker

    // $ANTLR start synpred352_ChemicalChunker
    public final void synpred352_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:158: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:158: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred352_ChemicalChunker2003_static.FOLLOW_asAstate_in_synpred352_ChemicalChunker2003);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_ChemicalChunker

    // $ANTLR start synpred353_ChemicalChunker
    public final void synpred353_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:168: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:168: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred353_ChemicalChunker2006_static.FOLLOW_fromProcedure_in_synpred353_ChemicalChunker2006);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred353_ChemicalChunker

    // $ANTLR start synpred354_ChemicalChunker
    public final void synpred354_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:37: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:37: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred354_ChemicalChunker2018_static.FOLLOW_quantity_in_synpred354_ChemicalChunker2018);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_ChemicalChunker

    // $ANTLR start synpred355_ChemicalChunker
    public final void synpred355_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:47: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:47: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred355_ChemicalChunker2021_static.FOLLOW_asAstate_in_synpred355_ChemicalChunker2021);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_ChemicalChunker

    // $ANTLR start synpred356_ChemicalChunker
    public final void synpred356_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:57: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:57: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred356_ChemicalChunker2024_static.FOLLOW_fromProcedure_in_synpred356_ChemicalChunker2024);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_ChemicalChunker

    // $ANTLR start synpred359_ChemicalChunker
    public final void synpred359_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:82: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:82: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred359_ChemicalChunker2048_static.FOLLOW_numericReferenceOrQuantity_in_synpred359_ChemicalChunker2048);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred359_ChemicalChunker

    // $ANTLR start synpred362_ChemicalChunker
    public final void synpred362_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:66: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:66: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred362_ChemicalChunker2069_static.FOLLOW_numericReferenceOrQuantity_in_synpred362_ChemicalChunker2069);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred375_ChemicalChunker2125_static.FOLLOW_quantity_in_synpred375_ChemicalChunker2125);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred380_ChemicalChunker
    public final void synpred380_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:42: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:42: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred380_ChemicalChunker2154_static.FOLLOW_quantity_in_synpred380_ChemicalChunker2154);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred380_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred385_ChemicalChunker2315_static.FOLLOW_comma_in_synpred385_ChemicalChunker2315);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred385_ChemicalChunker2318_static.FOLLOW_measurements_in_synpred385_ChemicalChunker2318);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:40: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred388_ChemicalChunker2343_static.FOLLOW_dt_in_synpred388_ChemicalChunker2343);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred389_ChemicalChunker2355_static.FOLLOW_measurementtypes_in_synpred389_ChemicalChunker2355);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred396_ChemicalChunker2392_static.FOLLOW_yield_in_synpred396_ChemicalChunker2392);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred401_ChemicalChunker
    public final void synpred401_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:32: ( dash cd percentsign )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:32: dash cd percentsign
        {
        pushFollow(FOLLOW_dash_in_synpred401_ChemicalChunker2591_static.FOLLOW_dash_in_synpred401_ChemicalChunker2591);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred401_ChemicalChunker2593_static.FOLLOW_cd_in_synpred401_ChemicalChunker2593);
        cd();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_percentsign_in_synpred401_ChemicalChunker2595_static.FOLLOW_percentsign_in_synpred401_ChemicalChunker2595);
        percentsign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:28: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:28: verb
        {
        pushFollow(FOLLOW_verb_in_synpred405_ChemicalChunker2698_static.FOLLOW_verb_in_synpred405_ChemicalChunker2698);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred406_ChemicalChunker
    public final void synpred406_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:33: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:33: noun
        {
        pushFollow(FOLLOW_noun_in_synpred406_ChemicalChunker2700_static.FOLLOW_noun_in_synpred406_ChemicalChunker2700);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred406_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:38: ( bracketedContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:38: bracketedContent
        {
        pushFollow(FOLLOW_bracketedContent_in_synpred407_ChemicalChunker2702_static.FOLLOW_bracketedContent_in_synpred407_ChemicalChunker2702);
        bracketedContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:81: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:81: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred412_ChemicalChunker2712_static.FOLLOW_ratio_in_synpred412_ChemicalChunker2712);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred413_ChemicalChunker
    public final void synpred413_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:87: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:87: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred413_ChemicalChunker2714_static.FOLLOW_conjunction_in_synpred413_ChemicalChunker2714);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_ChemicalChunker

    // $ANTLR start synpred414_ChemicalChunker
    public final void synpred414_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:99: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:99: adj
        {
        pushFollow(FOLLOW_adj_in_synpred414_ChemicalChunker2716_static.FOLLOW_adj_in_synpred414_ChemicalChunker2716);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:114: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:114: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred417_ChemicalChunker2722_static.FOLLOW_numeric_in_synpred417_ChemicalChunker2722);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred421_ChemicalChunker
    public final void synpred421_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:33: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:33: verb
        {
        pushFollow(FOLLOW_verb_in_synpred421_ChemicalChunker2800_static.FOLLOW_verb_in_synpred421_ChemicalChunker2800);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:38: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:38: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred422_ChemicalChunker2802_static.FOLLOW_quantity2Node_in_synpred422_ChemicalChunker2802);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:52: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:52: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred423_ChemicalChunker2804_static.FOLLOW_oscarCompound_in_synpred423_ChemicalChunker2804);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred424_ChemicalChunker
    public final void synpred424_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:66: ( alphanumericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:66: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred424_ChemicalChunker2806_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred424_ChemicalChunker2806);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred424_ChemicalChunker

    // $ANTLR start synpred425_ChemicalChunker
    public final void synpred425_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:108: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:108: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred425_ChemicalChunker2808_static.FOLLOW_ratio_in_synpred425_ChemicalChunker2808);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred425_ChemicalChunker

    // $ANTLR start synpred428_ChemicalChunker
    public final void synpred428_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:114: ( numberCompoundReference ( comma | colon | {...}? stop ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:114: numberCompoundReference ( comma | colon | {...}? stop )
        {
        pushFollow(FOLLOW_numberCompoundReference_in_synpred428_ChemicalChunker2810_static.FOLLOW_numberCompoundReference_in_synpred428_ChemicalChunker2810);
        numberCompoundReference();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:138: ( comma | colon | {...}? stop )
        int alt253=3;
        switch ( input.LA(1) ) {
        case 131:
            {
            alt253=1;
            }
            break;
        case 130:
            {
            alt253=2;
            }
            break;
        case 135:
            {
            alt253=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 253, 0, input);

            throw nvae;
        }

        switch (alt253) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:139: comma
                {
                pushFollow(FOLLOW_comma_in_synpred428_ChemicalChunker2813_static.FOLLOW_comma_in_synpred428_ChemicalChunker2813);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:147: colon
                {
                pushFollow(FOLLOW_colon_in_synpred428_ChemicalChunker2817_static.FOLLOW_colon_in_synpred428_ChemicalChunker2817);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:155: {...}? stop
                {
                if ( !((nextIsSemiColon(input))) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred428_ChemicalChunker", "nextIsSemiColon(input)");
                }
                pushFollow(FOLLOW_stop_in_synpred428_ChemicalChunker2823_static.FOLLOW_stop_in_synpred428_ChemicalChunker2823);
                stop();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred428_ChemicalChunker

    // $ANTLR start synpred429_ChemicalChunker
    public final void synpred429_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:187: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:187: cd
        {
        pushFollow(FOLLOW_cd_in_synpred429_ChemicalChunker2826_static.FOLLOW_cd_in_synpred429_ChemicalChunker2826);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_ChemicalChunker

    // $ANTLR start synpred434_ChemicalChunker
    public final void synpred434_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:216: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:216: comma
        {
        pushFollow(FOLLOW_comma_in_synpred434_ChemicalChunker2836_static.FOLLOW_comma_in_synpred434_ChemicalChunker2836);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred434_ChemicalChunker

    // $ANTLR start synpred435_ChemicalChunker
    public final void synpred435_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:222: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:222: adj
        {
        pushFollow(FOLLOW_adj_in_synpred435_ChemicalChunker2838_static.FOLLOW_adj_in_synpred435_ChemicalChunker2838);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred435_ChemicalChunker

    // $ANTLR start synpred438_ChemicalChunker
    public final void synpred438_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:237: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:237: noun
        {
        pushFollow(FOLLOW_noun_in_synpred438_ChemicalChunker2844_static.FOLLOW_noun_in_synpred438_ChemicalChunker2844);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred438_ChemicalChunker

    // $ANTLR start synpred439_ChemicalChunker
    public final void synpred439_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:266: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:266: verb
        {
        pushFollow(FOLLOW_verb_in_synpred439_ChemicalChunker2850_static.FOLLOW_verb_in_synpred439_ChemicalChunker2850);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred439_ChemicalChunker

    // $ANTLR start synpred440_ChemicalChunker
    public final void synpred440_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:271: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:271: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred440_ChemicalChunker2852_static.FOLLOW_quantity2Node_in_synpred440_ChemicalChunker2852);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred440_ChemicalChunker

    // $ANTLR start synpred441_ChemicalChunker
    public final void synpred441_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:285: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:285: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred441_ChemicalChunker2854_static.FOLLOW_oscarCompound_in_synpred441_ChemicalChunker2854);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_ChemicalChunker

    // $ANTLR start synpred442_ChemicalChunker
    public final void synpred442_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:299: ( alphanumericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:299: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred442_ChemicalChunker2856_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred442_ChemicalChunker2856);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred442_ChemicalChunker

    // $ANTLR start synpred443_ChemicalChunker
    public final void synpred443_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:341: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:341: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred443_ChemicalChunker2858_static.FOLLOW_ratio_in_synpred443_ChemicalChunker2858);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred443_ChemicalChunker

    // $ANTLR start synpred444_ChemicalChunker
    public final void synpred444_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:347: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:347: cd
        {
        pushFollow(FOLLOW_cd_in_synpred444_ChemicalChunker2860_static.FOLLOW_cd_in_synpred444_ChemicalChunker2860);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred444_ChemicalChunker

    // $ANTLR start synpred449_ChemicalChunker
    public final void synpred449_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:376: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:376: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred449_ChemicalChunker2870_static.FOLLOW_conjunction_in_synpred449_ChemicalChunker2870);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred449_ChemicalChunker

    // $ANTLR start synpred450_ChemicalChunker
    public final void synpred450_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:388: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:388: adj
        {
        pushFollow(FOLLOW_adj_in_synpred450_ChemicalChunker2872_static.FOLLOW_adj_in_synpred450_ChemicalChunker2872);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred450_ChemicalChunker

    // $ANTLR start synpred453_ChemicalChunker
    public final void synpred453_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:403: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:403: noun
        {
        pushFollow(FOLLOW_noun_in_synpred453_ChemicalChunker2878_static.FOLLOW_noun_in_synpred453_ChemicalChunker2878);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred453_ChemicalChunker

    // $ANTLR start synpred454_ChemicalChunker
    public final void synpred454_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:408: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:408: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred454_ChemicalChunker2880_static.FOLLOW_bracketedContentInMol_in_synpred454_ChemicalChunker2880);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred454_ChemicalChunker

    // $ANTLR start synpred462_ChemicalChunker
    public final void synpred462_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:31: ( allIdentifierTypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:31: allIdentifierTypes
        {
        pushFollow(FOLLOW_allIdentifierTypes_in_synpred462_ChemicalChunker2954_static.FOLLOW_allIdentifierTypes_in_synpred462_ChemicalChunker2954);
        allIdentifierTypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred462_ChemicalChunker

    // $ANTLR start synpred468_ChemicalChunker
    public final void synpred468_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:85: ( ( comma | colon | inof | infrom )? submethod )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:85: ( comma | colon | inof | infrom )? submethod
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:85: ( comma | colon | inof | infrom )?
        int alt256=5;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt256=1;
                }
                break;
            case 130:
                {
                alt256=2;
                }
                break;
            case 54:
                {
                alt256=3;
                }
                break;
            case 57:
                {
                alt256=4;
                }
                break;
        }

        switch (alt256) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:86: comma
                {
                pushFollow(FOLLOW_comma_in_synpred468_ChemicalChunker2967_static.FOLLOW_comma_in_synpred468_ChemicalChunker2967);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:93: colon
                {
                pushFollow(FOLLOW_colon_in_synpred468_ChemicalChunker2970_static.FOLLOW_colon_in_synpred468_ChemicalChunker2970);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:100: inof
                {
                pushFollow(FOLLOW_inof_in_synpred468_ChemicalChunker2973_static.FOLLOW_inof_in_synpred468_ChemicalChunker2973);
                inof();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:107: infrom
                {
                pushFollow(FOLLOW_infrom_in_synpred468_ChemicalChunker2977_static.FOLLOW_infrom_in_synpred468_ChemicalChunker2977);
                infrom();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_submethod_in_synpred468_ChemicalChunker2981_static.FOLLOW_submethod_in_synpred468_ChemicalChunker2981);
        submethod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred468_ChemicalChunker

    // $ANTLR start synpred469_ChemicalChunker
    public final void synpred469_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:128: ( lrb submethod rrb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:128: lrb submethod rrb
        {
        pushFollow(FOLLOW_lrb_in_synpred469_ChemicalChunker2985_static.FOLLOW_lrb_in_synpred469_ChemicalChunker2985);
        lrb();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_submethod_in_synpred469_ChemicalChunker2987_static.FOLLOW_submethod_in_synpred469_ChemicalChunker2987);
        submethod();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rrb_in_synpred469_ChemicalChunker2989_static.FOLLOW_rrb_in_synpred469_ChemicalChunker2989);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred469_ChemicalChunker

    // $ANTLR start synpred479_ChemicalChunker
    public final void synpred479_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:15: ( colon cd {...}?)
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:15: colon cd {...}?
        {
        pushFollow(FOLLOW_colon_in_synpred479_ChemicalChunker3143_static.FOLLOW_colon_in_synpred479_ChemicalChunker3143);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred479_ChemicalChunker3145_static.FOLLOW_cd_in_synpred479_ChemicalChunker3145);
        cd();

        state._fsp--;
        if (state.failed) return ;
        if ( !((!followedByQuantityUnits(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred479_ChemicalChunker", "!followedByQuantityUnits(input)");
        }

        }
    }
    // $ANTLR end synpred479_ChemicalChunker

    // $ANTLR start synpred488_ChemicalChunker
    public final void synpred488_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:22: ( allIdentifierTypesOtherThanCD )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:22: allIdentifierTypesOtherThanCD
        {
        pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_synpred488_ChemicalChunker3220_static.FOLLOW_allIdentifierTypesOtherThanCD_in_synpred488_ChemicalChunker3220);
        allIdentifierTypesOtherThanCD();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred488_ChemicalChunker

    // Delegated rules

    public final boolean synpred440_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred440_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred424_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred424_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred453_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred453_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred488_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred488_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred449_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred449_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred469_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred469_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred462_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred462_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred428_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred428_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred425_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred425_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred442_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred438_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred438_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred443_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred443_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred468_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred468_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred479_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred479_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred439_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred439_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred434_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred434_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred450_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred450_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred444_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred444_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred454_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred454_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA191 dfa191 = new DFA191(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA200 dfa200 = new DFA200(this);
    protected DFA225 dfa225 = new DFA225(this);
    protected DFA232 dfa232 = new DFA232(this);
    static class DFA3_static {
    static final String DFA3_eotS =
        "\47\uffff";
    static final String DFA3_eofS =
        "\7\uffff\5\6\15\uffff\5\6\5\uffff\1\6\3\uffff";
    static final String DFA3_minS =
        "\1\45\5\44\1\uffff\5\45\11\44\4\0\5\45\1\uffff\4\44\1\45\3\0";
    static final String DFA3_maxS =
        "\1\u00b2\5\44\1\uffff\5\u00b2\11\44\4\0\5\u00b2\1\uffff\4\44\1"+
        "\u00b2\3\0";
    static final String DFA3_acceptS =
        "\6\uffff\1\2\27\uffff\1\1\10\uffff";
    static final String DFA3_specialS =
        "\25\uffff\1\1\1\6\1\2\1\5\13\uffff\1\3\1\0\1\4}>";
    static final String[] DFA3_transitionS = {
            "\1\3\141\6\1\uffff\1\6\1\5\1\6\1\1\1\6\1\4\2\6\1\2\42\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "",
            "\135\6\1\16\4\6\1\15\6\6\1\14\44\6",
            "\135\6\1\17\4\6\1\15\6\6\1\14\44\6",
            "\135\6\1\16\4\6\1\15\6\6\1\14\44\6",
            "\1\22\145\6\1\21\4\6\1\20\42\6",
            "\1\24\152\6\1\23\42\6",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\146\6\1\37\2\6\1\40\44\6",
            "\151\6\1\41\44\6",
            "\151\6\1\40\44\6",
            "\145\6\1\42\50\6",
            "\145\6\1\42\50\6",
            "",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\151\6\1\41\44\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_static.DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_static.DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_static.DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_static.DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_static.DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_static.DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "159:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA3_37 = input.LA(1);

                         
                        int index3_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_37);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA3_21 = input.LA(1);

                         
                        int index3_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA3_23 = input.LA(1);

                         
                        int index3_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_23);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA3_36 = input.LA(1);

                         
                        int index3_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_36);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA3_38 = input.LA(1);

                         
                        int index3_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_38);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA3_24 = input.LA(1);

                         
                        int index3_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_24);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA3_22 = input.LA(1);

                         
                        int index3_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0091\uffff";
    static final String DFA2_eofS =
        "\1\1\u0090\uffff";
    static final String DFA2_minS =
        "\1\45\1\uffff\u008d\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b2\1\uffff\u008d\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008d\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\102\1\152\1\22\1\145\1\u0085\1\u0083\1\136\1\171\1\165"+
        "\1\10\1\140\1\37\1\107\1\u0086\1\75\1\36\1\7\1\u0089\1\170\1\21"+
        "\1\52\1\23\1\63\1\114\1\147\1\54\1\66\1\1\1\77\1\20\1\134\1\44\1"+
        "\41\1\116\1\103\1\122\1\3\1\17\1\27\1\150\1\144\1\151\1\71\1\177"+
        "\1\132\1\24\1\164\1\u0082\1\173\1\124\1\120\1\146\1\72\1\160\1\70"+
        "\1\30\1\161\1\53\1\25\1\111\1\11\1\123\1\u0081\1\163\1\6\1\60\1"+
        "\174\1\166\1\50\1\73\1\153\1\64\1\176\1\57\1\u0087\1\154\1\16\1"+
        "\32\1\142\1\45\1\56\1\42\1\46\1\110\1\101\1\12\1\133\1\u008c\1\u0084"+
        "\1\76\1\156\1\172\1\u008a\1\34\1\112\1\127\1\155\1\162\1\105\1\141"+
        "\1\121\1\4\1\55\1\62\1\15\1\33\1\u0088\1\167\1\61\1\113\1\126\1"+
        "\43\1\13\1\2\1\35\1\u0080\1\135\1\104\1\115\1\26\1\40\1\74\1\65"+
        "\1\131\1\106\1\51\1\117\1\143\1\47\1\0\1\67\1\5\1\100\1\31\1\14"+
        "\1\u008b\1\175\1\157\1\137\1\130\1\125\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\4\1\16\1\17\1\42\1\52\1\u0084\1\15\1\25\1\113\1\114\1\112"+
            "\1\120\1\121\1\130\1\131\1\115\1\127\1\122\1\124\1\116\1\117"+
            "\1\126\1\125\1\123\1\24\1\51\1\u0085\1\55\1\u0086\1\40\1\56"+
            "\1\65\1\23\1\53\1\10\1\54\1\45\1\46\1\20\1\57\1\60\1\61\1\62"+
            "\1\63\1\37\1\26\1\u0082\1\177\1\156\1\147\1\21\1\41\1\137\1"+
            "\134\1\135\1\136\1\140\1\141\1\u0081\1\142\1\143\1\30\1\144"+
            "\1\64\1\145\1\146\1\150\1\151\1\70\1\152\1\71\1\153\1\72\1\154"+
            "\1\155\1\u0080\1\157\1\160\1\73\1\161\1\66\1\162\1\163\1\164"+
            "\1\74\1\165\1\50\1\67\1\166\1\167\1\170\1\11\1\133\1\u0087\1"+
            "\22\1\u0088\1\u0083\1\u0089\1\1\1\u008a\1\6\1\u008b\1\2\1\31"+
            "\1\5\1\u008c\1\u008d\1\3\1\7\1\102\1\75\1\111\1\12\1\13\1\14"+
            "\1\105\1\132\1\27\1\47\1\36\1\106\1\103\1\107\1\43\1\44\1\32"+
            "\1\33\1\35\1\34\1\76\1\110\1\u008e\1\171\1\172\1\173\1\174\1"+
            "\175\1\176\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 159:34: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred3_ChemicalChunker()||(synpred3_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\u0088\uffff";
    static final String DFA5_eofS =
        "\1\13\u0087\uffff";
    static final String DFA5_minS =
        "\1\45\12\0\1\uffff\170\0\4\uffff";
    static final String DFA5_maxS =
        "\1\u00b2\12\0\1\uffff\170\0\4\uffff";
    static final String DFA5_acceptS =
        "\13\uffff\1\5\170\uffff\1\1\1\2\1\3\1\4";
    static final String DFA5_specialS =
        "\1\uffff\1\111\1\6\1\65\1\162\1\110\1\115\1\137\1\176\1\136\1\13"+
        "\1\uffff\1\102\1\164\1\177\1\167\1\24\1\122\1\26\1\142\1\33\1\100"+
        "\1\106\1\44\1\34\1\134\1\31\1\30\1\144\1\175\1\55\1\66\1\51\1\132"+
        "\1\5\1\17\1\47\1\75\1\32\1\62\1\173\1\116\1\0\1\101\1\125\1\10\1"+
        "\52\1\172\1\130\1\135\1\155\1\157\1\3\1\7\1\160\1\76\1\113\1\114"+
        "\1\50\1\36\1\123\1\154\1\42\1\u0081\1\150\1\174\1\21\1\145\1\37"+
        "\1\161\1\131\1\14\1\25\1\67\1\40\1\112\1\35\1\27\1\165\1\107\1\53"+
        "\1\153\1\146\1\15\1\121\1\151\1\163\1\20\1\126\1\1\1\45\1\103\1"+
        "\12\1\4\1\22\1\171\1\63\1\74\1\64\1\57\1\11\1\166\1\124\1\105\1"+
        "\143\1\127\1\77\1\23\1\16\1\156\1\120\1\152\1\133\1\56\1\72\1\2"+
        "\1\41\1\170\1\141\1\46\1\61\1\43\1\60\1\70\1\104\1\117\1\140\1\73"+
        "\1\147\1\71\1\54\1\u0080\4\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\20\1\11\1\12\1\43\1\53\1\13\1\10\1\32\1\114\1\115\1\113"+
            "\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117\1\120"+
            "\1\127\1\126\1\124\1\31\1\52\1\13\1\56\1\13\1\41\1\57\1\66\1"+
            "\30\1\54\1\24\1\55\1\46\1\47\1\26\1\60\1\61\1\62\1\63\1\64\1"+
            "\40\1\33\1\u0082\1\177\1\156\1\147\1\27\1\42\1\137\1\134\1\135"+
            "\1\136\1\140\1\141\1\u0081\1\142\1\143\1\35\1\144\1\65\1\145"+
            "\1\146\1\150\1\151\1\71\1\152\1\72\1\153\1\73\1\154\1\155\1"+
            "\u0080\1\157\1\160\1\74\1\161\1\67\1\162\1\163\1\164\1\75\1"+
            "\165\1\51\1\70\1\166\1\167\1\170\1\25\1\15\1\13\1\14\1\13\1"+
            "\u0083\3\13\1\22\1\13\1\16\1\36\1\21\2\13\1\17\1\23\1\103\1"+
            "\76\1\112\1\5\1\6\1\7\1\106\1\133\1\34\1\50\1\37\1\107\1\104"+
            "\1\110\1\44\1\45\1\1\1\2\1\4\1\3\1\77\1\111\1\13\1\171\1\172"+
            "\1\173\1\174\1\175\1\176\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()+ loopback of 161:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_42 = input.LA(1);

                         
                        int index5_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_42);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_115 = input.LA(1);

                         
                        int index5_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_115);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_52 = input.LA(1);

                         
                        int index5_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_52);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_34 = input.LA(1);

                         
                        int index5_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_34);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_53 = input.LA(1);

                         
                        int index5_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_53);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_45 = input.LA(1);

                         
                        int index5_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_45);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA5_108 = input.LA(1);

                         
                        int index5_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_108);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA5_35 = input.LA(1);

                         
                        int index5_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_35);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA5_66 = input.LA(1);

                         
                        int index5_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_66);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA5_107 = input.LA(1);

                         
                        int index5_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_107);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA5_38 = input.LA(1);

                         
                        int index5_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_38);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA5_59 = input.LA(1);

                         
                        int index5_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_59);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA5_116 = input.LA(1);

                         
                        int index5_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_116);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA5_62 = input.LA(1);

                         
                        int index5_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_62);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA5_121 = input.LA(1);

                         
                        int index5_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_121);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA5_119 = input.LA(1);

                         
                        int index5_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_119);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA5_36 = input.LA(1);

                         
                        int index5_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_36);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA5_58 = input.LA(1);

                         
                        int index5_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_58);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA5_32 = input.LA(1);

                         
                        int index5_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_32);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA5_46 = input.LA(1);

                         
                        int index5_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_46);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA5_130 = input.LA(1);

                         
                        int index5_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_130);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA5_30 = input.LA(1);

                         
                        int index5_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_30);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA5_113 = input.LA(1);

                         
                        int index5_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_113);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA5_122 = input.LA(1);

                         
                        int index5_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_122);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA5_120 = input.LA(1);

                         
                        int index5_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_120);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA5_39 = input.LA(1);

                         
                        int index5_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_39);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA5_31 = input.LA(1);

                         
                        int index5_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_31);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA5_123 = input.LA(1);

                         
                        int index5_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_123);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA5_129 = input.LA(1);

                         
                        int index5_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_129);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA5_114 = input.LA(1);

                         
                        int index5_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_114);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA5_127 = input.LA(1);

                         
                        int index5_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_127);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA5_37 = input.LA(1);

                         
                        int index5_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_37);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA5_55 = input.LA(1);

                         
                        int index5_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_55);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA5_106 = input.LA(1);

                         
                        int index5_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_106);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA5_43 = input.LA(1);

                         
                        int index5_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_43);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA5_124 = input.LA(1);

                         
                        int index5_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_124);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA5_103 = input.LA(1);

                         
                        int index5_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_103);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA5_56 = input.LA(1);

                         
                        int index5_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_56);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA5_57 = input.LA(1);

                         
                        int index5_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_57);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA5_41 = input.LA(1);

                         
                        int index5_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_41);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA5_125 = input.LA(1);

                         
                        int index5_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_125);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA5_110 = input.LA(1);

                         
                        int index5_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_110);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||(synpred6_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred6_ChemicalChunker())) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA5_60 = input.LA(1);

                         
                        int index5_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_60);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA5_102 = input.LA(1);

                         
                        int index5_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_102);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA5_44 = input.LA(1);

                         
                        int index5_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_44);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA5_105 = input.LA(1);

                         
                        int index5_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_105);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA5_48 = input.LA(1);

                         
                        int index5_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_48);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA5_33 = input.LA(1);

                         
                        int index5_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_33);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA5_112 = input.LA(1);

                         
                        int index5_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_112);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA5_49 = input.LA(1);

                         
                        int index5_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_49);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA5_126 = input.LA(1);

                         
                        int index5_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_126);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA5_118 = input.LA(1);

                         
                        int index5_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_118);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA5_104 = input.LA(1);

                         
                        int index5_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_104);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA5_28 = input.LA(1);

                         
                        int index5_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_28);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA5_128 = input.LA(1);

                         
                        int index5_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_128);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA5_64 = input.LA(1);

                         
                        int index5_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_64);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA5_111 = input.LA(1);

                         
                        int index5_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_111);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA5_61 = input.LA(1);

                         
                        int index5_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_61);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA5_50 = input.LA(1);

                         
                        int index5_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_50);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA5_109 = input.LA(1);

                         
                        int index5_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_109);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_51);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA5_54 = input.LA(1);

                         
                        int index5_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_54);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA5_117 = input.LA(1);

                         
                        int index5_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_117);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA5_47 = input.LA(1);

                         
                        int index5_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_47);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA5_40 = input.LA(1);

                         
                        int index5_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_40);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA5_65 = input.LA(1);

                         
                        int index5_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_65);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA5_29 = input.LA(1);

                         
                        int index5_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_29);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA5_131 = input.LA(1);

                         
                        int index5_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_131);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA5_63 = input.LA(1);

                         
                        int index5_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_63);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\32\uffff";
    static final String DFA6_eofS =
        "\1\1\31\uffff";
    static final String DFA6_minS =
        "\1\45\1\uffff\13\44\13\0\2\uffff";
    static final String DFA6_maxS =
        "\1\u00b2\1\uffff\13\44\13\0\2\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA6_specialS =
        "\15\uffff\1\10\1\1\1\7\1\0\1\6\1\3\1\11\1\5\1\12\1\4\1\2\2\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\1\6\1\7\3\1\1\5\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 161:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_16 = input.LA(1);

                         
                        int index6_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_14 = input.LA(1);

                         
                        int index6_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_23 = input.LA(1);

                         
                        int index6_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_23);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA6_18 = input.LA(1);

                         
                        int index6_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA6_22 = input.LA(1);

                         
                        int index6_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_22);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_20);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA6_17 = input.LA(1);

                         
                        int index6_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_17);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA6_15 = input.LA(1);

                         
                        int index6_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_15);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA6_19 = input.LA(1);

                         
                        int index6_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_19);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA7_static {
    static final String DFA7_eotS =
        "\13\uffff";
    static final String DFA7_eofS =
        "\1\1\12\uffff";
    static final String DFA7_minS =
        "\1\45\1\uffff\3\44\3\0\3\uffff";
    static final String DFA7_maxS =
        "\1\u00b2\1\uffff\3\44\3\0\3\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA7_specialS =
        "\5\uffff\1\0\1\1\1\2\3\uffff}>";
    static final String[] DFA7_transitionS = {
            "\134\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_static.DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_static.DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_static.DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_static.DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_static.DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_static.DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 161:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\110\uffff";
    static final String DFA14_eofS =
        "\110\uffff";
    static final String DFA14_minS =
        "\1\45\25\0\62\uffff";
    static final String DFA14_maxS =
        "\1\u00b2\25\0\62\uffff";
    static final String DFA14_acceptS =
        "\26\uffff\1\2\60\uffff\1\1";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\62\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\26\1\12\1\13\2\26\1\uffff\1\11\1\22\20\uffff\1\21\1\26\1"+
            "\uffff\1\26\1\uffff\3\26\1\20\1\26\1\4\3\26\1\14\6\26\1\23\4"+
            "\uffff\1\15\1\26\11\uffff\1\25\1\uffff\1\26\4\uffff\1\26\1\uffff"+
            "\1\26\1\uffff\1\26\5\uffff\1\26\1\uffff\1\26\3\uffff\1\26\1"+
            "\uffff\2\26\3\uffff\1\5\2\uffff\1\16\5\uffff\1\17\1\uffff\2"+
            "\26\1\2\2\uffff\1\3\1\1\2\26\1\uffff\1\6\1\7\1\10\1\26\1\uffff"+
            "\1\24\14\26\10\uffff\4\26",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "190:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA14_17 = input.LA(1);

                         
                        int index14_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA14_18 = input.LA(1);

                         
                        int index14_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA14_19 = input.LA(1);

                         
                        int index14_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA14_20 = input.LA(1);

                         
                        int index14_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA14_21 = input.LA(1);

                         
                        int index14_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\111\uffff";
    static final String DFA18_eofS =
        "\1\1\110\uffff";
    static final String DFA18_minS =
        "\1\45\1\uffff\106\0\1\uffff";
    static final String DFA18_maxS =
        "\1\u00b2\1\uffff\106\0\1\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\106\uffff\1\1";
    static final String DFA18_specialS =
        "\2\uffff\1\64\1\22\1\54\1\41\1\27\1\17\1\105\1\10\1\25\1\30\1\45"+
        "\1\74\1\37\1\15\1\60\1\53\1\77\1\14\1\65\1\43\1\102\1\21\1\3\1\23"+
        "\1\5\1\72\1\51\1\33\1\11\1\52\1\57\1\103\1\26\1\42\1\24\1\0\1\66"+
        "\1\50\1\63\1\71\1\76\1\7\1\32\1\67\1\55\1\34\1\16\1\104\1\56\1\13"+
        "\1\40\1\101\1\12\1\20\1\44\1\100\1\36\1\46\1\47\1\6\1\70\1\73\1"+
        "\1\1\31\1\35\1\75\1\61\1\4\1\2\1\62\1\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\20\1\12\1\13\1\42\1\52\1\1\1\11\1\32\20\1\1\31\1\51\1\1"+
            "\1\55\1\1\1\40\1\56\1\65\1\30\1\53\1\24\1\54\1\45\1\46\1\26"+
            "\1\57\1\60\1\61\1\62\1\63\1\37\1\33\4\1\1\27\1\41\11\1\1\35"+
            "\1\1\1\64\4\1\1\70\1\1\1\71\1\1\1\72\5\1\1\73\1\1\1\66\3\1\1"+
            "\74\1\1\1\50\1\67\3\1\1\25\2\1\1\15\5\1\1\22\1\1\1\16\1\1\1"+
            "\21\1\1\1\14\1\17\1\23\1\102\1\75\1\1\1\6\1\7\1\10\1\105\1\1"+
            "\1\34\1\47\1\36\1\106\1\103\1\107\1\43\1\44\1\2\1\3\1\5\1\4"+
            "\1\76\10\1\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()* loopback of 195:34: ( ( conjunction )* nounphraseContent {...}?)*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_37);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_64 = input.LA(1);

                         
                        int index18_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_64);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_70 = input.LA(1);

                         
                        int index18_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_70);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_24);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_69 = input.LA(1);

                         
                        int index18_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_69);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_26);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_61);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_43 = input.LA(1);

                         
                        int index18_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_43);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_30);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_54 = input.LA(1);

                         
                        int index18_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_54);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_51 = input.LA(1);

                         
                        int index18_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_51);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_19);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_48 = input.LA(1);

                         
                        int index18_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_48);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_55 = input.LA(1);

                         
                        int index18_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_55);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_23);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_25);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_36);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA18_34 = input.LA(1);

                         
                        int index18_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_34);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA18_65 = input.LA(1);

                         
                        int index18_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_65);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA18_44 = input.LA(1);

                         
                        int index18_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_44);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_29);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA18_47 = input.LA(1);

                         
                        int index18_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_47);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_66);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA18_58 = input.LA(1);

                         
                        int index18_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_58);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA18_52 = input.LA(1);

                         
                        int index18_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_52);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA18_35 = input.LA(1);

                         
                        int index18_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_21);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_56);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA18_59 = input.LA(1);

                         
                        int index18_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_59);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA18_60 = input.LA(1);

                         
                        int index18_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_60);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA18_39 = input.LA(1);

                         
                        int index18_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_39);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_28);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_31);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred95_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA18_46 = input.LA(1);

                         
                        int index18_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA18_50 = input.LA(1);

                         
                        int index18_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_50);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA18_32 = input.LA(1);

                         
                        int index18_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_32);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA18_68 = input.LA(1);

                         
                        int index18_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_68);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA18_71 = input.LA(1);

                         
                        int index18_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_71);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_40);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_20);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA18_38 = input.LA(1);

                         
                        int index18_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_38);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA18_45 = input.LA(1);

                         
                        int index18_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_45);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA18_62 = input.LA(1);

                         
                        int index18_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_62);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_41);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_27);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA18_63 = input.LA(1);

                         
                        int index18_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_63);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA18_67 = input.LA(1);

                         
                        int index18_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_67);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA18_42 = input.LA(1);

                         
                        int index18_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_42);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_18);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA18_57 = input.LA(1);

                         
                        int index18_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_57);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA18_53 = input.LA(1);

                         
                        int index18_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_53);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_22);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA18_33 = input.LA(1);

                         
                        int index18_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_33);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA18_49 = input.LA(1);

                         
                        int index18_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_49);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA17_static {
    static final String DFA17_eotS =
        "\107\uffff";
    static final String DFA17_eofS =
        "\107\uffff";
    static final String DFA17_minS =
        "\1\45\17\uffff\1\0\66\uffff";
    static final String DFA17_maxS =
        "\1\u00b2\17\uffff\1\0\66\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA17_specialS =
        "\20\uffff\1\0\66\uffff}>";
    static final String[] DFA17_transitionS = {
            "\5\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\106\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_static.DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_static.DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_static.DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_static.DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_static.DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_static.DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()* loopback of 195:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA17_16 = input.LA(1);

                         
                        int index17_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\17\uffff";
    static final String DFA20_eofS =
        "\17\uffff";
    static final String DFA20_minS =
        "\1\45\6\44\2\uffff\6\0";
    static final String DFA20_maxS =
        "\1\u00b2\6\44\2\uffff\6\0";
    static final String DFA20_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA20_specialS =
        "\11\uffff\1\3\1\1\1\2\1\4\1\5\1\0}>";
    static final String[] DFA20_transitionS = {
            "\1\7\1\5\1\6\2\7\1\uffff\1\4\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "()* loopback of 198:4: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA20_10 = input.LA(1);

                         
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA20_11 = input.LA(1);

                         
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\110\uffff";
    static final String DFA21_eofS =
        "\1\1\107\uffff";
    static final String DFA21_minS =
        "\1\45\1\uffff\101\0\5\uffff";
    static final String DFA21_maxS =
        "\1\u00b2\1\uffff\101\0\5\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\6\101\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String DFA21_specialS =
        "\2\uffff\1\63\1\45\1\75\1\37\1\60\1\73\1\54\1\33\1\56\1\67\1\25"+
        "\1\72\1\27\1\4\1\32\1\6\1\0\1\74\1\35\1\40\1\100\1\30\1\23\1\71"+
        "\1\57\1\53\1\55\1\36\1\65\1\1\1\64\1\61\1\12\1\26\1\14\1\34\1\16"+
        "\1\20\1\24\1\17\1\5\1\66\1\46\1\21\1\42\1\77\1\7\1\2\1\47\1\70\1"+
        "\51\1\11\1\3\1\13\1\44\1\15\1\50\1\52\1\62\1\76\1\22\1\31\1\43\1"+
        "\41\1\10\5\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\30\1\7\1\10\1\26\1\45\1\1\1\6\1\21\20\1\1\20\1\44\1\1\1"+
            "\50\1\1\1\24\1\51\1\60\1\17\1\46\1\14\1\47\1\40\1\41\1\34\1"+
            "\52\1\53\1\54\1\55\1\56\1\23\1\22\4\1\1\35\1\25\11\1\1\37\1"+
            "\1\1\57\4\1\1\63\1\1\1\64\1\1\1\65\5\1\1\66\1\1\1\61\3\1\1\67"+
            "\1\1\1\43\1\62\3\1\1\15\2\1\1\2\5\1\1\16\1\1\1\27\1\1\1\12\2"+
            "\1\1\13\1\33\1\75\1\70\1\1\1\3\1\4\1\5\1\100\1\1\1\36\1\42\1"+
            "\11\1\101\1\76\1\102\1\31\1\32\4\1\1\71\10\1\1\72\1\77\1\73"+
            "\1\74",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "()+ loopback of 198:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_18 = input.LA(1);

                         
                        int index21_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_31 = input.LA(1);

                         
                        int index21_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_31);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_49 = input.LA(1);

                         
                        int index21_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_49);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_54 = input.LA(1);

                         
                        int index21_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_54);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_42 = input.LA(1);

                         
                        int index21_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_42);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA21_48 = input.LA(1);

                         
                        int index21_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA21_66 = input.LA(1);

                         
                        int index21_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_66);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA21_53 = input.LA(1);

                         
                        int index21_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_53);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA21_34 = input.LA(1);

                         
                        int index21_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_34);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA21_55 = input.LA(1);

                         
                        int index21_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_55);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA21_36 = input.LA(1);

                         
                        int index21_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_36);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA21_57 = input.LA(1);

                         
                        int index21_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_57);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA21_38 = input.LA(1);

                         
                        int index21_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_38);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA21_41 = input.LA(1);

                         
                        int index21_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_41);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA21_39 = input.LA(1);

                         
                        int index21_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_39);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA21_45 = input.LA(1);

                         
                        int index21_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_45);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA21_62 = input.LA(1);

                         
                        int index21_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_62);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA21_24 = input.LA(1);

                         
                        int index21_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_24);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA21_40 = input.LA(1);

                         
                        int index21_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_40);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA21_35 = input.LA(1);

                         
                        int index21_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_35);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA21_23 = input.LA(1);

                         
                        int index21_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_23);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA21_63 = input.LA(1);

                         
                        int index21_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_63);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA21_16 = input.LA(1);

                         
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA21_37 = input.LA(1);

                         
                        int index21_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_37);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA21_20 = input.LA(1);

                         
                        int index21_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_20);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA21_29 = input.LA(1);

                         
                        int index21_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_29);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA21_21 = input.LA(1);

                         
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA21_65 = input.LA(1);

                         
                        int index21_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_65);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA21_46 = input.LA(1);

                         
                        int index21_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_46);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA21_64 = input.LA(1);

                         
                        int index21_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_64);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA21_56 = input.LA(1);

                         
                        int index21_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_56);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA21_3 = input.LA(1);

                         
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA21_44 = input.LA(1);

                         
                        int index21_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_44);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA21_50 = input.LA(1);

                         
                        int index21_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_50);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA21_58 = input.LA(1);

                         
                        int index21_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_58);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA21_52 = input.LA(1);

                         
                        int index21_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_52);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA21_59 = input.LA(1);

                         
                        int index21_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_59);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA21_27 = input.LA(1);

                         
                        int index21_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_27);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA21_28 = input.LA(1);

                         
                        int index21_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_28);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred99_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred99_ChemicalChunker())) ) {s = 67;}

                        else if ( (synpred100_ChemicalChunker()) ) {s = 70;}

                        else if ( ((synpred101_ChemicalChunker()||(synpred101_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA21_26 = input.LA(1);

                         
                        int index21_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_26);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA21_6 = input.LA(1);

                         
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA21_33 = input.LA(1);

                         
                        int index21_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_33);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA21_60 = input.LA(1);

                         
                        int index21_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_60);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA21_32 = input.LA(1);

                         
                        int index21_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_32);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA21_30 = input.LA(1);

                         
                        int index21_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_30);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA21_43 = input.LA(1);

                         
                        int index21_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_43);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred100_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA21_51 = input.LA(1);

                         
                        int index21_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_51);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA21_25 = input.LA(1);

                         
                        int index21_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_25);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA21_7 = input.LA(1);

                         
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA21_19 = input.LA(1);

                         
                        int index21_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_19);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA21_4 = input.LA(1);

                         
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA21_61 = input.LA(1);

                         
                        int index21_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_61);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA21_47 = input.LA(1);

                         
                        int index21_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_47);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA21_22 = input.LA(1);

                         
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\31\uffff";
    static final String DFA22_eofS =
        "\31\uffff";
    static final String DFA22_minS =
        "\1\45\7\uffff\1\0\20\uffff";
    static final String DFA22_maxS =
        "\1\u009c\7\uffff\1\0\20\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\1\26\uffff\1\2";
    static final String DFA22_specialS =
        "\10\uffff\1\0\20\uffff}>";
    static final String[] DFA22_transitionS = {
            "\4\1\2\uffff\2\1\20\uffff\1\1\4\uffff\1\1\2\uffff\1\1\1\uffff"+
            "\1\1\11\uffff\2\1\5\uffff\1\1\47\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "201:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred104_ChemicalChunker()||(synpred104_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\17\uffff";
    static final String DFA23_eofS =
        "\17\uffff";
    static final String DFA23_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA23_maxS =
        "\1\u009c\6\44\1\uffff\6\0\1\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA23_specialS =
        "\10\uffff\1\2\1\1\1\3\1\0\1\5\1\4\1\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\7\1\5\1\6\1\7\2\uffff\1\4\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "204:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_8 = input.LA(1);

                         
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\27\uffff";
    static final String DFA25_eofS =
        "\27\uffff";
    static final String DFA25_minS =
        "\1\45\4\0\1\uffff\12\0\7\uffff";
    static final String DFA25_maxS =
        "\1\u0097\4\0\1\uffff\12\0\7\uffff";
    static final String DFA25_acceptS =
        "\5\uffff\1\1\13\uffff\1\2\5\uffff";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\7\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\21\1\16\1\17\1\21\2\uffff\1\15\1\11\20\uffff\1\10\4\uffff"+
            "\1\21\2\uffff\1\7\1\uffff\1\3\11\uffff\1\21\1\5\5\uffff\1\21"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\21\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\12\1\13\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "204:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA25_14 = input.LA(1);

                         
                        int index25_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA27_static {
    static final String DFA27_eotS =
        "\u0091\uffff";
    static final String DFA27_eofS =
        "\1\3\u0090\uffff";
    static final String DFA27_minS =
        "\1\45\2\0\u008e\uffff";
    static final String DFA27_maxS =
        "\1\u00b2\2\0\u008e\uffff";
    static final String DFA27_acceptS =
        "\3\uffff\1\2\u008c\uffff\1\1";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\u008e\uffff}>";
    static final String[] DFA27_transitionS = {
            "\136\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_static.DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_static.DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_static.DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_static.DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_static.DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_static.DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()* loopback of 204:71: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA29_static {
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\17\uffff";
    static final String DFA29_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u009c\6\44\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\2\1\3\1\5\1\0\1\4\1\1\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\5\1\6\1\7\2\uffff\1\4\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_static.DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_static.DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_static.DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_static.DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_static.DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_static.DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "207:16: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA31_static {
    static final String DFA31_eotS =
        "\27\uffff";
    static final String DFA31_eofS =
        "\27\uffff";
    static final String DFA31_minS =
        "\1\45\4\0\1\uffff\12\0\7\uffff";
    static final String DFA31_maxS =
        "\1\u0097\4\0\1\uffff\12\0\7\uffff";
    static final String DFA31_acceptS =
        "\5\uffff\1\1\13\uffff\1\2\5\uffff";
    static final String DFA31_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\7\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\21\1\16\1\17\1\21\2\uffff\1\15\1\11\20\uffff\1\10\4\uffff"+
            "\1\21\2\uffff\1\7\1\uffff\1\3\11\uffff\1\21\1\5\5\uffff\1\21"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\21\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\12\1\13\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_static.DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_static.DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_static.DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_static.DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_static.DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_static.DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "207:26: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA41_static {
    static final String DFA41_eotS =
        "\13\uffff";
    static final String DFA41_eofS =
        "\1\1\12\uffff";
    static final String DFA41_minS =
        "\1\45\1\uffff\4\44\4\0\1\uffff";
    static final String DFA41_maxS =
        "\1\u00b2\1\uffff\4\44\4\0\1\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA41_specialS =
        "\6\uffff\1\0\1\1\1\2\1\3\1\uffff}>";
    static final String[] DFA41_transitionS = {
            "\175\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_static.DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_static.DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_static.DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_static.DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_static.DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_static.DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:86: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\17\uffff";
    static final String DFA42_eofS =
        "\1\7\16\uffff";
    static final String DFA42_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b2\6\44\1\uffff\6\0\1\uffff";
    static final String DFA42_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA42_specialS =
        "\10\uffff\1\4\1\0\1\2\1\3\1\1\1\5\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "212:91: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA45_static {
    static final String DFA45_eotS =
        "\13\uffff";
    static final String DFA45_eofS =
        "\1\1\12\uffff";
    static final String DFA45_minS =
        "\1\45\1\uffff\4\44\4\0\1\uffff";
    static final String DFA45_maxS =
        "\1\u00b2\1\uffff\4\44\4\0\1\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA45_specialS =
        "\6\uffff\1\2\1\0\1\3\1\1\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\175\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_static.DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_static.DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_static.DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_static.DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_static.DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_static.DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:118: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA45_7 = input.LA(1);

                         
                        int index45_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA45_9 = input.LA(1);

                         
                        int index45_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA45_6 = input.LA(1);

                         
                        int index45_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA45_8 = input.LA(1);

                         
                        int index45_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA46_static {
    static final String DFA46_eotS =
        "\17\uffff";
    static final String DFA46_eofS =
        "\1\7\16\uffff";
    static final String DFA46_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA46_maxS =
        "\1\u00b2\6\44\1\uffff\6\0\1\uffff";
    static final String DFA46_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA46_specialS =
        "\10\uffff\1\5\1\4\1\3\1\0\1\1\1\2\1\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_static.DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_static.DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_static.DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_static.DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_static.DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_static.DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_static.DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_static.DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "212:123: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA46_11 = input.LA(1);

                         
                        int index46_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA46_13 = input.LA(1);

                         
                        int index46_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA46_10 = input.LA(1);

                         
                        int index46_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA48_static {
    static final String DFA48_eotS =
        "\155\uffff";
    static final String DFA48_eofS =
        "\1\15\27\uffff\14\15\40\uffff\25\15\12\uffff\12\15";
    static final String DFA48_minS =
        "\1\45\14\44\1\uffff\12\44\14\45\12\0\25\44\1\uffff\25\45\12\44"+
        "\12\45";
    static final String DFA48_maxS =
        "\1\u00b2\14\44\1\uffff\12\44\14\u00b2\12\0\25\44\1\uffff\25\u00b2"+
        "\12\44\12\u00b2";
    static final String DFA48_acceptS =
        "\15\uffff\1\2\65\uffff\1\1\51\uffff";
    static final String DFA48_specialS =
        "\44\uffff\1\1\1\11\1\4\1\2\1\0\1\7\1\10\1\3\1\5\1\6\77\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\15\1\13\1\14\3\15\1\12\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\20\15\1\2\23\15\1\7\1\10\1\11\1\15\1\1\10\15\1\3\1\4\1"+
            "\6\1\5\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\43",
            "",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\20\15\1\70\23\15\1\56\1\57\1\60\1\15\1\1\10\15\1\64\1"+
            "\65\1\67\1\66\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\101\1\102\3\15\1\100\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\75\1\76\1\77\12\15\1\71\1\72\1\74\1\73\3\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\101\1\102\3\15\1\100\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\75\1\76\1\77\12\15\1\71\1\72\1\74\1\73\3\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\101\1\102\3\15\1\100\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\75\1\76\1\77\12\15\1\71\1\72\1\74\1\73\3\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\101\1\102\3\15\1\100\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\75\1\76\1\77\12\15\1\71\1\72\1\74\1\73\3\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\104",
            "\1\105",
            "\1\106",
            "\1\107",
            "\1\110",
            "\1\111",
            "\1\112",
            "\1\113",
            "\1\114",
            "\1\115",
            "\1\116",
            "\1\117",
            "\1\120",
            "\1\121",
            "\1\122",
            "\1\123",
            "\1\124",
            "\1\125",
            "\1\126",
            "\1\127",
            "\1\130",
            "",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\1\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\141\1\142\3\15\1\140\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\135\1\136\1\137\12\15\1\131\1\132\1\134\1\133"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\141\1\142\3\15\1\140\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\135\1\136\1\137\12\15\1\131\1\132\1\134\1\133"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\141\1\142\3\15\1\140\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\135\1\136\1\137\12\15\1\131\1\132\1\134\1\133"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\141\1\142\3\15\1\140\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\135\1\136\1\137\12\15\1\131\1\132\1\134\1\133"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\1\143",
            "\1\144",
            "\1\145",
            "\1\146",
            "\1\147",
            "\1\150",
            "\1\151",
            "\1\152",
            "\1\153",
            "\1\154",
            "\1\15\1\141\1\142\3\15\1\140\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\135\1\136\1\137\12\15\1\131\1\132\1\134\1\133"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\141\1\142\3\15\1\140\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\135\1\136\1\137\12\15\1\131\1\132\1\134\1\133"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\141\1\142\3\15\1\140\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\135\1\136\1\137\12\15\1\131\1\132\1\134\1\133"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\15\1\141\1\142\3\15\1\140\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\135\1\136\1\137\12\15\1\131\1\132\1\134\1\133"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\56\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15"
    };
    }

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_static.DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_static.DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_static.DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_static.DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_static.DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_static.DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:133: ( otherVerbStructure )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA48_40 = input.LA(1);

                         
                        int index48_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_40);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA48_36 = input.LA(1);

                         
                        int index48_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_36);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA48_39 = input.LA(1);

                         
                        int index48_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_39);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA48_43 = input.LA(1);

                         
                        int index48_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA48_38 = input.LA(1);

                         
                        int index48_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_38);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA48_44 = input.LA(1);

                         
                        int index48_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_44);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA48_45 = input.LA(1);

                         
                        int index48_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_45);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA48_41 = input.LA(1);

                         
                        int index48_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_41);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA48_42 = input.LA(1);

                         
                        int index48_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_42);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA48_37 = input.LA(1);

                         
                        int index48_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\u0097\uffff";
    static final String DFA49_eofS =
        "\1\53\53\uffff\14\53\65\uffff\12\53\1\uffff\13\53\12\uffff\12\53";
    static final String DFA49_minS =
        "\1\45\52\44\1\uffff\14\45\36\0\26\44\1\uffff\12\45\1\0\13\45\12"+
        "\44\12\45";
    static final String DFA49_maxS =
        "\1\u00b2\52\44\1\uffff\14\u00b2\36\0\26\44\1\uffff\12\u00b2\1\0"+
        "\13\u00b2\12\44\12\u00b2";
    static final String DFA49_acceptS =
        "\53\uffff\1\2\100\uffff\1\1\52\uffff";
    static final String DFA49_specialS =
        "\70\uffff\1\36\1\7\1\1\1\15\1\26\1\16\1\33\1\25\1\14\1\31\1\27"+
        "\1\2\1\6\1\32\1\20\1\34\1\12\1\21\1\24\1\0\1\17\1\35\1\5\1\11\1"+
        "\22\1\4\1\30\1\23\1\13\1\3\41\uffff\1\10\37\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\53\1\13\1\14\3\53\1\12\51\53\1\37\1\30\2\53\1\20\1\15\1"+
            "\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27\1"+
            "\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41\1"+
            "\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51\1"+
            "\52\1\53\1\2\23\53\1\7\1\10\1\11\1\53\1\1\10\53\1\3\1\4\1\6"+
            "\1\5\15\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\67",
            "\1\70",
            "\1\71",
            "\1\72",
            "\1\73",
            "\1\74",
            "\1\75",
            "\1\76",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\1\103",
            "\1\104",
            "\1\105",
            "\1\106",
            "\1\107",
            "\1\110",
            "\1\111",
            "\1\112",
            "\1\113",
            "\1\114",
            "\1\115",
            "\1\116",
            "\1\117",
            "\1\120",
            "\1\121",
            "\1\122",
            "\1\123",
            "\1\124",
            "\1\125",
            "",
            "\1\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\1\53\1\141\23\53\1\126\1\127\1\130\1\53\1\1\10\53\1\134"+
            "\1\135\1\137\1\136\15\53",
            "\1\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\1\53\1\152\1\153\3\53\1\151\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51"+
            "\1\52\25\53\1\146\1\147\1\150\12\53\1\142\1\143\1\145\1\144"+
            "\15\53",
            "\1\53\1\152\1\153\3\53\1\151\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51"+
            "\1\52\25\53\1\146\1\147\1\150\12\53\1\142\1\143\1\145\1\144"+
            "\15\53",
            "\1\53\1\152\1\153\3\53\1\151\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51"+
            "\1\52\25\53\1\146\1\147\1\150\12\53\1\142\1\143\1\145\1\144"+
            "\15\53",
            "\1\53\1\152\1\153\3\53\1\151\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51"+
            "\1\52\25\53\1\146\1\147\1\150\12\53\1\142\1\143\1\145\1\144"+
            "\15\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\155",
            "\1\156",
            "\1\157",
            "\1\160",
            "\1\161",
            "\1\162",
            "\1\163",
            "\1\164",
            "\1\165",
            "\1\166",
            "\1\167",
            "\1\170",
            "\1\171",
            "\1\172",
            "\1\173",
            "\1\174",
            "\1\175",
            "\1\176",
            "\1\177",
            "\1\u0080",
            "\1\u0081",
            "\1\u0082",
            "",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\1\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\1\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\1\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\1\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\1\uffff",
            "\1\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\1\53\1\u008b\1\u008c\3\53\1\u008a\51\53\1\37\1\30\2\53\1"+
            "\20\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1"+
            "\26\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1"+
            "\40\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1"+
            "\50\1\51\1\52\25\53\1\u0087\1\u0088\1\u0089\12\53\1\u0083\1"+
            "\u0084\1\u0086\1\u0085\15\53",
            "\1\53\1\u008b\1\u008c\3\53\1\u008a\51\53\1\37\1\30\2\53\1"+
            "\20\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1"+
            "\26\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1"+
            "\40\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1"+
            "\50\1\51\1\52\25\53\1\u0087\1\u0088\1\u0089\12\53\1\u0083\1"+
            "\u0084\1\u0086\1\u0085\15\53",
            "\1\53\1\u008b\1\u008c\3\53\1\u008a\51\53\1\37\1\30\2\53\1"+
            "\20\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1"+
            "\26\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1"+
            "\40\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1"+
            "\50\1\51\1\52\25\53\1\u0087\1\u0088\1\u0089\12\53\1\u0083\1"+
            "\u0084\1\u0086\1\u0085\15\53",
            "\1\53\1\u008b\1\u008c\3\53\1\u008a\51\53\1\37\1\30\2\53\1"+
            "\20\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1"+
            "\26\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1"+
            "\40\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1"+
            "\50\1\51\1\52\25\53\1\u0087\1\u0088\1\u0089\12\53\1\u0083\1"+
            "\u0084\1\u0086\1\u0085\15\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\1\u008d",
            "\1\u008e",
            "\1\u008f",
            "\1\u0090",
            "\1\u0091",
            "\1\u0092",
            "\1\u0093",
            "\1\u0094",
            "\1\u0095",
            "\1\u0096",
            "\1\53\1\u008b\1\u008c\3\53\1\u008a\51\53\1\37\1\30\2\53\1"+
            "\20\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1"+
            "\26\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1"+
            "\40\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1"+
            "\50\1\51\1\52\25\53\1\u0087\1\u0088\1\u0089\12\53\1\u0083\1"+
            "\u0084\1\u0086\1\u0085\15\53",
            "\1\53\1\u008b\1\u008c\3\53\1\u008a\51\53\1\37\1\30\2\53\1"+
            "\20\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1"+
            "\26\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1"+
            "\40\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1"+
            "\50\1\51\1\52\25\53\1\u0087\1\u0088\1\u0089\12\53\1\u0083\1"+
            "\u0084\1\u0086\1\u0085\15\53",
            "\1\53\1\u008b\1\u008c\3\53\1\u008a\51\53\1\37\1\30\2\53\1"+
            "\20\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1"+
            "\26\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1"+
            "\40\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1"+
            "\50\1\51\1\52\25\53\1\u0087\1\u0088\1\u0089\12\53\1\u0083\1"+
            "\u0084\1\u0086\1\u0085\15\53",
            "\1\53\1\u008b\1\u008c\3\53\1\u008a\51\53\1\37\1\30\2\53\1"+
            "\20\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1"+
            "\26\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1"+
            "\40\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1"+
            "\50\1\51\1\52\25\53\1\u0087\1\u0088\1\u0089\12\53\1\u0083\1"+
            "\u0084\1\u0086\1\u0085\15\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\60\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53"
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "212:153: ( actionVerbStructure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_75 = input.LA(1);

                         
                        int index49_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_75);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_58 = input.LA(1);

                         
                        int index49_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_58);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_67 = input.LA(1);

                         
                        int index49_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_67);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_85);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_81 = input.LA(1);

                         
                        int index49_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_81);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA49_78 = input.LA(1);

                         
                        int index49_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_78);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA49_68 = input.LA(1);

                         
                        int index49_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_68);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA49_57 = input.LA(1);

                         
                        int index49_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_57);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA49_119 = input.LA(1);

                         
                        int index49_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_119);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA49_79 = input.LA(1);

                         
                        int index49_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_79);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA49_72 = input.LA(1);

                         
                        int index49_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_72);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA49_84 = input.LA(1);

                         
                        int index49_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_84);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA49_64 = input.LA(1);

                         
                        int index49_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_64);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA49_59 = input.LA(1);

                         
                        int index49_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_59);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA49_61 = input.LA(1);

                         
                        int index49_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_61);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA49_76 = input.LA(1);

                         
                        int index49_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_76);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA49_70 = input.LA(1);

                         
                        int index49_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_70);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA49_73 = input.LA(1);

                         
                        int index49_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_73);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA49_80 = input.LA(1);

                         
                        int index49_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_80);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA49_83 = input.LA(1);

                         
                        int index49_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_83);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA49_74 = input.LA(1);

                         
                        int index49_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_74);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA49_63 = input.LA(1);

                         
                        int index49_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_63);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA49_60 = input.LA(1);

                         
                        int index49_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_60);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA49_66 = input.LA(1);

                         
                        int index49_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_66);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA49_82 = input.LA(1);

                         
                        int index49_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_82);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA49_65 = input.LA(1);

                         
                        int index49_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_65);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA49_69 = input.LA(1);

                         
                        int index49_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_69);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA49_62 = input.LA(1);

                         
                        int index49_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_62);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA49_71 = input.LA(1);

                         
                        int index49_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_71);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA49_77 = input.LA(1);

                         
                        int index49_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_77);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA49_56 = input.LA(1);

                         
                        int index49_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_56);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA54_static {
    static final String DFA54_eotS =
        "\u0091\uffff";
    static final String DFA54_eofS =
        "\1\13\u0090\uffff";
    static final String DFA54_minS =
        "\1\45\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\26\uffff\1\0\1\uffff"+
        "\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA54_maxS =
        "\1\u00b2\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\26\uffff\1\0"+
        "\1\uffff\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA54_acceptS =
        "\13\uffff\1\2\u0084\uffff\1\1";
    static final String DFA54_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\4\uffff\1\14\3\uffff\1\15\26\uffff\1\16\1\uffff\1\17\34\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\13\1\11\1\12\3\13\1\10\1\13\1\117\1\120\1\116\1\124\1\125"+
            "\1\134\1\135\1\121\1\133\1\126\1\130\1\122\1\123\1\132\1\131"+
            "\1\127\1\13\1\55\7\13\1\57\74\13\1\15\1\13\1\u0086\11\13\1\14"+
            "\1\22\1\26\2\13\1\115\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\114\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_static.DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_static.DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_static.DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_static.DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_static.DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_static.DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:182: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA54_2 = input.LA(1);

                         
                        int index54_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA54_4 = input.LA(1);

                         
                        int index54_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA54_5 = input.LA(1);

                         
                        int index54_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA54_6 = input.LA(1);

                         
                        int index54_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA54_7 = input.LA(1);

                         
                        int index54_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA54_18 = input.LA(1);

                         
                        int index54_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_18);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA54_22 = input.LA(1);

                         
                        int index54_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA54_45 = input.LA(1);

                         
                        int index54_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_45);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA54_47 = input.LA(1);

                         
                        int index54_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_47);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA54_76 = input.LA(1);

                         
                        int index54_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_76);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA54_77 = input.LA(1);

                         
                        int index54_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_77);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA54_78 = input.LA(1);

                         
                        int index54_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_78);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA54_79 = input.LA(1);

                         
                        int index54_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_79);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA54_80 = input.LA(1);

                         
                        int index54_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_80);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA54_81 = input.LA(1);

                         
                        int index54_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_81);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA54_82 = input.LA(1);

                         
                        int index54_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_82);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA54_83 = input.LA(1);

                         
                        int index54_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_83);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA54_84 = input.LA(1);

                         
                        int index54_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_84);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA54_85 = input.LA(1);

                         
                        int index54_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_85);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA54_86 = input.LA(1);

                         
                        int index54_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_86);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA54_87 = input.LA(1);

                         
                        int index54_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_87);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA54_88 = input.LA(1);

                         
                        int index54_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_88);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA54_89 = input.LA(1);

                         
                        int index54_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_89);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA54_90 = input.LA(1);

                         
                        int index54_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_90);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA54_91 = input.LA(1);

                         
                        int index54_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_91);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA54_92 = input.LA(1);

                         
                        int index54_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_92);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA54_93 = input.LA(1);

                         
                        int index54_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_93);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA54_134 = input.LA(1);

                         
                        int index54_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_134);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA60_static {
    static final String DFA60_eotS =
        "\13\uffff";
    static final String DFA60_eofS =
        "\1\1\12\uffff";
    static final String DFA60_minS =
        "\1\45\1\uffff\4\44\4\0\1\uffff";
    static final String DFA60_maxS =
        "\1\u00b2\1\uffff\4\44\4\0\1\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA60_specialS =
        "\6\uffff\1\3\1\1\1\2\1\0\1\uffff}>";
    static final String[] DFA60_transitionS = {
            "\175\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_static.DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_static.DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_static.DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_static.DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_static.DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_static.DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_static.DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_static.DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "()* loopback of 214:59: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA60_9 = input.LA(1);

                         
                        int index60_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA60_7 = input.LA(1);

                         
                        int index60_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA60_8 = input.LA(1);

                         
                        int index60_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA60_6 = input.LA(1);

                         
                        int index60_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA61_static {
    static final String DFA61_eotS =
        "\17\uffff";
    static final String DFA61_eofS =
        "\1\7\16\uffff";
    static final String DFA61_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA61_maxS =
        "\1\u00b2\6\44\1\uffff\6\0\1\uffff";
    static final String DFA61_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA61_specialS =
        "\10\uffff\1\2\1\1\1\3\1\0\1\5\1\4\1\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_static.DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_static.DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_static.DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_static.DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_static.DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_static.DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_static.DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_static.DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "214:64: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA61_11 = input.LA(1);

                         
                        int index61_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA61_9 = input.LA(1);

                         
                        int index61_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA61_8 = input.LA(1);

                         
                        int index61_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA61_10 = input.LA(1);

                         
                        int index61_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA61_13 = input.LA(1);

                         
                        int index61_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA61_12 = input.LA(1);

                         
                        int index61_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA68_static {
    static final String DFA68_eotS =
        "\13\uffff";
    static final String DFA68_eofS =
        "\1\1\12\uffff";
    static final String DFA68_minS =
        "\1\45\1\uffff\4\44\4\0\1\uffff";
    static final String DFA68_maxS =
        "\1\u00b2\1\uffff\4\44\4\0\1\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA68_specialS =
        "\6\uffff\1\2\1\3\1\1\1\0\1\uffff}>";
    static final String[] DFA68_transitionS = {
            "\175\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_static.DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_static.DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_static.DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_static.DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_static.DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_static.DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_static.DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_static.DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "()* loopback of 215:57: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA68_9 = input.LA(1);

                         
                        int index68_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA68_8 = input.LA(1);

                         
                        int index68_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA68_6 = input.LA(1);

                         
                        int index68_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA68_7 = input.LA(1);

                         
                        int index68_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA69_static {
    static final String DFA69_eotS =
        "\17\uffff";
    static final String DFA69_eofS =
        "\1\7\16\uffff";
    static final String DFA69_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA69_maxS =
        "\1\u00b2\6\44\1\uffff\6\0\1\uffff";
    static final String DFA69_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA69_specialS =
        "\10\uffff\1\2\1\3\1\4\1\5\1\1\1\0\1\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_static.DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_static.DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_static.DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_static.DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_static.DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_static.DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_static.DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_static.DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "215:62: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA69_13 = input.LA(1);

                         
                        int index69_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA69_12 = input.LA(1);

                         
                        int index69_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA69_8 = input.LA(1);

                         
                        int index69_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA69_9 = input.LA(1);

                         
                        int index69_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA69_10 = input.LA(1);

                         
                        int index69_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA69_11 = input.LA(1);

                         
                        int index69_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA72_static {
    static final String DFA72_eotS =
        "\46\uffff";
    static final String DFA72_eofS =
        "\37\uffff\1\41\2\uffff\1\41\3\uffff";
    static final String DFA72_minS =
        "\1\125\12\uffff\1\44\23\uffff\1\45\1\44\1\uffff\1\45\1\44\1\0\1"+
        "\uffff";
    static final String DFA72_maxS =
        "\1\177\12\uffff\1\44\23\uffff\1\u00b2\1\44\1\uffff\1\u00b2\1\44"+
        "\1\0\1\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\15"+
        "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\2\uffff\1\13\3\uffff\1\14";
    static final String DFA72_specialS =
        "\44\uffff\1\0\1\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\23\1\14\2\uffff\1\4\1\1\1\2\1\3\1\5\1\6\1\uffff\1\7\1\10"+
            "\1\uffff\1\11\1\uffff\1\12\1\13\1\15\1\16\1\uffff\1\17\1\uffff"+
            "\1\20\1\uffff\1\21\1\22\1\uffff\1\24\1\25\1\uffff\1\26\1\uffff"+
            "\1\27\1\30\1\31\1\uffff\1\32\1\33\1\uffff\1\34\1\35\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\152\41\1\40\43\41",
            "\1\42",
            "",
            "\71\41\1\43\124\41",
            "\1\44",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_static.DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_static.DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_static.DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_static.DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_static.DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_static.DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_static.DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_static.DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "218:1: actionVerb : ( vbadd | vbcharge | vbcontain | vbdilute | vbdrop | vbfill | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | degassMultiVerb | vbsubject | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbsubmerge | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA72_36 = input.LA(1);

                         
                        int index72_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 37;}

                         
                        input.seek(index72_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\124\uffff";
    static final String DFA75_eofS =
        "\124\uffff";
    static final String DFA75_minS =
        "\1\45\2\uffff\20\0\1\uffff\3\0\1\uffff\4\0\1\uffff\2\0\65\uffff";
    static final String DFA75_maxS =
        "\1\u00b2\2\uffff\20\0\1\uffff\3\0\1\uffff\4\0\1\uffff\2\0\65\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\1\1\2\20\uffff\1\6\10\uffff\1\7\2\uffff\1\11\1\13\1"+
        "\14\1\16\1\21\1\23\1\26\1\30\1\32\1\33\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\50\1\51\1\52\1\53\1\54\1\56\1\57\1\60\5\uffff"+
        "\1\61\1\62\1\63\1\3\1\5\1\24\1\4\1\20\1\27\1\55\1\47\1\25\1\10\1"+
        "\34\1\15\1\12\1\17\1\22\1\46\1\64\1\31";
    static final String DFA75_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\uffff\1\20\1\21\1\22\1\uffff\1\23\1\24\1\25"+
        "\1\26\1\uffff\1\27\1\30\65\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\35\1\20\1\21\1\33\1\44\1\uffff\1\17\1\13\20\uffff\1\12\1"+
            "\43\1\uffff\1\47\1\uffff\1\31\1\50\1\57\1\11\1\45\1\6\1\46\1"+
            "\36\1\37\1\24\1\51\1\52\1\53\1\54\1\55\1\30\1\22\4\uffff\1\25"+
            "\1\32\11\uffff\1\23\1\uffff\1\56\4\uffff\1\62\1\uffff\1\63\1"+
            "\uffff\1\64\5\uffff\1\65\1\uffff\1\60\3\uffff\1\66\1\uffff\1"+
            "\42\1\61\3\uffff\1\7\2\uffff\1\4\5\uffff\1\10\1\uffff\1\34\1"+
            "\uffff\1\3\2\uffff\1\5\1\23\1\71\1\67\1\uffff\1\14\1\15\1\16"+
            "\1\77\1\uffff\1\26\1\40\1\41\1\100\1\71\1\101\1\1\1\2\4\uffff"+
            "\1\70\10\uffff\4\71",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "226:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_3 = input.LA(1);

                         
                        int index75_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (((synpred200_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred200_ChemicalChunker())) ) {s = 28;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index75_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA75_4 = input.LA(1);

                         
                        int index75_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                         
                        input.seek(index75_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA75_5 = input.LA(1);

                         
                        int index75_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred197_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index75_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred216_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA75_7 = input.LA(1);

                         
                        int index75_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index75_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA75_8 = input.LA(1);

                         
                        int index75_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred232_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index75_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA75_9 = input.LA(1);

                         
                        int index75_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index75_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA75_11 = input.LA(1);

                         
                        int index75_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index75_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA75_12 = input.LA(1);

                         
                        int index75_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index75_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA75_13 = input.LA(1);

                         
                        int index75_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index75_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA75_14 = input.LA(1);

                         
                        int index75_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index75_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA75_15 = input.LA(1);

                         
                        int index75_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index75_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA75_16 = input.LA(1);

                         
                        int index75_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index75_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA75_17 = input.LA(1);

                         
                        int index75_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                         
                        input.seek(index75_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA75_18 = input.LA(1);

                         
                        int index75_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                         
                        input.seek(index75_18);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA75_20 = input.LA(1);

                         
                        int index75_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred221_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index75_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA75_21 = input.LA(1);

                         
                        int index75_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred206_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index75_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA75_22 = input.LA(1);

                         
                        int index75_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred203_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index75_22);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA75_24 = input.LA(1);

                         
                        int index75_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred208_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index75_24);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA75_25 = input.LA(1);

                         
                        int index75_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred211_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index75_25);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA75_26 = input.LA(1);

                         
                        int index75_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index75_26);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA75_27 = input.LA(1);

                         
                        int index75_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 82;}

                         
                        input.seek(index75_27);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA75_29 = input.LA(1);

                         
                        int index75_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 28;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index75_29);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA75_30 = input.LA(1);

                         
                        int index75_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred218_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index75_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA77_static {
    static final String DFA77_eotS =
        "\45\uffff";
    static final String DFA77_eofS =
        "\45\uffff";
    static final String DFA77_minS =
        "\1\46\36\0\6\uffff";
    static final String DFA77_maxS =
        "\1\u00a7\36\0\6\uffff";
    static final String DFA77_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA77_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_static.DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_static.DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_static.DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_static.DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_static.DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_static.DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_static.DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_static.DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "231:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA77_1 = input.LA(1);

                         
                        int index77_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA77_2 = input.LA(1);

                         
                        int index77_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA77_3 = input.LA(1);

                         
                        int index77_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA77_4 = input.LA(1);

                         
                        int index77_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA77_5 = input.LA(1);

                         
                        int index77_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA77_6 = input.LA(1);

                         
                        int index77_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA77_7 = input.LA(1);

                         
                        int index77_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA77_8 = input.LA(1);

                         
                        int index77_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA77_9 = input.LA(1);

                         
                        int index77_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA77_10 = input.LA(1);

                         
                        int index77_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA77_11 = input.LA(1);

                         
                        int index77_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA77_12 = input.LA(1);

                         
                        int index77_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA77_13 = input.LA(1);

                         
                        int index77_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index77_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA77_14 = input.LA(1);

                         
                        int index77_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA77_15 = input.LA(1);

                         
                        int index77_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA77_16 = input.LA(1);

                         
                        int index77_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA77_17 = input.LA(1);

                         
                        int index77_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA77_18 = input.LA(1);

                         
                        int index77_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA77_19 = input.LA(1);

                         
                        int index77_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA77_20 = input.LA(1);

                         
                        int index77_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA77_21 = input.LA(1);

                         
                        int index77_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA77_22 = input.LA(1);

                         
                        int index77_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA77_23 = input.LA(1);

                         
                        int index77_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA77_24 = input.LA(1);

                         
                        int index77_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA77_25 = input.LA(1);

                         
                        int index77_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA77_26 = input.LA(1);

                         
                        int index77_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA77_27 = input.LA(1);

                         
                        int index77_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA77_28 = input.LA(1);

                         
                        int index77_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA77_29 = input.LA(1);

                         
                        int index77_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index77_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA77_30 = input.LA(1);

                         
                        int index77_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index77_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA79_static {
    static final String DFA79_eotS =
        "\17\uffff";
    static final String DFA79_eofS =
        "\17\uffff";
    static final String DFA79_minS =
        "\1\46\1\uffff\6\44\1\uffff\6\0";
    static final String DFA79_maxS =
        "\1\u00a5\1\uffff\6\44\1\uffff\6\0";
    static final String DFA79_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA79_specialS =
        "\11\uffff\1\2\1\3\1\0\1\4\1\1\1\5}>";
    static final String[] DFA79_transitionS = {
            "\1\6\1\7\3\uffff\1\5\1\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1"+
            "\1\12\uffff\1\1\55\uffff\1\1\2\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_static.DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_static.DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_static.DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_static.DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_static.DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_static.DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_static.DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_static.DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "()* loopback of 237:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA79_11 = input.LA(1);

                         
                        int index79_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA79_13 = input.LA(1);

                         
                        int index79_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA79_9 = input.LA(1);

                         
                        int index79_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA79_10 = input.LA(1);

                         
                        int index79_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA79_12 = input.LA(1);

                         
                        int index79_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA79_14 = input.LA(1);

                         
                        int index79_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA81_static {
    static final String DFA81_eotS =
        "\27\uffff";
    static final String DFA81_eofS =
        "\27\uffff";
    static final String DFA81_minS =
        "\1\46\1\uffff\12\44\12\0\1\uffff";
    static final String DFA81_maxS =
        "\1\u00a7\1\uffff\12\44\12\0\1\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA81_specialS =
        "\14\uffff\1\10\1\6\1\11\1\4\1\2\1\5\1\1\1\3\1\7\1\0\1\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\uffff\20\1\1\uffff\1\1\121\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_static.DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_static.DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_static.DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_static.DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_static.DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_static.DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()* loopback of 243:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA81_21 = input.LA(1);

                         
                        int index81_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA81_18 = input.LA(1);

                         
                        int index81_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_18);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA81_16 = input.LA(1);

                         
                        int index81_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA81_19 = input.LA(1);

                         
                        int index81_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA81_15 = input.LA(1);

                         
                        int index81_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_15);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA81_17 = input.LA(1);

                         
                        int index81_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_17);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA81_13 = input.LA(1);

                         
                        int index81_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_13);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA81_20 = input.LA(1);

                         
                        int index81_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_20);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA81_12 = input.LA(1);

                         
                        int index81_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_12);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA81_14 = input.LA(1);

                         
                        int index81_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA87_static {
    static final String DFA87_eotS =
        "\27\uffff";
    static final String DFA87_eofS =
        "\27\uffff";
    static final String DFA87_minS =
        "\1\46\12\44\1\uffff\12\0\1\uffff";
    static final String DFA87_maxS =
        "\1\u00a7\12\44\1\uffff\12\0\1\uffff";
    static final String DFA87_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA87_specialS =
        "\14\uffff\1\5\1\11\1\10\1\0\1\4\1\3\1\7\1\2\1\6\1\1\1\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\11\1\12\3\uffff\1\10\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_static.DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_static.DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_static.DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_static.DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_static.DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_static.DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "248:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA87_15 = input.LA(1);

                         
                        int index87_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA87_21 = input.LA(1);

                         
                        int index87_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA87_19 = input.LA(1);

                         
                        int index87_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA87_17 = input.LA(1);

                         
                        int index87_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA87_16 = input.LA(1);

                         
                        int index87_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_16);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA87_12 = input.LA(1);

                         
                        int index87_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_12);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA87_20 = input.LA(1);

                         
                        int index87_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_20);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA87_18 = input.LA(1);

                         
                        int index87_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA87_14 = input.LA(1);

                         
                        int index87_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_14);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA87_13 = input.LA(1);

                         
                        int index87_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA99_static {
    static final String DFA99_eotS =
        "\u0091\uffff";
    static final String DFA99_eofS =
        "\1\1\u0090\uffff";
    static final String DFA99_minS =
        "\1\45\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\15\0\160\uffff";
    static final String DFA99_maxS =
        "\1\u00b2\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\15\0\160\uffff";
    static final String DFA99_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA99_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\4\uffff\1\10\1"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\160\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\1\1\11\1\12\3\1\1\10\1\35\20\1\1\34\7\1\1\33\1\1\1\27\3"+
            "\1\1\31\6\1\1\36\4\1\1\32\12\1\1\40\35\1\1\30\2\1\1\15\5\1\1"+
            "\25\3\1\1\24\1\1\1\14\1\22\1\26\3\1\1\5\1\6\1\7\2\1\1\37\30"+
            "\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_static.DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_static.DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_static.DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_static.DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_static.DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_static.DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_static.DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_static.DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()* loopback of 269:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA99_5 = input.LA(1);

                         
                        int index99_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA99_6 = input.LA(1);

                         
                        int index99_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA99_7 = input.LA(1);

                         
                        int index99_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA99_8 = input.LA(1);

                         
                        int index99_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA99_9 = input.LA(1);

                         
                        int index99_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA99_10 = input.LA(1);

                         
                        int index99_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA99_12 = input.LA(1);

                         
                        int index99_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA99_13 = input.LA(1);

                         
                        int index99_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA99_18 = input.LA(1);

                         
                        int index99_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA99_20 = input.LA(1);

                         
                        int index99_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA99_21 = input.LA(1);

                         
                        int index99_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_21);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA99_22 = input.LA(1);

                         
                        int index99_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_22);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA99_23 = input.LA(1);

                         
                        int index99_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_23);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA99_24 = input.LA(1);

                         
                        int index99_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_24);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA99_25 = input.LA(1);

                         
                        int index99_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_25);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA99_26 = input.LA(1);

                         
                        int index99_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_26);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA99_27 = input.LA(1);

                         
                        int index99_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_27);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA99_28 = input.LA(1);

                         
                        int index99_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_28);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA99_29 = input.LA(1);

                         
                        int index99_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA99_30 = input.LA(1);

                         
                        int index99_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_30);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA99_31 = input.LA(1);

                         
                        int index99_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_31);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA99_32 = input.LA(1);

                         
                        int index99_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA98_static {
    static final String DFA98_eotS =
        "\27\uffff";
    static final String DFA98_eofS =
        "\27\uffff";
    static final String DFA98_minS =
        "\1\46\15\uffff\1\0\10\uffff";
    static final String DFA98_maxS =
        "\1\u009a\15\uffff\1\0\10\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA98_specialS =
        "\16\uffff\1\0\10\uffff}>";
    static final String[] DFA98_transitionS = {
            "\2\1\3\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\26\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_static.DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_static.DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_static.DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_static.DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_static.DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_static.DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_static.DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_static.DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "()* loopback of 269:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA98_14 = input.LA(1);

                         
                        int index98_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA105_static {
    static final String DFA105_eotS =
        "\35\uffff";
    static final String DFA105_eofS =
        "\1\1\34\uffff";
    static final String DFA105_minS =
        "\1\46\1\uffff\23\0\10\uffff";
    static final String DFA105_maxS =
        "\1\u009a\1\uffff\23\0\10\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\11\23\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA105_specialS =
        "\2\uffff\1\10\1\13\1\22\1\11\1\17\1\7\1\16\1\20\1\6\1\15\1\1\1"+
        "\2\1\12\1\3\1\5\1\0\1\21\1\14\1\4\10\uffff}>";
    static final String[] DFA105_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\22\20\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\23\4\uffff\1\15\12\uffff\1\1\35"+
            "\uffff\1\5\2\uffff\1\16\5\uffff\1\17\3\uffff\1\2\2\uffff\1\3"+
            "\4\uffff\1\6\1\7\1\10\2\uffff\1\24",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_static.DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_static.DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_static.DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_static.DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_static.DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_static.DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "()+ loopback of 276:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA105_17 = input.LA(1);

                         
                        int index105_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_17);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA105_12 = input.LA(1);

                         
                        int index105_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA105_13 = input.LA(1);

                         
                        int index105_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA105_15 = input.LA(1);

                         
                        int index105_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_15);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA105_20 = input.LA(1);

                         
                        int index105_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA105_16 = input.LA(1);

                         
                        int index105_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred283_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_16);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA105_10 = input.LA(1);

                         
                        int index105_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_10);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA105_7 = input.LA(1);

                         
                        int index105_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_7);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA105_2 = input.LA(1);

                         
                        int index105_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_2);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA105_5 = input.LA(1);

                         
                        int index105_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_5);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA105_14 = input.LA(1);

                         
                        int index105_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_14);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA105_3 = input.LA(1);

                         
                        int index105_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_3);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA105_19 = input.LA(1);

                         
                        int index105_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_19);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA105_11 = input.LA(1);

                         
                        int index105_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_11);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA105_8 = input.LA(1);

                         
                        int index105_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_8);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA105_6 = input.LA(1);

                         
                        int index105_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_6);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA105_9 = input.LA(1);

                         
                        int index105_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_9);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA105_18 = input.LA(1);

                         
                        int index105_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA105_4 = input.LA(1);

                         
                        int index105_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA107_static {
    static final String DFA107_eotS =
        "\17\uffff";
    static final String DFA107_eofS =
        "\1\7\16\uffff";
    static final String DFA107_minS =
        "\1\45\6\44\1\uffff\6\0\1\uffff";
    static final String DFA107_maxS =
        "\1\u00b2\6\44\1\uffff\6\0\1\uffff";
    static final String DFA107_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA107_specialS =
        "\10\uffff\1\0\1\3\1\1\1\4\1\5\1\2\1\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_static.DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_static.DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_static.DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_static.DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_static.DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_static.DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "278:55: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA107_8 = input.LA(1);

                         
                        int index107_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA107_10 = input.LA(1);

                         
                        int index107_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA107_13 = input.LA(1);

                         
                        int index107_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA107_9 = input.LA(1);

                         
                        int index107_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA107_11 = input.LA(1);

                         
                        int index107_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA107_12 = input.LA(1);

                         
                        int index107_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA109_static {
    static final String DFA109_eotS =
        "\u0092\uffff";
    static final String DFA109_eofS =
        "\1\11\u0091\uffff";
    static final String DFA109_minS =
        "\1\45\10\0\u0089\uffff";
    static final String DFA109_maxS =
        "\1\u00b2\10\0\u0089\uffff";
    static final String DFA109_acceptS =
        "\11\uffff\1\3\u0086\uffff\1\1\1\2";
    static final String DFA109_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\u0089\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\7\37\11\1\10\1\11\1\3\70\11\1\4\10\11\1\5\1\11\1\6\1\11"+
            "\1\1\2\11\1\2\42\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_static.DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_static.DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_static.DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_static.DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_static.DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_static.DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "278:69: ( numericReferenceOrQuantity | nnchementity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA109_1 = input.LA(1);

                         
                        int index109_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred290_ChemicalChunker()||(synpred290_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA109_2 = input.LA(1);

                         
                        int index109_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA109_3 = input.LA(1);

                         
                        int index109_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA109_4 = input.LA(1);

                         
                        int index109_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA109_5 = input.LA(1);

                         
                        int index109_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA109_6 = input.LA(1);

                         
                        int index109_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA109_7 = input.LA(1);

                         
                        int index109_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA109_8 = input.LA(1);

                         
                        int index109_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\u0091\uffff";
    static final String DFA110_eofS =
        "\1\1\u0090\uffff";
    static final String DFA110_minS =
        "\1\45\23\uffff\4\0\171\uffff";
    static final String DFA110_maxS =
        "\1\u00b2\23\uffff\4\0\171\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA110_specialS =
        "\24\uffff\1\0\1\1\1\2\1\3\171\uffff}>";
    static final String[] DFA110_transitionS = {
            "\42\1\1\26\70\1\1\27\14\1\1\24\2\1\1\25\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()* loopback of 278:115: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_20 = input.LA(1);

                         
                        int index110_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_21 = input.LA(1);

                         
                        int index110_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA110_22 = input.LA(1);

                         
                        int index110_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA110_23 = input.LA(1);

                         
                        int index110_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\u0091\uffff";
    static final String DFA111_eofS =
        "\1\5\u0090\uffff";
    static final String DFA111_minS =
        "\1\45\4\0\u008c\uffff";
    static final String DFA111_maxS =
        "\1\u00b2\4\0\u008c\uffff";
    static final String DFA111_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA111_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA111_transitionS = {
            "\21\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "278:125: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred293_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred293_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred293_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA113_static {
    static final String DFA113_eotS =
        "\13\uffff";
    static final String DFA113_eofS =
        "\1\4\5\uffff\1\4\4\uffff";
    static final String DFA113_minS =
        "\1\45\3\44\1\uffff\1\0\1\45\1\0\1\uffff\1\44\1\0";
    static final String DFA113_maxS =
        "\1\u00b2\3\44\1\uffff\1\0\1\u00b2\1\0\1\uffff\1\44\1\0";
    static final String DFA113_acceptS =
        "\4\uffff\1\2\3\uffff\1\1\2\uffff";
    static final String DFA113_specialS =
        "\5\uffff\1\0\1\uffff\1\1\2\uffff\1\2}>";
    static final String[] DFA113_transitionS = {
            "\135\4\1\2\1\4\1\3\1\4\1\1\54\4",
            "\1\5",
            "\1\6",
            "\1\7",
            "",
            "\1\uffff",
            "\55\4\1\11\140\4",
            "\1\uffff",
            "",
            "\1\12",
            "\1\uffff"
    };
    }

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_static.DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_static.DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_static.DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_static.DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_static.DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_static.DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "280:35: ( afterOscarCompoundStructure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA113_5 = input.LA(1);

                         
                        int index113_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index113_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA113_7 = input.LA(1);

                         
                        int index113_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index113_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA113_10 = input.LA(1);

                         
                        int index113_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index113_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\22\uffff";
    static final String DFA123_eofS =
        "\22\uffff";
    static final String DFA123_minS =
        "\1\46\6\0\13\uffff";
    static final String DFA123_maxS =
        "\1\u0097\6\0\13\uffff";
    static final String DFA123_acceptS =
        "\7\uffff\1\2\1\uffff\1\3\7\uffff\1\1";
    static final String DFA123_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\13\uffff}>";
    static final String[] DFA123_transitionS = {
            "\2\11\3\uffff\2\11\20\uffff\1\7\7\uffff\1\7\1\uffff\1\3\12"+
            "\uffff\1\11\55\uffff\1\4\2\uffff\1\5\5\uffff\1\6\3\uffff\1\1"+
            "\2\uffff\1\2\4\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "287:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA123_5 = input.LA(1);

                         
                        int index123_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA123_6 = input.LA(1);

                         
                        int index123_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA124_static {
    static final String DFA124_eotS =
        "\43\uffff";
    static final String DFA124_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA124_minS =
        "\1\45\1\44\1\uffff\1\45\5\44\4\45\1\0\7\44\1\uffff\3\45\1\0\3\45"+
        "\3\44\3\45";
    static final String DFA124_maxS =
        "\1\u00b2\1\44\1\uffff\1\u00b2\5\44\4\u00b2\1\0\7\44\1\uffff\3\u00b2"+
        "\1\0\3\u00b2\3\44\3\u00b2";
    static final String DFA124_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA124_specialS =
        "\15\uffff\1\0\13\uffff\1\1\11\uffff}>";
    static final String[] DFA124_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\4\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\4\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_static.DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_static.DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_static.DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_static.DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_static.DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_static.DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "287:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA124_13 = input.LA(1);

                         
                        int index124_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index124_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA124_25 = input.LA(1);

                         
                        int index124_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index124_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA127_static {
    static final String DFA127_eotS =
        "\15\uffff";
    static final String DFA127_eofS =
        "\15\uffff";
    static final String DFA127_minS =
        "\1\46\2\uffff\1\0\11\uffff";
    static final String DFA127_maxS =
        "\1\u0097\2\uffff\1\0\11\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\7\uffff";
    static final String DFA127_specialS =
        "\3\uffff\1\0\11\uffff}>";
    static final String[] DFA127_transitionS = {
            "\2\5\3\uffff\2\5\45\uffff\1\5\60\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\3\2\uffff\1\1\4\uffff\3\5",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_static.DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_static.DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_static.DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_static.DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_static.DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_static.DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "290:78: ( bracketedContentInMol )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA127_3 = input.LA(1);

                         
                        int index127_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index127_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA133_static {
    static final String DFA133_eotS =
        "\u0091\uffff";
    static final String DFA133_eofS =
        "\1\2\u0090\uffff";
    static final String DFA133_minS =
        "\1\45\1\0\14\uffff\6\0\3\uffff\2\0\170\uffff";
    static final String DFA133_maxS =
        "\1\u00b2\1\0\14\uffff\6\0\3\uffff\2\0\170\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\2\u008d\uffff\1\1";
    static final String DFA133_specialS =
        "\1\uffff\1\0\14\uffff\1\1\1\2\1\3\1\4\1\5\1\6\3\uffff\1\7\1\10"+
        "\170\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\2\1\22\1\23\3\2\1\21\1\27\45\2\1\30\72\2\1\1\7\2\1\16\1"+
            "\17\1\20\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_static.DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_static.DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_static.DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_static.DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_static.DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_static.DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "()+ loopback of 293:100: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA133_14 = input.LA(1);

                         
                        int index133_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA133_15 = input.LA(1);

                         
                        int index133_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA133_16 = input.LA(1);

                         
                        int index133_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA133_17 = input.LA(1);

                         
                        int index133_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA133_18 = input.LA(1);

                         
                        int index133_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA133_19 = input.LA(1);

                         
                        int index133_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA133_23 = input.LA(1);

                         
                        int index133_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_23);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA133_24 = input.LA(1);

                         
                        int index133_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA134_static {
    static final String DFA134_eotS =
        "\17\uffff";
    static final String DFA134_eofS =
        "\17\uffff";
    static final String DFA134_minS =
        "\1\46\10\uffff\2\0\4\uffff";
    static final String DFA134_maxS =
        "\1\u0097\10\uffff\2\0\4\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\3\11\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA134_specialS =
        "\11\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA134_transitionS = {
            "\2\1\3\uffff\2\1\32\uffff\1\13\12\uffff\1\1\55\uffff\1\13\2"+
            "\uffff\1\15\5\uffff\1\15\3\uffff\1\11\2\uffff\1\12\4\uffff\3"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_static.DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_static.DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_static.DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_static.DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_static.DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_static.DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 296:3: ( quantity | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA134_9 = input.LA(1);

                         
                        int index134_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index134_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA134_10 = input.LA(1);

                         
                        int index134_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index134_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA135_static {
    static final String DFA135_eotS =
        "\14\uffff";
    static final String DFA135_eofS =
        "\1\2\13\uffff";
    static final String DFA135_minS =
        "\1\45\1\0\1\uffff\10\0\1\uffff";
    static final String DFA135_maxS =
        "\1\u00b2\1\0\1\uffff\10\0\1\uffff";
    static final String DFA135_acceptS =
        "\2\uffff\1\2\10\uffff\1\1";
    static final String DFA135_specialS =
        "\1\uffff\1\5\1\uffff\1\2\1\0\1\1\1\4\1\3\1\7\1\6\1\10\1\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\2\1\7\1\10\3\2\1\6\1\11\45\2\1\12\72\2\1\1\7\2\1\3\1\4\1"+
            "\5\33\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_static.DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_static.DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_static.DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_static.DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_static.DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_static.DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()+ loopback of 296:37: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA135_4 = input.LA(1);

                         
                        int index135_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA135_5 = input.LA(1);

                         
                        int index135_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA135_3 = input.LA(1);

                         
                        int index135_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA135_7 = input.LA(1);

                         
                        int index135_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_7);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA135_6 = input.LA(1);

                         
                        int index135_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA135_1 = input.LA(1);

                         
                        int index135_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_1);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA135_9 = input.LA(1);

                         
                        int index135_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA135_8 = input.LA(1);

                         
                        int index135_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA135_10 = input.LA(1);

                         
                        int index135_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA137_static {
    static final String DFA137_eotS =
        "\u0094\uffff";
    static final String DFA137_eofS =
        "\1\1\u0093\uffff";
    static final String DFA137_minS =
        "\1\45\3\uffff\1\0\13\uffff\5\0\177\uffff";
    static final String DFA137_maxS =
        "\1\u00b2\3\uffff\1\0\13\uffff\5\0\177\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\5\u008e\uffff\1\1\1\3\1\4\1\2";
    static final String DFA137_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\177\uffff}>";
    static final String[] DFA137_transitionS = {
            "\42\1\1\22\70\1\1\23\2\1\1\4\5\1\1\24\3\1\1\20\2\1\1\21\42"+
            "\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_static.DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_static.DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_static.DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_static.DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_static.DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_static.DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()* loopback of 298:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA137_4 = input.LA(1);

                         
                        int index137_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred334_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA137_16 = input.LA(1);

                         
                        int index137_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred334_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA137_17 = input.LA(1);

                         
                        int index137_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred334_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA137_18 = input.LA(1);

                         
                        int index137_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA137_19 = input.LA(1);

                         
                        int index137_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA137_20 = input.LA(1);

                         
                        int index137_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA138_static {
    static final String DFA138_eotS =
        "\43\uffff";
    static final String DFA138_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA138_minS =
        "\1\45\1\44\1\uffff\1\45\5\44\4\45\1\0\7\44\1\uffff\3\45\1\0\3\45"+
        "\3\44\3\45";
    static final String DFA138_maxS =
        "\1\u00b2\1\44\1\uffff\1\u00b2\5\44\4\u00b2\1\0\7\44\1\uffff\3\u00b2"+
        "\1\0\3\u00b2\3\44\3\u00b2";
    static final String DFA138_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA138_specialS =
        "\15\uffff\1\1\13\uffff\1\0\11\uffff}>";
    static final String[] DFA138_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\4\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\4\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_static.DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_static.DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_static.DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_static.DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_static.DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_static.DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "304:68: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA138_25 = input.LA(1);

                         
                        int index138_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_25);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA138_13 = input.LA(1);

                         
                        int index138_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA140_static {
    static final String DFA140_eotS =
        "\56\uffff";
    static final String DFA140_eofS =
        "\56\uffff";
    static final String DFA140_minS =
        "\1\45\2\44\1\uffff\4\44\1\uffff\1\44\1\uffff\1\45\1\52\4\46\1\45"+
        "\6\44\1\52\1\45\1\0\1\45\2\0\5\44\1\52\2\u008e\2\u008a\3\44\3\0";
    static final String DFA140_maxS =
        "\1\u0097\2\44\1\uffff\4\44\1\uffff\1\44\1\uffff\1\u0090\1\u009a"+
        "\3\u0097\1\u0095\1\u0090\6\44\1\u009a\1\u0090\1\0\1\u0090\2\0\5"+
        "\44\1\u009a\2\u008e\2\u008a\3\44\3\0";
    static final String DFA140_acceptS =
        "\3\uffff\1\1\4\uffff\1\2\1\uffff\1\3\43\uffff";
    static final String DFA140_specialS =
        "\32\uffff\1\1\1\uffff\1\0\1\2\15\uffff\1\5\1\3\1\4}>";
    static final String[] DFA140_transitionS = {
            "\1\12\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1"+
            "\10\2\uffff\1\11\1\uffff\1\3\11\uffff\1\10\6\uffff\1\10\47\uffff"+
            "\1\3\10\uffff\1\12\1\uffff\1\12\1\uffff\1\1\2\uffff\1\2\4\uffff"+
            "\1\4\2\12",
            "\1\13",
            "\1\14",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\21",
            "",
            "\1\12\41\uffff\1\3\70\uffff\1\3\12\uffff\1\12\4\uffff\1\22",
            "\1\3\2\uffff\1\10\21\uffff\3\3\1\uffff\2\3\2\uffff\1\10\70"+
            "\uffff\1\10\7\uffff\1\3\2\uffff\1\12\1\uffff\1\10\2\uffff\1"+
            "\10\11\uffff\1\3",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\10\1\uffff\1\10\2\uffff\2\10\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\12\13\uffff\1\10\6\uffff\1\10\74\uffff\1\10",
            "\1\27\7\uffff\1\10\10\uffff\1\10\2\uffff\1\10\15\uffff\1\10"+
            "\63\uffff\1\10\3\uffff\2\10\10\uffff\1\25\1\uffff\1\26\1\uffff"+
            "\1\23\2\uffff\1\24",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\3\24\uffff\3\3\1\uffff\2\3\103\uffff\1\3\2\uffff\1\12\2"+
            "\uffff\1\12\13\uffff\1\3",
            "\1\40\41\uffff\1\10\70\uffff\1\10\12\uffff\1\37\4\uffff\1"+
            "\36",
            "\1\uffff",
            "\1\42\152\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\10\24\uffff\3\10\1\uffff\2\10\103\uffff\1\10\2\uffff\1"+
            "\37\2\uffff\1\50\13\uffff\1\10",
            "\1\51",
            "\1\50",
            "\1\52",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_static.DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_static.DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_static.DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_static.DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_static.DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_static.DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_static.DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_static.DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "306:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA140_28 = input.LA(1);

                         
                        int index140_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_28);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA140_26 = input.LA(1);

                         
                        int index140_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_26);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA140_29 = input.LA(1);

                         
                        int index140_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_29);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA140_44 = input.LA(1);

                         
                        int index140_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_44);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA140_45 = input.LA(1);

                         
                        int index140_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA140_43 = input.LA(1);

                         
                        int index140_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA139_static {
    static final String DFA139_eotS =
        "\25\uffff";
    static final String DFA139_eofS =
        "\25\uffff";
    static final String DFA139_minS =
        "\1\45\13\0\11\uffff";
    static final String DFA139_maxS =
        "\1\u0097\13\0\11\uffff";
    static final String DFA139_acceptS =
        "\14\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA139_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\11\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\14\1\4\1\14\1\12\2\uffff\1\3\1\5\20\uffff\1\6\4\uffff\1"+
            "\10\2\uffff\1\13\13\uffff\1\7\6\uffff\1\11\60\uffff\1\14\1\uffff"+
            "\1\14\1\uffff\1\14\2\uffff\1\1\4\uffff\1\2\2\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_static.DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_static.DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_static.DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_static.DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_static.DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_static.DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_static.DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_static.DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "307:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA139_1 = input.LA(1);

                         
                        int index139_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA139_2 = input.LA(1);

                         
                        int index139_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA139_3 = input.LA(1);

                         
                        int index139_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA139_4 = input.LA(1);

                         
                        int index139_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA139_5 = input.LA(1);

                         
                        int index139_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA139_6 = input.LA(1);

                         
                        int index139_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA139_7 = input.LA(1);

                         
                        int index139_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA139_8 = input.LA(1);

                         
                        int index139_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA139_9 = input.LA(1);

                         
                        int index139_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA139_10 = input.LA(1);

                         
                        int index139_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA139_11 = input.LA(1);

                         
                        int index139_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA141_static {
    static final String DFA141_eotS =
        "\31\uffff";
    static final String DFA141_eofS =
        "\5\uffff\1\1\23\uffff";
    static final String DFA141_minS =
        "\1\45\1\uffff\2\44\1\uffff\2\45\11\44\10\0\1\52";
    static final String DFA141_maxS =
        "\1\u0097\1\uffff\2\44\1\uffff\1\u00b2\1\u0090\11\44\10\0\1\u009a";
    static final String DFA141_acceptS =
        "\1\uffff\1\2\2\uffff\1\1\24\uffff";
    static final String DFA141_specialS =
        "\20\uffff\1\5\1\2\1\6\1\1\1\7\1\3\1\4\1\0\1\uffff}>";
    static final String[] DFA141_transitionS = {
            "\4\1\2\uffff\2\1\11\uffff\1\1\6\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\1\4\11\uffff\1\1\6\uffff\1\1\47\uffff\1\4\10\uffff"+
            "\1\1\1\uffff\2\1\1\3\2\uffff\1\2\1\1\3\uffff\3\1",
            "",
            "\1\5",
            "\1\6",
            "",
            "\5\1\1\10\24\1\1\11\1\16\1\15\1\1\1\12\1\13\103\1\1\14\21"+
            "\1\1\7\30\1",
            "\1\1\41\uffff\1\4\70\uffff\1\4\12\uffff\1\1\4\uffff\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\4\24\uffff\3\4\1\uffff\2\4\103\uffff\1\4\2\uffff\1\1\2"+
            "\uffff\1\1\13\uffff\1\4"
    };
    }

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_static.DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_static.DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_static.DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_static.DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_static.DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_static.DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_static.DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_static.DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "()+ loopback of 310:4: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA141_23 = input.LA(1);

                         
                        int index141_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_23);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA141_19 = input.LA(1);

                         
                        int index141_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_19);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA141_17 = input.LA(1);

                         
                        int index141_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA141_21 = input.LA(1);

                         
                        int index141_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_21);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA141_22 = input.LA(1);

                         
                        int index141_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_22);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA141_16 = input.LA(1);

                         
                        int index141_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_16);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA141_18 = input.LA(1);

                         
                        int index141_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA141_20 = input.LA(1);

                         
                        int index141_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA144_static {
    static final String DFA144_eotS =
        "\u0091\uffff";
    static final String DFA144_eofS =
        "\1\1\u0090\uffff";
    static final String DFA144_minS =
        "\1\45\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA144_maxS =
        "\1\u00b2\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA144_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0086\uffff}>";
    static final String[] DFA144_transitionS = {
            "\42\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_static.DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_static.DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_static.DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_static.DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_static.DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_static.DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 313:29: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA144_6 = input.LA(1);

                         
                        int index144_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA144_8 = input.LA(1);

                         
                        int index144_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA145_static {
    static final String DFA145_eotS =
        "\43\uffff";
    static final String DFA145_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA145_minS =
        "\1\45\1\44\1\uffff\1\45\5\44\4\45\1\0\7\44\1\uffff\3\45\1\0\3\45"+
        "\3\44\3\45";
    static final String DFA145_maxS =
        "\1\u00b2\1\44\1\uffff\1\u00b2\5\44\4\u00b2\1\0\7\44\1\uffff\3\u00b2"+
        "\1\0\3\u00b2\3\44\3\u00b2";
    static final String DFA145_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA145_specialS =
        "\15\uffff\1\0\13\uffff\1\1\11\uffff}>";
    static final String[] DFA145_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\4\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\4\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_static.DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_static.DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_static.DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_static.DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_static.DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_static.DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_static.DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_static.DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "313:39: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA145_13 = input.LA(1);

                         
                        int index145_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA145_25 = input.LA(1);

                         
                        int index145_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA146_static {
    static final String DFA146_eotS =
        "\u0091\uffff";
    static final String DFA146_eofS =
        "\1\5\u0090\uffff";
    static final String DFA146_minS =
        "\1\45\4\0\u008c\uffff";
    static final String DFA146_maxS =
        "\1\u00b2\4\0\u008c\uffff";
    static final String DFA146_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA146_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA146_transitionS = {
            "\21\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_static.DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_static.DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_static.DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_static.DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_static.DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_static.DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "313:49: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred346_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred346_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred346_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index146_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA150_static {
    static final String DFA150_eotS =
        "\u0091\uffff";
    static final String DFA150_eofS =
        "\1\1\u0090\uffff";
    static final String DFA150_minS =
        "\1\45\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA150_maxS =
        "\1\u00b2\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA150_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA150_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0086\uffff}>";
    static final String[] DFA150_transitionS = {
            "\42\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_static.DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_static.DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_static.DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_static.DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_static.DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_static.DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_static.DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_static.DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 316:148: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA150_6 = input.LA(1);

                         
                        int index150_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA150_8 = input.LA(1);

                         
                        int index150_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA150_9 = input.LA(1);

                         
                        int index150_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA150_10 = input.LA(1);

                         
                        int index150_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA151_static {
    static final String DFA151_eotS =
        "\u0091\uffff";
    static final String DFA151_eofS =
        "\1\2\u0090\uffff";
    static final String DFA151_minS =
        "\1\45\1\0\u008f\uffff";
    static final String DFA151_maxS =
        "\1\u00b2\1\0\u008f\uffff";
    static final String DFA151_acceptS =
        "\2\uffff\1\2\u008d\uffff\1\1";
    static final String DFA151_specialS =
        "\1\uffff\1\0\u008f\uffff}>";
    static final String[] DFA151_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_static.DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_static.DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_static.DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_static.DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_static.DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_static.DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_static.DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_static.DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "316:158: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA151_1 = input.LA(1);

                         
                        int index151_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA152_static {
    static final String DFA152_eotS =
        "\u0091\uffff";
    static final String DFA152_eofS =
        "\1\5\u0090\uffff";
    static final String DFA152_minS =
        "\1\45\4\0\u008c\uffff";
    static final String DFA152_maxS =
        "\1\u00b2\4\0\u008c\uffff";
    static final String DFA152_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA152_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA152_transitionS = {
            "\21\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_static.DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_static.DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_static.DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_static.DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_static.DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_static.DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "316:168: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA152_1 = input.LA(1);

                         
                        int index152_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred353_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA152_2 = input.LA(1);

                         
                        int index152_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred353_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred353_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA152_4 = input.LA(1);

                         
                        int index152_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred353_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA153_static {
    static final String DFA153_eotS =
        "\u0091\uffff";
    static final String DFA153_eofS =
        "\1\1\u0090\uffff";
    static final String DFA153_minS =
        "\1\45\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA153_maxS =
        "\1\u00b2\5\uffff\1\0\1\uffff\3\0\u0086\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA153_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0086\uffff}>";
    static final String[] DFA153_transitionS = {
            "\42\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_static.DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_static.DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_static.DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_static.DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_static.DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_static.DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()* loopback of 319:37: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA153_6 = input.LA(1);

                         
                        int index153_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA153_8 = input.LA(1);

                         
                        int index153_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA153_9 = input.LA(1);

                         
                        int index153_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA153_10 = input.LA(1);

                         
                        int index153_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA154_static {
    static final String DFA154_eotS =
        "\43\uffff";
    static final String DFA154_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA154_minS =
        "\1\45\1\44\1\uffff\1\45\5\44\4\45\1\0\7\44\1\uffff\3\45\1\0\3\45"+
        "\3\44\3\45";
    static final String DFA154_maxS =
        "\1\u00b2\1\44\1\uffff\1\u00b2\5\44\4\u00b2\1\0\7\44\1\uffff\3\u00b2"+
        "\1\0\3\u00b2\3\44\3\u00b2";
    static final String DFA154_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA154_specialS =
        "\15\uffff\1\0\13\uffff\1\1\11\uffff}>";
    static final String[] DFA154_transitionS = {
            "\10\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\4\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\4\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\4\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\4\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_static.DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_static.DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_static.DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_static.DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_static.DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_static.DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_static.DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_static.DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "319:47: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA154_13 = input.LA(1);

                         
                        int index154_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA154_25 = input.LA(1);

                         
                        int index154_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA155_static {
    static final String DFA155_eotS =
        "\u0091\uffff";
    static final String DFA155_eofS =
        "\1\5\u0090\uffff";
    static final String DFA155_minS =
        "\1\45\4\0\u008c\uffff";
    static final String DFA155_maxS =
        "\1\u00b2\4\0\u008c\uffff";
    static final String DFA155_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA155_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA155_transitionS = {
            "\21\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_static.DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_static.DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_static.DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_static.DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_static.DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_static.DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "319:57: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA155_2 = input.LA(1);

                         
                        int index155_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred356_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index155_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred356_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA155_4 = input.LA(1);

                         
                        int index155_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred356_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index155_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA157_static {
    static final String DFA157_eotS =
        "\u0091\uffff";
    static final String DFA157_eofS =
        "\1\10\u0090\uffff";
    static final String DFA157_minS =
        "\1\45\7\0\u0089\uffff";
    static final String DFA157_maxS =
        "\1\u00b2\7\0\u0089\uffff";
    static final String DFA157_acceptS =
        "\10\uffff\1\2\u0087\uffff\1\1";
    static final String DFA157_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u0089\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\7\41\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_static.DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_static.DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_static.DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_static.DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_static.DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_static.DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_static.DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_static.DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "322:82: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred359_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred359_ChemicalChunker())) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA157_2 = input.LA(1);

                         
                        int index157_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA157_3 = input.LA(1);

                         
                        int index157_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA157_4 = input.LA(1);

                         
                        int index157_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA157_5 = input.LA(1);

                         
                        int index157_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA157_6 = input.LA(1);

                         
                        int index157_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA157_7 = input.LA(1);

                         
                        int index157_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA160_static {
    static final String DFA160_eotS =
        "\u0091\uffff";
    static final String DFA160_eofS =
        "\1\10\u0090\uffff";
    static final String DFA160_minS =
        "\1\45\7\0\u0089\uffff";
    static final String DFA160_maxS =
        "\1\u00b2\7\0\u0089\uffff";
    static final String DFA160_acceptS =
        "\10\uffff\1\2\u0087\uffff\1\1";
    static final String DFA160_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u0089\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\7\41\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_static.DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_static.DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_static.DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_static.DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_static.DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_static.DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "325:66: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA160_1 = input.LA(1);

                         
                        int index160_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred362_ChemicalChunker()||(synpred362_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA160_2 = input.LA(1);

                         
                        int index160_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA160_3 = input.LA(1);

                         
                        int index160_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA160_4 = input.LA(1);

                         
                        int index160_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA160_5 = input.LA(1);

                         
                        int index160_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA160_6 = input.LA(1);

                         
                        int index160_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA160_7 = input.LA(1);

                         
                        int index160_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA165_static {
    static final String DFA165_eotS =
        "\11\uffff";
    static final String DFA165_eofS =
        "\11\uffff";
    static final String DFA165_minS =
        "\1\46\3\44\2\uffff\3\46";
    static final String DFA165_maxS =
        "\1\u0095\3\44\2\uffff\3\u0095";
    static final String DFA165_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA165_specialS =
        "\11\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4\2"+
            "\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\6",
            "\1\7",
            "\1\10",
            "",
            "",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1"
    };
    }

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_static.DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_static.DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_static.DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_static.DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_static.DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_static.DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "327:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity );";
        }
    }
    static class DFA166_static {
    static final String DFA166_eotS =
        "\103\uffff";
    static final String DFA166_eofS =
        "\6\uffff\1\4\13\uffff\1\4\11\uffff\3\4\17\uffff\1\4\4\uffff\1\4"+
        "\1\uffff\2\4\2\uffff\2\4\4\uffff\1\4\1\uffff\1\4\1\uffff";
    static final String DFA166_minS =
        "\1\45\2\44\2\uffff\2\45\11\44\1\52\1\0\1\45\6\0\3\44\3\45\14\44"+
        "\3\0\1\45\4\0\1\45\1\0\2\45\2\44\2\45\4\44\1\45\1\0\1\45\1\0";
    static final String DFA166_maxS =
        "\1\u0090\2\44\2\uffff\1\u0090\1\u00b2\11\44\1\u009a\1\0\1\u00b2"+
        "\6\0\3\44\3\u00b2\14\44\3\0\1\u00b2\4\0\1\u00b2\1\0\2\u00b2\2\44"+
        "\2\u00b2\4\44\1\u00b2\1\0\1\u00b2\1\0";
    static final String DFA166_acceptS =
        "\3\uffff\1\1\1\2\76\uffff";
    static final String DFA166_specialS =
        "\21\uffff\1\17\1\uffff\1\4\1\5\1\13\1\12\1\3\1\14\22\uffff\1\16"+
        "\1\2\1\20\1\uffff\1\0\1\7\1\11\1\6\1\uffff\1\15\13\uffff\1\1\1\uffff"+
        "\1\10}>";
    static final String[] DFA166_transitionS = {
            "\1\4\41\uffff\1\3\70\uffff\1\3\10\uffff\1\4\1\uffff\1\4\1\uffff"+
            "\1\1\2\uffff\1\2",
            "\1\5",
            "\1\6",
            "",
            "",
            "\1\4\41\uffff\1\3\70\uffff\1\3\12\uffff\1\4\4\uffff\1\7",
            "\5\4\1\14\24\4\1\15\1\10\1\16\1\4\1\12\1\13\103\4\1\17\21"+
            "\4\1\11\30\4",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\3\24\uffff\3\3\1\uffff\2\3\103\uffff\1\3\2\uffff\1\4\2"+
            "\uffff\1\4\13\uffff\1\3",
            "\1\uffff",
            "\42\4\1\32\70\4\1\33\7\4\1\17\7\4\1\31\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\34",
            "\1\35",
            "\1\36",
            "\5\4\1\44\24\4\1\41\1\46\1\37\1\4\1\40\1\45\103\4\1\43\21"+
            "\4\1\42\30\4",
            "\153\4\1\50\25\4\1\47\14\4",
            "\21\4\1\51\113\4\1\52\60\4",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\143\4\1\43\52\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\153\4\1\50\42\4",
            "\1\uffff",
            "\153\4\1\67\42\4",
            "\153\4\1\70\42\4",
            "\1\71",
            "\1\72",
            "\143\4\1\74\21\4\1\73\30\4",
            "\143\4\1\76\21\4\1\75\30\4",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\143\4\1\74\52\4",
            "\1\uffff",
            "\143\4\1\76\52\4",
            "\1\uffff"
    };
    }

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_static.DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_static.DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_static.DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_static.DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_static.DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_static.DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_static.DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_static.DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "331:1: numericReferenceOrQuantity : ( quantity | numericOrIdentifierCompoundReference );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA166_47 = input.LA(1);

                         
                        int index166_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_47);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA166_64 = input.LA(1);

                         
                        int index166_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_64);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA166_44 = input.LA(1);

                         
                        int index166_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_44);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA166_23 = input.LA(1);

                         
                        int index166_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_23);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA166_19 = input.LA(1);

                         
                        int index166_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA166_20 = input.LA(1);

                         
                        int index166_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_20);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA166_50 = input.LA(1);

                         
                        int index166_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_50);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA166_48 = input.LA(1);

                         
                        int index166_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA166_66 = input.LA(1);

                         
                        int index166_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_66);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA166_49 = input.LA(1);

                         
                        int index166_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA166_22 = input.LA(1);

                         
                        int index166_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_22);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA166_21 = input.LA(1);

                         
                        int index166_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_21);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA166_24 = input.LA(1);

                         
                        int index166_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_24);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA166_52 = input.LA(1);

                         
                        int index166_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_52);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA166_43 = input.LA(1);

                         
                        int index166_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_43);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA166_17 = input.LA(1);

                         
                        int index166_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_17);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA166_45 = input.LA(1);

                         
                        int index166_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA169_static {
    static final String DFA169_eotS =
        "\u0091\uffff";
    static final String DFA169_eofS =
        "\1\1\u0090\uffff";
    static final String DFA169_minS =
        "\1\45\16\uffff\4\0\176\uffff";
    static final String DFA169_maxS =
        "\1\u00b2\16\uffff\4\0\176\uffff";
    static final String DFA169_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA169_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\176\uffff}>";
    static final String[] DFA169_transitionS = {
            "\42\1\1\21\70\1\1\22\14\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_static.DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_static.DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_static.DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_static.DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_static.DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_static.DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "()* loopback of 335:42: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA169_15 = input.LA(1);

                         
                        int index169_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred380_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA169_16 = input.LA(1);

                         
                        int index169_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred380_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA169_17 = input.LA(1);

                         
                        int index169_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred380_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA169_18 = input.LA(1);

                         
                        int index169_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred380_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA174_static {
    static final String DFA174_eotS =
        "\u0091\uffff";
    static final String DFA174_eofS =
        "\1\1\u0090\uffff";
    static final String DFA174_minS =
        "\1\45\2\uffff\1\0\u008d\uffff";
    static final String DFA174_maxS =
        "\1\u00b2\2\uffff\1\0\u008d\uffff";
    static final String DFA174_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA174_specialS =
        "\3\uffff\1\0\u008d\uffff}>";
    static final String[] DFA174_transitionS = {
            "\136\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_static.DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_static.DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_static.DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_static.DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_static.DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_static.DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_static.DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_static.DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "()* loopback of 356:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA174_3 = input.LA(1);

                         
                        int index174_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index174_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA178_static {
    static final String DFA178_eotS =
        "\u0091\uffff";
    static final String DFA178_eofS =
        "\1\4\u0090\uffff";
    static final String DFA178_minS =
        "\1\45\3\0\u008d\uffff";
    static final String DFA178_maxS =
        "\1\u00b2\3\0\u008d\uffff";
    static final String DFA178_acceptS =
        "\4\uffff\1\2\u008b\uffff\1\1";
    static final String DFA178_specialS =
        "\1\uffff\1\0\1\1\1\2\u008d\uffff}>";
    static final String[] DFA178_transitionS = {
            "\42\4\1\2\70\4\1\3\17\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_static.DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_static.DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_static.DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_static.DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_static.DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_static.DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "360:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA178_1 = input.LA(1);

                         
                        int index178_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index178_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA178_2 = input.LA(1);

                         
                        int index178_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index178_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA178_3 = input.LA(1);

                         
                        int index178_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index178_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA179_static {
    static final String DFA179_eotS =
        "\27\uffff";
    static final String DFA179_eofS =
        "\15\uffff\1\17\3\uffff\1\17\2\uffff\1\17\2\uffff";
    static final String DFA179_minS =
        "\1\107\1\44\2\uffff\1\77\1\uffff\2\44\4\uffff\1\u0088\1\45\1\44"+
        "\1\uffff\1\44\1\45\1\0\1\44\1\45\1\44\1\0";
    static final String DFA179_maxS =
        "\1\u0090\1\44\2\uffff\1\u009a\1\uffff\2\44\4\uffff\1\u0088\1\u00b2"+
        "\1\44\1\uffff\1\44\1\u00b2\1\0\1\44\1\u00b2\1\44\1\0";
    static final String DFA179_acceptS =
        "\2\uffff\1\5\1\7\1\uffff\1\3\2\uffff\1\1\1\2\1\4\1\6\3\uffff\1"+
        "\10\7\uffff";
    static final String DFA179_specialS =
        "\22\uffff\1\0\3\uffff\1\1}>";
    static final String[] DFA179_transitionS = {
            "\1\2\70\uffff\1\3\17\uffff\1\1",
            "\1\4",
            "",
            "",
            "\1\5\1\11\1\10\1\uffff\1\13\1\12\103\uffff\1\7\21\uffff\1"+
            "\6",
            "",
            "\1\14",
            "\1\15",
            "",
            "",
            "",
            "",
            "\1\7",
            "\133\17\1\20\5\17\1\16\54\17",
            "\1\21",
            "",
            "\1\22",
            "\153\17\1\23\42\17",
            "\1\uffff",
            "\1\24",
            "\143\17\1\25\52\17",
            "\1\26",
            "\1\uffff"
    };
    }

    static final short[] DFA179_eot = DFA.unpackEncodedString(DFA179_static.DFA179_eotS);
    static final short[] DFA179_eof = DFA.unpackEncodedString(DFA179_static.DFA179_eofS);
    static final char[] DFA179_min = DFA.unpackEncodedStringToUnsignedChars(DFA179_static.DFA179_minS);
    static final char[] DFA179_max = DFA.unpackEncodedStringToUnsignedChars(DFA179_static.DFA179_maxS);
    static final short[] DFA179_accept = DFA.unpackEncodedString(DFA179_static.DFA179_acceptS);
    static final short[] DFA179_special = DFA.unpackEncodedString(DFA179_static.DFA179_specialS);
    static final short[][] DFA179_transition;

    static {
        int numStates = DFA179_static.DFA179_transitionS.length;
        DFA179_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA179_transition[i] = DFA.unpackEncodedString(DFA179_static.DFA179_transitionS[i]);
        }
    }

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = DFA179_eot;
            this.eof = DFA179_eof;
            this.min = DFA179_min;
            this.max = DFA179_max;
            this.accept = DFA179_accept;
            this.special = DFA179_special;
            this.transition = DFA179_transition;
        }
        public String getDescription() {
            return "361:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA179_18 = input.LA(1);

                         
                        int index179_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index179_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA179_22 = input.LA(1);

                         
                        int index179_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index179_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA187_static {
    static final String DFA187_eotS =
        "\u0087\uffff";
    static final String DFA187_eofS =
        "\u0087\uffff";
    static final String DFA187_minS =
        "\1\45\34\uffff\1\0\17\uffff\3\0\2\uffff\1\0\3\uffff\6\0\13\uffff"+
        "\1\0\77\uffff";
    static final String DFA187_maxS =
        "\1\u00b2\34\uffff\1\0\17\uffff\3\0\2\uffff\1\0\3\uffff\6\0\13\uffff"+
        "\1\0\77\uffff";
    static final String DFA187_acceptS =
        "\1\uffff\1\16\1\uffff\1\1\47\uffff\1\2\77\uffff\1\4\1\5\1\6\1\7"+
        "\21\uffff\1\11\1\13\1\14\1\3\1\10\1\15\1\12";
    static final String DFA187_specialS =
        "\35\uffff\1\0\17\uffff\1\1\1\2\1\3\2\uffff\1\4\3\uffff\1\5\1\6"+
        "\1\7\1\10\1\11\1\12\13\uffff\1\13\77\uffff}>";
    static final String[] DFA187_transitionS = {
            "\1\107\1\72\1\73\2\53\1\uffff\1\71\1\53\20\156\2\53\1\uffff"+
            "\1\53\1\uffff\21\53\4\3\2\53\11\3\1\53\1\3\1\53\4\3\1\53\1\3"+
            "\1\53\1\3\1\53\5\3\1\53\1\3\1\53\3\3\1\53\1\3\1\35\1\53\3\3"+
            "\1\53\1\uffff\1\u0081\1\56\2\uffff\1\155\1\u0082\1\154\1\62"+
            "\1\1\1\53\1\uffff\1\55\1\1\1\u0080\1\57\3\53\1\156\1\66\1\67"+
            "\1\70\1\53\1\153\10\53\4\uffff\1\53\1\156\1\uffff\6\3\4\53",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_static.DFA187_eotS);
    static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_static.DFA187_eofS);
    static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_static.DFA187_minS);
    static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_static.DFA187_maxS);
    static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_static.DFA187_acceptS);
    static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_static.DFA187_specialS);
    static final short[][] DFA187_transition;

    static {
        int numStates = DFA187_static.DFA187_transitionS.length;
        DFA187_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA187_transition[i] = DFA.unpackEncodedString(DFA187_static.DFA187_transitionS[i]);
        }
    }

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = DFA187_eot;
            this.eof = DFA187_eof;
            this.min = DFA187_min;
            this.max = DFA187_max;
            this.accept = DFA187_accept;
            this.special = DFA187_special;
            this.transition = DFA187_transition;
        }
        public String getDescription() {
            return "()+ loopback of 380:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA187_29 = input.LA(1);

                         
                        int index187_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index187_29);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA187_45 = input.LA(1);

                         
                        int index187_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred406_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred406_ChemicalChunker())) ) {s = 43;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index187_45);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA187_46 = input.LA(1);

                         
                        int index187_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index187_46);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA187_47 = input.LA(1);

                         
                        int index187_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index187_47);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA187_50 = input.LA(1);

                         
                        int index187_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index187_50);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA187_54 = input.LA(1);

                         
                        int index187_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index187_54);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA187_55 = input.LA(1);

                         
                        int index187_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index187_55);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA187_56 = input.LA(1);

                         
                        int index187_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index187_56);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA187_57 = input.LA(1);

                         
                        int index187_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index187_57);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA187_58 = input.LA(1);

                         
                        int index187_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index187_58);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA187_59 = input.LA(1);

                         
                        int index187_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred414_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index187_59);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA187_71 = input.LA(1);

                         
                        int index187_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index187_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA191_static {
    static final String DFA191_eotS =
        "\u0089\uffff";
    static final String DFA191_eofS =
        "\u0089\uffff";
    static final String DFA191_minS =
        "\1\45\32\uffff\1\0\15\uffff\17\0\25\uffff\1\0\73\uffff";
    static final String DFA191_maxS =
        "\1\u00b2\32\uffff\1\0\15\uffff\17\0\25\uffff\1\0\73\uffff";
    static final String DFA191_acceptS =
        "\1\uffff\1\1\66\uffff\1\10\1\11\1\12\1\13\22\uffff\1\16\1\17\1"+
        "\20\57\uffff\1\2\1\4\1\5\1\6\1\7\1\21\1\3\1\15\1\14";
    static final String DFA191_specialS =
        "\33\uffff\1\0\15\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1"+
        "\12\1\13\1\14\1\15\1\16\1\17\25\uffff\1\20\73\uffff}>";
    static final String[] DFA191_transitionS = {
            "\1\67\1\61\1\62\2\120\1\uffff\1\60\1\54\20\73\2\120\1\uffff"+
            "\1\120\1\uffff\5\120\1\52\12\120\1\63\4\1\2\120\11\1\1\120\1"+
            "\1\1\120\4\1\1\120\1\1\1\120\1\1\1\120\5\1\1\120\1\1\1\120\3"+
            "\1\1\120\1\1\1\33\1\120\3\1\1\53\1\uffff\1\116\1\115\2\uffff"+
            "\1\72\1\117\1\71\1\65\1\uffff\1\66\1\uffff\1\64\2\uffff\1\51"+
            "\3\120\1\73\1\55\1\56\1\57\1\120\1\70\10\120\4\uffff\1\120\1"+
            "\73\1\uffff\6\1\4\120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA191_eot = DFA.unpackEncodedString(DFA191_static.DFA191_eotS);
    static final short[] DFA191_eof = DFA.unpackEncodedString(DFA191_static.DFA191_eofS);
    static final char[] DFA191_min = DFA.unpackEncodedStringToUnsignedChars(DFA191_static.DFA191_minS);
    static final char[] DFA191_max = DFA.unpackEncodedStringToUnsignedChars(DFA191_static.DFA191_maxS);
    static final short[] DFA191_accept = DFA.unpackEncodedString(DFA191_static.DFA191_acceptS);
    static final short[] DFA191_special = DFA.unpackEncodedString(DFA191_static.DFA191_specialS);
    static final short[][] DFA191_transition;

    static {
        int numStates = DFA191_static.DFA191_transitionS.length;
        DFA191_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA191_transition[i] = DFA.unpackEncodedString(DFA191_static.DFA191_transitionS[i]);
        }
    }

    class DFA191 extends DFA {

        public DFA191(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 191;
            this.eot = DFA191_eot;
            this.eof = DFA191_eof;
            this.min = DFA191_min;
            this.max = DFA191_max;
            this.accept = DFA191_accept;
            this.special = DFA191_special;
            this.transition = DFA191_transition;
        }
        public String getDescription() {
            return "386:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA191_27 = input.LA(1);

                         
                        int index191_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred421_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_27);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA191_41 = input.LA(1);

                         
                        int index191_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred425_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred428_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index191_41);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA191_42 = input.LA(1);

                         
                        int index191_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA191_43 = input.LA(1);

                         
                        int index191_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA191_44 = input.LA(1);

                         
                        int index191_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA191_45 = input.LA(1);

                         
                        int index191_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred435_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA191_46 = input.LA(1);

                         
                        int index191_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred435_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_46);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA191_47 = input.LA(1);

                         
                        int index191_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred435_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_47);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA191_48 = input.LA(1);

                         
                        int index191_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred435_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_48);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA191_49 = input.LA(1);

                         
                        int index191_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred435_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA191_50 = input.LA(1);

                         
                        int index191_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred435_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_50);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA191_51 = input.LA(1);

                         
                        int index191_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_51);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA191_52 = input.LA(1);

                         
                        int index191_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 134;}

                        else if ( (((synpred424_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred424_ChemicalChunker())) ) {s = 129;}

                        else if ( ((synpred438_ChemicalChunker()||(synpred438_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index191_52);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA191_53 = input.LA(1);

                         
                        int index191_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index191_53);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA191_54 = input.LA(1);

                         
                        int index191_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_54);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA191_55 = input.LA(1);

                         
                        int index191_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index191_55);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA191_77 = input.LA(1);

                         
                        int index191_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred434_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index191_77);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 191, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA192_static {
    static final String DFA192_eotS =
        "\u008a\uffff";
    static final String DFA192_eofS =
        "\u008a\uffff";
    static final String DFA192_minS =
        "\1\45\34\uffff\1\0\15\uffff\17\0\26\uffff\1\0\71\uffff";
    static final String DFA192_maxS =
        "\1\u00b2\34\uffff\1\0\15\uffff\17\0\26\uffff\1\0\71\uffff";
    static final String DFA192_acceptS =
        "\1\uffff\1\21\1\uffff\1\1\66\uffff\1\7\1\10\1\11\1\12\21\uffff"+
        "\1\13\1\uffff\1\15\1\16\1\17\57\uffff\1\2\1\4\1\5\1\6\1\20\1\3\1"+
        "\14";
    static final String DFA192_specialS =
        "\35\uffff\1\0\15\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1"+
        "\12\1\13\1\14\1\15\1\16\1\17\26\uffff\1\20\71\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\71\1\63\1\64\2\123\1\uffff\1\62\1\56\20\75\2\123\1\uffff"+
            "\1\123\1\uffff\5\123\1\54\12\123\1\65\4\3\2\123\11\3\1\123\1"+
            "\3\1\123\4\3\1\123\1\3\1\123\1\3\1\123\5\3\1\123\1\3\1\123\3"+
            "\3\1\123\1\3\1\35\1\123\3\3\1\55\1\uffff\1\121\1\120\2\uffff"+
            "\1\74\1\122\1\73\1\67\1\1\1\70\1\uffff\1\66\1\1\1\117\1\53\3"+
            "\123\1\75\1\57\1\60\1\61\1\123\1\72\10\123\4\uffff\1\123\1\75"+
            "\1\uffff\6\3\4\123",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_static.DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_static.DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_static.DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_static.DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_static.DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_static.DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_static.DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_static.DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "()* loopback of 386:265: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA192_29 = input.LA(1);

                         
                        int index192_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred439_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_29);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA192_43 = input.LA(1);

                         
                        int index192_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred440_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred443_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred444_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred454_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index192_43);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA192_44 = input.LA(1);

                         
                        int index192_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred440_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_44);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA192_45 = input.LA(1);

                         
                        int index192_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred440_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_45);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA192_46 = input.LA(1);

                         
                        int index192_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_46);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA192_47 = input.LA(1);

                         
                        int index192_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred450_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_47);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA192_48 = input.LA(1);

                         
                        int index192_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred450_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA192_49 = input.LA(1);

                         
                        int index192_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred450_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA192_50 = input.LA(1);

                         
                        int index192_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred450_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA192_51 = input.LA(1);

                         
                        int index192_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred450_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA192_52 = input.LA(1);

                         
                        int index192_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred450_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA192_53 = input.LA(1);

                         
                        int index192_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA192_54 = input.LA(1);

                         
                        int index192_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (((synpred442_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred442_ChemicalChunker())) ) {s = 132;}

                        else if ( (((synpred453_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred453_ChemicalChunker())) ) {s = 83;}

                        else if ( (synpred454_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index192_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA192_55 = input.LA(1);

                         
                        int index192_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred454_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index192_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA192_56 = input.LA(1);

                         
                        int index192_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA192_57 = input.LA(1);

                         
                        int index192_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index192_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA192_80 = input.LA(1);

                         
                        int index192_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred449_ChemicalChunker()) ) {s = 79;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred454_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index192_80);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA197_static {
    static final String DFA197_eotS =
        "\u0091\uffff";
    static final String DFA197_eofS =
        "\1\6\u0090\uffff";
    static final String DFA197_minS =
        "\1\45\5\0\u008b\uffff";
    static final String DFA197_maxS =
        "\1\u00b2\5\0\u008b\uffff";
    static final String DFA197_acceptS =
        "\6\uffff\1\2\u0089\uffff\1\1";
    static final String DFA197_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008b\uffff}>";
    static final String[] DFA197_transitionS = {
            "\1\5\143\6\1\1\1\6\1\3\1\6\1\4\2\6\1\2\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_static.DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_static.DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_static.DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_static.DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_static.DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_static.DFA197_specialS);
    static final short[][] DFA197_transition;

    static {
        int numStates = DFA197_static.DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_static.DFA197_transitionS[i]);
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "393:31: ( allIdentifierTypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA197_1 = input.LA(1);

                         
                        int index197_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred462_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index197_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA197_2 = input.LA(1);

                         
                        int index197_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred462_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index197_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA197_3 = input.LA(1);

                         
                        int index197_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred462_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index197_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA197_4 = input.LA(1);

                         
                        int index197_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred462_ChemicalChunker()||(synpred462_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index197_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA197_5 = input.LA(1);

                         
                        int index197_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred462_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index197_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA200_static {
    static final String DFA200_eotS =
        "\u0092\uffff";
    static final String DFA200_eofS =
        "\1\1\u0091\uffff";
    static final String DFA200_minS =
        "\1\45\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\15\uffff\1\0\41\uffff"+
        "\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA200_maxS =
        "\1\u00b2\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\15\uffff\1\0\41"+
        "\uffff\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA200_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\1\1\2";
    static final String DFA200_specialS =
        "\3\uffff\1\0\13\uffff\1\1\10\uffff\1\2\15\uffff\1\3\41\uffff\1"+
        "\4\1\uffff\1\5\13\uffff\1\6\73\uffff}>";
    static final String[] DFA200_transitionS = {
            "\21\1\1\110\2\1\1\126\20\1\1\46\6\1\1\30\60\1\1\112\1\3\11"+
            "\1\1\17\45\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA200_eot = DFA.unpackEncodedString(DFA200_static.DFA200_eotS);
    static final short[] DFA200_eof = DFA.unpackEncodedString(DFA200_static.DFA200_eofS);
    static final char[] DFA200_min = DFA.unpackEncodedStringToUnsignedChars(DFA200_static.DFA200_minS);
    static final char[] DFA200_max = DFA.unpackEncodedStringToUnsignedChars(DFA200_static.DFA200_maxS);
    static final short[] DFA200_accept = DFA.unpackEncodedString(DFA200_static.DFA200_acceptS);
    static final short[] DFA200_special = DFA.unpackEncodedString(DFA200_static.DFA200_specialS);
    static final short[][] DFA200_transition;

    static {
        int numStates = DFA200_static.DFA200_transitionS.length;
        DFA200_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA200_transition[i] = DFA.unpackEncodedString(DFA200_static.DFA200_transitionS[i]);
        }
    }

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = DFA200_eot;
            this.eof = DFA200_eof;
            this.min = DFA200_min;
            this.max = DFA200_max;
            this.accept = DFA200_accept;
            this.special = DFA200_special;
            this.transition = DFA200_transition;
        }
        public String getDescription() {
            return "()* loopback of 393:83: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA200_3 = input.LA(1);

                         
                        int index200_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred468_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA200_15 = input.LA(1);

                         
                        int index200_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA200_24 = input.LA(1);

                         
                        int index200_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred468_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_24);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA200_38 = input.LA(1);

                         
                        int index200_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred468_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_38);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA200_72 = input.LA(1);

                         
                        int index200_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred468_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_72);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA200_74 = input.LA(1);

                         
                        int index200_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred468_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_74);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA200_86 = input.LA(1);

                         
                        int index200_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred468_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_86);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA225_static {
    static final String DFA225_eotS =
        "\107\uffff";
    static final String DFA225_eofS =
        "\107\uffff";
    static final String DFA225_minS =
        "\1\45\17\uffff\1\0\66\uffff";
    static final String DFA225_maxS =
        "\1\u00b2\17\uffff\1\0\66\uffff";
    static final String DFA225_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA225_specialS =
        "\20\uffff\1\0\66\uffff}>";
    static final String[] DFA225_transitionS = {
            "\5\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\106\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA225_eot = DFA.unpackEncodedString(DFA225_static.DFA225_eotS);
    static final short[] DFA225_eof = DFA.unpackEncodedString(DFA225_static.DFA225_eofS);
    static final char[] DFA225_min = DFA.unpackEncodedStringToUnsignedChars(DFA225_static.DFA225_minS);
    static final char[] DFA225_max = DFA.unpackEncodedStringToUnsignedChars(DFA225_static.DFA225_maxS);
    static final short[] DFA225_accept = DFA.unpackEncodedString(DFA225_static.DFA225_acceptS);
    static final short[] DFA225_special = DFA.unpackEncodedString(DFA225_static.DFA225_specialS);
    static final short[][] DFA225_transition;

    static {
        int numStates = DFA225_static.DFA225_transitionS.length;
        DFA225_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA225_transition[i] = DFA.unpackEncodedString(DFA225_static.DFA225_transitionS[i]);
        }
    }

    class DFA225 extends DFA {

        public DFA225(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 225;
            this.eot = DFA225_eot;
            this.eof = DFA225_eof;
            this.min = DFA225_min;
            this.max = DFA225_max;
            this.accept = DFA225_accept;
            this.special = DFA225_special;
            this.transition = DFA225_transition;
        }
        public String getDescription() {
            return "()* loopback of 195:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA225_16 = input.LA(1);

                         
                        int index225_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index225_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 225, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA232_static {
    static final String DFA232_eotS =
        "\27\uffff";
    static final String DFA232_eofS =
        "\27\uffff";
    static final String DFA232_minS =
        "\1\46\15\uffff\1\0\10\uffff";
    static final String DFA232_maxS =
        "\1\u009a\15\uffff\1\0\10\uffff";
    static final String DFA232_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA232_specialS =
        "\16\uffff\1\0\10\uffff}>";
    static final String[] DFA232_transitionS = {
            "\2\1\3\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\26\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA232_eot = DFA.unpackEncodedString(DFA232_static.DFA232_eotS);
    static final short[] DFA232_eof = DFA.unpackEncodedString(DFA232_static.DFA232_eofS);
    static final char[] DFA232_min = DFA.unpackEncodedStringToUnsignedChars(DFA232_static.DFA232_minS);
    static final char[] DFA232_max = DFA.unpackEncodedStringToUnsignedChars(DFA232_static.DFA232_maxS);
    static final short[] DFA232_accept = DFA.unpackEncodedString(DFA232_static.DFA232_acceptS);
    static final short[] DFA232_special = DFA.unpackEncodedString(DFA232_static.DFA232_specialS);
    static final short[][] DFA232_transition;

    static {
        int numStates = DFA232_static.DFA232_transitionS.length;
        DFA232_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA232_transition[i] = DFA.unpackEncodedString(DFA232_static.DFA232_transitionS[i]);
        }
    }

    class DFA232 extends DFA {

        public DFA232(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 232;
            this.eot = DFA232_eot;
            this.eof = DFA232_eof;
            this.min = DFA232_min;
            this.max = DFA232_max;
            this.accept = DFA232_accept;
            this.special = DFA232_special;
            this.transition = DFA232_transition;
        }
        public String getDescription() {
            return "()* loopback of 269:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA232_14 = input.LA(1);

                         
                        int index232_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index232_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 232, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    static class FOLLOW_sentence_in_document199_static {
    public static final BitSet FOLLOW_sentence_in_document199 = new BitSet(new long[]{0xFFFFFFE000000002L,0xFFFFFFFFFFFFFFFFL,0x0007FFFFFFFFFF7FL});

    }static class FOLLOW_procedureNounPhrase_in_sentence219_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_sentence219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_sentenceStructure_in_sentence224_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentence224 = new BitSet(new long[]{0xFFFFFFE000000002L,0xFFFFFFFFFFFFFFFFL,0x0007FFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentence226_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentence226 = new BitSet(new long[]{0xFFFFFFE000000002L,0xFFFFFFFFFFFFFFFFL,0x0007FFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentence231_static {
    public static final BitSet FOLLOW_stop_in_sentence231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nounphrase_in_sentenceStructure241_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure241 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBA2FL});

    }static class FOLLOW_verbphrase_in_sentenceStructure243_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure243 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBA2FL});

    }static class FOLLOW_prepphrase_in_sentenceStructure245_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure245 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBA2FL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure247_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure247 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBA2FL});

    }static class FOLLOW_advAdj_in_sentenceStructure252_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure252 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C00E0800EL});

    }static class FOLLOW_colon_in_sentenceStructure254_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure254 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C00E0800EL});

    }static class FOLLOW_conjunction_in_sentenceStructure259_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000800AL});

    }static class FOLLOW_rbconj_in_sentenceStructure261_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000800AL});

    }static class FOLLOW_comma_in_sentenceStructure263_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000800AL});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase275_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken294_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken296_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken298_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken300_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken302_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken304_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken308_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken310_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken312_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken314_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken316_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken318_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken320_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken322_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken324_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken326_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken328_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken330_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken332_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken334_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken336_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken338_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken340_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken342_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken344_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken346_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken348_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken348 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken352_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken354_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken356_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken358_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken360_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken362_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken364_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken366_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken368_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken370_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken372_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken374_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken376_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken378_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken380_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken382_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken384_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken386_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken388_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percentsign_in_unmatchedToken390_static {
    public static final BitSet FOLLOW_percentsign_in_unmatchedToken390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken392_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken394_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken396_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken398_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken402_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken404_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken406_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken408_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken410_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken412_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken414_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken416_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken418_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken420_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken422_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken424_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken426_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken428_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken430_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken432_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken434_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken436_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken438_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedure_in_procedureNounPhrase451_static {
    public static final BitSet FOLLOW_headingProcedure_in_procedureNounPhrase451 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure470_static {
    public static final BitSet FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004084L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure472_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure472 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedHeadingProcedure_in_headingProcedure476_static {
    public static final BitSet FOLLOW_bracketedHeadingProcedure_in_headingProcedure476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004084L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure478_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator489_static {
    public static final BitSet FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_headingProcedureRequiringTerminator491_static {
    public static final BitSet FOLLOW_numeric_in_headingProcedureRequiringTerminator491 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure514_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure518_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure522_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_headingProcedureTerminators547_static {
    public static final BitSet FOLLOW_rrb_in_headingProcedureTerminators547 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_headingProcedureTerminators549_static {
    public static final BitSet FOLLOW_stop_in_headingProcedureTerminators549 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_headingProcedureTerminators551_static {
    public static final BitSet FOLLOW_colon_in_headingProcedureTerminators551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase560_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase560 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure579_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure579 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure581_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure581 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1590_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2607_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2607 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_dt_in_nounphraseStructure2610_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2610 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2613_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2613 = new BitSet(new long[]{0x60411BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEFBA09L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2617_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2617 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEFBA09L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2620_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2620 = new BitSet(new long[]{0x60411BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEFBA09L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2627_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2630_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_nounphraseContent642_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseContent642 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseContent647_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseContent647 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_ratioOrBracketedRatio_in_nounphraseContent649_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_nounphraseContent649 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_noun_in_nounphraseContent651_static {
    public static final BitSet FOLLOW_noun_in_nounphraseContent651 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_numeric_in_nounphraseContent653_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseContent653 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_bracketedContent_in_nounphraseContent655_static {
    public static final BitSet FOLLOW_bracketedContent_in_nounphraseContent655 = new BitSet(new long[]{0x60001BE000000002L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase667_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase667 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase669_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase669 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase671_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_dissolvePhrase673_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure698_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure698 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_nnp_in_dissolveStructure702_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnchementity_in_dissolveStructure704_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure704 = new BitSet(new long[]{0x0001000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure707_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure707 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_molecule_in_dissolveStructure710_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure710 = new BitSet(new long[]{0x0001000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure712_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure712 = new BitSet(new long[]{0x0001000000000000L});

    }static class FOLLOW_inMolecule_in_dissolveStructure716_static {
    public static final BitSet FOLLOW_inMolecule_in_dissolveStructure716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008008L});

    }static class FOLLOW_conjunction_in_dissolveStructure719_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure719 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_molecule_in_dissolveStructure721_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008008L});

    }static class FOLLOW_inin_in_inMolecule733_static {
    public static final BitSet FOLLOW_inin_in_inMolecule733 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E13A09L});

    }static class FOLLOW_dtTHE_in_inMolecule735_static {
    public static final BitSet FOLLOW_dtTHE_in_inMolecule735 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_adj_in_inMolecule738_static {
    public static final BitSet FOLLOW_adj_in_inMolecule738 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_nnp_in_inMolecule741_static {
    public static final BitSet FOLLOW_nnp_in_inMolecule741 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_molecule_in_inMolecule745_static {
    public static final BitSet FOLLOW_molecule_in_inMolecule745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_inMolecule747_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_inMolecule747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase757_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure776_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure776 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_to_in_verbphraseStructure779_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure779 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_inAll_in_verbphraseStructure782_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure782 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_inafter_in_verbphraseStructure785_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure785 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_md_in_verbphraseStructure788_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure788 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_rbconj_in_verbphraseStructure791_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure791 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_adv_in_verbphraseStructure794_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure794 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_adj_in_verbphraseStructure797_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure797 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_actionVerb_in_verbphraseStructure801_static {
    public static final BitSet FOLLOW_actionVerb_in_verbphraseStructure801 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC02F38028L});

    }static class FOLLOW_md_in_verbphraseStructure803_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure803 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC02F38028L});

    }static class FOLLOW_adv_in_verbphraseStructure806_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure806 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC00F38028L});

    }static class FOLLOW_adj_in_verbphraseStructure809_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure809 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC00F38028L});

    }static class FOLLOW_neg_in_verbphraseStructure812_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure812 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC00F38028L});

    }static class FOLLOW_otherVerb_in_verbphraseStructure818_static {
    public static final BitSet FOLLOW_otherVerb_in_verbphraseStructure818 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_md_in_verbphraseStructure820_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure820 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_adv_in_verbphraseStructure823_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure823 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_adj_in_verbphraseStructure826_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure826 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_neg_in_verbphraseStructure829_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure829 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_otherVerbStructure_in_verbphraseStructure832_static {
    public static final BitSet FOLLOW_otherVerbStructure_in_verbphraseStructure832 = new BitSet(new long[]{0x5FFFE8C000000002L,0xEDD7D5EBFE780040L,0x00007EBC02F3802AL});

    }static class FOLLOW_actionVerbStructure_in_verbphraseStructure835_static {
    public static final BitSet FOLLOW_actionVerbStructure_in_verbphraseStructure835 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC00F38028L});

    }static class FOLLOW_inoff_in_verbphraseStructure839_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure839 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC00F38028L});

    }static class FOLLOW_cc_in_verbphraseStructure843_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure843 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30028L});

    }static class FOLLOW_comma_in_verbphraseStructure846_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure846 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30020L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure849_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure849 = new BitSet(new long[]{0x5FFFE8C000000002L,0x0000000000000040L,0x000000BC00F38028L});

    }static class FOLLOW_md_in_actionVerbStructure859_static {
    public static final BitSet FOLLOW_md_in_actionVerbStructure859 = new BitSet(new long[]{0x000008C000000000L,0xEDD6D5EB7E600000L,0x0000003C02E00002L});

    }static class FOLLOW_rbconj_in_actionVerbStructure862_static {
    public static final BitSet FOLLOW_rbconj_in_actionVerbStructure862 = new BitSet(new long[]{0x000008C000000000L,0xEDD6D5EB7E600000L,0x0000003C00E00000L});

    }static class FOLLOW_adv_in_actionVerbStructure865_static {
    public static final BitSet FOLLOW_adv_in_actionVerbStructure865 = new BitSet(new long[]{0x000008C000000000L,0xEDD6D5EB7E600000L,0x0000003C00E00000L});

    }static class FOLLOW_adj_in_actionVerbStructure868_static {
    public static final BitSet FOLLOW_adj_in_actionVerbStructure868 = new BitSet(new long[]{0x0000000000000000L,0xEDD6D5EB7E600000L});

    }static class FOLLOW_actionVerb_in_actionVerbStructure871_static {
    public static final BitSet FOLLOW_actionVerb_in_actionVerbStructure871 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C02E00020L});

    }static class FOLLOW_md_in_actionVerbStructure873_static {
    public static final BitSet FOLLOW_md_in_actionVerbStructure873 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C02E00020L});

    }static class FOLLOW_adv_in_actionVerbStructure876_static {
    public static final BitSet FOLLOW_adv_in_actionVerbStructure876 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C00E00020L});

    }static class FOLLOW_adj_in_actionVerbStructure879_static {
    public static final BitSet FOLLOW_adj_in_actionVerbStructure879 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_neg_in_actionVerbStructure882_static {
    public static final BitSet FOLLOW_neg_in_actionVerbStructure882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_otherVerbStructure890_static {
    public static final BitSet FOLLOW_md_in_otherVerbStructure890 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_rbconj_in_otherVerbStructure893_static {
    public static final BitSet FOLLOW_rbconj_in_otherVerbStructure893 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_adv_in_otherVerbStructure896_static {
    public static final BitSet FOLLOW_adv_in_otherVerbStructure896 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_adj_in_otherVerbStructure899_static {
    public static final BitSet FOLLOW_adj_in_otherVerbStructure899 = new BitSet(new long[]{0x1FFFE8C000000000L,0xEDD7D5EBFE780000L,0x00007EBC02F20002L});

    }static class FOLLOW_otherVerb_in_otherVerbStructure902_static {
    public static final BitSet FOLLOW_otherVerb_in_otherVerbStructure902 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C02E00020L});

    }static class FOLLOW_md_in_otherVerbStructure904_static {
    public static final BitSet FOLLOW_md_in_otherVerbStructure904 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C02E00020L});

    }static class FOLLOW_adv_in_otherVerbStructure907_static {
    public static final BitSet FOLLOW_adv_in_otherVerbStructure907 = new BitSet(new long[]{0x000008C000000002L,0x0000000000000000L,0x0000003C00E00020L});

    }static class FOLLOW_adj_in_otherVerbStructure910_static {
    public static final BitSet FOLLOW_adj_in_otherVerbStructure910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_neg_in_otherVerbStructure913_static {
    public static final BitSet FOLLOW_neg_in_otherVerbStructure913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_actionVerb_in_verb922_static {
    public static final BitSet FOLLOW_actionVerb_in_verb922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_otherVerb_in_verb926_static {
    public static final BitSet FOLLOW_otherVerb_in_verb926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_actionVerb933_static {
    public static final BitSet FOLLOW_vbadd_in_actionVerb933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_actionVerb935_static {
    public static final BitSet FOLLOW_vbcharge_in_actionVerb935 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_actionVerb937_static {
    public static final BitSet FOLLOW_vbcontain_in_actionVerb937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_actionVerb939_static {
    public static final BitSet FOLLOW_vbdilute_in_actionVerb939 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_actionVerb941_static {
    public static final BitSet FOLLOW_vbdrop_in_actionVerb941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_actionVerb943_static {
    public static final BitSet FOLLOW_vbfill_in_actionVerb943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_actionVerb945_static {
    public static final BitSet FOLLOW_vbtreat_in_actionVerb945 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_actionVerb947_static {
    public static final BitSet FOLLOW_vbapparatus_in_actionVerb947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_actionVerb949_static {
    public static final BitSet FOLLOW_vbconcentrate_in_actionVerb949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_actionVerb951_static {
    public static final BitSet FOLLOW_vbcool_in_actionVerb951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_actionVerb953_static {
    public static final BitSet FOLLOW_vbdegass_in_actionVerb953 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_actionVerb955_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_actionVerb955 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_actionVerb957_static {
    public static final BitSet FOLLOW_vbsubject_in_actionVerb957 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_actionVerb959_static {
    public static final BitSet FOLLOW_vbdissolve_in_actionVerb959 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_actionVerb961_static {
    public static final BitSet FOLLOW_vbdry_in_actionVerb961 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_actionVerb963_static {
    public static final BitSet FOLLOW_vbextract_in_actionVerb963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_actionVerb965_static {
    public static final BitSet FOLLOW_vbfilter_in_actionVerb965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_actionVerb967_static {
    public static final BitSet FOLLOW_vbheat_in_actionVerb967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_actionVerb969_static {
    public static final BitSet FOLLOW_vbincrease_in_actionVerb969 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_actionVerb971_static {
    public static final BitSet FOLLOW_vbsubmerge_in_actionVerb971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_actionVerb973_static {
    public static final BitSet FOLLOW_vbpartition_in_actionVerb973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_actionVerb975_static {
    public static final BitSet FOLLOW_vbprecipitate_in_actionVerb975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_actionVerb977_static {
    public static final BitSet FOLLOW_vbpurify_in_actionVerb977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_actionVerb979_static {
    public static final BitSet FOLLOW_vbquench_in_actionVerb979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_actionVerb981_static {
    public static final BitSet FOLLOW_vbrecover_in_actionVerb981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_actionVerb983_static {
    public static final BitSet FOLLOW_vbremove_in_actionVerb983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_actionVerb985_static {
    public static final BitSet FOLLOW_vbstir_in_actionVerb985 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_actionVerb987_static {
    public static final BitSet FOLLOW_vbsynthesize_in_actionVerb987 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_actionVerb989_static {
    public static final BitSet FOLLOW_vbwait_in_actionVerb989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_actionVerb991_static {
    public static final BitSet FOLLOW_vbwash_in_actionVerb991 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_actionVerb993_static {
    public static final BitSet FOLLOW_vbyield_in_actionVerb993 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vb_in_otherVerb1000_static {
    public static final BitSet FOLLOW_vb_in_otherVerb1000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_otherVerb1002_static {
    public static final BitSet FOLLOW_vbd_in_otherVerb1002 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_otherVerb1004_static {
    public static final BitSet FOLLOW_vbg_in_otherVerb1004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_otherVerb1006_static {
    public static final BitSet FOLLOW_vbn_in_otherVerb1006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_otherVerb1008_static {
    public static final BitSet FOLLOW_vbp_in_otherVerb1008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_otherVerb1010_static {
    public static final BitSet FOLLOW_vbz_in_otherVerb1010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_otherVerb1012_static {
    public static final BitSet FOLLOW_vbchange_in_otherVerb1012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_otherVerb1014_static {
    public static final BitSet FOLLOW_vbimmerse_in_otherVerb1014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_otherVerb1016_static {
    public static final BitSet FOLLOW_vbsuspend_in_otherVerb1016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_otherVerb1018_static {
    public static final BitSet FOLLOW_vbuse_in_otherVerb1018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb1027_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb1027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_cc_in_degassMultiVerb1029_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb1029 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb1031_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb1031 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun1040_static {
    public static final BitSet FOLLOW_nounStructure_in_noun1040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_noun1043_static {
    public static final BitSet FOLLOW_dash_in_noun1043 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x00078043FDEF2A09L});

    }static class FOLLOW_nounStructure_in_noun1045_static {
    public static final BitSet FOLLOW_nounStructure_in_noun1045 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_prp_in_nounStructure1056_static {
    public static final BitSet FOLLOW_prp_in_nounStructure1056 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure1058_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure1058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure1060_static {
    public static final BitSet FOLLOW_citation_in_nounStructure1060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure1062_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure1062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure1064_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure1066_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure1066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure1068_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure1068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure1070_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure1070 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure1072_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure1072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure1074_static {
    public static final BitSet FOLLOW_nn_in_nounStructure1074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure1076_static {
    public static final BitSet FOLLOW_nns_in_nounStructure1076 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure1078_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure1078 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure1080_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure1080 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure1082_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure1082 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure1084_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure1086_static {
    public static final BitSet FOLLOW_range_in_nounStructure1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure1088_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure1088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure1090_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure1092_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure1092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure1094_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure1094 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure1096_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure1096 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure1098_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure1098 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure1100_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure1100 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure1102_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure1102 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure1104_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure1104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure1106_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure1106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure1108_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure1108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure1110_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure1110 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure1112_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure1112 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure1114_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure1114 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure1116_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure1116 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure1118_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure1118 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure1120_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure1120 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure1122_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure1122 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure1124_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure1124 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure1126_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure1126 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure1128_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure1130_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure1132_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure1132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure1134_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure1134 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure1136_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure1136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure1138_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1138 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure1140_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure1142_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure1142 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure1144_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure1144 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure1146_static {
    public static final BitSet FOLLOW_fw_in_nounStructure1146 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure1148_static {
    public static final BitSet FOLLOW_sym_in_nounStructure1148 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure1150_static {
    public static final BitSet FOLLOW_clause_in_nounStructure1150 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure1152_static {
    public static final BitSet FOLLOW_ls_in_nounStructure1152 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure1154_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure1154 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure1156_static {
    public static final BitSet FOLLOW_pos_in_nounStructure1156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure1158_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure1158 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase1170_static {
    public static final BitSet FOLLOW_neg_in_prepphrase1170 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30020L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase1174_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase1176_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1176 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase1178_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1178 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase1180_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1180 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase1182_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase1184_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1196_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1196 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1216_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1216 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000003C00E32A09L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1219_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1219 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000003C00E12A09L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1222_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1222 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000003C00E12A09L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1225_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1227_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1237_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1255_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1255 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000000L,0x000000BC00F30000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1258_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1258 = new BitSet(new long[]{0x400008C000000000L,0x0000000000000000L,0x0000003C00E30000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1262_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1262 = new BitSet(new long[]{0x400008C000000000L,0x0000000000000000L,0x0000003C00E10000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1265_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1265 = new BitSet(new long[]{0x400008C000000000L,0x0000000000000000L,0x0000003C00E10000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1268_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1268 = new BitSet(new long[]{0x4000000000000000L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1271_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1271 = new BitSet(new long[]{0x4000000000000002L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1281_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1281 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1302_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1302 = new BitSet(new long[]{0x1FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1305_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1305 = new BitSet(new long[]{0x000008C000000000L,0x0000000000000040L,0x0000003C00E30000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1308_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1308 = new BitSet(new long[]{0x000008C000000000L,0x0000000000000040L,0x0000003C00E10000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1311_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000010000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1314_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1317_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1317 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});

    }static class FOLLOW_inin_in_prepphraseIN1326_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1326 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_molecule_in_prepphraseIN1328_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1349_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000020000L});

    }static class FOLLOW_dt_in_prepphraseRole1351_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1354_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1377_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1377 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30020L});

    }static class FOLLOW_inMost_in_prepphraseOther1380_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1380 = new BitSet(new long[]{0x7FFFFBE000000000L,0x1A282A140187FFFDL,0x000780FFFDFF3A29L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1384_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1410_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1410 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1413_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1435_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1435 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1438_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1438 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1441_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1466_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1466 = new BitSet(new long[]{0x0000200000000000L});

    }static class FOLLOW_inas_in_preparationphrase1468_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1468 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000020040L,0x000000BC00F30020L});

    }static class FOLLOW_nnexample_in_preparationphrase1471_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_preparationphrase1473_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1473 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1476_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1476 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1487_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1487 = new BitSet(new long[]{0x200018E000000002L,0x00000004008408A0L,0x0000000004E3AA09L});

    }static class FOLLOW_conjunction_in_multiApparatus1490_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1490 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E3AA09L});

    }static class FOLLOW_apparatus_in_multiApparatus1493_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1493 = new BitSet(new long[]{0x200018E000000002L,0x00000004008408A0L,0x0000000004E3AA09L});

    }static class FOLLOW_dt_in_apparatus1504_static {
    public static final BitSet FOLLOW_dt_in_apparatus1504 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_preapparatus_in_apparatus1507_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1507 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_nnApp_in_apparatus1510_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1510 = new BitSet(new long[]{0x200018E000000002L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_nnapparatus_in_nnApp1537_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1537 = new BitSet(new long[]{0x200018E000000002L,0x00000004008408A0L,0x0000000004E32A49L});

    }static class FOLLOW_dash_in_nnApp1541_static {
    public static final BitSet FOLLOW_dash_in_nnApp1541 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_nnapparatus_in_nnApp1543_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1543 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_quantity_in_preapparatus1557_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1557 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_adj_in_preapparatus1559_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1559 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nnpressure_in_preapparatus1561_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1561 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nnadd_in_preapparatus1563_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1563 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_molecule_in_preapparatus1565_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1565 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nnchementity_in_preapparatus1567_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1567 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nnstate_in_preapparatus1569_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1569 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nn_in_preapparatus1571_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1571 = new BitSet(new long[]{0x200018E000000002L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_jjcomp_in_oscarCompound1584_static {
    public static final BitSet FOLLOW_jjcomp_in_oscarCompound1584 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_adj_in_oscarCompound1586_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1586 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1590_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1590 = new BitSet(new long[]{0x224019E000000002L,0xEDD6D5EB7F6600A4L,0x0000000010E12A09L});

    }static class FOLLOW_adj_in_oscarCompound1592_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1592 = new BitSet(new long[]{0x224019E000000002L,0xEDD6D5EB7F6600A4L,0x0000000010E12A09L});

    }static class FOLLOW_nnstate_in_oscarCompound1595_static {
    public static final BitSet FOLLOW_nnstate_in_oscarCompound1595 = new BitSet(new long[]{0x224019E000000002L,0xEDD6D5EB7F6600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericReferenceOrQuantity_in_oscarCompound1599_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_oscarCompound1599 = new BitSet(new long[]{0x0240000000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_nnchementity_in_oscarCompound1603_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1603 = new BitSet(new long[]{0x0240000000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_oscarCompound1608_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1608 = new BitSet(new long[]{0x0240000000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_fromProcedure_in_oscarCompound1611_static {
    public static final BitSet FOLLOW_fromProcedure_in_oscarCompound1611 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1620_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1620 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0000000000000054L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1623_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1623 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1628_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1628 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1651_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1653_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1653 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1658_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1658 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_afterOscarCompoundStructure1677_static {
    public static final BitSet FOLLOW_colon_in_afterOscarCompoundStructure1677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1679_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0000000000000004L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1685_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000050L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1687_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000050L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1696_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1699_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1702_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1702 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1712_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1730_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1730 = new BitSet(new long[]{0x0000200000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1733_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1733 = new BitSet(new long[]{0x0000200000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1737_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1737 = new BitSet(new long[]{0x0000200000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1740_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31751_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31751 = new BitSet(new long[]{0x0040002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount31753_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount31753 = new BitSet(new long[]{0x0040002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_inof_in_moleculeamount31757_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000033000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31760_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000012000L});

    }static class FOLLOW_dt_in_moleculeamount31764_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000012000L});

    }static class FOLLOW_ratioOrBracketedRatio_in_moleculeamount31768_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_moleculeamount31768 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount31770_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount31770 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31773_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_moleculeamount11783_static {
    public static final BitSet FOLLOW_nnchementity_in_moleculeamount11783 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_nnstate_in_moleculeamount11787_static {
    public static final BitSet FOLLOW_nnstate_in_moleculeamount11787 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_quantity_in_moleculeamount11792_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11792 = new BitSet(new long[]{0x0040002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount11794_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount11794 = new BitSet(new long[]{0x0040002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_inof_in_moleculeamount11798_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11798 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E33A09L});

    }static class FOLLOW_quantity_in_moleculeamount11801_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11801 = new BitSet(new long[]{0x204018E000000000L,0x00000000000400A0L,0x0000000000E33A09L});

    }static class FOLLOW_inof_in_moleculeamount11803_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11803 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E33A09L});

    }static class FOLLOW_dtTHE_in_moleculeamount11809_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11809 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_dt_in_moleculeamount11813_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11813 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11817_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11817 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11820_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21829_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21829 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount21831_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount21831 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21835_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21835 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21838_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1846_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1846 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1848_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1848 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1850_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1853_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1853 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1855_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1855 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1858_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1858 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1869_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1886_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1886 = new BitSet(new long[]{0x0000202000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1888_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1888 = new BitSet(new long[]{0x0000200000000002L});

    }static class FOLLOW_asAstate_in_unnamedmoleculeDescription1890_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmoleculeDescription1890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1900_static {
    public static final BitSet FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1900 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1903_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1907_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1911_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1917_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1921_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_quantityOf1930_static {
    public static final BitSet FOLLOW_quantity_in_quantityOf1930 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000080L,0x0000000000033001L});

    }static class FOLLOW_inof_in_quantityOf1933_static {
    public static final BitSet FOLLOW_inof_in_quantityOf1933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000021000L});

    }static class FOLLOW_dtTHE_in_quantityOf1937_static {
    public static final BitSet FOLLOW_dtTHE_in_quantityOf1937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_quantityOf1941_static {
    public static final BitSet FOLLOW_dt_in_quantityOf1941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11952_static {
    public static final BitSet FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11952 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11954_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11954 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11957_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11957 = new BitSet(new long[]{0x0240000000000002L,0xEDD6D5EB7E600000L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11960_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21971_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21971 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21974_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21974 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21978_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21978 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21984_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21984 = new BitSet(new long[]{0x224039E000000000L,0xEDD6D5EB7F6600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21987_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21987 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21991_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21991 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21995_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21995 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount22000_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount22000 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22003_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22003 = new BitSet(new long[]{0x0240000000000002L,0xEDD6D5EB7E600000L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22006_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule2016_static {
    public static final BitSet FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule2016 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_definiteUnnamedMolecule2018_static {
    public static final BitSet FOLLOW_quantity_in_definiteUnnamedMolecule2018 = new BitSet(new long[]{0x0240200000000002L,0xEDD6D5EB7E600080L,0x0000000000012001L});

    }static class FOLLOW_asAstate_in_definiteUnnamedMolecule2021_static {
    public static final BitSet FOLLOW_asAstate_in_definiteUnnamedMolecule2021 = new BitSet(new long[]{0x0240000000000002L,0xEDD6D5EB7E600000L});

    }static class FOLLOW_fromProcedure_in_definiteUnnamedMolecule2024_static {
    public static final BitSet FOLLOW_fromProcedure_in_definiteUnnamedMolecule2024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_definiteUnnamedMoleculeStructure2034_static {
    public static final BitSet FOLLOW_adj_in_definiteUnnamedMoleculeStructure2034 = new BitSet(new long[]{0x000018C000000000L,0x0000000000000020L,0x0000000000E00000L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2038_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2038 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2040_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure2044_static {
    public static final BitSet FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure2044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2046_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2046 = new BitSet(new long[]{0x200019E000000002L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure2048_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure2048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2054_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule2063_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule2063 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule2067_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule2067 = new BitSet(new long[]{0x200019E000000002L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule2069_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule2069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2082_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2082 = new BitSet(new long[]{0x2000194000000000L,0x0000000001020004L,0x0000000000200000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2084_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2084 = new BitSet(new long[]{0x2000194000000000L,0x0000000001020004L,0x0000000000200000L});

    }static class FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2086_static {
    public static final BitSet FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2086 = new BitSet(new long[]{0x2000194000000000L,0x0000000001020004L,0x0000000000200000L});

    }static class FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2088_static {
    public static final BitSet FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2088 = new BitSet(new long[]{0x2000194000000000L,0x0000000001020004L,0x0000000000200000L});

    }static class FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2093_static {
    public static final BitSet FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2093 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2095_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2095 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2097_static {
    public static final BitSet FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2097 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2099_static {
    public static final BitSet FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2099 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2101_static {
    public static final BitSet FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2101 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2107_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2107 = new BitSet(new long[]{0x0000084000000000L,0x0000000000000020L,0x0000000000200000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2109_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2109 = new BitSet(new long[]{0x0000084000000000L,0x0000000000000020L,0x0000000000200000L});

    }static class FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2111_static {
    public static final BitSet FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2111 = new BitSet(new long[]{0x0000084000000000L,0x0000000000000020L,0x0000000000200000L});

    }static class FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2115_static {
    public static final BitSet FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2115 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_numericReferenceOrQuantity2125_static {
    public static final BitSet FOLLOW_quantity_in_numericReferenceOrQuantity2125 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2129_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2129 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_asAstate2138_static {
    public static final BitSet FOLLOW_inas_in_asAstate2138 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000220000L});

    }static class FOLLOW_dt_in_asAstate2140_static {
    public static final BitSet FOLLOW_dt_in_asAstate2140 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_jj_in_asAstate2144_static {
    public static final BitSet FOLLOW_jj_in_asAstate2144 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_jjchem_in_asAstate2146_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate2146 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_oscarcj_in_asAstate2148_static {
    public static final BitSet FOLLOW_oscarcj_in_asAstate2148 = new BitSet(new long[]{0x2000084000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_nnstate_in_asAstate2152_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate2152 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_quantity_in_asAstate2154_static {
    public static final BitSet FOLLOW_quantity_in_asAstate2154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2165_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberCompoundReference2184_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference2184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2205_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2205 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity2225_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2227_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2236_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2236 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12256_static {
    public static final BitSet FOLLOW_lrb_in_quantity12256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurements_in_quantity12258_static {
    public static final BitSet FOLLOW_measurements_in_quantity12258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004088L});

    }static class FOLLOW_comma_in_quantity12261_static {
    public static final BitSet FOLLOW_comma_in_quantity12261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurements_in_quantity12264_static {
    public static final BitSet FOLLOW_measurements_in_quantity12264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004088L});

    }static class FOLLOW_comma_in_quantity12269_static {
    public static final BitSet FOLLOW_comma_in_quantity12269 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12271_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004088L});

    }static class FOLLOW_stop_in_quantity12276_static {
    public static final BitSet FOLLOW_stop_in_quantity12276 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12278_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004080L});

    }static class FOLLOW_rrb_in_quantity12283_static {
    public static final BitSet FOLLOW_rrb_in_quantity12283 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2291_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2291 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22312_static {
    public static final BitSet FOLLOW_measurements_in_quantity22312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_comma_in_quantity22315_static {
    public static final BitSet FOLLOW_comma_in_quantity22315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurements_in_quantity22318_static {
    public static final BitSet FOLLOW_measurements_in_quantity22318 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_cd_in_measurements2331_static {
    public static final BitSet FOLLOW_cd_in_measurements2331 = new BitSet(new long[]{0x200018E000000000L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_nn_in_measurements2333_static {
    public static final BitSet FOLLOW_nn_in_measurements2333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_multiple_in_measurements2338_static {
    public static final BitSet FOLLOW_multiple_in_measurements2338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_measurementtypes_in_measurements2340_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_dt_in_measurements2343_static {
    public static final BitSet FOLLOW_dt_in_measurements2343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2351_static {
    public static final BitSet FOLLOW_cd_in_multiple2351 = new BitSet(new long[]{0x0000040000000000L});

    }static class FOLLOW_cdunicode_in_multiple2353_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurementtypes_in_multiple2355_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2380_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2382_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2384_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2386_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2388_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2390_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2392_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2394_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2402_static {
    public static final BitSet FOLLOW_cd_in_molar2402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_molar2404_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2424_static {
    public static final BitSet FOLLOW_cd_in_amount2424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nnamount_in_amount2426_static {
    public static final BitSet FOLLOW_nnamount_in_amount2426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2446_static {
    public static final BitSet FOLLOW_cd_in_mass2446 = new BitSet(new long[]{0x8000000000000000L});

    }static class FOLLOW_nnmass_in_mass2448_static {
    public static final BitSet FOLLOW_nnmass_in_mass2448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2467_static {
    public static final BitSet FOLLOW_cd_in_volume2467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_nnvol_in_volume2469_static {
    public static final BitSet FOLLOW_nnvol_in_volume2469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2489_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000010000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2491_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2494_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2514_static {
    public static final BitSet FOLLOW_cd_in_equivalent2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nneq_in_equivalent2516_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield1_in_yield2533_static {
    public static final BitSet FOLLOW_yield1_in_yield2533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield2_in_yield2544_static {
    public static final BitSet FOLLOW_yield2_in_yield2544 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_yield12558_static {
    public static final BitSet FOLLOW_nnyield_in_yield12558 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_inof_in_yield12561_static {
    public static final BitSet FOLLOW_inof_in_yield12561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010001L});

    }static class FOLLOW_colon_in_yield12563_static {
    public static final BitSet FOLLOW_colon_in_yield12563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010001L});

    }static class FOLLOW_percent_in_yield12566_static {
    public static final BitSet FOLLOW_percent_in_yield12566 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield22572_static {
    public static final BitSet FOLLOW_percent_in_yield22572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nnyield_in_yield22574_static {
    public static final BitSet FOLLOW_nnyield_in_yield22574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_percent2582_static {
    public static final BitSet FOLLOW_cd_in_percent2582 = new BitSet(new long[]{0x200018E000000000L,0x00000000008408A0L,0x0000000004E12B09L});

    }static class FOLLOW_nn_in_percent2584_static {
    public static final BitSet FOLLOW_nn_in_percent2584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_percentsign_in_percent2587_static {
    public static final BitSet FOLLOW_percentsign_in_percent2587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_percent2591_static {
    public static final BitSet FOLLOW_dash_in_percent2591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_percent2593_static {
    public static final BitSet FOLLOW_cd_in_percent2593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_percentsign_in_percent2595_static {
    public static final BitSet FOLLOW_percentsign_in_percent2595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_bracketedContent2629_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContent2629 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEF3A09L});

    }static class FOLLOW_bracketedContent1_in_bracketedContent2634_static {
    public static final BitSet FOLLOW_bracketedContent1_in_bracketedContent2634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent2_in_bracketedContent2636_static {
    public static final BitSet FOLLOW_bracketedContent2_in_bracketedContent2636 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent3_in_bracketedContent2638_static {
    public static final BitSet FOLLOW_bracketedContent3_in_bracketedContent2638 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContent12663_static {
    public static final BitSet FOLLOW_comma_in_bracketedContent12663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_lrb_in_bracketedContent12665_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContent12665 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent12667_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent12667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedContent12669_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContent12669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_comma_in_bracketedContent12671_static {
    public static final BitSet FOLLOW_comma_in_bracketedContent12671 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedContent22677_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContent22677 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent22679_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent22679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedContent22681_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContent22681 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_bracketedContent32687_static {
    public static final BitSet FOLLOW_lsqb_in_bracketedContent32687 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent32689_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent32689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rsqb_in_bracketedContent32691_static {
    public static final BitSet FOLLOW_rsqb_in_bracketedContent32691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_bracketedContentContents2698_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentContents2698 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_noun_in_bracketedContentContents2700_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentContents2700 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_bracketedContent_in_bracketedContentContents2702_static {
    public static final BitSet FOLLOW_bracketedContent_in_bracketedContentContents2702 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_md_in_bracketedContentContents2704_static {
    public static final BitSet FOLLOW_md_in_bracketedContentContents2704 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_percentsign_in_bracketedContentContents2706_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentContents2706 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_dash_in_bracketedContentContents2708_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentContents2708 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_inAll_in_bracketedContentContents2710_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentContents2710 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_ratio_in_bracketedContentContents2712_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentContents2712 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_conjunction_in_bracketedContentContents2714_static {
    public static final BitSet FOLLOW_conjunction_in_bracketedContentContents2714 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_adj_in_bracketedContentContents2716_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentContents2716 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_colon_in_bracketedContentContents2718_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentContents2718 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_stop_in_bracketedContentContents2720_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentContents2720 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_numeric_in_bracketedContentContents2722_static {
    public static final BitSet FOLLOW_numeric_in_bracketedContentContents2722 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFBBCFL});

    }static class FOLLOW_ratio_in_bracketedContentInMol2731_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMol2731 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000080L,0x0000000000012A09L});

    }static class FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2736_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2736 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2738_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2740_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContentInMolStructure12765_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolStructure12765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_lrb_in_bracketedContentInMolStructure12767_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContentInMolStructure12767 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFF2BCFL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12769_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedContentInMolStructure12771_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContentInMolStructure12771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_comma_in_bracketedContentInMolStructure12773_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolStructure12773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedContentInMolStructure22779_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContentInMolStructure22779 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFF2BCFL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22781_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedContentInMolStructure22783_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContentInMolStructure22783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_bracketedContentInMolStructure32789_static {
    public static final BitSet FOLLOW_lsqb_in_bracketedContentInMolStructure32789 = new BitSet(new long[]{0x7FFFFBE000000000L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFF2BCFL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32791_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rsqb_in_bracketedContentInMolStructure32793_static {
    public static final BitSet FOLLOW_rsqb_in_bracketedContentInMolStructure32793 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_bracketedContentInMolContents2800_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentInMolContents2800 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_quantity2Node_in_bracketedContentInMolContents2802_static {
    public static final BitSet FOLLOW_quantity2Node_in_bracketedContentInMolContents2802 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_oscarCompound_in_bracketedContentInMolContents2804_static {
    public static final BitSet FOLLOW_oscarCompound_in_bracketedContentInMolContents2804 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2806_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2806 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_ratio_in_bracketedContentInMolContents2808_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMolContents2808 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2810_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000008CL});

    }static class FOLLOW_comma_in_bracketedContentInMolContents2813_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolContents2813 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2817_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2817 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2823_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2823 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_cd_in_bracketedContentInMolContents2826_static {
    public static final BitSet FOLLOW_cd_in_bracketedContentInMolContents2826 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_md_in_bracketedContentInMolContents2828_static {
    public static final BitSet FOLLOW_md_in_bracketedContentInMolContents2828 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_percentsign_in_bracketedContentInMolContents2830_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentInMolContents2830 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_dash_in_bracketedContentInMolContents2832_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentInMolContents2832 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_inAll_in_bracketedContentInMolContents2834_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentInMolContents2834 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_comma_in_bracketedContentInMolContents2836_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolContents2836 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_adj_in_bracketedContentInMolContents2838_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentInMolContents2838 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2840_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2840 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2842_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2842 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_noun_in_bracketedContentInMolContents2844_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentInMolContents2844 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2846_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2846 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_verb_in_bracketedContentInMolContents2850_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentInMolContents2850 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_quantity2Node_in_bracketedContentInMolContents2852_static {
    public static final BitSet FOLLOW_quantity2Node_in_bracketedContentInMolContents2852 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_oscarCompound_in_bracketedContentInMolContents2854_static {
    public static final BitSet FOLLOW_oscarCompound_in_bracketedContentInMolContents2854 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2856_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2856 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_ratio_in_bracketedContentInMolContents2858_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMolContents2858 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_cd_in_bracketedContentInMolContents2860_static {
    public static final BitSet FOLLOW_cd_in_bracketedContentInMolContents2860 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_md_in_bracketedContentInMolContents2862_static {
    public static final BitSet FOLLOW_md_in_bracketedContentInMolContents2862 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_percentsign_in_bracketedContentInMolContents2864_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentInMolContents2864 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_dash_in_bracketedContentInMolContents2866_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentInMolContents2866 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_inAll_in_bracketedContentInMolContents2868_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentInMolContents2868 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_conjunction_in_bracketedContentInMolContents2870_static {
    public static final BitSet FOLLOW_conjunction_in_bracketedContentInMolContents2870 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_adj_in_bracketedContentInMolContents2872_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentInMolContents2872 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2874_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2874 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2876_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2876 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_noun_in_bracketedContentInMolContents2878_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentInMolContents2878 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2880_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2880 = new BitSet(new long[]{0x7FFFFBE000000002L,0xFFFFFFFFFFFFFFFDL,0x0007FEFFFFFFABCFL});

    }static class FOLLOW_infrom_in_fromProcedure2891_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2891 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_inof_in_fromProcedure2897_static {
    public static final BitSet FOLLOW_inof_in_fromProcedure2897 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_vbyield_in_fromProcedure2904_static {
    public static final BitSet FOLLOW_vbyield_in_fromProcedure2904 = new BitSet(new long[]{0x0211000000000000L});

    }static class FOLLOW_vbsynthesize_in_fromProcedure2906_static {
    public static final BitSet FOLLOW_vbsynthesize_in_fromProcedure2906 = new BitSet(new long[]{0x0211000000000000L});

    }static class FOLLOW_inin_in_fromProcedure2910_static {
    public static final BitSet FOLLOW_inin_in_fromProcedure2910 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_inby_in_fromProcedure2912_static {
    public static final BitSet FOLLOW_inby_in_fromProcedure2912 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_infrom_in_fromProcedure2914_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2914 = new BitSet(new long[]{0x200018E000000000L,0x0000000000860EA0L,0x0000000004E12A09L});

    }static class FOLLOW_procedureNode_in_fromProcedure2918_static {
    public static final BitSet FOLLOW_procedureNode_in_fromProcedure2918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2925_static {
    public static final BitSet FOLLOW_method_in_procedureNode2925 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2946_static {
    public static final BitSet FOLLOW_nngeneral_in_method2946 = new BitSet(new long[]{0x200018E000000000L,0x0000000000840EA0L,0x0000000004E12A09L});

    }static class FOLLOW_nn_in_method2948_static {
    public static final BitSet FOLLOW_nn_in_method2948 = new BitSet(new long[]{0x200018E000000000L,0x0000000000840EA0L,0x0000000004E12A09L});

    }static class FOLLOW_nnmethod_in_method2952_static {
    public static final BitSet FOLLOW_nnmethod_in_method2952 = new BitSet(new long[]{0x224019E000000002L,0x0000000001860EA4L,0x0000000014E12A0DL});

    }static class FOLLOW_allIdentifierTypes_in_method2954_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_method2954 = new BitSet(new long[]{0x224018E000000002L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_nnexample_in_method2959_static {
    public static final BitSet FOLLOW_nnexample_in_method2959 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_allIdentifierTypes_in_method2961_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_method2961 = new BitSet(new long[]{0x224018E000000002L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_comma_in_method2967_static {
    public static final BitSet FOLLOW_comma_in_method2967 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_colon_in_method2970_static {
    public static final BitSet FOLLOW_colon_in_method2970 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_inof_in_method2973_static {
    public static final BitSet FOLLOW_inof_in_method2973 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_infrom_in_method2977_static {
    public static final BitSet FOLLOW_infrom_in_method2977 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_submethod_in_method2981_static {
    public static final BitSet FOLLOW_submethod_in_method2981 = new BitSet(new long[]{0x224018E000000002L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_lrb_in_method2985_static {
    public static final BitSet FOLLOW_lrb_in_method2985 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_submethod_in_method2987_static {
    public static final BitSet FOLLOW_submethod_in_method2987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_method2989_static {
    public static final BitSet FOLLOW_rrb_in_method2989 = new BitSet(new long[]{0x224018E000000002L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_nnmethod_in_submethod3000_static {
    public static final BitSet FOLLOW_nnmethod_in_submethod3000 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_nnexample_in_submethod3002_static {
    public static final BitSet FOLLOW_nnexample_in_submethod3002 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_allIdentifierTypes_in_submethod3005_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_submethod3005 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound3014_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound3014 = new BitSet(new long[]{0x200019E000000000L,0x00000000010600A4L,0x0000000010E12A09L});

    }static class FOLLOW_allIdentifierTypes_in_referenceToExampleCompound3016_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_referenceToExampleCompound3016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj3034_static {
    public static final BitSet FOLLOW_adv_in_advAdj3034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj3036_static {
    public static final BitSet FOLLOW_adj_in_advAdj3036 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range3043_static {
    public static final BitSet FOLLOW_numeric_in_range3043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_range3045_static {
    public static final BitSet FOLLOW_dash_in_range3045 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000010800L});

    }static class FOLLOW_numeric_in_range3047_static {
    public static final BitSet FOLLOW_numeric_in_range3047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles3054_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles3054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure3071_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure3071 = new BitSet(new long[]{0x200018E000000000L,0x00000000008488A0L,0x0000000004E12A09L});

    }static class FOLLOW_dashNN_in_cycleStructure3073_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure3073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_nncycle_in_cycleStructure3076_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure3076 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN3084_static {
    public static final BitSet FOLLOW_adj_in_dashNN3084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nn_in_dashNN3086_static {
    public static final BitSet FOLLOW_nn_in_dashNN3086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_cd_in_dashNN3088_static {
    public static final BitSet FOLLOW_cd_in_dashNN3088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_dashNN3092_static {
    public static final BitSet FOLLOW_dash_in_dashNN3092 = new BitSet(new long[]{0x200018E000000000L,0x00000000008408A0L,0x0000000004E12A09L});

    }static class FOLLOW_adj_in_dashNN3095_static {
    public static final BitSet FOLLOW_adj_in_dashNN3095 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nn_in_dashNN3097_static {
    public static final BitSet FOLLOW_nn_in_dashNN3097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_cd_in_dashNN3099_static {
    public static final BitSet FOLLOW_cd_in_dashNN3099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_lrb_in_ratioOrBracketedRatio3110_static {
    public static final BitSet FOLLOW_lrb_in_ratioOrBracketedRatio3110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3112_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_ratioOrBracketedRatio3114_static {
    public static final BitSet FOLLOW_rrb_in_ratioOrBracketedRatio3114 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3118_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3118 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatio_in_ratio3125_static {
    public static final BitSet FOLLOW_cdRatio_in_ratio3125 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cdRatio3140_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_colon_in_cdRatio3143_static {
    public static final BitSet FOLLOW_colon_in_cdRatio3143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_cdRatio3145_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_citationStructure_in_citation3157_static {
    public static final BitSet FOLLOW_citationStructure_in_citation3157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation3159_static {
    public static final BitSet FOLLOW_comma_in_citation3159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_citationContent_in_citation3161_static {
    public static final BitSet FOLLOW_citationContent_in_citation3161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_comma_in_citation3163_static {
    public static final BitSet FOLLOW_comma_in_citation3163 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure3171_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure3171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent3187_static {
    public static final BitSet FOLLOW_lrb_in_citationContent3187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_nnp_in_citationContent3190_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_fw_in_citationContent3192_static {
    public static final BitSet FOLLOW_fw_in_citationContent3192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_cd_in_citationContent3194_static {
    public static final BitSet FOLLOW_cd_in_citationContent3194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_conjunction_in_citationContent3196_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010098008L});

    }static class FOLLOW_nnp_in_citationContent3200_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001009C008L});

    }static class FOLLOW_fw_in_citationContent3202_static {
    public static final BitSet FOLLOW_fw_in_citationContent3202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001009C008L});

    }static class FOLLOW_cd_in_citationContent3204_static {
    public static final BitSet FOLLOW_cd_in_citationContent3204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001009C008L});

    }static class FOLLOW_conjunction_in_citationContent3206_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001009C008L});

    }static class FOLLOW_rrb_in_citationContent3210_static {
    public static final BitSet FOLLOW_rrb_in_citationContent3210 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3220_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3220 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_allIdentifierTypes3224_static {
    public static final BitSet FOLLOW_cd_in_allIdentifierTypes3224 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3233_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3235_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3237_static {
    public static final BitSet FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3240_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3240 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric3248_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric3248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3252_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric3260_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric3260 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000010800L});

    }static class FOLLOW_numeric_in_bracketedNumeric3262_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric3262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedNumeric3264_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric3264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference3271_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference3271 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000010800L});

    }static class FOLLOW_numeric_in_squareBracketedReference3273_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference3273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rsqb_in_squareBracketedReference3275_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference3275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier3282_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier3282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3285_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3285 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3289_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier3297_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier3297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010800L});

    }static class FOLLOW_cd_in_bracketedIdentifier3299_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier3299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier3302_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier3302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier3304_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier3304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj3312_static {
    public static final BitSet FOLLOW_jj_in_adj3312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj3314_static {
    public static final BitSet FOLLOW_jjr_in_adj3314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj3316_static {
    public static final BitSet FOLLOW_jjs_in_adj3316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj3318_static {
    public static final BitSet FOLLOW_jjchem_in_adj3318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj3320_static {
    public static final BitSet FOLLOW_oscarcj_in_adj3320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj3322_static {
    public static final BitSet FOLLOW_oscarrn_in_adj3322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv3329_static {
    public static final BitSet FOLLOW_rb_in_adv3329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv3331_static {
    public static final BitSet FOLLOW_rbr_in_adv3331 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv3333_static {
    public static final BitSet FOLLOW_rp_in_adv3333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv3335_static {
    public static final BitSet FOLLOW_rbs_in_adv3335 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause3342_static {
    public static final BitSet FOLLOW_wdt_in_clause3342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause3344_static {
    public static final BitSet FOLLOW_wp_poss_in_clause3344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause3346_static {
    public static final BitSet FOLLOW_wrb_in_clause3346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause3348_static {
    public static final BitSet FOLLOW_ex_in_clause3348 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause3350_static {
    public static final BitSet FOLLOW_pdt_in_clause3350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause3352_static {
    public static final BitSet FOLLOW_wp_in_clause3352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction3359_static {
    public static final BitSet FOLLOW_cc_in_conjunction3359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction3361_static {
    public static final BitSet FOLLOW_comma_in_conjunction3361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll3368_static {
    public static final BitSet FOLLOW_in_in_inAll3368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll3370_static {
    public static final BitSet FOLLOW_inafter_in_inAll3370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll3372_static {
    public static final BitSet FOLLOW_inas_in_inAll3372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll3374_static {
    public static final BitSet FOLLOW_inbefore_in_inAll3374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll3376_static {
    public static final BitSet FOLLOW_inby_in_inAll3376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll3378_static {
    public static final BitSet FOLLOW_infor_in_inAll3378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll3380_static {
    public static final BitSet FOLLOW_infrom_in_inAll3380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll3382_static {
    public static final BitSet FOLLOW_inin_in_inAll3382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll3384_static {
    public static final BitSet FOLLOW_ininto_in_inAll3384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll3386_static {
    public static final BitSet FOLLOW_inof_in_inAll3386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll3388_static {
    public static final BitSet FOLLOW_inoff_in_inAll3388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll3390_static {
    public static final BitSet FOLLOW_inon_in_inAll3390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll3392_static {
    public static final BitSet FOLLOW_inover_in_inAll3392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll3394_static {
    public static final BitSet FOLLOW_inunder_in_inAll3394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll3396_static {
    public static final BitSet FOLLOW_invia_in_inAll3396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll3398_static {
    public static final BitSet FOLLOW_inwith_in_inAll3398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll3400_static {
    public static final BitSet FOLLOW_inwithout_in_inAll3400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll3402_static {
    public static final BitSet FOLLOW_to_in_inAll3402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3409_static {
    public static final BitSet FOLLOW_in_in_inMost3409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3411_static {
    public static final BitSet FOLLOW_inas_in_inMost3411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3413_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3415_static {
    public static final BitSet FOLLOW_inby_in_inMost3415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3417_static {
    public static final BitSet FOLLOW_infor_in_inMost3417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3419_static {
    public static final BitSet FOLLOW_infrom_in_inMost3419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3421_static {
    public static final BitSet FOLLOW_inin_in_inMost3421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3423_static {
    public static final BitSet FOLLOW_ininto_in_inMost3423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3425_static {
    public static final BitSet FOLLOW_inof_in_inMost3425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3427_static {
    public static final BitSet FOLLOW_inoff_in_inMost3427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3429_static {
    public static final BitSet FOLLOW_inon_in_inMost3429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3431_static {
    public static final BitSet FOLLOW_inover_in_inMost3431 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3433_static {
    public static final BitSet FOLLOW_inunder_in_inMost3433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3435_static {
    public static final BitSet FOLLOW_invia_in_inMost3435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3437_static {
    public static final BitSet FOLLOW_inwith_in_inMost3437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3439_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3441_static {
    public static final BitSet FOLLOW_to_in_inMost3441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3448_static {
    public static final BitSet FOLLOW_cd_in_numeric3448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3450_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3450 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_37_in_cdAlphanum3458_static {
    public static final BitSet FOLLOW_37_in_cdAlphanum3458 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3460_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_oscarcj3473_static {
    public static final BitSet FOLLOW_38_in_oscarcj3473 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3475_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarrn3488_static {
    public static final BitSet FOLLOW_39_in_oscarrn3488 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3490_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3490 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarase3503_static {
    public static final BitSet FOLLOW_40_in_oscarase3503 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3505_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3505 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_tmunicode3518_static {
    public static final BitSet FOLLOW_41_in_tmunicode3518 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3520_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_cdunicode3533_static {
    public static final BitSet FOLLOW_42_in_cdunicode3533 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3535_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3535 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_jjchem3548_static {
    public static final BitSet FOLLOW_43_in_jjchem3548 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3550_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_jjcomp3563_static {
    public static final BitSet FOLLOW_44_in_jjcomp3563 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3565_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3565 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_inas3579_static {
    public static final BitSet FOLLOW_45_in_inas3579 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inas3581_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3581 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_inbefore3594_static {
    public static final BitSet FOLLOW_46_in_inbefore3594 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3596_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3596 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inafter3609_static {
    public static final BitSet FOLLOW_47_in_inafter3609 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inafter3611_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3611 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inin3624_static {
    public static final BitSet FOLLOW_48_in_inin3624 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inin3626_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3626 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_ininto3639_static {
    public static final BitSet FOLLOW_49_in_ininto3639 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_ininto3641_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3641 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inwith3654_static {
    public static final BitSet FOLLOW_50_in_inwith3654 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inwith3656_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3656 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_inwithout3669_static {
    public static final BitSet FOLLOW_51_in_inwithout3669 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3671_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3671 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inby3684_static {
    public static final BitSet FOLLOW_52_in_inby3684 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inby3686_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3686 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_invia3699_static {
    public static final BitSet FOLLOW_53_in_invia3699 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_invia3701_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inof3714_static {
    public static final BitSet FOLLOW_54_in_inof3714 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inof3716_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3716 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_inon3729_static {
    public static final BitSet FOLLOW_55_in_inon3729 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inon3731_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3731 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_infor3744_static {
    public static final BitSet FOLLOW_56_in_infor3744 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_infor3746_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_infrom3759_static {
    public static final BitSet FOLLOW_57_in_infrom3759 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_infrom3761_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_inunder3774_static {
    public static final BitSet FOLLOW_58_in_inunder3774 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inunder3776_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3776 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_inover3789_static {
    public static final BitSet FOLLOW_59_in_inover3789 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inover3791_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3791 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inoff3804_static {
    public static final BitSet FOLLOW_60_in_inoff3804 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_inoff3806_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_nnstate3821_static {
    public static final BitSet FOLLOW_61_in_nnstate3821 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3823_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_nntime3836_static {
    public static final BitSet FOLLOW_62_in_nntime3836 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nntime3838_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnmass3851_static {
    public static final BitSet FOLLOW_63_in_nnmass3851 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3853_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nnamount3866_static {
    public static final BitSet FOLLOW_64_in_nnamount3866 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3868_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmolar3881_static {
    public static final BitSet FOLLOW_65_in_nnmolar3881 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3883_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnatmosphere3896_static {
    public static final BitSet FOLLOW_66_in_nnatmosphere3896 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3898_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nneq3911_static {
    public static final BitSet FOLLOW_67_in_nneq3911 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nneq3913_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnvol3926_static {
    public static final BitSet FOLLOW_68_in_nnvol3926 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3928_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nnchementity3941_static {
    public static final BitSet FOLLOW_69_in_nnchementity3941 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3943_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nntemp3956_static {
    public static final BitSet FOLLOW_70_in_nntemp3956 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3958_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnph3971_static {
    public static final BitSet FOLLOW_71_in_nnph3971 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnph3973_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nnflash3986_static {
    public static final BitSet FOLLOW_72_in_nnflash3986 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3988_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nngeneral4001_static {
    public static final BitSet FOLLOW_73_in_nngeneral4001 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral4003_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral4003 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnmethod4016_static {
    public static final BitSet FOLLOW_74_in_nnmethod4016 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod4018_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod4018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nnpressure4031_static {
    public static final BitSet FOLLOW_75_in_nnpressure4031 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure4033_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure4033 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nncolumn4046_static {
    public static final BitSet FOLLOW_76_in_nncolumn4046 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn4048_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn4048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnchromatography4061_static {
    public static final BitSet FOLLOW_77_in_nnchromatography4061 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography4063_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography4063 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nnvacuum4076_static {
    public static final BitSet FOLLOW_78_in_nnvacuum4076 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum4078_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum4078 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nncycle4091_static {
    public static final BitSet FOLLOW_79_in_nncycle4091 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nncycle4093_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle4093 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nntimes4106_static {
    public static final BitSet FOLLOW_80_in_nntimes4106 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nntimes4108_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes4108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nnexample4121_static {
    public static final BitSet FOLLOW_81_in_nnexample4121 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnexample4123_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample4123 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_oscarcm4138_static {
    public static final BitSet FOLLOW_82_in_oscarcm4138 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm4140_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm4140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_vbuse4155_static {
    public static final BitSet FOLLOW_83_in_vbuse4155 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbuse4157_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse4157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_vbchange4170_static {
    public static final BitSet FOLLOW_84_in_vbchange4170 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbchange4172_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange4172 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbsubmerge4185_static {
    public static final BitSet FOLLOW_85_in_vbsubmerge4185 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge4187_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge4187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbsubject4200_static {
    public static final BitSet FOLLOW_86_in_vbsubject4200 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject4202_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject4202 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_nnadd4217_static {
    public static final BitSet FOLLOW_87_in_nnadd4217 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnadd4219_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd4219 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_nnmixture4232_static {
    public static final BitSet FOLLOW_88_in_nnmixture4232 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture4234_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture4234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_vbdilute4247_static {
    public static final BitSet FOLLOW_89_in_vbdilute4247 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute4249_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute4249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_vbadd4262_static {
    public static final BitSet FOLLOW_90_in_vbadd4262 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbadd4264_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd4264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbcharge4277_static {
    public static final BitSet FOLLOW_91_in_vbcharge4277 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge4279_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge4279 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbcontain4292_static {
    public static final BitSet FOLLOW_92_in_vbcontain4292 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain4294_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain4294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbdrop4307_static {
    public static final BitSet FOLLOW_93_in_vbdrop4307 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop4309_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop4309 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbfill4322_static {
    public static final BitSet FOLLOW_94_in_vbfill4322 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbfill4324_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill4324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbsuspend4337_static {
    public static final BitSet FOLLOW_95_in_vbsuspend4337 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend4339_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend4339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbtreat4352_static {
    public static final BitSet FOLLOW_96_in_vbtreat4352 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat4354_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat4354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbapparatus4369_static {
    public static final BitSet FOLLOW_97_in_vbapparatus4369 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus4371_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus4371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_nnapparatus4384_static {
    public static final BitSet FOLLOW_98_in_nnapparatus4384 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4386_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbconcentrate4401_static {
    public static final BitSet FOLLOW_99_in_vbconcentrate4401 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4403_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnconcentrate4416_static {
    public static final BitSet FOLLOW_100_in_nnconcentrate4416 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4418_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbcool4433_static {
    public static final BitSet FOLLOW_101_in_vbcool4433 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4435_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_vbdegass4450_static {
    public static final BitSet FOLLOW_102_in_vbdegass4450 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4452_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbdissolve4467_static {
    public static final BitSet FOLLOW_103_in_vbdissolve4467 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4469_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdry4484_static {
    public static final BitSet FOLLOW_104_in_vbdry4484 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4486_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4486 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_nndry4499_static {
    public static final BitSet FOLLOW_105_in_nndry4499 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nndry4501_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4501 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbextract4516_static {
    public static final BitSet FOLLOW_106_in_vbextract4516 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4518_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nnextract4531_static {
    public static final BitSet FOLLOW_107_in_nnextract4531 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4533_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbfilter4548_static {
    public static final BitSet FOLLOW_108_in_vbfilter4548 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4550_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnfilter4563_static {
    public static final BitSet FOLLOW_109_in_nnfilter4563 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4565_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4565 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbheat4580_static {
    public static final BitSet FOLLOW_110_in_vbheat4580 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4582_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_vbincrease4595_static {
    public static final BitSet FOLLOW_111_in_vbincrease4595 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4597_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbimmerse4612_static {
    public static final BitSet FOLLOW_112_in_vbimmerse4612 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4614_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4614 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbpartition4629_static {
    public static final BitSet FOLLOW_113_in_vbpartition4629 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4631_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4631 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbprecipitate4646_static {
    public static final BitSet FOLLOW_114_in_vbprecipitate4646 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4648_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_nnprecipitate4661_static {
    public static final BitSet FOLLOW_115_in_nnprecipitate4661 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4663_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbpurify4678_static {
    public static final BitSet FOLLOW_116_in_vbpurify4678 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4680_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnpurify4693_static {
    public static final BitSet FOLLOW_117_in_nnpurify4693 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4695_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4695 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbquench4710_static {
    public static final BitSet FOLLOW_118_in_vbquench4710 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4712_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_vbrecover4727_static {
    public static final BitSet FOLLOW_119_in_vbrecover4727 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4729_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4729 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbremove4744_static {
    public static final BitSet FOLLOW_120_in_vbremove4744 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4746_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_nnremove4759_static {
    public static final BitSet FOLLOW_121_in_nnremove4759 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4761_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbstir4776_static {
    public static final BitSet FOLLOW_122_in_vbstir4776 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4778_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_vbsynthesize4793_static {
    public static final BitSet FOLLOW_123_in_vbsynthesize4793 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4795_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4795 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_nnsynthesize4808_static {
    public static final BitSet FOLLOW_124_in_nnsynthesize4808 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4810_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbwait4825_static {
    public static final BitSet FOLLOW_125_in_vbwait4825 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4827_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_vbwash4842_static {
    public static final BitSet FOLLOW_126_in_vbwash4842 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4844_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbyield4859_static {
    public static final BitSet FOLLOW_127_in_vbyield4859 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4861_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_nnyield4876_static {
    public static final BitSet FOLLOW_128_in_nnyield4876 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4878_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_rbconj4894_static {
    public static final BitSet FOLLOW_129_in_rbconj4894 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4896_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_colon4909_static {
    public static final BitSet FOLLOW_130_in_colon4909 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_colon4911_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_comma4924_static {
    public static final BitSet FOLLOW_131_in_comma4924 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_comma4926_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_apost4939_static {
    public static final BitSet FOLLOW_132_in_apost4939 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_apost4941_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_neg4954_static {
    public static final BitSet FOLLOW_133_in_neg4954 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_neg4956_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4956 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_dash4969_static {
    public static final BitSet FOLLOW_134_in_dash4969 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_dash4971_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_stop4984_static {
    public static final BitSet FOLLOW_135_in_stop4984 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_stop4986_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_percentsign4999_static {
    public static final BitSet FOLLOW_136_in_percentsign4999 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_percentsign5001_static {
    public static final BitSet FOLLOW_TOKEN_in_percentsign5001 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_lsqb5014_static {
    public static final BitSet FOLLOW_137_in_lsqb5014 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_lsqb5016_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb5016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_rsqb5029_static {
    public static final BitSet FOLLOW_138_in_rsqb5029 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rsqb5031_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb5031 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_nnidentifier5045_static {
    public static final BitSet FOLLOW_139_in_nnidentifier5045 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier5047_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier5047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_dtTHE5062_static {
    public static final BitSet FOLLOW_140_in_dtTHE5062 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE5064_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE5064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_lrb5078_static {
    public static final BitSet FOLLOW_141_in_lrb5078 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_lrb5080_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb5080 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_rrb5093_static {
    public static final BitSet FOLLOW_142_in_rrb5093 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rrb5095_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb5095 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_cc5112_static {
    public static final BitSet FOLLOW_143_in_cc5112 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_cc5114_static {
    public static final BitSet FOLLOW_TOKEN_in_cc5114 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_cd5129_static {
    public static final BitSet FOLLOW_144_in_cd5129 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_cd5131_static {
    public static final BitSet FOLLOW_TOKEN_in_cd5131 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_dt5146_static {
    public static final BitSet FOLLOW_145_in_dt5146 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_dt5148_static {
    public static final BitSet FOLLOW_TOKEN_in_dt5148 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_ex5163_static {
    public static final BitSet FOLLOW_146_in_ex5163 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_ex5165_static {
    public static final BitSet FOLLOW_TOKEN_in_ex5165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_fw5180_static {
    public static final BitSet FOLLOW_147_in_fw5180 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_fw5182_static {
    public static final BitSet FOLLOW_TOKEN_in_fw5182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_in5197_static {
    public static final BitSet FOLLOW_148_in_in5197 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_in5199_static {
    public static final BitSet FOLLOW_TOKEN_in_in5199 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_jj5214_static {
    public static final BitSet FOLLOW_149_in_jj5214 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jj5216_static {
    public static final BitSet FOLLOW_TOKEN_in_jj5216 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_jjr5231_static {
    public static final BitSet FOLLOW_150_in_jjr5231 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jjr5233_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr5233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jjs5248_static {
    public static final BitSet FOLLOW_151_in_jjs5248 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_jjs5250_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs5250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_ls5265_static {
    public static final BitSet FOLLOW_152_in_ls5265 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_ls5267_static {
    public static final BitSet FOLLOW_TOKEN_in_ls5267 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_md5282_static {
    public static final BitSet FOLLOW_153_in_md5282 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_md5284_static {
    public static final BitSet FOLLOW_TOKEN_in_md5284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_nn5299_static {
    public static final BitSet FOLLOW_154_in_nn5299 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nn5301_static {
    public static final BitSet FOLLOW_TOKEN_in_nn5301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_nns5316_static {
    public static final BitSet FOLLOW_155_in_nns5316 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nns5318_static {
    public static final BitSet FOLLOW_TOKEN_in_nns5318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nnp5333_static {
    public static final BitSet FOLLOW_156_in_nnp5333 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnp5335_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp5335 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nnps5350_static {
    public static final BitSet FOLLOW_157_in_nnps5350 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_nnps5352_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps5352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_pdt5367_static {
    public static final BitSet FOLLOW_158_in_pdt5367 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_pdt5369_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt5369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_pos5384_static {
    public static final BitSet FOLLOW_159_in_pos5384 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_pos5386_static {
    public static final BitSet FOLLOW_TOKEN_in_pos5386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_prp5401_static {
    public static final BitSet FOLLOW_160_in_prp5401 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_prp5403_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_prp_poss5418_static {
    public static final BitSet FOLLOW_161_in_prp_poss5418 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5420_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_rb5435_static {
    public static final BitSet FOLLOW_162_in_rb5435 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rb5437_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_rbr5452_static {
    public static final BitSet FOLLOW_163_in_rbr5452 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rbr5454_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5454 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rbs5469_static {
    public static final BitSet FOLLOW_164_in_rbs5469 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rbs5471_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rp5486_static {
    public static final BitSet FOLLOW_165_in_rp5486 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_rp5488_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5488 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_sym5503_static {
    public static final BitSet FOLLOW_166_in_sym5503 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_sym5505_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5505 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_to5520_static {
    public static final BitSet FOLLOW_167_in_to5520 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_to5522_static {
    public static final BitSet FOLLOW_TOKEN_in_to5522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_uh5537_static {
    public static final BitSet FOLLOW_168_in_uh5537 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_uh5539_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5539 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_vb5554_static {
    public static final BitSet FOLLOW_169_in_vb5554 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vb5556_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_vbd5571_static {
    public static final BitSet FOLLOW_170_in_vbd5571 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbd5573_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5573 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vbg5588_static {
    public static final BitSet FOLLOW_171_in_vbg5588 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbg5590_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbn5605_static {
    public static final BitSet FOLLOW_172_in_vbn5605 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbn5607_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbp5622_static {
    public static final BitSet FOLLOW_173_in_vbp5622 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbp5624_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbz5639_static {
    public static final BitSet FOLLOW_174_in_vbz5639 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_vbz5641_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5641 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_wdt5656_static {
    public static final BitSet FOLLOW_175_in_wdt5656 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_wdt5658_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5658 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_wp5673_static {
    public static final BitSet FOLLOW_176_in_wp5673 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_wp5675_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5675 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wp_poss5690_static {
    public static final BitSet FOLLOW_177_in_wp_poss5690 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5692_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wrb5707_static {
    public static final BitSet FOLLOW_178_in_wrb5707 = new BitSet(new long[]{0x0000001000000000L});

    }static class FOLLOW_TOKEN_in_wrb5709_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker219_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker219 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker224_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker224 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker226_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker226 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred6_ChemicalChunker241_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred7_ChemicalChunker243_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred8_ChemicalChunker245_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker247_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred10_ChemicalChunker252_static {
    public static final BitSet FOLLOW_advAdj_in_synpred10_ChemicalChunker252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred11_ChemicalChunker254_static {
    public static final BitSet FOLLOW_colon_in_synpred11_ChemicalChunker254 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred12_ChemicalChunker259_static {
    public static final BitSet FOLLOW_conjunction_in_synpred12_ChemicalChunker259 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred13_ChemicalChunker261_static {
    public static final BitSet FOLLOW_rbconj_in_synpred13_ChemicalChunker261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred14_ChemicalChunker263_static {
    public static final BitSet FOLLOW_comma_in_synpred14_ChemicalChunker263 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker478_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker579_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker579 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred93_ChemicalChunker610_static {
    public static final BitSet FOLLOW_dt_in_synpred93_ChemicalChunker610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred94_ChemicalChunker617_static {
    public static final BitSet FOLLOW_conjunction_in_synpred94_ChemicalChunker617 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred95_ChemicalChunker617_static {
    public static final BitSet FOLLOW_conjunction_in_synpred95_ChemicalChunker617 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x0007807FFDEFBA09L});

    }static class FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker620_static {
    public static final BitSet FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker627_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker630_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred98_ChemicalChunker642_static {
    public static final BitSet FOLLOW_advAdj_in_synpred98_ChemicalChunker642 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker647_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker647 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker649_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker649 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred101_ChemicalChunker651_static {
    public static final BitSet FOLLOW_noun_in_synpred101_ChemicalChunker651 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred102_ChemicalChunker653_static {
    public static final BitSet FOLLOW_numeric_in_synpred102_ChemicalChunker653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent_in_synpred103_ChemicalChunker655_static {
    public static final BitSet FOLLOW_bracketedContent_in_synpred103_ChemicalChunker655 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker667_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker667 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred105_ChemicalChunker698_static {
    public static final BitSet FOLLOW_adj_in_synpred105_ChemicalChunker698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred108_ChemicalChunker710_static {
    public static final BitSet FOLLOW_molecule_in_synpred108_ChemicalChunker710 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred109_ChemicalChunker719_static {
    public static final BitSet FOLLOW_conjunction_in_synpred109_ChemicalChunker719 = new BitSet(new long[]{0x200018E000000000L,0x00000000000400A0L,0x0000000000E12A09L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker721_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker721 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred111_ChemicalChunker738_static {
    public static final BitSet FOLLOW_adj_in_synpred111_ChemicalChunker738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred113_ChemicalChunker745_static {
    public static final BitSet FOLLOW_molecule_in_synpred113_ChemicalChunker745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_synpred115_ChemicalChunker779_static {
    public static final BitSet FOLLOW_to_in_synpred115_ChemicalChunker779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred116_ChemicalChunker782_static {
    public static final BitSet FOLLOW_inAll_in_synpred116_ChemicalChunker782 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred122_ChemicalChunker803_static {
    public static final BitSet FOLLOW_md_in_synpred122_ChemicalChunker803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred123_ChemicalChunker806_static {
    public static final BitSet FOLLOW_adv_in_synpred123_ChemicalChunker806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred124_ChemicalChunker809_static {
    public static final BitSet FOLLOW_adj_in_synpred124_ChemicalChunker809 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred125_ChemicalChunker812_static {
    public static final BitSet FOLLOW_neg_in_synpred125_ChemicalChunker812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred127_ChemicalChunker820_static {
    public static final BitSet FOLLOW_md_in_synpred127_ChemicalChunker820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred128_ChemicalChunker823_static {
    public static final BitSet FOLLOW_adv_in_synpred128_ChemicalChunker823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred129_ChemicalChunker826_static {
    public static final BitSet FOLLOW_adj_in_synpred129_ChemicalChunker826 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred130_ChemicalChunker829_static {
    public static final BitSet FOLLOW_neg_in_synpred130_ChemicalChunker829 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_otherVerbStructure_in_synpred131_ChemicalChunker832_static {
    public static final BitSet FOLLOW_otherVerbStructure_in_synpred131_ChemicalChunker832 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_actionVerbStructure_in_synpred132_ChemicalChunker835_static {
    public static final BitSet FOLLOW_actionVerbStructure_in_synpred132_ChemicalChunker835 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred133_ChemicalChunker839_static {
    public static final BitSet FOLLOW_inoff_in_synpred133_ChemicalChunker839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred136_ChemicalChunker843_static {
    public static final BitSet FOLLOW_cc_in_synpred136_ChemicalChunker843 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30028L});

    }static class FOLLOW_comma_in_synpred136_ChemicalChunker846_static {
    public static final BitSet FOLLOW_comma_in_synpred136_ChemicalChunker846 = new BitSet(new long[]{0x5FFFE8C000000000L,0x0000000000000040L,0x000000BC00F30020L});

    }static class FOLLOW_prepphrase_in_synpred136_ChemicalChunker849_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred136_ChemicalChunker849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred141_ChemicalChunker873_static {
    public static final BitSet FOLLOW_md_in_synpred141_ChemicalChunker873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred142_ChemicalChunker876_static {
    public static final BitSet FOLLOW_adv_in_synpred142_ChemicalChunker876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred143_ChemicalChunker879_static {
    public static final BitSet FOLLOW_adj_in_synpred143_ChemicalChunker879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred144_ChemicalChunker882_static {
    public static final BitSet FOLLOW_neg_in_synpred144_ChemicalChunker882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred149_ChemicalChunker904_static {
    public static final BitSet FOLLOW_md_in_synpred149_ChemicalChunker904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred150_ChemicalChunker907_static {
    public static final BitSet FOLLOW_adv_in_synpred150_ChemicalChunker907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred151_ChemicalChunker910_static {
    public static final BitSet FOLLOW_adj_in_synpred151_ChemicalChunker910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred152_ChemicalChunker913_static {
    public static final BitSet FOLLOW_neg_in_synpred152_ChemicalChunker913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred164_ChemicalChunker953_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred164_ChemicalChunker953 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred165_ChemicalChunker955_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred165_ChemicalChunker955 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred193_ChemicalChunker1043_static {
    public static final BitSet FOLLOW_dash_in_synpred193_ChemicalChunker1043 = new BitSet(new long[]{0x60001BE000000000L,0x1A282A140187FFFDL,0x00078043FDEF2A09L});

    }static class FOLLOW_nounStructure_in_synpred193_ChemicalChunker1045_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred193_ChemicalChunker1045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred196_ChemicalChunker1060_static {
    public static final BitSet FOLLOW_citation_in_synpred196_ChemicalChunker1060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred197_ChemicalChunker1062_static {
    public static final BitSet FOLLOW_cycles_in_synpred197_ChemicalChunker1062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred198_ChemicalChunker1064_static {
    public static final BitSet FOLLOW_molecule_in_synpred198_ChemicalChunker1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred199_ChemicalChunker1066_static {
    public static final BitSet FOLLOW_apparatus_in_synpred199_ChemicalChunker1066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred200_ChemicalChunker1068_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred200_ChemicalChunker1068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred201_ChemicalChunker1070_static {
    public static final BitSet FOLLOW_nnstate_in_synpred201_ChemicalChunker1070 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred202_ChemicalChunker1072_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred202_ChemicalChunker1072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred203_ChemicalChunker1074_static {
    public static final BitSet FOLLOW_nn_in_synpred203_ChemicalChunker1074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred206_ChemicalChunker1080_static {
    public static final BitSet FOLLOW_nnadd_in_synpred206_ChemicalChunker1080 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred208_ChemicalChunker1084_static {
    public static final BitSet FOLLOW_nnexample_in_synpred208_ChemicalChunker1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred209_ChemicalChunker1086_static {
    public static final BitSet FOLLOW_range_in_synpred209_ChemicalChunker1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred211_ChemicalChunker1090_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred211_ChemicalChunker1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred213_ChemicalChunker1094_static {
    public static final BitSet FOLLOW_quantity_in_synpred213_ChemicalChunker1094 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred214_ChemicalChunker1096_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred214_ChemicalChunker1096 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred216_ChemicalChunker1100_static {
    public static final BitSet FOLLOW_nnph_in_synpred216_ChemicalChunker1100 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred218_ChemicalChunker1104_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred218_ChemicalChunker1104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred221_ChemicalChunker1110_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred221_ChemicalChunker1110 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_synpred231_ChemicalChunker1130_static {
    public static final BitSet FOLLOW_nnmixture_in_synpred231_ChemicalChunker1130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred232_ChemicalChunker1132_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred232_ChemicalChunker1132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred238_ChemicalChunker1144_static {
    public static final BitSet FOLLOW_nnyield_in_synpred238_ChemicalChunker1144 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred246_ChemicalChunker1174_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred246_ChemicalChunker1174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred247_ChemicalChunker1176_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred247_ChemicalChunker1176 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred248_ChemicalChunker1178_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred248_ChemicalChunker1178 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred249_ChemicalChunker1180_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred249_ChemicalChunker1180 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred250_ChemicalChunker1182_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred250_ChemicalChunker1182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred252_ChemicalChunker1222_static {
    public static final BitSet FOLLOW_advAdj_in_synpred252_ChemicalChunker1222 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred253_ChemicalChunker1227_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred253_ChemicalChunker1227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred254_ChemicalChunker1255_static {
    public static final BitSet FOLLOW_advAdj_in_synpred254_ChemicalChunker1255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred259_ChemicalChunker1271_static {
    public static final BitSet FOLLOW_nntime_in_synpred259_ChemicalChunker1271 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred260_ChemicalChunker1302_static {
    public static final BitSet FOLLOW_advAdj_in_synpred260_ChemicalChunker1302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred265_ChemicalChunker1317_static {
    public static final BitSet FOLLOW_nntemp_in_synpred265_ChemicalChunker1317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred271_ChemicalChunker1490_static {
    public static final BitSet FOLLOW_conjunction_in_synpred271_ChemicalChunker1490 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred272_ChemicalChunker1490_static {
    public static final BitSet FOLLOW_conjunction_in_synpred272_ChemicalChunker1490 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E3AA09L});

    }static class FOLLOW_apparatus_in_synpred272_ChemicalChunker1493_static {
    public static final BitSet FOLLOW_apparatus_in_synpred272_ChemicalChunker1493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred275_ChemicalChunker1510_static {
    public static final BitSet FOLLOW_nnApp_in_synpred275_ChemicalChunker1510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred276_ChemicalChunker1537_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred276_ChemicalChunker1537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred277_ChemicalChunker1541_static {
    public static final BitSet FOLLOW_dash_in_synpred277_ChemicalChunker1541 = new BitSet(new long[]{0x200018E000000000L,0x00000004008408A0L,0x0000000004E32A09L});

    }static class FOLLOW_nnapparatus_in_synpred277_ChemicalChunker1543_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred277_ChemicalChunker1543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred278_ChemicalChunker1557_static {
    public static final BitSet FOLLOW_quantity_in_synpred278_ChemicalChunker1557 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred279_ChemicalChunker1559_static {
    public static final BitSet FOLLOW_adj_in_synpred279_ChemicalChunker1559 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred280_ChemicalChunker1561_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred280_ChemicalChunker1561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred281_ChemicalChunker1563_static {
    public static final BitSet FOLLOW_nnadd_in_synpred281_ChemicalChunker1563 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred282_ChemicalChunker1565_static {
    public static final BitSet FOLLOW_molecule_in_synpred282_ChemicalChunker1565 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred283_ChemicalChunker1567_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred283_ChemicalChunker1567 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred284_ChemicalChunker1569_static {
    public static final BitSet FOLLOW_nnstate_in_synpred284_ChemicalChunker1569 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred285_ChemicalChunker1571_static {
    public static final BitSet FOLLOW_nn_in_synpred285_ChemicalChunker1571 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred288_ChemicalChunker1592_static {
    public static final BitSet FOLLOW_adj_in_synpred288_ChemicalChunker1592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred289_ChemicalChunker1595_static {
    public static final BitSet FOLLOW_nnstate_in_synpred289_ChemicalChunker1595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred290_ChemicalChunker1599_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred290_ChemicalChunker1599 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred291_ChemicalChunker1603_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred291_ChemicalChunker1603 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred292_ChemicalChunker1608_static {
    public static final BitSet FOLLOW_quantity_in_synpred292_ChemicalChunker1608 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred293_ChemicalChunker1611_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred293_ChemicalChunker1611 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred294_ChemicalChunker1620_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred294_ChemicalChunker1620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred295_ChemicalChunker1623_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred295_ChemicalChunker1623 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred297_ChemicalChunker1653_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred297_ChemicalChunker1653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred298_ChemicalChunker1651_static {
    public static final BitSet FOLLOW_dash_in_synpred298_ChemicalChunker1651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_synpred298_ChemicalChunker1653_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred298_ChemicalChunker1653 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});

    }static class FOLLOW_dash_in_synpred299_ChemicalChunker1658_static {
    public static final BitSet FOLLOW_dash_in_synpred299_ChemicalChunker1658 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred300_ChemicalChunker1651_static {
    public static final BitSet FOLLOW_dash_in_synpred300_ChemicalChunker1651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_synpred300_ChemicalChunker1653_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred300_ChemicalChunker1653 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0000000000000040L});

    }static class FOLLOW_dash_in_synpred300_ChemicalChunker1658_static {
    public static final BitSet FOLLOW_dash_in_synpred300_ChemicalChunker1658 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred304_ChemicalChunker1663_static {
    public static final BitSet FOLLOW_colon_in_synpred304_ChemicalChunker1663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_synpred304_ChemicalChunker1665_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred304_ChemicalChunker1665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000012004L});

    }static class FOLLOW_lrb_in_synpred304_ChemicalChunker1670_static {
    public static final BitSet FOLLOW_lrb_in_synpred304_ChemicalChunker1670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_ratio_in_synpred304_ChemicalChunker1673_static {
    public static final BitSet FOLLOW_ratio_in_synpred304_ChemicalChunker1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred305_ChemicalChunker1679_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred305_ChemicalChunker1679 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred306_ChemicalChunker1677_static {
    public static final BitSet FOLLOW_colon_in_synpred306_ChemicalChunker1677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_oscarcm_in_synpred306_ChemicalChunker1679_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred306_ChemicalChunker1679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});

    }static class FOLLOW_dash_in_synpred307_ChemicalChunker1685_static {
    public static final BitSet FOLLOW_dash_in_synpred307_ChemicalChunker1685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred308_ChemicalChunker1687_static {
    public static final BitSet FOLLOW_apost_in_synpred308_ChemicalChunker1687 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred310_ChemicalChunker1730_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred310_ChemicalChunker1730 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred311_ChemicalChunker1733_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred311_ChemicalChunker1733 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred312_ChemicalChunker1740_static {
    public static final BitSet FOLLOW_asAstate_in_synpred312_ChemicalChunker1740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred313_ChemicalChunker1751_static {
    public static final BitSet FOLLOW_quantity_in_synpred313_ChemicalChunker1751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred314_ChemicalChunker1753_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred314_ChemicalChunker1753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred317_ChemicalChunker1770_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred317_ChemicalChunker1770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred320_ChemicalChunker1792_static {
    public static final BitSet FOLLOW_quantity_in_synpred320_ChemicalChunker1792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred321_ChemicalChunker1794_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred321_ChemicalChunker1794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred326_ChemicalChunker1817_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred326_ChemicalChunker1817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred327_ChemicalChunker1829_static {
    public static final BitSet FOLLOW_quantity_in_synpred327_ChemicalChunker1829 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred328_ChemicalChunker1831_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred328_ChemicalChunker1831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred329_ChemicalChunker1835_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred329_ChemicalChunker1835 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred330_ChemicalChunker1846_static {
    public static final BitSet FOLLOW_citation_in_synpred330_ChemicalChunker1846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred331_ChemicalChunker1848_static {
    public static final BitSet FOLLOW_quantity_in_synpred331_ChemicalChunker1848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred333_ChemicalChunker1850_static {
    public static final BitSet FOLLOW_comma_in_synpred333_ChemicalChunker1850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_quantity1Node_in_synpred333_ChemicalChunker1853_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred333_ChemicalChunker1853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred333_ChemicalChunker1855_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred333_ChemicalChunker1855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred334_ChemicalChunker1858_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred334_ChemicalChunker1858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred335_ChemicalChunker1890_static {
    public static final BitSet FOLLOW_asAstate_in_synpred335_ChemicalChunker1890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred336_ChemicalChunker1903_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred336_ChemicalChunker1903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred337_ChemicalChunker1907_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred337_ChemicalChunker1907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred339_ChemicalChunker1917_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred339_ChemicalChunker1917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred340_ChemicalChunker1930_static {
    public static final BitSet FOLLOW_quantity_in_synpred340_ChemicalChunker1930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred344_ChemicalChunker1954_static {
    public static final BitSet FOLLOW_quantity_in_synpred344_ChemicalChunker1954 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred345_ChemicalChunker1957_static {
    public static final BitSet FOLLOW_asAstate_in_synpred345_ChemicalChunker1957 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred346_ChemicalChunker1960_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred346_ChemicalChunker1960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred351_ChemicalChunker2000_static {
    public static final BitSet FOLLOW_quantity_in_synpred351_ChemicalChunker2000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred352_ChemicalChunker2003_static {
    public static final BitSet FOLLOW_asAstate_in_synpred352_ChemicalChunker2003 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred353_ChemicalChunker2006_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred353_ChemicalChunker2006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred354_ChemicalChunker2018_static {
    public static final BitSet FOLLOW_quantity_in_synpred354_ChemicalChunker2018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred355_ChemicalChunker2021_static {
    public static final BitSet FOLLOW_asAstate_in_synpred355_ChemicalChunker2021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred356_ChemicalChunker2024_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred356_ChemicalChunker2024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred359_ChemicalChunker2048_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred359_ChemicalChunker2048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred362_ChemicalChunker2069_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred362_ChemicalChunker2069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred375_ChemicalChunker2125_static {
    public static final BitSet FOLLOW_quantity_in_synpred375_ChemicalChunker2125 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred380_ChemicalChunker2154_static {
    public static final BitSet FOLLOW_quantity_in_synpred380_ChemicalChunker2154 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred385_ChemicalChunker2315_static {
    public static final BitSet FOLLOW_comma_in_synpred385_ChemicalChunker2315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000012001L});

    }static class FOLLOW_measurements_in_synpred385_ChemicalChunker2318_static {
    public static final BitSet FOLLOW_measurements_in_synpred385_ChemicalChunker2318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred388_ChemicalChunker2343_static {
    public static final BitSet FOLLOW_dt_in_synpred388_ChemicalChunker2343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred389_ChemicalChunker2355_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred389_ChemicalChunker2355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred396_ChemicalChunker2392_static {
    public static final BitSet FOLLOW_yield_in_synpred396_ChemicalChunker2392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred401_ChemicalChunker2591_static {
    public static final BitSet FOLLOW_dash_in_synpred401_ChemicalChunker2591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_synpred401_ChemicalChunker2593_static {
    public static final BitSet FOLLOW_cd_in_synpred401_ChemicalChunker2593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_percentsign_in_synpred401_ChemicalChunker2595_static {
    public static final BitSet FOLLOW_percentsign_in_synpred401_ChemicalChunker2595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred405_ChemicalChunker2698_static {
    public static final BitSet FOLLOW_verb_in_synpred405_ChemicalChunker2698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred406_ChemicalChunker2700_static {
    public static final BitSet FOLLOW_noun_in_synpred406_ChemicalChunker2700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent_in_synpred407_ChemicalChunker2702_static {
    public static final BitSet FOLLOW_bracketedContent_in_synpred407_ChemicalChunker2702 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred412_ChemicalChunker2712_static {
    public static final BitSet FOLLOW_ratio_in_synpred412_ChemicalChunker2712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred413_ChemicalChunker2714_static {
    public static final BitSet FOLLOW_conjunction_in_synpred413_ChemicalChunker2714 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred414_ChemicalChunker2716_static {
    public static final BitSet FOLLOW_adj_in_synpred414_ChemicalChunker2716 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred417_ChemicalChunker2722_static {
    public static final BitSet FOLLOW_numeric_in_synpred417_ChemicalChunker2722 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred421_ChemicalChunker2800_static {
    public static final BitSet FOLLOW_verb_in_synpred421_ChemicalChunker2800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred422_ChemicalChunker2802_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred422_ChemicalChunker2802 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred423_ChemicalChunker2804_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred423_ChemicalChunker2804 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred424_ChemicalChunker2806_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred424_ChemicalChunker2806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred425_ChemicalChunker2808_static {
    public static final BitSet FOLLOW_ratio_in_synpred425_ChemicalChunker2808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_synpred428_ChemicalChunker2810_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_synpred428_ChemicalChunker2810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000008CL});

    }static class FOLLOW_comma_in_synpred428_ChemicalChunker2813_static {
    public static final BitSet FOLLOW_comma_in_synpred428_ChemicalChunker2813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred428_ChemicalChunker2817_static {
    public static final BitSet FOLLOW_colon_in_synpred428_ChemicalChunker2817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred428_ChemicalChunker2823_static {
    public static final BitSet FOLLOW_stop_in_synpred428_ChemicalChunker2823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred429_ChemicalChunker2826_static {
    public static final BitSet FOLLOW_cd_in_synpred429_ChemicalChunker2826 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred434_ChemicalChunker2836_static {
    public static final BitSet FOLLOW_comma_in_synpred434_ChemicalChunker2836 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred435_ChemicalChunker2838_static {
    public static final BitSet FOLLOW_adj_in_synpred435_ChemicalChunker2838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred438_ChemicalChunker2844_static {
    public static final BitSet FOLLOW_noun_in_synpred438_ChemicalChunker2844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred439_ChemicalChunker2850_static {
    public static final BitSet FOLLOW_verb_in_synpred439_ChemicalChunker2850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred440_ChemicalChunker2852_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred440_ChemicalChunker2852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred441_ChemicalChunker2854_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred441_ChemicalChunker2854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred442_ChemicalChunker2856_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred442_ChemicalChunker2856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred443_ChemicalChunker2858_static {
    public static final BitSet FOLLOW_ratio_in_synpred443_ChemicalChunker2858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred444_ChemicalChunker2860_static {
    public static final BitSet FOLLOW_cd_in_synpred444_ChemicalChunker2860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred449_ChemicalChunker2870_static {
    public static final BitSet FOLLOW_conjunction_in_synpred449_ChemicalChunker2870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred450_ChemicalChunker2872_static {
    public static final BitSet FOLLOW_adj_in_synpred450_ChemicalChunker2872 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred453_ChemicalChunker2878_static {
    public static final BitSet FOLLOW_noun_in_synpred453_ChemicalChunker2878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred454_ChemicalChunker2880_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred454_ChemicalChunker2880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypes_in_synpred462_ChemicalChunker2954_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_synpred462_ChemicalChunker2954 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred468_ChemicalChunker2967_static {
    public static final BitSet FOLLOW_comma_in_synpred468_ChemicalChunker2967 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_colon_in_synpred468_ChemicalChunker2970_static {
    public static final BitSet FOLLOW_colon_in_synpred468_ChemicalChunker2970 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_inof_in_synpred468_ChemicalChunker2973_static {
    public static final BitSet FOLLOW_inof_in_synpred468_ChemicalChunker2973 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_infrom_in_synpred468_ChemicalChunker2977_static {
    public static final BitSet FOLLOW_infrom_in_synpred468_ChemicalChunker2977 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_submethod_in_synpred468_ChemicalChunker2981_static {
    public static final BitSet FOLLOW_submethod_in_synpred468_ChemicalChunker2981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_synpred469_ChemicalChunker2985_static {
    public static final BitSet FOLLOW_lrb_in_synpred469_ChemicalChunker2985 = new BitSet(new long[]{0x224018E000000000L,0x0000000000860EA0L,0x0000000004E12A0DL});

    }static class FOLLOW_submethod_in_synpred469_ChemicalChunker2987_static {
    public static final BitSet FOLLOW_submethod_in_synpred469_ChemicalChunker2987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_rrb_in_synpred469_ChemicalChunker2989_static {
    public static final BitSet FOLLOW_rrb_in_synpred469_ChemicalChunker2989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred479_ChemicalChunker3143_static {
    public static final BitSet FOLLOW_colon_in_synpred479_ChemicalChunker3143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cd_in_synpred479_ChemicalChunker3145_static {
    public static final BitSet FOLLOW_cd_in_synpred479_ChemicalChunker3145 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_synpred488_ChemicalChunker3220_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_synpred488_ChemicalChunker3220 = new BitSet(new long[]{0x0000000000000002L});

    }
}